
practica_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062dc  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001474  080063ec  080063ec  000073ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007860  08007860  00009068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08007860  08007860  00009068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08007860  08007860  00009068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007860  08007860  00008860  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007864  08007864  00008864  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08007868  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002410  20000068  080078d0  00009068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002478  080078d0  00009478  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00009068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017265  00000000  00000000  00009091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034c0  00000000  00000000  000202f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001540  00000000  00000000  000237b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000108f  00000000  00000000  00024cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019358  00000000  00000000  00025d87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017ba4  00000000  00000000  0003f0df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00094f87  00000000  00000000  00056c83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ebc0a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005d50  00000000  00000000  000ebc50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  000f19a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	080063d4 	.word	0x080063d4

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	080063d4 	.word	0x080063d4

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_frsub>:
 80002b8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__addsf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_fsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c4 <__addsf3>:
 80002c4:	0042      	lsls	r2, r0, #1
 80002c6:	bf1f      	itttt	ne
 80002c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002cc:	ea92 0f03 	teqne	r2, r3
 80002d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d8:	d06a      	beq.n	80003b0 <__addsf3+0xec>
 80002da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002e2:	bfc1      	itttt	gt
 80002e4:	18d2      	addgt	r2, r2, r3
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	4048      	eorgt	r0, r1
 80002ea:	4041      	eorgt	r1, r0
 80002ec:	bfb8      	it	lt
 80002ee:	425b      	neglt	r3, r3
 80002f0:	2b19      	cmp	r3, #25
 80002f2:	bf88      	it	hi
 80002f4:	4770      	bxhi	lr
 80002f6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000302:	bf18      	it	ne
 8000304:	4240      	negne	r0, r0
 8000306:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800030a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4249      	negne	r1, r1
 8000316:	ea92 0f03 	teq	r2, r3
 800031a:	d03f      	beq.n	800039c <__addsf3+0xd8>
 800031c:	f1a2 0201 	sub.w	r2, r2, #1
 8000320:	fa41 fc03 	asr.w	ip, r1, r3
 8000324:	eb10 000c 	adds.w	r0, r0, ip
 8000328:	f1c3 0320 	rsb	r3, r3, #32
 800032c:	fa01 f103 	lsl.w	r1, r1, r3
 8000330:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000334:	d502      	bpl.n	800033c <__addsf3+0x78>
 8000336:	4249      	negs	r1, r1
 8000338:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800033c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000340:	d313      	bcc.n	800036a <__addsf3+0xa6>
 8000342:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000346:	d306      	bcc.n	8000356 <__addsf3+0x92>
 8000348:	0840      	lsrs	r0, r0, #1
 800034a:	ea4f 0131 	mov.w	r1, r1, rrx
 800034e:	f102 0201 	add.w	r2, r2, #1
 8000352:	2afe      	cmp	r2, #254	@ 0xfe
 8000354:	d251      	bcs.n	80003fa <__addsf3+0x136>
 8000356:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800035a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035e:	bf08      	it	eq
 8000360:	f020 0001 	biceq.w	r0, r0, #1
 8000364:	ea40 0003 	orr.w	r0, r0, r3
 8000368:	4770      	bx	lr
 800036a:	0049      	lsls	r1, r1, #1
 800036c:	eb40 0000 	adc.w	r0, r0, r0
 8000370:	3a01      	subs	r2, #1
 8000372:	bf28      	it	cs
 8000374:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000378:	d2ed      	bcs.n	8000356 <__addsf3+0x92>
 800037a:	fab0 fc80 	clz	ip, r0
 800037e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000382:	ebb2 020c 	subs.w	r2, r2, ip
 8000386:	fa00 f00c 	lsl.w	r0, r0, ip
 800038a:	bfaa      	itet	ge
 800038c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000390:	4252      	neglt	r2, r2
 8000392:	4318      	orrge	r0, r3
 8000394:	bfbc      	itt	lt
 8000396:	40d0      	lsrlt	r0, r2
 8000398:	4318      	orrlt	r0, r3
 800039a:	4770      	bx	lr
 800039c:	f092 0f00 	teq	r2, #0
 80003a0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a4:	bf06      	itte	eq
 80003a6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003aa:	3201      	addeq	r2, #1
 80003ac:	3b01      	subne	r3, #1
 80003ae:	e7b5      	b.n	800031c <__addsf3+0x58>
 80003b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b8:	bf18      	it	ne
 80003ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003be:	d021      	beq.n	8000404 <__addsf3+0x140>
 80003c0:	ea92 0f03 	teq	r2, r3
 80003c4:	d004      	beq.n	80003d0 <__addsf3+0x10c>
 80003c6:	f092 0f00 	teq	r2, #0
 80003ca:	bf08      	it	eq
 80003cc:	4608      	moveq	r0, r1
 80003ce:	4770      	bx	lr
 80003d0:	ea90 0f01 	teq	r0, r1
 80003d4:	bf1c      	itt	ne
 80003d6:	2000      	movne	r0, #0
 80003d8:	4770      	bxne	lr
 80003da:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003de:	d104      	bne.n	80003ea <__addsf3+0x126>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	bf28      	it	cs
 80003e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e8:	4770      	bx	lr
 80003ea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ee:	bf3c      	itt	cc
 80003f0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f4:	4770      	bxcc	lr
 80003f6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003fa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000402:	4770      	bx	lr
 8000404:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000408:	bf16      	itet	ne
 800040a:	4608      	movne	r0, r1
 800040c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000410:	4601      	movne	r1, r0
 8000412:	0242      	lsls	r2, r0, #9
 8000414:	bf06      	itte	eq
 8000416:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800041a:	ea90 0f01 	teqeq	r0, r1
 800041e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000422:	4770      	bx	lr

08000424 <__aeabi_ui2f>:
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	e004      	b.n	8000434 <__aeabi_i2f+0x8>
 800042a:	bf00      	nop

0800042c <__aeabi_i2f>:
 800042c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	ea5f 0c00 	movs.w	ip, r0
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000440:	4601      	mov	r1, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	e01c      	b.n	8000482 <__aeabi_l2f+0x2a>

08000448 <__aeabi_ul2f>:
 8000448:	ea50 0201 	orrs.w	r2, r0, r1
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e00a      	b.n	800046c <__aeabi_l2f+0x14>
 8000456:	bf00      	nop

08000458 <__aeabi_l2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000464:	d502      	bpl.n	800046c <__aeabi_l2f+0x14>
 8000466:	4240      	negs	r0, r0
 8000468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800046c:	ea5f 0c01 	movs.w	ip, r1
 8000470:	bf02      	ittt	eq
 8000472:	4684      	moveq	ip, r0
 8000474:	4601      	moveq	r1, r0
 8000476:	2000      	moveq	r0, #0
 8000478:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800047c:	bf08      	it	eq
 800047e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000482:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000486:	fabc f28c 	clz	r2, ip
 800048a:	3a08      	subs	r2, #8
 800048c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000490:	db10      	blt.n	80004b4 <__aeabi_l2f+0x5c>
 8000492:	fa01 fc02 	lsl.w	ip, r1, r2
 8000496:	4463      	add	r3, ip
 8000498:	fa00 fc02 	lsl.w	ip, r0, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	f020 0001 	biceq.w	r0, r0, #1
 80004b2:	4770      	bx	lr
 80004b4:	f102 0220 	add.w	r2, r2, #32
 80004b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c4:	fa21 f202 	lsr.w	r2, r1, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_f2iz>:
 80004d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004dc:	d30f      	bcc.n	80004fe <__aeabi_f2iz+0x2a>
 80004de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e6:	d90d      	bls.n	8000504 <__aeabi_f2iz+0x30>
 80004e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004f0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80004f4:	fa23 f002 	lsr.w	r0, r3, r2
 80004f8:	bf18      	it	ne
 80004fa:	4240      	negne	r0, r0
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr
 8000504:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000508:	d101      	bne.n	800050e <__aeabi_f2iz+0x3a>
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	d105      	bne.n	800051a <__aeabi_f2iz+0x46>
 800050e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000512:	bf08      	it	eq
 8000514:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000518:	4770      	bx	lr
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	4770      	bx	lr

08000520 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000524:	f001 f9d6 	bl	80018d4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000528:	f000 f85c 	bl	80005e4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800052c:	f000 f8ce 	bl	80006cc <MX_GPIO_Init>
	MX_I2C1_Init();
 8000530:	f000 f89e 	bl	8000670 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	// si falla la conexion i2c se hace una hard fault
	if (SSD1306_Init() == 0) {
 8000534:	f000 fbf2 	bl	8000d1c <SSD1306_Init>
 8000538:	4603      	mov	r3, r0
 800053a:	2b00      	cmp	r3, #0
 800053c:	d101      	bne.n	8000542 <main+0x22>
		Error_Handler();
 800053e:	f000 fbcb 	bl	8000cd8 <Error_Handler>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000542:	f003 f91d 	bl	8003780 <osKernelInitialize>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8000546:	4a16      	ldr	r2, [pc, #88]	@ (80005a0 <main+0x80>)
 8000548:	2100      	movs	r1, #0
 800054a:	4816      	ldr	r0, [pc, #88]	@ (80005a4 <main+0x84>)
 800054c:	f003 f960 	bl	8003810 <osThreadNew>
 8000550:	4603      	mov	r3, r0
 8000552:	4a15      	ldr	r2, [pc, #84]	@ (80005a8 <main+0x88>)
 8000554:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of menuTask */
	menuTaskHandle = osThreadNew(menu, (void*) (&displayParams),
 8000556:	4a15      	ldr	r2, [pc, #84]	@ (80005ac <main+0x8c>)
 8000558:	4915      	ldr	r1, [pc, #84]	@ (80005b0 <main+0x90>)
 800055a:	4816      	ldr	r0, [pc, #88]	@ (80005b4 <main+0x94>)
 800055c:	f003 f958 	bl	8003810 <osThreadNew>
 8000560:	4603      	mov	r3, r0
 8000562:	4a15      	ldr	r2, [pc, #84]	@ (80005b8 <main+0x98>)
 8000564:	6013      	str	r3, [r2, #0]
			&menuTask_attributes);

	/* creation of acceptButtonTas */
	acceptButtonTasHandle = osThreadNew(handleButtonPress,
 8000566:	4a15      	ldr	r2, [pc, #84]	@ (80005bc <main+0x9c>)
 8000568:	4915      	ldr	r1, [pc, #84]	@ (80005c0 <main+0xa0>)
 800056a:	4816      	ldr	r0, [pc, #88]	@ (80005c4 <main+0xa4>)
 800056c:	f003 f950 	bl	8003810 <osThreadNew>
 8000570:	4603      	mov	r3, r0
 8000572:	4a15      	ldr	r2, [pc, #84]	@ (80005c8 <main+0xa8>)
 8000574:	6013      	str	r3, [r2, #0]
			(void*) (&acceptButtonParams), &acceptButtonTas_attributes);

	/* creation of cancelButtonTas */
	cancelButtonTasHandle = osThreadNew(handleButtonPress,
 8000576:	4a15      	ldr	r2, [pc, #84]	@ (80005cc <main+0xac>)
 8000578:	4915      	ldr	r1, [pc, #84]	@ (80005d0 <main+0xb0>)
 800057a:	4812      	ldr	r0, [pc, #72]	@ (80005c4 <main+0xa4>)
 800057c:	f003 f948 	bl	8003810 <osThreadNew>
 8000580:	4603      	mov	r3, r0
 8000582:	4a14      	ldr	r2, [pc, #80]	@ (80005d4 <main+0xb4>)
 8000584:	6013      	str	r3, [r2, #0]
			(void*) (&cancelButtonParams), &cancelButtonTas_attributes);

	/* creation of encoderTask */
	encoderTaskHandle = osThreadNew(handleEncoder, NULL,
 8000586:	4a14      	ldr	r2, [pc, #80]	@ (80005d8 <main+0xb8>)
 8000588:	2100      	movs	r1, #0
 800058a:	4814      	ldr	r0, [pc, #80]	@ (80005dc <main+0xbc>)
 800058c:	f003 f940 	bl	8003810 <osThreadNew>
 8000590:	4603      	mov	r3, r0
 8000592:	4a13      	ldr	r2, [pc, #76]	@ (80005e0 <main+0xc0>)
 8000594:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000596:	f003 f915 	bl	80037c4 <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 800059a:	bf00      	nop
 800059c:	e7fd      	b.n	800059a <main+0x7a>
 800059e:	bf00      	nop
 80005a0:	08006c20 	.word	0x08006c20
 80005a4:	08000799 	.word	0x08000799
 80005a8:	200000d8 	.word	0x200000d8
 80005ac:	08006c44 	.word	0x08006c44
 80005b0:	200000ec 	.word	0x200000ec
 80005b4:	080007cd 	.word	0x080007cd
 80005b8:	200000dc 	.word	0x200000dc
 80005bc:	08006c68 	.word	0x08006c68
 80005c0:	08006cd4 	.word	0x08006cd4
 80005c4:	08000aa5 	.word	0x08000aa5
 80005c8:	200000e0 	.word	0x200000e0
 80005cc:	08006c8c 	.word	0x08006c8c
 80005d0:	08006ce0 	.word	0x08006ce0
 80005d4:	200000e4 	.word	0x200000e4
 80005d8:	08006cb0 	.word	0x08006cb0
 80005dc:	08000b69 	.word	0x08000b69
 80005e0:	200000e8 	.word	0x200000e8

080005e4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b090      	sub	sp, #64	@ 0x40
 80005e8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80005ea:	f107 0318 	add.w	r3, r7, #24
 80005ee:	2228      	movs	r2, #40	@ 0x28
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f005 fe00 	bl	80061f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80005f8:	1d3b      	adds	r3, r7, #4
 80005fa:	2200      	movs	r2, #0
 80005fc:	601a      	str	r2, [r3, #0]
 80005fe:	605a      	str	r2, [r3, #4]
 8000600:	609a      	str	r2, [r3, #8]
 8000602:	60da      	str	r2, [r3, #12]
 8000604:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000606:	2301      	movs	r3, #1
 8000608:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800060a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800060e:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000610:	2300      	movs	r3, #0
 8000612:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000614:	2301      	movs	r3, #1
 8000616:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000618:	2302      	movs	r3, #2
 800061a:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800061c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000620:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000622:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000626:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000628:	f107 0318 	add.w	r3, r7, #24
 800062c:	4618      	mov	r0, r3
 800062e:	f002 f9f9 	bl	8002a24 <HAL_RCC_OscConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0x58>
		Error_Handler();
 8000638:	f000 fb4e 	bl	8000cd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800063c:	230f      	movs	r3, #15
 800063e:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000648:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800064c:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000652:	1d3b      	adds	r3, r7, #4
 8000654:	2102      	movs	r1, #2
 8000656:	4618      	mov	r0, r3
 8000658:	f002 fc66 	bl	8002f28 <HAL_RCC_ClockConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0x82>
		Error_Handler();
 8000662:	f000 fb39 	bl	8000cd8 <Error_Handler>
	}
}
 8000666:	bf00      	nop
 8000668:	3740      	adds	r7, #64	@ 0x40
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
	...

08000670 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000674:	4b12      	ldr	r3, [pc, #72]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000676:	4a13      	ldr	r2, [pc, #76]	@ (80006c4 <MX_I2C1_Init+0x54>)
 8000678:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 800067a:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800067c:	4a12      	ldr	r2, [pc, #72]	@ (80006c8 <MX_I2C1_Init+0x58>)
 800067e:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000680:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000686:	4b0e      	ldr	r3, [pc, #56]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800068c:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800068e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000692:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000694:	4b0a      	ldr	r3, [pc, #40]	@ (80006c0 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006a0:	4b07      	ldr	r3, [pc, #28]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80006ac:	4804      	ldr	r0, [pc, #16]	@ (80006c0 <MX_I2C1_Init+0x50>)
 80006ae:	f001 fbef 	bl	8001e90 <HAL_I2C_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_I2C1_Init+0x4c>
		Error_Handler();
 80006b8:	f000 fb0e 	bl	8000cd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */
}
 80006bc:	bf00      	nop
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	20000084 	.word	0x20000084
 80006c4:	40005400 	.word	0x40005400
 80006c8:	00061a80 	.word	0x00061a80

080006cc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b088      	sub	sp, #32
 80006d0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80006d2:	f107 0310 	add.w	r3, r7, #16
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80006e0:	4b2a      	ldr	r3, [pc, #168]	@ (800078c <MX_GPIO_Init+0xc0>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	4a29      	ldr	r2, [pc, #164]	@ (800078c <MX_GPIO_Init+0xc0>)
 80006e6:	f043 0310 	orr.w	r3, r3, #16
 80006ea:	6193      	str	r3, [r2, #24]
 80006ec:	4b27      	ldr	r3, [pc, #156]	@ (800078c <MX_GPIO_Init+0xc0>)
 80006ee:	699b      	ldr	r3, [r3, #24]
 80006f0:	f003 0310 	and.w	r3, r3, #16
 80006f4:	60fb      	str	r3, [r7, #12]
 80006f6:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80006f8:	4b24      	ldr	r3, [pc, #144]	@ (800078c <MX_GPIO_Init+0xc0>)
 80006fa:	699b      	ldr	r3, [r3, #24]
 80006fc:	4a23      	ldr	r2, [pc, #140]	@ (800078c <MX_GPIO_Init+0xc0>)
 80006fe:	f043 0320 	orr.w	r3, r3, #32
 8000702:	6193      	str	r3, [r2, #24]
 8000704:	4b21      	ldr	r3, [pc, #132]	@ (800078c <MX_GPIO_Init+0xc0>)
 8000706:	699b      	ldr	r3, [r3, #24]
 8000708:	f003 0320 	and.w	r3, r3, #32
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	4b1e      	ldr	r3, [pc, #120]	@ (800078c <MX_GPIO_Init+0xc0>)
 8000712:	699b      	ldr	r3, [r3, #24]
 8000714:	4a1d      	ldr	r2, [pc, #116]	@ (800078c <MX_GPIO_Init+0xc0>)
 8000716:	f043 0304 	orr.w	r3, r3, #4
 800071a:	6193      	str	r3, [r2, #24]
 800071c:	4b1b      	ldr	r3, [pc, #108]	@ (800078c <MX_GPIO_Init+0xc0>)
 800071e:	699b      	ldr	r3, [r3, #24]
 8000720:	f003 0304 	and.w	r3, r3, #4
 8000724:	607b      	str	r3, [r7, #4]
 8000726:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000728:	4b18      	ldr	r3, [pc, #96]	@ (800078c <MX_GPIO_Init+0xc0>)
 800072a:	699b      	ldr	r3, [r3, #24]
 800072c:	4a17      	ldr	r2, [pc, #92]	@ (800078c <MX_GPIO_Init+0xc0>)
 800072e:	f043 0308 	orr.w	r3, r3, #8
 8000732:	6193      	str	r3, [r2, #24]
 8000734:	4b15      	ldr	r3, [pc, #84]	@ (800078c <MX_GPIO_Init+0xc0>)
 8000736:	699b      	ldr	r3, [r3, #24]
 8000738:	f003 0308 	and.w	r3, r3, #8
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000740:	2200      	movs	r2, #0
 8000742:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000746:	4812      	ldr	r0, [pc, #72]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000748:	f001 fb71 	bl	8001e2e <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 800074c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000750:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000752:	2301      	movs	r3, #1
 8000754:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000756:	2300      	movs	r3, #0
 8000758:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075a:	2302      	movs	r3, #2
 800075c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800075e:	f107 0310 	add.w	r3, r7, #16
 8000762:	4619      	mov	r1, r3
 8000764:	480a      	ldr	r0, [pc, #40]	@ (8000790 <MX_GPIO_Init+0xc4>)
 8000766:	f001 f9c7 	bl	8001af8 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 PA6 PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_6 | GPIO_PIN_7;
 800076a:	23cc      	movs	r3, #204	@ 0xcc
 800076c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800076e:	2300      	movs	r3, #0
 8000770:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000772:	2300      	movs	r3, #0
 8000774:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000776:	f107 0310 	add.w	r3, r7, #16
 800077a:	4619      	mov	r1, r3
 800077c:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_GPIO_Init+0xc8>)
 800077e:	f001 f9bb 	bl	8001af8 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000782:	bf00      	nop
 8000784:	3720      	adds	r7, #32
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	40021000 	.word	0x40021000
 8000790:	40011000 	.word	0x40011000
 8000794:	40010800 	.word	0x40010800

08000798 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
uint32_t lastInteractionTick = 0;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (HAL_GetTick() - lastInteractionTick > 60000) {
 80007a0:	f001 f8c0 	bl	8001924 <HAL_GetTick>
 80007a4:	4602      	mov	r2, r0
 80007a6:	4b07      	ldr	r3, [pc, #28]	@ (80007c4 <StartDefaultTask+0x2c>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	f64e 2260 	movw	r2, #60000	@ 0xea60
 80007b0:	4293      	cmp	r3, r2
 80007b2:	d902      	bls.n	80007ba <StartDefaultTask+0x22>
			displayParams.menu = START;
 80007b4:	4b04      	ldr	r3, [pc, #16]	@ (80007c8 <StartDefaultTask+0x30>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	701a      	strb	r2, [r3, #0]
		}
		osDelay(100);
 80007ba:	2064      	movs	r0, #100	@ 0x64
 80007bc:	f003 f8ba 	bl	8003934 <osDelay>
		if (HAL_GetTick() - lastInteractionTick > 60000) {
 80007c0:	e7ee      	b.n	80007a0 <StartDefaultTask+0x8>
 80007c2:	bf00      	nop
 80007c4:	200000f8 	.word	0x200000f8
 80007c8:	200000ec 	.word	0x200000ec

080007cc <menu>:
 * @brief Function implementing the menuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menu */
void menu(void *argument) {
 80007cc:	b5b0      	push	{r4, r5, r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN menu */
	/* Infinite loop */

	DisplayMenu menu = START;
 80007d4:	2300      	movs	r3, #0
 80007d6:	75bb      	strb	r3, [r7, #22]
	DisplayMenu prevMenu = START;
 80007d8:	2300      	movs	r3, #0
 80007da:	75fb      	strb	r3, [r7, #23]

	const uint16_t halfWidth = SCREEN_WIDTH / 2;
 80007dc:	2340      	movs	r3, #64	@ 0x40
 80007de:	82bb      	strh	r3, [r7, #20]
	const uint16_t halfHeight = SCREEN_HEIGHT / 2;
 80007e0:	2320      	movs	r3, #32
 80007e2:	827b      	strh	r3, [r7, #18]

	uint32_t temp_angle;
	for (;;) {

		menu = ((DisplayParams*) argument)->menu;
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	75bb      	strb	r3, [r7, #22]

		if (prevMenu != menu) {
 80007ea:	7dfa      	ldrb	r2, [r7, #23]
 80007ec:	7dbb      	ldrb	r3, [r7, #22]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d003      	beq.n	80007fa <menu+0x2e>
			prevMenu = menu;
 80007f2:	7dbb      	ldrb	r3, [r7, #22]
 80007f4:	75fb      	strb	r3, [r7, #23]
			SSD1306_Clear();
 80007f6:	f000 fe88 	bl	800150a <SSD1306_Clear>
		}

		switch (menu) {
 80007fa:	7dbb      	ldrb	r3, [r7, #22]
 80007fc:	2b07      	cmp	r3, #7
 80007fe:	f200 812f 	bhi.w	8000a60 <menu+0x294>
 8000802:	a201      	add	r2, pc, #4	@ (adr r2, 8000808 <menu+0x3c>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000829 	.word	0x08000829
 800080c:	080009d5 	.word	0x080009d5
 8000810:	080009e9 	.word	0x080009e9
 8000814:	080009fd 	.word	0x080009fd
 8000818:	08000a11 	.word	0x08000a11
 800081c:	08000a25 	.word	0x08000a25
 8000820:	08000a39 	.word	0x08000a39
 8000824:	08000a4d 	.word	0x08000a4d
		case START:

			SSD1306_DrawFilledCircle(halfWidth, halfHeight,
 8000828:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 800082c:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000830:	2300      	movs	r3, #0
 8000832:	221c      	movs	r2, #28
 8000834:	f000 fd8e 	bl	8001354 <SSD1306_DrawFilledCircle>
			SCREEN_HEIGHT / 3 + 7, SSD1306_COLOR_BLACK);

			temp_angle =
					prev_point_angle + 60 > 360 ?
 8000838:	4b8d      	ldr	r3, [pc, #564]	@ (8000a70 <menu+0x2a4>)
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	333c      	adds	r3, #60	@ 0x3c
							(prev_point_angle + 60) - 360 :
 800083e:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000842:	d904      	bls.n	800084e <menu+0x82>
 8000844:	4b8a      	ldr	r3, [pc, #552]	@ (8000a70 <menu+0x2a4>)
 8000846:	681b      	ldr	r3, [r3, #0]
 8000848:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800084c:	e002      	b.n	8000854 <menu+0x88>
							prev_point_angle + 60;
 800084e:	4b88      	ldr	r3, [pc, #544]	@ (8000a70 <menu+0x2a4>)
 8000850:	681b      	ldr	r3, [r3, #0]
							(prev_point_angle + 60) - 360 :
 8000852:	333c      	adds	r3, #60	@ 0x3c
			temp_angle =
 8000854:	60fb      	str	r3, [r7, #12]
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[temp_angle],
 8000856:	8abb      	ldrh	r3, [r7, #20]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fde7 	bl	800042c <__aeabi_i2f>
 800085e:	4604      	mov	r4, r0
 8000860:	4a84      	ldr	r2, [pc, #528]	@ (8000a74 <menu+0x2a8>)
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000868:	4983      	ldr	r1, [pc, #524]	@ (8000a78 <menu+0x2ac>)
 800086a:	4618      	mov	r0, r3
 800086c:	f7ff fc70 	bl	8000150 <__aeabi_fmul>
 8000870:	4603      	mov	r3, r0
 8000872:	4619      	mov	r1, r3
 8000874:	4620      	mov	r0, r4
 8000876:	f7ff fd25 	bl	80002c4 <__addsf3>
 800087a:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 800087c:	4618      	mov	r0, r3
 800087e:	f7ff fe29 	bl	80004d4 <__aeabi_f2iz>
 8000882:	4603      	mov	r3, r0
 8000884:	b21c      	sxth	r4, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin_table[temp_angle], 6,
 8000886:	8a7b      	ldrh	r3, [r7, #18]
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fdcf 	bl	800042c <__aeabi_i2f>
 800088e:	4605      	mov	r5, r0
 8000890:	4a7a      	ldr	r2, [pc, #488]	@ (8000a7c <menu+0x2b0>)
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000898:	4977      	ldr	r1, [pc, #476]	@ (8000a78 <menu+0x2ac>)
 800089a:	4618      	mov	r0, r3
 800089c:	f7ff fc58 	bl	8000150 <__aeabi_fmul>
 80008a0:	4603      	mov	r3, r0
 80008a2:	4619      	mov	r1, r3
 80008a4:	4628      	mov	r0, r5
 80008a6:	f7ff fd0d 	bl	80002c4 <__addsf3>
 80008aa:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 80008ac:	4618      	mov	r0, r3
 80008ae:	f7ff fe11 	bl	80004d4 <__aeabi_f2iz>
 80008b2:	4603      	mov	r3, r0
 80008b4:	b219      	sxth	r1, r3
 80008b6:	2301      	movs	r3, #1
 80008b8:	2206      	movs	r2, #6
 80008ba:	4620      	mov	r0, r4
 80008bc:	f000 fd4a 	bl	8001354 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);

			temp_angle =
					prev_point_angle + 30 > 360 ?
 80008c0:	4b6b      	ldr	r3, [pc, #428]	@ (8000a70 <menu+0x2a4>)
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	331e      	adds	r3, #30
							(prev_point_angle + 30) - 360 :
 80008c6:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80008ca:	d904      	bls.n	80008d6 <menu+0x10a>
 80008cc:	4b68      	ldr	r3, [pc, #416]	@ (8000a70 <menu+0x2a4>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 80008d4:	e002      	b.n	80008dc <menu+0x110>
							prev_point_angle + 30;
 80008d6:	4b66      	ldr	r3, [pc, #408]	@ (8000a70 <menu+0x2a4>)
 80008d8:	681b      	ldr	r3, [r3, #0]
							(prev_point_angle + 30) - 360 :
 80008da:	331e      	adds	r3, #30
			temp_angle =
 80008dc:	60fb      	str	r3, [r7, #12]
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[temp_angle],
 80008de:	8abb      	ldrh	r3, [r7, #20]
 80008e0:	4618      	mov	r0, r3
 80008e2:	f7ff fda3 	bl	800042c <__aeabi_i2f>
 80008e6:	4604      	mov	r4, r0
 80008e8:	4a62      	ldr	r2, [pc, #392]	@ (8000a74 <menu+0x2a8>)
 80008ea:	68fb      	ldr	r3, [r7, #12]
 80008ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80008f0:	4961      	ldr	r1, [pc, #388]	@ (8000a78 <menu+0x2ac>)
 80008f2:	4618      	mov	r0, r3
 80008f4:	f7ff fc2c 	bl	8000150 <__aeabi_fmul>
 80008f8:	4603      	mov	r3, r0
 80008fa:	4619      	mov	r1, r3
 80008fc:	4620      	mov	r0, r4
 80008fe:	f7ff fce1 	bl	80002c4 <__addsf3>
 8000902:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000904:	4618      	mov	r0, r3
 8000906:	f7ff fde5 	bl	80004d4 <__aeabi_f2iz>
 800090a:	4603      	mov	r3, r0
 800090c:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin_table[temp_angle], 4,
 800090e:	4a5b      	ldr	r2, [pc, #364]	@ (8000a7c <menu+0x2b0>)
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000916:	4958      	ldr	r1, [pc, #352]	@ (8000a78 <menu+0x2ac>)
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff fc19 	bl	8000150 <__aeabi_fmul>
 800091e:	4603      	mov	r3, r0
 8000920:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8000924:	4618      	mov	r0, r3
 8000926:	f7ff fccd 	bl	80002c4 <__addsf3>
 800092a:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 800092c:	4618      	mov	r0, r3
 800092e:	f7ff fdd1 	bl	80004d4 <__aeabi_f2iz>
 8000932:	4603      	mov	r3, r0
 8000934:	b219      	sxth	r1, r3
 8000936:	2301      	movs	r3, #1
 8000938:	2204      	movs	r2, #4
 800093a:	4620      	mov	r0, r4
 800093c:	f000 fd0a 	bl	8001354 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[point_angle],
 8000940:	8abb      	ldrh	r3, [r7, #20]
 8000942:	4618      	mov	r0, r3
 8000944:	f7ff fd72 	bl	800042c <__aeabi_i2f>
 8000948:	4604      	mov	r4, r0
 800094a:	4b4d      	ldr	r3, [pc, #308]	@ (8000a80 <menu+0x2b4>)
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	4a49      	ldr	r2, [pc, #292]	@ (8000a74 <menu+0x2a8>)
 8000950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000954:	4948      	ldr	r1, [pc, #288]	@ (8000a78 <menu+0x2ac>)
 8000956:	4618      	mov	r0, r3
 8000958:	f7ff fbfa 	bl	8000150 <__aeabi_fmul>
 800095c:	4603      	mov	r3, r0
 800095e:	4619      	mov	r1, r3
 8000960:	4620      	mov	r0, r4
 8000962:	f7ff fcaf 	bl	80002c4 <__addsf3>
 8000966:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff fdb3 	bl	80004d4 <__aeabi_f2iz>
 800096e:	4603      	mov	r3, r0
 8000970:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin_table[point_angle], 2,
 8000972:	4b43      	ldr	r3, [pc, #268]	@ (8000a80 <menu+0x2b4>)
 8000974:	681b      	ldr	r3, [r3, #0]
 8000976:	4a41      	ldr	r2, [pc, #260]	@ (8000a7c <menu+0x2b0>)
 8000978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800097c:	493e      	ldr	r1, [pc, #248]	@ (8000a78 <menu+0x2ac>)
 800097e:	4618      	mov	r0, r3
 8000980:	f7ff fbe6 	bl	8000150 <__aeabi_fmul>
 8000984:	4603      	mov	r3, r0
 8000986:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 800098a:	4618      	mov	r0, r3
 800098c:	f7ff fc9a 	bl	80002c4 <__addsf3>
 8000990:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fd9e 	bl	80004d4 <__aeabi_f2iz>
 8000998:	4603      	mov	r3, r0
 800099a:	b219      	sxth	r1, r3
 800099c:	2301      	movs	r3, #1
 800099e:	2202      	movs	r2, #2
 80009a0:	4620      	mov	r0, r4
 80009a2:	f000 fcd7 	bl	8001354 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);

			if (point_angle >= 360) {
 80009a6:	4b36      	ldr	r3, [pc, #216]	@ (8000a80 <menu+0x2b4>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 80009ae:	d307      	bcc.n	80009c0 <menu+0x1f4>
				prev_point_angle = point_angle;
 80009b0:	4b33      	ldr	r3, [pc, #204]	@ (8000a80 <menu+0x2b4>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a2e      	ldr	r2, [pc, #184]	@ (8000a70 <menu+0x2a4>)
 80009b6:	6013      	str	r3, [r2, #0]
				point_angle = 0;
 80009b8:	4b31      	ldr	r3, [pc, #196]	@ (8000a80 <menu+0x2b4>)
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
			} else {
				prev_point_angle = point_angle;
				point_angle += 8;
			}

			break;
 80009be:	e050      	b.n	8000a62 <menu+0x296>
				prev_point_angle = point_angle;
 80009c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000a80 <menu+0x2b4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	4a2a      	ldr	r2, [pc, #168]	@ (8000a70 <menu+0x2a4>)
 80009c6:	6013      	str	r3, [r2, #0]
				point_angle += 8;
 80009c8:	4b2d      	ldr	r3, [pc, #180]	@ (8000a80 <menu+0x2b4>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	3308      	adds	r3, #8
 80009ce:	4a2c      	ldr	r2, [pc, #176]	@ (8000a80 <menu+0x2b4>)
 80009d0:	6013      	str	r3, [r2, #0]
			break;
 80009d2:	e046      	b.n	8000a62 <menu+0x296>
		case MENU:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 80009d4:	2120      	movs	r1, #32
 80009d6:	200a      	movs	r0, #10
 80009d8:	f000 fb08 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Menu >", &Font_7x10, 1);
 80009dc:	2201      	movs	r2, #1
 80009de:	4929      	ldr	r1, [pc, #164]	@ (8000a84 <menu+0x2b8>)
 80009e0:	4829      	ldr	r0, [pc, #164]	@ (8000a88 <menu+0x2bc>)
 80009e2:	f000 fb97 	bl	8001114 <SSD1306_Puts>
			break;
 80009e6:	e03c      	b.n	8000a62 <menu+0x296>
		case EQUALIZER:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 80009e8:	2120      	movs	r1, #32
 80009ea:	200a      	movs	r0, #10
 80009ec:	f000 fafe 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Equal >", &Font_7x10, 1);
 80009f0:	2201      	movs	r2, #1
 80009f2:	4924      	ldr	r1, [pc, #144]	@ (8000a84 <menu+0x2b8>)
 80009f4:	4825      	ldr	r0, [pc, #148]	@ (8000a8c <menu+0x2c0>)
 80009f6:	f000 fb8d 	bl	8001114 <SSD1306_Puts>
			break;
 80009fa:	e032      	b.n	8000a62 <menu+0x296>
		case EQUALIZER_HIGH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 80009fc:	2120      	movs	r1, #32
 80009fe:	200a      	movs	r0, #10
 8000a00:	f000 faf4 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Altos >", &Font_7x10, 1);
 8000a04:	2201      	movs	r2, #1
 8000a06:	491f      	ldr	r1, [pc, #124]	@ (8000a84 <menu+0x2b8>)
 8000a08:	4821      	ldr	r0, [pc, #132]	@ (8000a90 <menu+0x2c4>)
 8000a0a:	f000 fb83 	bl	8001114 <SSD1306_Puts>
			break;
 8000a0e:	e028      	b.n	8000a62 <menu+0x296>
		case EQUALIZER_MID:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000a10:	2120      	movs	r1, #32
 8000a12:	200a      	movs	r0, #10
 8000a14:	f000 faea 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Medios >", &Font_7x10, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	491a      	ldr	r1, [pc, #104]	@ (8000a84 <menu+0x2b8>)
 8000a1c:	481d      	ldr	r0, [pc, #116]	@ (8000a94 <menu+0x2c8>)
 8000a1e:	f000 fb79 	bl	8001114 <SSD1306_Puts>
			break;
 8000a22:	e01e      	b.n	8000a62 <menu+0x296>
		case EQUALIZER_LOW:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000a24:	2120      	movs	r1, #32
 8000a26:	200a      	movs	r0, #10
 8000a28:	f000 fae0 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Bajos >", &Font_7x10, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4915      	ldr	r1, [pc, #84]	@ (8000a84 <menu+0x2b8>)
 8000a30:	4819      	ldr	r0, [pc, #100]	@ (8000a98 <menu+0x2cc>)
 8000a32:	f000 fb6f 	bl	8001114 <SSD1306_Puts>
			break;
 8000a36:	e014      	b.n	8000a62 <menu+0x296>
		case FOLDER_SEARCH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000a38:	2120      	movs	r1, #32
 8000a3a:	200a      	movs	r0, #10
 8000a3c:	f000 fad6 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Carpetas >", &Font_7x10, 1);
 8000a40:	2201      	movs	r2, #1
 8000a42:	4910      	ldr	r1, [pc, #64]	@ (8000a84 <menu+0x2b8>)
 8000a44:	4815      	ldr	r0, [pc, #84]	@ (8000a9c <menu+0x2d0>)
 8000a46:	f000 fb65 	bl	8001114 <SSD1306_Puts>
			break;
 8000a4a:	e00a      	b.n	8000a62 <menu+0x296>
		case FILES_SEARCH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000a4c:	2120      	movs	r1, #32
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f000 facc 	bl	8000fec <SSD1306_GotoXY>
			SSD1306_Puts("< Archivos >", &Font_7x10, 1);
 8000a54:	2201      	movs	r2, #1
 8000a56:	490b      	ldr	r1, [pc, #44]	@ (8000a84 <menu+0x2b8>)
 8000a58:	4811      	ldr	r0, [pc, #68]	@ (8000aa0 <menu+0x2d4>)
 8000a5a:	f000 fb5b 	bl	8001114 <SSD1306_Puts>
			break;
 8000a5e:	e000      	b.n	8000a62 <menu+0x296>

		default:
			break;
 8000a60:	bf00      	nop
		}

		SSD1306_UpdateScreen();
 8000a62:	f000 fa1f 	bl	8000ea4 <SSD1306_UpdateScreen>
		osDelay(50);
 8000a66:	2032      	movs	r0, #50	@ 0x32
 8000a68:	f002 ff64 	bl	8003934 <osDelay>
		menu = ((DisplayParams*) argument)->menu;
 8000a6c:	e6ba      	b.n	80007e4 <menu+0x18>
 8000a6e:	bf00      	nop
 8000a70:	200000f0 	.word	0x200000f0
 8000a74:	08007290 	.word	0x08007290
 8000a78:	41a80000 	.word	0x41a80000
 8000a7c:	08006cec 	.word	0x08006cec
 8000a80:	200000f4 	.word	0x200000f4
 8000a84:	20000000 	.word	0x20000000
 8000a88:	08006430 	.word	0x08006430
 8000a8c:	0800643c 	.word	0x0800643c
 8000a90:	08006448 	.word	0x08006448
 8000a94:	08006454 	.word	0x08006454
 8000a98:	08006460 	.word	0x08006460
 8000a9c:	0800646c 	.word	0x0800646c
 8000aa0:	0800647c 	.word	0x0800647c

08000aa4 <handleButtonPress>:
 * @brief Function implementing the buttonTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handleButtonPress */
void handleButtonPress(void *argument) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b086      	sub	sp, #24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN handleButtonPress */
	/* Infinite loop */
	Bool isButtonPressed = FALSE;
 8000aac:	2300      	movs	r3, #0
 8000aae:	75fb      	strb	r3, [r7, #23]

	// Recupero los parámetros del botón
	ButtonParams btnParams = *((ButtonParams*) argument);
 8000ab0:	687a      	ldr	r2, [r7, #4]
 8000ab2:	f107 0308 	add.w	r3, r7, #8
 8000ab6:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ab8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (;;) {

		if (btnParams.type == CANCEL) {
 8000abc:	7a3b      	ldrb	r3, [r7, #8]
 8000abe:	2b01      	cmp	r3, #1
 8000ac0:	d105      	bne.n	8000ace <handleButtonPress+0x2a>
			HAL_GPIO_TogglePin(btnParams.port, btnParams.pin);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	8a3a      	ldrh	r2, [r7, #16]
 8000ac6:	4611      	mov	r1, r2
 8000ac8:	4618      	mov	r0, r3
 8000aca:	f001 f9c8 	bl	8001e5e <HAL_GPIO_TogglePin>
		}

		// Esta lógica evita tener muchos disparos de botón
		if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin) == GPIO_PIN_RESET
 8000ace:	68fb      	ldr	r3, [r7, #12]
 8000ad0:	8a3a      	ldrh	r2, [r7, #16]
 8000ad2:	4611      	mov	r1, r2
 8000ad4:	4618      	mov	r0, r3
 8000ad6:	f001 f993 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d129      	bne.n	8000b34 <handleButtonPress+0x90>
				&& isButtonPressed == FALSE) {
 8000ae0:	7dfb      	ldrb	r3, [r7, #23]
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d126      	bne.n	8000b34 <handleButtonPress+0x90>
			isButtonPressed = TRUE;
 8000ae6:	2301      	movs	r3, #1
 8000ae8:	75fb      	strb	r3, [r7, #23]

			// lógica del boton aceptar
			if (btnParams.type == ACCEPT) {
 8000aea:	7a3b      	ldrb	r3, [r7, #8]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d10c      	bne.n	8000b0a <handleButtonPress+0x66>
				lastInteractionTick = HAL_GetTick();
 8000af0:	f000 ff18 	bl	8001924 <HAL_GetTick>
 8000af4:	4603      	mov	r3, r0
 8000af6:	4a1a      	ldr	r2, [pc, #104]	@ (8000b60 <handleButtonPress+0xbc>)
 8000af8:	6013      	str	r3, [r2, #0]

				switch (displayParams.menu) {
 8000afa:	4b1a      	ldr	r3, [pc, #104]	@ (8000b64 <handleButtonPress+0xc0>)
 8000afc:	781b      	ldrb	r3, [r3, #0]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d111      	bne.n	8000b26 <handleButtonPress+0x82>
				case START:
					displayParams.menu = MENU;
 8000b02:	4b18      	ldr	r3, [pc, #96]	@ (8000b64 <handleButtonPress+0xc0>)
 8000b04:	2201      	movs	r2, #1
 8000b06:	701a      	strb	r2, [r3, #0]
					break;
 8000b08:	e010      	b.n	8000b2c <handleButtonPress+0x88>
				default:
					break;
				}
			} else {
				lastInteractionTick = HAL_GetTick();
 8000b0a:	f000 ff0b 	bl	8001924 <HAL_GetTick>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	4a13      	ldr	r2, [pc, #76]	@ (8000b60 <handleButtonPress+0xbc>)
 8000b12:	6013      	str	r3, [r2, #0]

				switch (displayParams.menu) {
 8000b14:	4b13      	ldr	r3, [pc, #76]	@ (8000b64 <handleButtonPress+0xc0>)
 8000b16:	781b      	ldrb	r3, [r3, #0]
 8000b18:	3b01      	subs	r3, #1
 8000b1a:	2b06      	cmp	r3, #6
 8000b1c:	d805      	bhi.n	8000b2a <handleButtonPress+0x86>
				case EQUALIZER_HIGH:
				case EQUALIZER_MID:
				case EQUALIZER_LOW:
				case FILES_SEARCH:
				case FOLDER_SEARCH:
					displayParams.menu = START;
 8000b1e:	4b11      	ldr	r3, [pc, #68]	@ (8000b64 <handleButtonPress+0xc0>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	701a      	strb	r2, [r3, #0]
					break;
 8000b24:	e002      	b.n	8000b2c <handleButtonPress+0x88>
					break;
 8000b26:	bf00      	nop
 8000b28:	e000      	b.n	8000b2c <handleButtonPress+0x88>
				default:
					break;
 8000b2a:	bf00      	nop
				}
			}

			osDelay(50);
 8000b2c:	2032      	movs	r0, #50	@ 0x32
 8000b2e:	f002 ff01 	bl	8003934 <osDelay>
 8000b32:	e010      	b.n	8000b56 <handleButtonPress+0xb2>
		} else if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin)
 8000b34:	68fb      	ldr	r3, [r7, #12]
 8000b36:	8a3a      	ldrh	r2, [r7, #16]
 8000b38:	4611      	mov	r1, r2
 8000b3a:	4618      	mov	r0, r3
 8000b3c:	f001 f960 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d107      	bne.n	8000b56 <handleButtonPress+0xb2>
				== GPIO_PIN_SET && isButtonPressed == TRUE) {
 8000b46:	7dfb      	ldrb	r3, [r7, #23]
 8000b48:	2b01      	cmp	r3, #1
 8000b4a:	d104      	bne.n	8000b56 <handleButtonPress+0xb2>
			isButtonPressed = FALSE;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	75fb      	strb	r3, [r7, #23]
			osDelay(50);
 8000b50:	2032      	movs	r0, #50	@ 0x32
 8000b52:	f002 feef 	bl	8003934 <osDelay>
		}
		osDelay(1);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f002 feec 	bl	8003934 <osDelay>
		if (btnParams.type == CANCEL) {
 8000b5c:	e7ae      	b.n	8000abc <handleButtonPress+0x18>
 8000b5e:	bf00      	nop
 8000b60:	200000f8 	.word	0x200000f8
 8000b64:	200000ec 	.word	0x200000ec

08000b68 <handleEncoder>:
 * @brief Function implementing the encoderTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handleEncoder */
void handleEncoder(void *argument) {
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN handleEncoder */

	uint8_t prevState = 0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	77fb      	strb	r3, [r7, #31]
	uint8_t currState = 0;
 8000b74:	2300      	movs	r3, #0
 8000b76:	77bb      	strb	r3, [r7, #30]

	const int8_t encoderStateTable[4][4] = {
 8000b78:	4b4a      	ldr	r3, [pc, #296]	@ (8000ca4 <handleEncoder+0x13c>)
 8000b7a:	f107 040c 	add.w	r4, r7, #12
 8000b7e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b80:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	/*00*/{ 0, -1, 1, 0 },
	/*01*/{ 1, 0, 0, -1 },
	/*10*/{ -1, 0, 0, 1 },
	/*11*/{ 0, 1, -1, 0 } };

	prevState = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) << 1)
 8000b84:	2140      	movs	r1, #64	@ 0x40
 8000b86:	4848      	ldr	r0, [pc, #288]	@ (8000ca8 <handleEncoder+0x140>)
 8000b88:	f001 f93a 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000b8c:	4603      	mov	r3, r0
			| (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d101      	bne.n	8000b96 <handleEncoder+0x2e>
 8000b92:	2402      	movs	r4, #2
 8000b94:	e000      	b.n	8000b98 <handleEncoder+0x30>
 8000b96:	2400      	movs	r4, #0
 8000b98:	2180      	movs	r1, #128	@ 0x80
 8000b9a:	4843      	ldr	r0, [pc, #268]	@ (8000ca8 <handleEncoder+0x140>)
 8000b9c:	f001 f930 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	bf0c      	ite	eq
 8000ba6:	2301      	moveq	r3, #1
 8000ba8:	2300      	movne	r3, #0
 8000baa:	b2db      	uxtb	r3, r3
 8000bac:	b25b      	sxtb	r3, r3
 8000bae:	4323      	orrs	r3, r4
 8000bb0:	b25b      	sxtb	r3, r3
	prevState = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) << 1)
 8000bb2:	77fb      	strb	r3, [r7, #31]

	for (;;) {
		currState = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000bb4:	2140      	movs	r1, #64	@ 0x40
 8000bb6:	483c      	ldr	r0, [pc, #240]	@ (8000ca8 <handleEncoder+0x140>)
 8000bb8:	f001 f922 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000bbc:	4603      	mov	r3, r0
				<< 1) | (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d101      	bne.n	8000bc6 <handleEncoder+0x5e>
 8000bc2:	2402      	movs	r4, #2
 8000bc4:	e000      	b.n	8000bc8 <handleEncoder+0x60>
 8000bc6:	2400      	movs	r4, #0
 8000bc8:	2180      	movs	r1, #128	@ 0x80
 8000bca:	4837      	ldr	r0, [pc, #220]	@ (8000ca8 <handleEncoder+0x140>)
 8000bcc:	f001 f918 	bl	8001e00 <HAL_GPIO_ReadPin>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	bf0c      	ite	eq
 8000bd6:	2301      	moveq	r3, #1
 8000bd8:	2300      	movne	r3, #0
 8000bda:	b2db      	uxtb	r3, r3
 8000bdc:	b25b      	sxtb	r3, r3
 8000bde:	4323      	orrs	r3, r4
 8000be0:	b25b      	sxtb	r3, r3
		currState = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000be2:	77bb      	strb	r3, [r7, #30]

		if (currState != prevState) {
 8000be4:	7fba      	ldrb	r2, [r7, #30]
 8000be6:	7ffb      	ldrb	r3, [r7, #31]
 8000be8:	429a      	cmp	r2, r3
 8000bea:	d0e3      	beq.n	8000bb4 <handleEncoder+0x4c>
			int8_t direction = encoderStateTable[prevState][currState];
 8000bec:	7ffa      	ldrb	r2, [r7, #31]
 8000bee:	7fbb      	ldrb	r3, [r7, #30]
 8000bf0:	0092      	lsls	r2, r2, #2
 8000bf2:	3220      	adds	r2, #32
 8000bf4:	443a      	add	r2, r7
 8000bf6:	4413      	add	r3, r2
 8000bf8:	3b14      	subs	r3, #20
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	777b      	strb	r3, [r7, #29]

			if (direction != 0) {
 8000bfe:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d049      	beq.n	8000c9a <handleEncoder+0x132>
				lastInteractionTick = HAL_GetTick();
 8000c06:	f000 fe8d 	bl	8001924 <HAL_GetTick>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	4a27      	ldr	r2, [pc, #156]	@ (8000cac <handleEncoder+0x144>)
 8000c0e:	6013      	str	r3, [r2, #0]

				// Se gira a la derecha el encoder
				switch (displayParams.menu) {
 8000c10:	4b27      	ldr	r3, [pc, #156]	@ (8000cb0 <handleEncoder+0x148>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b07      	cmp	r3, #7
 8000c16:	d83a      	bhi.n	8000c8e <handleEncoder+0x126>
 8000c18:	a201      	add	r2, pc, #4	@ (adr r2, 8000c20 <handleEncoder+0xb8>)
 8000c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c1e:	bf00      	nop
 8000c20:	08000c8f 	.word	0x08000c8f
 8000c24:	08000c5d 	.word	0x08000c5d
 8000c28:	08000c41 	.word	0x08000c41
 8000c2c:	08000c41 	.word	0x08000c41
 8000c30:	08000c41 	.word	0x08000c41
 8000c34:	08000c41 	.word	0x08000c41
 8000c38:	08000c41 	.word	0x08000c41
 8000c3c:	08000c75 	.word	0x08000c75
				case EQUALIZER:
				case EQUALIZER_HIGH:
				case EQUALIZER_MID:
				case EQUALIZER_LOW:
				case FOLDER_SEARCH:
					displayParams.menu += direction > 0 ? 1 : -1;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb0 <handleEncoder+0x148>)
 8000c42:	781b      	ldrb	r3, [r3, #0]
 8000c44:	f997 201d 	ldrsb.w	r2, [r7, #29]
 8000c48:	2a00      	cmp	r2, #0
 8000c4a:	dd01      	ble.n	8000c50 <handleEncoder+0xe8>
 8000c4c:	2201      	movs	r2, #1
 8000c4e:	e000      	b.n	8000c52 <handleEncoder+0xea>
 8000c50:	22ff      	movs	r2, #255	@ 0xff
 8000c52:	4413      	add	r3, r2
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b16      	ldr	r3, [pc, #88]	@ (8000cb0 <handleEncoder+0x148>)
 8000c58:	701a      	strb	r2, [r3, #0]
					break;
 8000c5a:	e019      	b.n	8000c90 <handleEncoder+0x128>
				case MENU:
					displayParams.menu =
							direction < 0 ?
									FILES_SEARCH : displayParams.menu + 1;
 8000c5c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	db04      	blt.n	8000c6e <handleEncoder+0x106>
 8000c64:	4b12      	ldr	r3, [pc, #72]	@ (8000cb0 <handleEncoder+0x148>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	3301      	adds	r3, #1
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	e000      	b.n	8000c70 <handleEncoder+0x108>
 8000c6e:	2307      	movs	r3, #7
					displayParams.menu =
 8000c70:	4a0f      	ldr	r2, [pc, #60]	@ (8000cb0 <handleEncoder+0x148>)
 8000c72:	7013      	strb	r3, [r2, #0]
				case FILES_SEARCH:
					displayParams.menu =
							direction > 0 ? MENU : displayParams.menu - 1;
 8000c74:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	dc04      	bgt.n	8000c86 <handleEncoder+0x11e>
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <handleEncoder+0x148>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	3b01      	subs	r3, #1
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	e000      	b.n	8000c88 <handleEncoder+0x120>
 8000c86:	2301      	movs	r3, #1
					displayParams.menu =
 8000c88:	4a09      	ldr	r2, [pc, #36]	@ (8000cb0 <handleEncoder+0x148>)
 8000c8a:	7013      	strb	r3, [r2, #0]
					break;
 8000c8c:	e000      	b.n	8000c90 <handleEncoder+0x128>
				default:
					break;
 8000c8e:	bf00      	nop
				}

				prevState = currState;
 8000c90:	7fbb      	ldrb	r3, [r7, #30]
 8000c92:	77fb      	strb	r3, [r7, #31]

				osDelay(15);
 8000c94:	200f      	movs	r0, #15
 8000c96:	f002 fe4d 	bl	8003934 <osDelay>
			}

			osDelay(1);
 8000c9a:	2001      	movs	r0, #1
 8000c9c:	f002 fe4a 	bl	8003934 <osDelay>
		currState = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET)
 8000ca0:	e788      	b.n	8000bb4 <handleEncoder+0x4c>
 8000ca2:	bf00      	nop
 8000ca4:	0800648c 	.word	0x0800648c
 8000ca8:	40010800 	.word	0x40010800
 8000cac:	200000f8 	.word	0x200000f8
 8000cb0:	200000ec 	.word	0x200000ec

08000cb4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	4a04      	ldr	r2, [pc, #16]	@ (8000cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cc2:	4293      	cmp	r3, r2
 8000cc4:	d101      	bne.n	8000cca <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8000cc6:	f000 fe1b 	bl	8001900 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40000800 	.word	0x40000800

08000cd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b082      	sub	sp, #8
 8000cdc:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cde:	b672      	cpsid	i
}
 8000ce0:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000ce2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ce6:	480c      	ldr	r0, [pc, #48]	@ (8000d18 <Error_Handler+0x40>)
 8000ce8:	f001 f8b9 	bl	8001e5e <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 5000; i++) {
 8000cec:	2300      	movs	r3, #0
 8000cee:	607b      	str	r3, [r7, #4]
 8000cf0:	e00b      	b.n	8000d0a <Error_Handler+0x32>
			for (uint32_t j = 0; j < 100; j++) {
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	603b      	str	r3, [r7, #0]
 8000cf6:	e002      	b.n	8000cfe <Error_Handler+0x26>
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	603b      	str	r3, [r7, #0]
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	2b63      	cmp	r3, #99	@ 0x63
 8000d02:	d9f9      	bls.n	8000cf8 <Error_Handler+0x20>
		for (uint32_t i = 0; i < 5000; i++) {
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	3301      	adds	r3, #1
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000d10:	4293      	cmp	r3, r2
 8000d12:	d9ee      	bls.n	8000cf2 <Error_Handler+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000d14:	e7e5      	b.n	8000ce2 <Error_Handler+0xa>
 8000d16:	bf00      	nop
 8000d18:	40011000 	.word	0x40011000

08000d1c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b082      	sub	sp, #8
 8000d20:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000d22:	f000 fbfb 	bl	800151c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000d26:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000d2a:	2201      	movs	r2, #1
 8000d2c:	2178      	movs	r1, #120	@ 0x78
 8000d2e:	485b      	ldr	r0, [pc, #364]	@ (8000e9c <SSD1306_Init+0x180>)
 8000d30:	f001 faf0 	bl	8002314 <HAL_I2C_IsDeviceReady>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	e0a9      	b.n	8000e92 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000d3e:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000d42:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d44:	e002      	b.n	8000d4c <SSD1306_Init+0x30>
		p--;
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	3b01      	subs	r3, #1
 8000d4a:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f9      	bne.n	8000d46 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000d52:	22ae      	movs	r2, #174	@ 0xae
 8000d54:	2100      	movs	r1, #0
 8000d56:	2078      	movs	r0, #120	@ 0x78
 8000d58:	f000 fc5a 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000d5c:	2220      	movs	r2, #32
 8000d5e:	2100      	movs	r1, #0
 8000d60:	2078      	movs	r0, #120	@ 0x78
 8000d62:	f000 fc55 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000d66:	2210      	movs	r2, #16
 8000d68:	2100      	movs	r1, #0
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f000 fc50 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000d70:	22b0      	movs	r2, #176	@ 0xb0
 8000d72:	2100      	movs	r1, #0
 8000d74:	2078      	movs	r0, #120	@ 0x78
 8000d76:	f000 fc4b 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000d7a:	22c8      	movs	r2, #200	@ 0xc8
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	2078      	movs	r0, #120	@ 0x78
 8000d80:	f000 fc46 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000d84:	2200      	movs	r2, #0
 8000d86:	2100      	movs	r1, #0
 8000d88:	2078      	movs	r0, #120	@ 0x78
 8000d8a:	f000 fc41 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000d8e:	2210      	movs	r2, #16
 8000d90:	2100      	movs	r1, #0
 8000d92:	2078      	movs	r0, #120	@ 0x78
 8000d94:	f000 fc3c 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8000d98:	2240      	movs	r2, #64	@ 0x40
 8000d9a:	2100      	movs	r1, #0
 8000d9c:	2078      	movs	r0, #120	@ 0x78
 8000d9e:	f000 fc37 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8000da2:	2281      	movs	r2, #129	@ 0x81
 8000da4:	2100      	movs	r1, #0
 8000da6:	2078      	movs	r0, #120	@ 0x78
 8000da8:	f000 fc32 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8000dac:	22ff      	movs	r2, #255	@ 0xff
 8000dae:	2100      	movs	r1, #0
 8000db0:	2078      	movs	r0, #120	@ 0x78
 8000db2:	f000 fc2d 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8000db6:	22a1      	movs	r2, #161	@ 0xa1
 8000db8:	2100      	movs	r1, #0
 8000dba:	2078      	movs	r0, #120	@ 0x78
 8000dbc:	f000 fc28 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8000dc0:	22a6      	movs	r2, #166	@ 0xa6
 8000dc2:	2100      	movs	r1, #0
 8000dc4:	2078      	movs	r0, #120	@ 0x78
 8000dc6:	f000 fc23 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8000dca:	22a8      	movs	r2, #168	@ 0xa8
 8000dcc:	2100      	movs	r1, #0
 8000dce:	2078      	movs	r0, #120	@ 0x78
 8000dd0:	f000 fc1e 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8000dd4:	223f      	movs	r2, #63	@ 0x3f
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	2078      	movs	r0, #120	@ 0x78
 8000dda:	f000 fc19 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dde:	22a4      	movs	r2, #164	@ 0xa4
 8000de0:	2100      	movs	r1, #0
 8000de2:	2078      	movs	r0, #120	@ 0x78
 8000de4:	f000 fc14 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8000de8:	22d3      	movs	r2, #211	@ 0xd3
 8000dea:	2100      	movs	r1, #0
 8000dec:	2078      	movs	r0, #120	@ 0x78
 8000dee:	f000 fc0f 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2078      	movs	r0, #120	@ 0x78
 8000df8:	f000 fc0a 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 8000dfc:	22d5      	movs	r2, #213	@ 0xd5
 8000dfe:	2100      	movs	r1, #0
 8000e00:	2078      	movs	r0, #120	@ 0x78
 8000e02:	f000 fc05 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8000e06:	22f0      	movs	r2, #240	@ 0xf0
 8000e08:	2100      	movs	r1, #0
 8000e0a:	2078      	movs	r0, #120	@ 0x78
 8000e0c:	f000 fc00 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8000e10:	22d9      	movs	r2, #217	@ 0xd9
 8000e12:	2100      	movs	r1, #0
 8000e14:	2078      	movs	r0, #120	@ 0x78
 8000e16:	f000 fbfb 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8000e1a:	2222      	movs	r2, #34	@ 0x22
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2078      	movs	r0, #120	@ 0x78
 8000e20:	f000 fbf6 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8000e24:	22da      	movs	r2, #218	@ 0xda
 8000e26:	2100      	movs	r1, #0
 8000e28:	2078      	movs	r0, #120	@ 0x78
 8000e2a:	f000 fbf1 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8000e2e:	2212      	movs	r2, #18
 8000e30:	2100      	movs	r1, #0
 8000e32:	2078      	movs	r0, #120	@ 0x78
 8000e34:	f000 fbec 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8000e38:	22db      	movs	r2, #219	@ 0xdb
 8000e3a:	2100      	movs	r1, #0
 8000e3c:	2078      	movs	r0, #120	@ 0x78
 8000e3e:	f000 fbe7 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8000e42:	2220      	movs	r2, #32
 8000e44:	2100      	movs	r1, #0
 8000e46:	2078      	movs	r0, #120	@ 0x78
 8000e48:	f000 fbe2 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8000e4c:	228d      	movs	r2, #141	@ 0x8d
 8000e4e:	2100      	movs	r1, #0
 8000e50:	2078      	movs	r0, #120	@ 0x78
 8000e52:	f000 fbdd 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8000e56:	2214      	movs	r2, #20
 8000e58:	2100      	movs	r1, #0
 8000e5a:	2078      	movs	r0, #120	@ 0x78
 8000e5c:	f000 fbd8 	bl	8001610 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8000e60:	22af      	movs	r2, #175	@ 0xaf
 8000e62:	2100      	movs	r1, #0
 8000e64:	2078      	movs	r0, #120	@ 0x78
 8000e66:	f000 fbd3 	bl	8001610 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8000e6a:	222e      	movs	r2, #46	@ 0x2e
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2078      	movs	r0, #120	@ 0x78
 8000e70:	f000 fbce 	bl	8001610 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 f843 	bl	8000f00 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8000e7a:	f000 f813 	bl	8000ea4 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8000e7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ea0 <SSD1306_Init+0x184>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <SSD1306_Init+0x184>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8000e8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <SSD1306_Init+0x184>)
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8000e90:	2301      	movs	r3, #1
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000084 	.word	0x20000084
 8000ea0:	200004fc 	.word	0x200004fc

08000ea4 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8000eaa:	2300      	movs	r3, #0
 8000eac:	71fb      	strb	r3, [r7, #7]
 8000eae:	e01d      	b.n	8000eec <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8000eb0:	79fb      	ldrb	r3, [r7, #7]
 8000eb2:	3b50      	subs	r3, #80	@ 0x50
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2078      	movs	r0, #120	@ 0x78
 8000ebc:	f000 fba8 	bl	8001610 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	2078      	movs	r0, #120	@ 0x78
 8000ec6:	f000 fba3 	bl	8001610 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8000eca:	2210      	movs	r2, #16
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2078      	movs	r0, #120	@ 0x78
 8000ed0:	f000 fb9e 	bl	8001610 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8000ed4:	79fb      	ldrb	r3, [r7, #7]
 8000ed6:	01db      	lsls	r3, r3, #7
 8000ed8:	4a08      	ldr	r2, [pc, #32]	@ (8000efc <SSD1306_UpdateScreen+0x58>)
 8000eda:	441a      	add	r2, r3
 8000edc:	2380      	movs	r3, #128	@ 0x80
 8000ede:	2140      	movs	r1, #64	@ 0x40
 8000ee0:	2078      	movs	r0, #120	@ 0x78
 8000ee2:	f000 fb2f 	bl	8001544 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	3301      	adds	r3, #1
 8000eea:	71fb      	strb	r3, [r7, #7]
 8000eec:	79fb      	ldrb	r3, [r7, #7]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d9de      	bls.n	8000eb0 <SSD1306_UpdateScreen+0xc>
	}
}
 8000ef2:	bf00      	nop
 8000ef4:	bf00      	nop
 8000ef6:	3708      	adds	r7, #8
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bd80      	pop	{r7, pc}
 8000efc:	200000fc 	.word	0x200000fc

08000f00 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b082      	sub	sp, #8
 8000f04:	af00      	add	r7, sp, #0
 8000f06:	4603      	mov	r3, r0
 8000f08:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000f0a:	79fb      	ldrb	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d101      	bne.n	8000f14 <SSD1306_Fill+0x14>
 8000f10:	2300      	movs	r3, #0
 8000f12:	e000      	b.n	8000f16 <SSD1306_Fill+0x16>
 8000f14:	23ff      	movs	r3, #255	@ 0xff
 8000f16:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f1a:	4619      	mov	r1, r3
 8000f1c:	4803      	ldr	r0, [pc, #12]	@ (8000f2c <SSD1306_Fill+0x2c>)
 8000f1e:	f005 f96b 	bl	80061f8 <memset>
}
 8000f22:	bf00      	nop
 8000f24:	3708      	adds	r7, #8
 8000f26:	46bd      	mov	sp, r7
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	200000fc 	.word	0x200000fc

08000f30 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	4603      	mov	r3, r0
 8000f38:	80fb      	strh	r3, [r7, #6]
 8000f3a:	460b      	mov	r3, r1
 8000f3c:	80bb      	strh	r3, [r7, #4]
 8000f3e:	4613      	mov	r3, r2
 8000f40:	70fb      	strb	r3, [r7, #3]
	if (
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	2b7f      	cmp	r3, #127	@ 0x7f
 8000f46:	d848      	bhi.n	8000fda <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8000f48:	88bb      	ldrh	r3, [r7, #4]
 8000f4a:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f4c:	d845      	bhi.n	8000fda <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8000f4e:	4b25      	ldr	r3, [pc, #148]	@ (8000fe4 <SSD1306_DrawPixel+0xb4>)
 8000f50:	791b      	ldrb	r3, [r3, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d006      	beq.n	8000f64 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8000f56:	78fb      	ldrb	r3, [r7, #3]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	bf0c      	ite	eq
 8000f5c:	2301      	moveq	r3, #1
 8000f5e:	2300      	movne	r3, #0
 8000f60:	b2db      	uxtb	r3, r3
 8000f62:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8000f64:	78fb      	ldrb	r3, [r7, #3]
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d11a      	bne.n	8000fa0 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f6a:	88fa      	ldrh	r2, [r7, #6]
 8000f6c:	88bb      	ldrh	r3, [r7, #4]
 8000f6e:	08db      	lsrs	r3, r3, #3
 8000f70:	b298      	uxth	r0, r3
 8000f72:	4603      	mov	r3, r0
 8000f74:	01db      	lsls	r3, r3, #7
 8000f76:	4413      	add	r3, r2
 8000f78:	4a1b      	ldr	r2, [pc, #108]	@ (8000fe8 <SSD1306_DrawPixel+0xb8>)
 8000f7a:	5cd3      	ldrb	r3, [r2, r3]
 8000f7c:	b25a      	sxtb	r2, r3
 8000f7e:	88bb      	ldrh	r3, [r7, #4]
 8000f80:	f003 0307 	and.w	r3, r3, #7
 8000f84:	2101      	movs	r1, #1
 8000f86:	fa01 f303 	lsl.w	r3, r1, r3
 8000f8a:	b25b      	sxtb	r3, r3
 8000f8c:	4313      	orrs	r3, r2
 8000f8e:	b259      	sxtb	r1, r3
 8000f90:	88fa      	ldrh	r2, [r7, #6]
 8000f92:	4603      	mov	r3, r0
 8000f94:	01db      	lsls	r3, r3, #7
 8000f96:	4413      	add	r3, r2
 8000f98:	b2c9      	uxtb	r1, r1
 8000f9a:	4a13      	ldr	r2, [pc, #76]	@ (8000fe8 <SSD1306_DrawPixel+0xb8>)
 8000f9c:	54d1      	strb	r1, [r2, r3]
 8000f9e:	e01d      	b.n	8000fdc <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000fa0:	88fa      	ldrh	r2, [r7, #6]
 8000fa2:	88bb      	ldrh	r3, [r7, #4]
 8000fa4:	08db      	lsrs	r3, r3, #3
 8000fa6:	b298      	uxth	r0, r3
 8000fa8:	4603      	mov	r3, r0
 8000faa:	01db      	lsls	r3, r3, #7
 8000fac:	4413      	add	r3, r2
 8000fae:	4a0e      	ldr	r2, [pc, #56]	@ (8000fe8 <SSD1306_DrawPixel+0xb8>)
 8000fb0:	5cd3      	ldrb	r3, [r2, r3]
 8000fb2:	b25a      	sxtb	r2, r3
 8000fb4:	88bb      	ldrh	r3, [r7, #4]
 8000fb6:	f003 0307 	and.w	r3, r3, #7
 8000fba:	2101      	movs	r1, #1
 8000fbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fc0:	b25b      	sxtb	r3, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	b25b      	sxtb	r3, r3
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	b259      	sxtb	r1, r3
 8000fca:	88fa      	ldrh	r2, [r7, #6]
 8000fcc:	4603      	mov	r3, r0
 8000fce:	01db      	lsls	r3, r3, #7
 8000fd0:	4413      	add	r3, r2
 8000fd2:	b2c9      	uxtb	r1, r1
 8000fd4:	4a04      	ldr	r2, [pc, #16]	@ (8000fe8 <SSD1306_DrawPixel+0xb8>)
 8000fd6:	54d1      	strb	r1, [r2, r3]
 8000fd8:	e000      	b.n	8000fdc <SSD1306_DrawPixel+0xac>
		return;
 8000fda:	bf00      	nop
	}
}
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bc80      	pop	{r7}
 8000fe2:	4770      	bx	lr
 8000fe4:	200004fc 	.word	0x200004fc
 8000fe8:	200000fc 	.word	0x200000fc

08000fec <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	460a      	mov	r2, r1
 8000ff6:	80fb      	strh	r3, [r7, #6]
 8000ff8:	4613      	mov	r3, r2
 8000ffa:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8000ffc:	4a05      	ldr	r2, [pc, #20]	@ (8001014 <SSD1306_GotoXY+0x28>)
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001002:	4a04      	ldr	r2, [pc, #16]	@ (8001014 <SSD1306_GotoXY+0x28>)
 8001004:	88bb      	ldrh	r3, [r7, #4]
 8001006:	8053      	strh	r3, [r2, #2]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	bc80      	pop	{r7}
 8001010:	4770      	bx	lr
 8001012:	bf00      	nop
 8001014:	200004fc 	.word	0x200004fc

08001018 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	6039      	str	r1, [r7, #0]
 8001022:	71fb      	strb	r3, [r7, #7]
 8001024:	4613      	mov	r3, r2
 8001026:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001028:	4b39      	ldr	r3, [pc, #228]	@ (8001110 <SSD1306_Putc+0xf8>)
 800102a:	881b      	ldrh	r3, [r3, #0]
 800102c:	461a      	mov	r2, r3
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4413      	add	r3, r2
	if (
 8001034:	2b7f      	cmp	r3, #127	@ 0x7f
 8001036:	dc07      	bgt.n	8001048 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001038:	4b35      	ldr	r3, [pc, #212]	@ (8001110 <SSD1306_Putc+0xf8>)
 800103a:	885b      	ldrh	r3, [r3, #2]
 800103c:	461a      	mov	r2, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	785b      	ldrb	r3, [r3, #1]
 8001042:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001044:	2b3f      	cmp	r3, #63	@ 0x3f
 8001046:	dd01      	ble.n	800104c <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001048:	2300      	movs	r3, #0
 800104a:	e05d      	b.n	8001108 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]
 8001050:	e04b      	b.n	80010ea <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685a      	ldr	r2, [r3, #4]
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	3b20      	subs	r3, #32
 800105a:	6839      	ldr	r1, [r7, #0]
 800105c:	7849      	ldrb	r1, [r1, #1]
 800105e:	fb01 f303 	mul.w	r3, r1, r3
 8001062:	4619      	mov	r1, r3
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	440b      	add	r3, r1
 8001068:	005b      	lsls	r3, r3, #1
 800106a:	4413      	add	r3, r2
 800106c:	881b      	ldrh	r3, [r3, #0]
 800106e:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001070:	2300      	movs	r3, #0
 8001072:	613b      	str	r3, [r7, #16]
 8001074:	e030      	b.n	80010d8 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	693b      	ldr	r3, [r7, #16]
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001082:	2b00      	cmp	r3, #0
 8001084:	d010      	beq.n	80010a8 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8001086:	4b22      	ldr	r3, [pc, #136]	@ (8001110 <SSD1306_Putc+0xf8>)
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4413      	add	r3, r2
 8001090:	b298      	uxth	r0, r3
 8001092:	4b1f      	ldr	r3, [pc, #124]	@ (8001110 <SSD1306_Putc+0xf8>)
 8001094:	885a      	ldrh	r2, [r3, #2]
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	b29b      	uxth	r3, r3
 800109a:	4413      	add	r3, r2
 800109c:	b29b      	uxth	r3, r3
 800109e:	79ba      	ldrb	r2, [r7, #6]
 80010a0:	4619      	mov	r1, r3
 80010a2:	f7ff ff45 	bl	8000f30 <SSD1306_DrawPixel>
 80010a6:	e014      	b.n	80010d2 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80010a8:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <SSD1306_Putc+0xf8>)
 80010aa:	881a      	ldrh	r2, [r3, #0]
 80010ac:	693b      	ldr	r3, [r7, #16]
 80010ae:	b29b      	uxth	r3, r3
 80010b0:	4413      	add	r3, r2
 80010b2:	b298      	uxth	r0, r3
 80010b4:	4b16      	ldr	r3, [pc, #88]	@ (8001110 <SSD1306_Putc+0xf8>)
 80010b6:	885a      	ldrh	r2, [r3, #2]
 80010b8:	697b      	ldr	r3, [r7, #20]
 80010ba:	b29b      	uxth	r3, r3
 80010bc:	4413      	add	r3, r2
 80010be:	b299      	uxth	r1, r3
 80010c0:	79bb      	ldrb	r3, [r7, #6]
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf0c      	ite	eq
 80010c6:	2301      	moveq	r3, #1
 80010c8:	2300      	movne	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	461a      	mov	r2, r3
 80010ce:	f7ff ff2f 	bl	8000f30 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	3301      	adds	r3, #1
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	461a      	mov	r2, r3
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d3c8      	bcc.n	8001076 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80010e4:	697b      	ldr	r3, [r7, #20]
 80010e6:	3301      	adds	r3, #1
 80010e8:	617b      	str	r3, [r7, #20]
 80010ea:	683b      	ldr	r3, [r7, #0]
 80010ec:	785b      	ldrb	r3, [r3, #1]
 80010ee:	461a      	mov	r2, r3
 80010f0:	697b      	ldr	r3, [r7, #20]
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d3ad      	bcc.n	8001052 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80010f6:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SSD1306_Putc+0xf8>)
 80010f8:	881b      	ldrh	r3, [r3, #0]
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	7812      	ldrb	r2, [r2, #0]
 80010fe:	4413      	add	r3, r2
 8001100:	b29a      	uxth	r2, r3
 8001102:	4b03      	ldr	r3, [pc, #12]	@ (8001110 <SSD1306_Putc+0xf8>)
 8001104:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001106:	79fb      	ldrb	r3, [r7, #7]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3718      	adds	r7, #24
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	200004fc 	.word	0x200004fc

08001114 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b084      	sub	sp, #16
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	4613      	mov	r3, r2
 8001120:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001122:	e012      	b.n	800114a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	68b9      	ldr	r1, [r7, #8]
 800112c:	4618      	mov	r0, r3
 800112e:	f7ff ff73 	bl	8001018 <SSD1306_Putc>
 8001132:	4603      	mov	r3, r0
 8001134:	461a      	mov	r2, r3
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	781b      	ldrb	r3, [r3, #0]
 800113a:	429a      	cmp	r2, r3
 800113c:	d002      	beq.n	8001144 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	e008      	b.n	8001156 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	3301      	adds	r3, #1
 8001148:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	781b      	ldrb	r3, [r3, #0]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d1e8      	bne.n	8001124 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	781b      	ldrb	r3, [r3, #0]
}
 8001156:	4618      	mov	r0, r3
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}

0800115e <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 800115e:	b590      	push	{r4, r7, lr}
 8001160:	b087      	sub	sp, #28
 8001162:	af00      	add	r7, sp, #0
 8001164:	4604      	mov	r4, r0
 8001166:	4608      	mov	r0, r1
 8001168:	4611      	mov	r1, r2
 800116a:	461a      	mov	r2, r3
 800116c:	4623      	mov	r3, r4
 800116e:	80fb      	strh	r3, [r7, #6]
 8001170:	4603      	mov	r3, r0
 8001172:	80bb      	strh	r3, [r7, #4]
 8001174:	460b      	mov	r3, r1
 8001176:	807b      	strh	r3, [r7, #2]
 8001178:	4613      	mov	r3, r2
 800117a:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 800117c:	88fb      	ldrh	r3, [r7, #6]
 800117e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001180:	d901      	bls.n	8001186 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 8001182:	237f      	movs	r3, #127	@ 0x7f
 8001184:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 8001186:	887b      	ldrh	r3, [r7, #2]
 8001188:	2b7f      	cmp	r3, #127	@ 0x7f
 800118a:	d901      	bls.n	8001190 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 800118c:	237f      	movs	r3, #127	@ 0x7f
 800118e:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001190:	88bb      	ldrh	r3, [r7, #4]
 8001192:	2b3f      	cmp	r3, #63	@ 0x3f
 8001194:	d901      	bls.n	800119a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001196:	233f      	movs	r3, #63	@ 0x3f
 8001198:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800119a:	883b      	ldrh	r3, [r7, #0]
 800119c:	2b3f      	cmp	r3, #63	@ 0x3f
 800119e:	d901      	bls.n	80011a4 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 80011a0:	233f      	movs	r3, #63	@ 0x3f
 80011a2:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 80011a4:	88fa      	ldrh	r2, [r7, #6]
 80011a6:	887b      	ldrh	r3, [r7, #2]
 80011a8:	429a      	cmp	r2, r3
 80011aa:	d205      	bcs.n	80011b8 <SSD1306_DrawLine+0x5a>
 80011ac:	887a      	ldrh	r2, [r7, #2]
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	b29b      	uxth	r3, r3
 80011b4:	b21b      	sxth	r3, r3
 80011b6:	e004      	b.n	80011c2 <SSD1306_DrawLine+0x64>
 80011b8:	88fa      	ldrh	r2, [r7, #6]
 80011ba:	887b      	ldrh	r3, [r7, #2]
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29b      	uxth	r3, r3
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80011c4:	88ba      	ldrh	r2, [r7, #4]
 80011c6:	883b      	ldrh	r3, [r7, #0]
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d205      	bcs.n	80011d8 <SSD1306_DrawLine+0x7a>
 80011cc:	883a      	ldrh	r2, [r7, #0]
 80011ce:	88bb      	ldrh	r3, [r7, #4]
 80011d0:	1ad3      	subs	r3, r2, r3
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	b21b      	sxth	r3, r3
 80011d6:	e004      	b.n	80011e2 <SSD1306_DrawLine+0x84>
 80011d8:	88ba      	ldrh	r2, [r7, #4]
 80011da:	883b      	ldrh	r3, [r7, #0]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	b29b      	uxth	r3, r3
 80011e0:	b21b      	sxth	r3, r3
 80011e2:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80011e4:	88fa      	ldrh	r2, [r7, #6]
 80011e6:	887b      	ldrh	r3, [r7, #2]
 80011e8:	429a      	cmp	r2, r3
 80011ea:	d201      	bcs.n	80011f0 <SSD1306_DrawLine+0x92>
 80011ec:	2301      	movs	r3, #1
 80011ee:	e001      	b.n	80011f4 <SSD1306_DrawLine+0x96>
 80011f0:	f04f 33ff 	mov.w	r3, #4294967295
 80011f4:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80011f6:	88ba      	ldrh	r2, [r7, #4]
 80011f8:	883b      	ldrh	r3, [r7, #0]
 80011fa:	429a      	cmp	r2, r3
 80011fc:	d201      	bcs.n	8001202 <SSD1306_DrawLine+0xa4>
 80011fe:	2301      	movs	r3, #1
 8001200:	e001      	b.n	8001206 <SSD1306_DrawLine+0xa8>
 8001202:	f04f 33ff 	mov.w	r3, #4294967295
 8001206:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001208:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800120c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001210:	429a      	cmp	r2, r3
 8001212:	dd06      	ble.n	8001222 <SSD1306_DrawLine+0xc4>
 8001214:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001218:	0fda      	lsrs	r2, r3, #31
 800121a:	4413      	add	r3, r2
 800121c:	105b      	asrs	r3, r3, #1
 800121e:	b21b      	sxth	r3, r3
 8001220:	e006      	b.n	8001230 <SSD1306_DrawLine+0xd2>
 8001222:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001226:	0fda      	lsrs	r2, r3, #31
 8001228:	4413      	add	r3, r2
 800122a:	105b      	asrs	r3, r3, #1
 800122c:	425b      	negs	r3, r3
 800122e:	b21b      	sxth	r3, r3
 8001230:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 8001232:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d129      	bne.n	800128e <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 800123a:	883a      	ldrh	r2, [r7, #0]
 800123c:	88bb      	ldrh	r3, [r7, #4]
 800123e:	429a      	cmp	r2, r3
 8001240:	d205      	bcs.n	800124e <SSD1306_DrawLine+0xf0>
			tmp = y1;
 8001242:	883b      	ldrh	r3, [r7, #0]
 8001244:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001246:	88bb      	ldrh	r3, [r7, #4]
 8001248:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800124a:	893b      	ldrh	r3, [r7, #8]
 800124c:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800124e:	887a      	ldrh	r2, [r7, #2]
 8001250:	88fb      	ldrh	r3, [r7, #6]
 8001252:	429a      	cmp	r2, r3
 8001254:	d205      	bcs.n	8001262 <SSD1306_DrawLine+0x104>
			tmp = x1;
 8001256:	887b      	ldrh	r3, [r7, #2]
 8001258:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800125a:	88fb      	ldrh	r3, [r7, #6]
 800125c:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800125e:	893b      	ldrh	r3, [r7, #8]
 8001260:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 8001262:	88bb      	ldrh	r3, [r7, #4]
 8001264:	82bb      	strh	r3, [r7, #20]
 8001266:	e00c      	b.n	8001282 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001268:	8ab9      	ldrh	r1, [r7, #20]
 800126a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fe5d 	bl	8000f30 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 8001276:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800127a:	b29b      	uxth	r3, r3
 800127c:	3301      	adds	r3, #1
 800127e:	b29b      	uxth	r3, r3
 8001280:	82bb      	strh	r3, [r7, #20]
 8001282:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001286:	883b      	ldrh	r3, [r7, #0]
 8001288:	429a      	cmp	r2, r3
 800128a:	dded      	ble.n	8001268 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 800128c:	e05f      	b.n	800134e <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 800128e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d129      	bne.n	80012ea <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001296:	883a      	ldrh	r2, [r7, #0]
 8001298:	88bb      	ldrh	r3, [r7, #4]
 800129a:	429a      	cmp	r2, r3
 800129c:	d205      	bcs.n	80012aa <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800129e:	883b      	ldrh	r3, [r7, #0]
 80012a0:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80012a2:	88bb      	ldrh	r3, [r7, #4]
 80012a4:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80012a6:	893b      	ldrh	r3, [r7, #8]
 80012a8:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80012aa:	887a      	ldrh	r2, [r7, #2]
 80012ac:	88fb      	ldrh	r3, [r7, #6]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d205      	bcs.n	80012be <SSD1306_DrawLine+0x160>
			tmp = x1;
 80012b2:	887b      	ldrh	r3, [r7, #2]
 80012b4:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80012b6:	88fb      	ldrh	r3, [r7, #6]
 80012b8:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80012ba:	893b      	ldrh	r3, [r7, #8]
 80012bc:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80012be:	88fb      	ldrh	r3, [r7, #6]
 80012c0:	82bb      	strh	r3, [r7, #20]
 80012c2:	e00c      	b.n	80012de <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80012c4:	8abb      	ldrh	r3, [r7, #20]
 80012c6:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80012ca:	88b9      	ldrh	r1, [r7, #4]
 80012cc:	4618      	mov	r0, r3
 80012ce:	f7ff fe2f 	bl	8000f30 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80012d2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80012d6:	b29b      	uxth	r3, r3
 80012d8:	3301      	adds	r3, #1
 80012da:	b29b      	uxth	r3, r3
 80012dc:	82bb      	strh	r3, [r7, #20]
 80012de:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	429a      	cmp	r2, r3
 80012e6:	dded      	ble.n	80012c4 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80012e8:	e031      	b.n	800134e <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80012ea:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80012ee:	88b9      	ldrh	r1, [r7, #4]
 80012f0:	88fb      	ldrh	r3, [r7, #6]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fe1c 	bl	8000f30 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80012f8:	88fa      	ldrh	r2, [r7, #6]
 80012fa:	887b      	ldrh	r3, [r7, #2]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d103      	bne.n	8001308 <SSD1306_DrawLine+0x1aa>
 8001300:	88ba      	ldrh	r2, [r7, #4]
 8001302:	883b      	ldrh	r3, [r7, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d021      	beq.n	800134c <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001308:	8afb      	ldrh	r3, [r7, #22]
 800130a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800130c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001310:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001314:	425b      	negs	r3, r3
 8001316:	429a      	cmp	r2, r3
 8001318:	dd08      	ble.n	800132c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800131a:	8afa      	ldrh	r2, [r7, #22]
 800131c:	8a3b      	ldrh	r3, [r7, #16]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	b29b      	uxth	r3, r3
 8001322:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001324:	89fa      	ldrh	r2, [r7, #14]
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	4413      	add	r3, r2
 800132a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800132c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001330:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001334:	429a      	cmp	r2, r3
 8001336:	dad8      	bge.n	80012ea <SSD1306_DrawLine+0x18c>
			err += dx;
 8001338:	8afa      	ldrh	r2, [r7, #22]
 800133a:	8a7b      	ldrh	r3, [r7, #18]
 800133c:	4413      	add	r3, r2
 800133e:	b29b      	uxth	r3, r3
 8001340:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001342:	89ba      	ldrh	r2, [r7, #12]
 8001344:	88bb      	ldrh	r3, [r7, #4]
 8001346:	4413      	add	r3, r2
 8001348:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 800134a:	e7ce      	b.n	80012ea <SSD1306_DrawLine+0x18c>
			break;
 800134c:	bf00      	nop
		} 
	}
}
 800134e:	371c      	adds	r7, #28
 8001350:	46bd      	mov	sp, r7
 8001352:	bd90      	pop	{r4, r7, pc}

08001354 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001354:	b590      	push	{r4, r7, lr}
 8001356:	b089      	sub	sp, #36	@ 0x24
 8001358:	af02      	add	r7, sp, #8
 800135a:	4604      	mov	r4, r0
 800135c:	4608      	mov	r0, r1
 800135e:	4611      	mov	r1, r2
 8001360:	461a      	mov	r2, r3
 8001362:	4623      	mov	r3, r4
 8001364:	80fb      	strh	r3, [r7, #6]
 8001366:	4603      	mov	r3, r0
 8001368:	80bb      	strh	r3, [r7, #4]
 800136a:	460b      	mov	r3, r1
 800136c:	807b      	strh	r3, [r7, #2]
 800136e:	4613      	mov	r3, r2
 8001370:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	f1c3 0301 	rsb	r3, r3, #1
 8001378:	b29b      	uxth	r3, r3
 800137a:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 800137c:	2301      	movs	r3, #1
 800137e:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001380:	887b      	ldrh	r3, [r7, #2]
 8001382:	461a      	mov	r2, r3
 8001384:	03d2      	lsls	r2, r2, #15
 8001386:	1ad3      	subs	r3, r2, r3
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	b29b      	uxth	r3, r3
 800138c:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 800138e:	2300      	movs	r3, #0
 8001390:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001392:	887b      	ldrh	r3, [r7, #2]
 8001394:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001396:	88f8      	ldrh	r0, [r7, #6]
 8001398:	88ba      	ldrh	r2, [r7, #4]
 800139a:	887b      	ldrh	r3, [r7, #2]
 800139c:	4413      	add	r3, r2
 800139e:	b29b      	uxth	r3, r3
 80013a0:	787a      	ldrb	r2, [r7, #1]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f7ff fdc4 	bl	8000f30 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 80013a8:	88f8      	ldrh	r0, [r7, #6]
 80013aa:	88ba      	ldrh	r2, [r7, #4]
 80013ac:	887b      	ldrh	r3, [r7, #2]
 80013ae:	1ad3      	subs	r3, r2, r3
 80013b0:	b29b      	uxth	r3, r3
 80013b2:	787a      	ldrb	r2, [r7, #1]
 80013b4:	4619      	mov	r1, r3
 80013b6:	f7ff fdbb 	bl	8000f30 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 80013ba:	88fa      	ldrh	r2, [r7, #6]
 80013bc:	887b      	ldrh	r3, [r7, #2]
 80013be:	4413      	add	r3, r2
 80013c0:	b29b      	uxth	r3, r3
 80013c2:	88b9      	ldrh	r1, [r7, #4]
 80013c4:	787a      	ldrb	r2, [r7, #1]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fdb2 	bl	8000f30 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 80013cc:	88fa      	ldrh	r2, [r7, #6]
 80013ce:	887b      	ldrh	r3, [r7, #2]
 80013d0:	1ad3      	subs	r3, r2, r3
 80013d2:	b29b      	uxth	r3, r3
 80013d4:	88b9      	ldrh	r1, [r7, #4]
 80013d6:	787a      	ldrb	r2, [r7, #1]
 80013d8:	4618      	mov	r0, r3
 80013da:	f7ff fda9 	bl	8000f30 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 80013de:	88fa      	ldrh	r2, [r7, #6]
 80013e0:	887b      	ldrh	r3, [r7, #2]
 80013e2:	1ad3      	subs	r3, r2, r3
 80013e4:	b298      	uxth	r0, r3
 80013e6:	88b9      	ldrh	r1, [r7, #4]
 80013e8:	88fa      	ldrh	r2, [r7, #6]
 80013ea:	887b      	ldrh	r3, [r7, #2]
 80013ec:	4413      	add	r3, r2
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	88bc      	ldrh	r4, [r7, #4]
 80013f2:	787b      	ldrb	r3, [r7, #1]
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	4623      	mov	r3, r4
 80013f8:	f7ff feb1 	bl	800115e <SSD1306_DrawLine>

    while (x < y) {
 80013fc:	e079      	b.n	80014f2 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 80013fe:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001402:	2b00      	cmp	r3, #0
 8001404:	db0e      	blt.n	8001424 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001406:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800140a:	b29b      	uxth	r3, r3
 800140c:	3b01      	subs	r3, #1
 800140e:	b29b      	uxth	r3, r3
 8001410:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001412:	8a7b      	ldrh	r3, [r7, #18]
 8001414:	3302      	adds	r3, #2
 8001416:	b29b      	uxth	r3, r3
 8001418:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800141a:	8afa      	ldrh	r2, [r7, #22]
 800141c:	8a7b      	ldrh	r3, [r7, #18]
 800141e:	4413      	add	r3, r2
 8001420:	b29b      	uxth	r3, r3
 8001422:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001424:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001428:	b29b      	uxth	r3, r3
 800142a:	3301      	adds	r3, #1
 800142c:	b29b      	uxth	r3, r3
 800142e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001430:	8abb      	ldrh	r3, [r7, #20]
 8001432:	3302      	adds	r3, #2
 8001434:	b29b      	uxth	r3, r3
 8001436:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001438:	8afa      	ldrh	r2, [r7, #22]
 800143a:	8abb      	ldrh	r3, [r7, #20]
 800143c:	4413      	add	r3, r2
 800143e:	b29b      	uxth	r3, r3
 8001440:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001442:	88fa      	ldrh	r2, [r7, #6]
 8001444:	8a3b      	ldrh	r3, [r7, #16]
 8001446:	1ad3      	subs	r3, r2, r3
 8001448:	b298      	uxth	r0, r3
 800144a:	88ba      	ldrh	r2, [r7, #4]
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	4413      	add	r3, r2
 8001450:	b299      	uxth	r1, r3
 8001452:	88fa      	ldrh	r2, [r7, #6]
 8001454:	8a3b      	ldrh	r3, [r7, #16]
 8001456:	4413      	add	r3, r2
 8001458:	b29c      	uxth	r4, r3
 800145a:	88ba      	ldrh	r2, [r7, #4]
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	4413      	add	r3, r2
 8001460:	b29a      	uxth	r2, r3
 8001462:	787b      	ldrb	r3, [r7, #1]
 8001464:	9300      	str	r3, [sp, #0]
 8001466:	4613      	mov	r3, r2
 8001468:	4622      	mov	r2, r4
 800146a:	f7ff fe78 	bl	800115e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 800146e:	88fa      	ldrh	r2, [r7, #6]
 8001470:	8a3b      	ldrh	r3, [r7, #16]
 8001472:	4413      	add	r3, r2
 8001474:	b298      	uxth	r0, r3
 8001476:	88ba      	ldrh	r2, [r7, #4]
 8001478:	89fb      	ldrh	r3, [r7, #14]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	b299      	uxth	r1, r3
 800147e:	88fa      	ldrh	r2, [r7, #6]
 8001480:	8a3b      	ldrh	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	b29c      	uxth	r4, r3
 8001486:	88ba      	ldrh	r2, [r7, #4]
 8001488:	89fb      	ldrh	r3, [r7, #14]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	b29a      	uxth	r2, r3
 800148e:	787b      	ldrb	r3, [r7, #1]
 8001490:	9300      	str	r3, [sp, #0]
 8001492:	4613      	mov	r3, r2
 8001494:	4622      	mov	r2, r4
 8001496:	f7ff fe62 	bl	800115e <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 800149a:	88fa      	ldrh	r2, [r7, #6]
 800149c:	89fb      	ldrh	r3, [r7, #14]
 800149e:	4413      	add	r3, r2
 80014a0:	b298      	uxth	r0, r3
 80014a2:	88ba      	ldrh	r2, [r7, #4]
 80014a4:	8a3b      	ldrh	r3, [r7, #16]
 80014a6:	4413      	add	r3, r2
 80014a8:	b299      	uxth	r1, r3
 80014aa:	88fa      	ldrh	r2, [r7, #6]
 80014ac:	89fb      	ldrh	r3, [r7, #14]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	b29c      	uxth	r4, r3
 80014b2:	88ba      	ldrh	r2, [r7, #4]
 80014b4:	8a3b      	ldrh	r3, [r7, #16]
 80014b6:	4413      	add	r3, r2
 80014b8:	b29a      	uxth	r2, r3
 80014ba:	787b      	ldrb	r3, [r7, #1]
 80014bc:	9300      	str	r3, [sp, #0]
 80014be:	4613      	mov	r3, r2
 80014c0:	4622      	mov	r2, r4
 80014c2:	f7ff fe4c 	bl	800115e <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 80014c6:	88fa      	ldrh	r2, [r7, #6]
 80014c8:	89fb      	ldrh	r3, [r7, #14]
 80014ca:	4413      	add	r3, r2
 80014cc:	b298      	uxth	r0, r3
 80014ce:	88ba      	ldrh	r2, [r7, #4]
 80014d0:	8a3b      	ldrh	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	b299      	uxth	r1, r3
 80014d6:	88fa      	ldrh	r2, [r7, #6]
 80014d8:	89fb      	ldrh	r3, [r7, #14]
 80014da:	1ad3      	subs	r3, r2, r3
 80014dc:	b29c      	uxth	r4, r3
 80014de:	88ba      	ldrh	r2, [r7, #4]
 80014e0:	8a3b      	ldrh	r3, [r7, #16]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	b29a      	uxth	r2, r3
 80014e6:	787b      	ldrb	r3, [r7, #1]
 80014e8:	9300      	str	r3, [sp, #0]
 80014ea:	4613      	mov	r3, r2
 80014ec:	4622      	mov	r2, r4
 80014ee:	f7ff fe36 	bl	800115e <SSD1306_DrawLine>
    while (x < y) {
 80014f2:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80014f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80014fa:	429a      	cmp	r2, r3
 80014fc:	f6ff af7f 	blt.w	80013fe <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001500:	bf00      	nop
 8001502:	bf00      	nop
 8001504:	371c      	adds	r7, #28
 8001506:	46bd      	mov	sp, r7
 8001508:	bd90      	pop	{r4, r7, pc}

0800150a <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800150e:	2000      	movs	r0, #0
 8001510:	f7ff fcf6 	bl	8000f00 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001514:	f7ff fcc6 	bl	8000ea4 <SSD1306_UpdateScreen>
}
 8001518:	bf00      	nop
 800151a:	bd80      	pop	{r7, pc}

0800151c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <ssd1306_I2C_Init+0x24>)
 8001524:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001526:	e002      	b.n	800152e <ssd1306_I2C_Init+0x12>
		p--;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	3b01      	subs	r3, #1
 800152c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d1f9      	bne.n	8001528 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001534:	bf00      	nop
 8001536:	bf00      	nop
 8001538:	370c      	adds	r7, #12
 800153a:	46bd      	mov	sp, r7
 800153c:	bc80      	pop	{r7}
 800153e:	4770      	bx	lr
 8001540:	0003d090 	.word	0x0003d090

08001544 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001544:	b590      	push	{r4, r7, lr}
 8001546:	b0c7      	sub	sp, #284	@ 0x11c
 8001548:	af02      	add	r7, sp, #8
 800154a:	4604      	mov	r4, r0
 800154c:	4608      	mov	r0, r1
 800154e:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001552:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001556:	600a      	str	r2, [r1, #0]
 8001558:	4619      	mov	r1, r3
 800155a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800155e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001562:	4622      	mov	r2, r4
 8001564:	701a      	strb	r2, [r3, #0]
 8001566:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800156a:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 800156e:	4602      	mov	r2, r0
 8001570:	701a      	strb	r2, [r3, #0]
 8001572:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001576:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800157a:	460a      	mov	r2, r1
 800157c:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800157e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001582:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001586:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 800158a:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 800158e:	7812      	ldrb	r2, [r2, #0]
 8001590:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001592:	2300      	movs	r3, #0
 8001594:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001598:	e015      	b.n	80015c6 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800159a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800159e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015a2:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 80015a6:	6812      	ldr	r2, [r2, #0]
 80015a8:	441a      	add	r2, r3
 80015aa:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015ae:	3301      	adds	r3, #1
 80015b0:	7811      	ldrb	r1, [r2, #0]
 80015b2:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015b6:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 80015ba:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80015bc:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015c0:	3301      	adds	r3, #1
 80015c2:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 80015c6:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80015d0:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80015d4:	8812      	ldrh	r2, [r2, #0]
 80015d6:	429a      	cmp	r2, r3
 80015d8:	d8df      	bhi.n	800159a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80015da:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015de:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	b299      	uxth	r1, r3
 80015e6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80015ea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80015ee:	881b      	ldrh	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	b29b      	uxth	r3, r3
 80015f4:	f107 020c 	add.w	r2, r7, #12
 80015f8:	200a      	movs	r0, #10
 80015fa:	9000      	str	r0, [sp, #0]
 80015fc:	4803      	ldr	r0, [pc, #12]	@ (800160c <ssd1306_I2C_WriteMulti+0xc8>)
 80015fe:	f000 fd8b 	bl	8002118 <HAL_I2C_Master_Transmit>
}
 8001602:	bf00      	nop
 8001604:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001608:	46bd      	mov	sp, r7
 800160a:	bd90      	pop	{r4, r7, pc}
 800160c:	20000084 	.word	0x20000084

08001610 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001610:	b580      	push	{r7, lr}
 8001612:	b086      	sub	sp, #24
 8001614:	af02      	add	r7, sp, #8
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
 800161a:	460b      	mov	r3, r1
 800161c:	71bb      	strb	r3, [r7, #6]
 800161e:	4613      	mov	r3, r2
 8001620:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001622:	79bb      	ldrb	r3, [r7, #6]
 8001624:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001626:	797b      	ldrb	r3, [r7, #5]
 8001628:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	b299      	uxth	r1, r3
 800162e:	f107 020c 	add.w	r2, r7, #12
 8001632:	230a      	movs	r3, #10
 8001634:	9300      	str	r3, [sp, #0]
 8001636:	2302      	movs	r3, #2
 8001638:	4803      	ldr	r0, [pc, #12]	@ (8001648 <ssd1306_I2C_Write+0x38>)
 800163a:	f000 fd6d 	bl	8002118 <HAL_I2C_Master_Transmit>
}
 800163e:	bf00      	nop
 8001640:	3710      	adds	r7, #16
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	20000084 	.word	0x20000084

0800164c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b18      	ldr	r3, [pc, #96]	@ (80016b4 <HAL_MspInit+0x68>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a17      	ldr	r2, [pc, #92]	@ (80016b4 <HAL_MspInit+0x68>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b15      	ldr	r3, [pc, #84]	@ (80016b4 <HAL_MspInit+0x68>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <HAL_MspInit+0x68>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a11      	ldr	r2, [pc, #68]	@ (80016b4 <HAL_MspInit+0x68>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0f      	ldr	r3, [pc, #60]	@ (80016b4 <HAL_MspInit+0x68>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	210f      	movs	r1, #15
 8001686:	f06f 0001 	mvn.w	r0, #1
 800168a:	f000 fa0a 	bl	8001aa2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800168e:	4b0a      	ldr	r3, [pc, #40]	@ (80016b8 <HAL_MspInit+0x6c>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	60fb      	str	r3, [r7, #12]
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800169a:	60fb      	str	r3, [r7, #12]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80016a2:	60fb      	str	r3, [r7, #12]
 80016a4:	4a04      	ldr	r2, [pc, #16]	@ (80016b8 <HAL_MspInit+0x6c>)
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016aa:	bf00      	nop
 80016ac:	3710      	adds	r7, #16
 80016ae:	46bd      	mov	sp, r7
 80016b0:	bd80      	pop	{r7, pc}
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	40010000 	.word	0x40010000

080016bc <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b088      	sub	sp, #32
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016c4:	f107 0310 	add.w	r3, r7, #16
 80016c8:	2200      	movs	r2, #0
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	605a      	str	r2, [r3, #4]
 80016ce:	609a      	str	r2, [r3, #8]
 80016d0:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a15      	ldr	r2, [pc, #84]	@ (800172c <HAL_I2C_MspInit+0x70>)
 80016d8:	4293      	cmp	r3, r2
 80016da:	d123      	bne.n	8001724 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016dc:	4b14      	ldr	r3, [pc, #80]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	4a13      	ldr	r2, [pc, #76]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 80016e2:	f043 0308 	orr.w	r3, r3, #8
 80016e6:	6193      	str	r3, [r2, #24]
 80016e8:	4b11      	ldr	r3, [pc, #68]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	f003 0308 	and.w	r3, r3, #8
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016f4:	23c0      	movs	r3, #192	@ 0xc0
 80016f6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80016f8:	2312      	movs	r3, #18
 80016fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80016fc:	2303      	movs	r3, #3
 80016fe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	4619      	mov	r1, r3
 8001706:	480b      	ldr	r0, [pc, #44]	@ (8001734 <HAL_I2C_MspInit+0x78>)
 8001708:	f000 f9f6 	bl	8001af8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800170c:	4b08      	ldr	r3, [pc, #32]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	4a07      	ldr	r2, [pc, #28]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 8001712:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001716:	61d3      	str	r3, [r2, #28]
 8001718:	4b05      	ldr	r3, [pc, #20]	@ (8001730 <HAL_I2C_MspInit+0x74>)
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001720:	60bb      	str	r3, [r7, #8]
 8001722:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001724:	bf00      	nop
 8001726:	3720      	adds	r7, #32
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40005400 	.word	0x40005400
 8001730:	40021000 	.word	0x40021000
 8001734:	40010c00 	.word	0x40010c00

08001738 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08e      	sub	sp, #56	@ 0x38
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001744:	2300      	movs	r3, #0
 8001746:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001748:	2300      	movs	r3, #0
 800174a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 800174e:	4b34      	ldr	r3, [pc, #208]	@ (8001820 <HAL_InitTick+0xe8>)
 8001750:	69db      	ldr	r3, [r3, #28]
 8001752:	4a33      	ldr	r2, [pc, #204]	@ (8001820 <HAL_InitTick+0xe8>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	61d3      	str	r3, [r2, #28]
 800175a:	4b31      	ldr	r3, [pc, #196]	@ (8001820 <HAL_InitTick+0xe8>)
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001766:	f107 0210 	add.w	r2, r7, #16
 800176a:	f107 0314 	add.w	r3, r7, #20
 800176e:	4611      	mov	r1, r2
 8001770:	4618      	mov	r0, r3
 8001772:	f001 fd35 	bl	80031e0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800177a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800177c:	2b00      	cmp	r3, #0
 800177e:	d103      	bne.n	8001788 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001780:	f001 fd1a 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8001784:	6378      	str	r0, [r7, #52]	@ 0x34
 8001786:	e004      	b.n	8001792 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001788:	f001 fd16 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 800178c:	4603      	mov	r3, r0
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001792:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001794:	4a23      	ldr	r2, [pc, #140]	@ (8001824 <HAL_InitTick+0xec>)
 8001796:	fba2 2303 	umull	r2, r3, r2, r3
 800179a:	0c9b      	lsrs	r3, r3, #18
 800179c:	3b01      	subs	r3, #1
 800179e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 80017a0:	4b21      	ldr	r3, [pc, #132]	@ (8001828 <HAL_InitTick+0xf0>)
 80017a2:	4a22      	ldr	r2, [pc, #136]	@ (800182c <HAL_InitTick+0xf4>)
 80017a4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 80017a6:	4b20      	ldr	r3, [pc, #128]	@ (8001828 <HAL_InitTick+0xf0>)
 80017a8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017ac:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 80017ae:	4a1e      	ldr	r2, [pc, #120]	@ (8001828 <HAL_InitTick+0xf0>)
 80017b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017b2:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 80017b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001828 <HAL_InitTick+0xf0>)
 80017b6:	2200      	movs	r2, #0
 80017b8:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ba:	4b1b      	ldr	r3, [pc, #108]	@ (8001828 <HAL_InitTick+0xf0>)
 80017bc:	2200      	movs	r2, #0
 80017be:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017c0:	4b19      	ldr	r3, [pc, #100]	@ (8001828 <HAL_InitTick+0xf0>)
 80017c2:	2200      	movs	r2, #0
 80017c4:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 80017c6:	4818      	ldr	r0, [pc, #96]	@ (8001828 <HAL_InitTick+0xf0>)
 80017c8:	f001 fd58 	bl	800327c <HAL_TIM_Base_Init>
 80017cc:	4603      	mov	r3, r0
 80017ce:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 80017d2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d11b      	bne.n	8001812 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 80017da:	4813      	ldr	r0, [pc, #76]	@ (8001828 <HAL_InitTick+0xf0>)
 80017dc:	f001 fda6 	bl	800332c <HAL_TIM_Base_Start_IT>
 80017e0:	4603      	mov	r3, r0
 80017e2:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 80017e6:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d111      	bne.n	8001812 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017ee:	201e      	movs	r0, #30
 80017f0:	f000 f973 	bl	8001ada <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b0f      	cmp	r3, #15
 80017f8:	d808      	bhi.n	800180c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 80017fa:	2200      	movs	r2, #0
 80017fc:	6879      	ldr	r1, [r7, #4]
 80017fe:	201e      	movs	r0, #30
 8001800:	f000 f94f 	bl	8001aa2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001804:	4a0a      	ldr	r2, [pc, #40]	@ (8001830 <HAL_InitTick+0xf8>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	e002      	b.n	8001812 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001812:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001816:	4618      	mov	r0, r3
 8001818:	3738      	adds	r7, #56	@ 0x38
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	40021000 	.word	0x40021000
 8001824:	431bde83 	.word	0x431bde83
 8001828:	20000504 	.word	0x20000504
 800182c:	40000800 	.word	0x40000800
 8001830:	2000000c 	.word	0x2000000c

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	bc80      	pop	{r7}
 8001866:	4770      	bx	lr

08001868 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800186c:	4802      	ldr	r0, [pc, #8]	@ (8001878 <TIM4_IRQHandler+0x10>)
 800186e:	f001 fdaf 	bl	80033d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001872:	bf00      	nop
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	20000504 	.word	0x20000504

0800187c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	bc80      	pop	{r7}
 8001886:	4770      	bx	lr

08001888 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001888:	f7ff fff8 	bl	800187c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480b      	ldr	r0, [pc, #44]	@ (80018bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800188e:	490c      	ldr	r1, [pc, #48]	@ (80018c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001890:	4a0c      	ldr	r2, [pc, #48]	@ (80018c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a09      	ldr	r2, [pc, #36]	@ (80018c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80018a4:	4c09      	ldr	r4, [pc, #36]	@ (80018cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80018b2:	f004 fd07 	bl	80062c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80018b6:	f7fe fe33 	bl	8000520 <main>
  bx lr
 80018ba:	4770      	bx	lr
  ldr r0, =_sdata
 80018bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c0:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80018c4:	08007868 	.word	0x08007868
  ldr r2, =_sbss
 80018c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80018cc:	20002478 	.word	0x20002478

080018d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80018d0:	e7fe      	b.n	80018d0 <ADC1_2_IRQHandler>
	...

080018d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018d8:	4b08      	ldr	r3, [pc, #32]	@ (80018fc <HAL_Init+0x28>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a07      	ldr	r2, [pc, #28]	@ (80018fc <HAL_Init+0x28>)
 80018de:	f043 0310 	orr.w	r3, r3, #16
 80018e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f000 f8d1 	bl	8001a8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff ff24 	bl	8001738 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f0:	f7ff feac 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f4:	2300      	movs	r3, #0
}
 80018f6:	4618      	mov	r0, r3
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	40022000 	.word	0x40022000

08001900 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001904:	4b05      	ldr	r3, [pc, #20]	@ (800191c <HAL_IncTick+0x1c>)
 8001906:	781b      	ldrb	r3, [r3, #0]
 8001908:	461a      	mov	r2, r3
 800190a:	4b05      	ldr	r3, [pc, #20]	@ (8001920 <HAL_IncTick+0x20>)
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4413      	add	r3, r2
 8001910:	4a03      	ldr	r2, [pc, #12]	@ (8001920 <HAL_IncTick+0x20>)
 8001912:	6013      	str	r3, [r2, #0]
}
 8001914:	bf00      	nop
 8001916:	46bd      	mov	sp, r7
 8001918:	bc80      	pop	{r7}
 800191a:	4770      	bx	lr
 800191c:	20000010 	.word	0x20000010
 8001920:	2000054c 	.word	0x2000054c

08001924 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  return uwTick;
 8001928:	4b02      	ldr	r3, [pc, #8]	@ (8001934 <HAL_GetTick+0x10>)
 800192a:	681b      	ldr	r3, [r3, #0]
}
 800192c:	4618      	mov	r0, r3
 800192e:	46bd      	mov	sp, r7
 8001930:	bc80      	pop	{r7}
 8001932:	4770      	bx	lr
 8001934:	2000054c 	.word	0x2000054c

08001938 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b480      	push	{r7}
 800193a:	b085      	sub	sp, #20
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	f003 0307 	and.w	r3, r3, #7
 8001946:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001948:	4b0c      	ldr	r3, [pc, #48]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800194e:	68ba      	ldr	r2, [r7, #8]
 8001950:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001954:	4013      	ands	r3, r2
 8001956:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001960:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001964:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800196a:	4a04      	ldr	r2, [pc, #16]	@ (800197c <__NVIC_SetPriorityGrouping+0x44>)
 800196c:	68bb      	ldr	r3, [r7, #8]
 800196e:	60d3      	str	r3, [r2, #12]
}
 8001970:	bf00      	nop
 8001972:	3714      	adds	r7, #20
 8001974:	46bd      	mov	sp, r7
 8001976:	bc80      	pop	{r7}
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	e000ed00 	.word	0xe000ed00

08001980 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001984:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <__NVIC_GetPriorityGrouping+0x18>)
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	0a1b      	lsrs	r3, r3, #8
 800198a:	f003 0307 	and.w	r3, r3, #7
}
 800198e:	4618      	mov	r0, r3
 8001990:	46bd      	mov	sp, r7
 8001992:	bc80      	pop	{r7}
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	e000ed00 	.word	0xe000ed00

0800199c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	db0b      	blt.n	80019c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019ae:	79fb      	ldrb	r3, [r7, #7]
 80019b0:	f003 021f 	and.w	r2, r3, #31
 80019b4:	4906      	ldr	r1, [pc, #24]	@ (80019d0 <__NVIC_EnableIRQ+0x34>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	095b      	lsrs	r3, r3, #5
 80019bc:	2001      	movs	r0, #1
 80019be:	fa00 f202 	lsl.w	r2, r0, r2
 80019c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019c6:	bf00      	nop
 80019c8:	370c      	adds	r7, #12
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bc80      	pop	{r7}
 80019ce:	4770      	bx	lr
 80019d0:	e000e100 	.word	0xe000e100

080019d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	6039      	str	r1, [r7, #0]
 80019de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	db0a      	blt.n	80019fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	b2da      	uxtb	r2, r3
 80019ec:	490c      	ldr	r1, [pc, #48]	@ (8001a20 <__NVIC_SetPriority+0x4c>)
 80019ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f2:	0112      	lsls	r2, r2, #4
 80019f4:	b2d2      	uxtb	r2, r2
 80019f6:	440b      	add	r3, r1
 80019f8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019fc:	e00a      	b.n	8001a14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	b2da      	uxtb	r2, r3
 8001a02:	4908      	ldr	r1, [pc, #32]	@ (8001a24 <__NVIC_SetPriority+0x50>)
 8001a04:	79fb      	ldrb	r3, [r7, #7]
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	3b04      	subs	r3, #4
 8001a0c:	0112      	lsls	r2, r2, #4
 8001a0e:	b2d2      	uxtb	r2, r2
 8001a10:	440b      	add	r3, r1
 8001a12:	761a      	strb	r2, [r3, #24]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	bc80      	pop	{r7}
 8001a1c:	4770      	bx	lr
 8001a1e:	bf00      	nop
 8001a20:	e000e100 	.word	0xe000e100
 8001a24:	e000ed00 	.word	0xe000ed00

08001a28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	60f8      	str	r0, [r7, #12]
 8001a30:	60b9      	str	r1, [r7, #8]
 8001a32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a3c:	69fb      	ldr	r3, [r7, #28]
 8001a3e:	f1c3 0307 	rsb	r3, r3, #7
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	bf28      	it	cs
 8001a46:	2304      	movcs	r3, #4
 8001a48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a4a:	69fb      	ldr	r3, [r7, #28]
 8001a4c:	3304      	adds	r3, #4
 8001a4e:	2b06      	cmp	r3, #6
 8001a50:	d902      	bls.n	8001a58 <NVIC_EncodePriority+0x30>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3b03      	subs	r3, #3
 8001a56:	e000      	b.n	8001a5a <NVIC_EncodePriority+0x32>
 8001a58:	2300      	movs	r3, #0
 8001a5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a5c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	43da      	mvns	r2, r3
 8001a68:	68bb      	ldr	r3, [r7, #8]
 8001a6a:	401a      	ands	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a70:	f04f 31ff 	mov.w	r1, #4294967295
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7a:	43d9      	mvns	r1, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a80:	4313      	orrs	r3, r2
         );
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3724      	adds	r7, #36	@ 0x24
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bc80      	pop	{r7}
 8001a8a:	4770      	bx	lr

08001a8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a94:	6878      	ldr	r0, [r7, #4]
 8001a96:	f7ff ff4f 	bl	8001938 <__NVIC_SetPriorityGrouping>
}
 8001a9a:	bf00      	nop
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}

08001aa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	4603      	mov	r3, r0
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
 8001aae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ab4:	f7ff ff64 	bl	8001980 <__NVIC_GetPriorityGrouping>
 8001ab8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	6978      	ldr	r0, [r7, #20]
 8001ac0:	f7ff ffb2 	bl	8001a28 <NVIC_EncodePriority>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aca:	4611      	mov	r1, r2
 8001acc:	4618      	mov	r0, r3
 8001ace:	f7ff ff81 	bl	80019d4 <__NVIC_SetPriority>
}
 8001ad2:	bf00      	nop
 8001ad4:	3718      	adds	r7, #24
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff ff57 	bl	800199c <__NVIC_EnableIRQ>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b08b      	sub	sp, #44	@ 0x2c
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
 8001b00:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b02:	2300      	movs	r3, #0
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b06:	2300      	movs	r3, #0
 8001b08:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b0a:	e169      	b.n	8001de0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b0c:	2201      	movs	r2, #1
 8001b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b10:	fa02 f303 	lsl.w	r3, r2, r3
 8001b14:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b16:	683b      	ldr	r3, [r7, #0]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	429a      	cmp	r2, r3
 8001b26:	f040 8158 	bne.w	8001dda <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4a9a      	ldr	r2, [pc, #616]	@ (8001d98 <HAL_GPIO_Init+0x2a0>)
 8001b30:	4293      	cmp	r3, r2
 8001b32:	d05e      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b34:	4a98      	ldr	r2, [pc, #608]	@ (8001d98 <HAL_GPIO_Init+0x2a0>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d875      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b3a:	4a98      	ldr	r2, [pc, #608]	@ (8001d9c <HAL_GPIO_Init+0x2a4>)
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d058      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b40:	4a96      	ldr	r2, [pc, #600]	@ (8001d9c <HAL_GPIO_Init+0x2a4>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d86f      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b46:	4a96      	ldr	r2, [pc, #600]	@ (8001da0 <HAL_GPIO_Init+0x2a8>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d052      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b4c:	4a94      	ldr	r2, [pc, #592]	@ (8001da0 <HAL_GPIO_Init+0x2a8>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d869      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b52:	4a94      	ldr	r2, [pc, #592]	@ (8001da4 <HAL_GPIO_Init+0x2ac>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d04c      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b58:	4a92      	ldr	r2, [pc, #584]	@ (8001da4 <HAL_GPIO_Init+0x2ac>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d863      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b5e:	4a92      	ldr	r2, [pc, #584]	@ (8001da8 <HAL_GPIO_Init+0x2b0>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d046      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
 8001b64:	4a90      	ldr	r2, [pc, #576]	@ (8001da8 <HAL_GPIO_Init+0x2b0>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d85d      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b6a:	2b12      	cmp	r3, #18
 8001b6c:	d82a      	bhi.n	8001bc4 <HAL_GPIO_Init+0xcc>
 8001b6e:	2b12      	cmp	r3, #18
 8001b70:	d859      	bhi.n	8001c26 <HAL_GPIO_Init+0x12e>
 8001b72:	a201      	add	r2, pc, #4	@ (adr r2, 8001b78 <HAL_GPIO_Init+0x80>)
 8001b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b78:	08001bf3 	.word	0x08001bf3
 8001b7c:	08001bcd 	.word	0x08001bcd
 8001b80:	08001bdf 	.word	0x08001bdf
 8001b84:	08001c21 	.word	0x08001c21
 8001b88:	08001c27 	.word	0x08001c27
 8001b8c:	08001c27 	.word	0x08001c27
 8001b90:	08001c27 	.word	0x08001c27
 8001b94:	08001c27 	.word	0x08001c27
 8001b98:	08001c27 	.word	0x08001c27
 8001b9c:	08001c27 	.word	0x08001c27
 8001ba0:	08001c27 	.word	0x08001c27
 8001ba4:	08001c27 	.word	0x08001c27
 8001ba8:	08001c27 	.word	0x08001c27
 8001bac:	08001c27 	.word	0x08001c27
 8001bb0:	08001c27 	.word	0x08001c27
 8001bb4:	08001c27 	.word	0x08001c27
 8001bb8:	08001c27 	.word	0x08001c27
 8001bbc:	08001bd5 	.word	0x08001bd5
 8001bc0:	08001be9 	.word	0x08001be9
 8001bc4:	4a79      	ldr	r2, [pc, #484]	@ (8001dac <HAL_GPIO_Init+0x2b4>)
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d013      	beq.n	8001bf2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bca:	e02c      	b.n	8001c26 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	623b      	str	r3, [r7, #32]
          break;
 8001bd2:	e029      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	68db      	ldr	r3, [r3, #12]
 8001bd8:	3304      	adds	r3, #4
 8001bda:	623b      	str	r3, [r7, #32]
          break;
 8001bdc:	e024      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	3308      	adds	r3, #8
 8001be4:	623b      	str	r3, [r7, #32]
          break;
 8001be6:	e01f      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001be8:	683b      	ldr	r3, [r7, #0]
 8001bea:	68db      	ldr	r3, [r3, #12]
 8001bec:	330c      	adds	r3, #12
 8001bee:	623b      	str	r3, [r7, #32]
          break;
 8001bf0:	e01a      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d102      	bne.n	8001c00 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	623b      	str	r3, [r7, #32]
          break;
 8001bfe:	e013      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d105      	bne.n	8001c14 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c08:	2308      	movs	r3, #8
 8001c0a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	69fa      	ldr	r2, [r7, #28]
 8001c10:	611a      	str	r2, [r3, #16]
          break;
 8001c12:	e009      	b.n	8001c28 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c14:	2308      	movs	r3, #8
 8001c16:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	69fa      	ldr	r2, [r7, #28]
 8001c1c:	615a      	str	r2, [r3, #20]
          break;
 8001c1e:	e003      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c20:	2300      	movs	r3, #0
 8001c22:	623b      	str	r3, [r7, #32]
          break;
 8001c24:	e000      	b.n	8001c28 <HAL_GPIO_Init+0x130>
          break;
 8001c26:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	2bff      	cmp	r3, #255	@ 0xff
 8001c2c:	d801      	bhi.n	8001c32 <HAL_GPIO_Init+0x13a>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	e001      	b.n	8001c36 <HAL_GPIO_Init+0x13e>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	3304      	adds	r3, #4
 8001c36:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c38:	69bb      	ldr	r3, [r7, #24]
 8001c3a:	2bff      	cmp	r3, #255	@ 0xff
 8001c3c:	d802      	bhi.n	8001c44 <HAL_GPIO_Init+0x14c>
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c40:	009b      	lsls	r3, r3, #2
 8001c42:	e002      	b.n	8001c4a <HAL_GPIO_Init+0x152>
 8001c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c46:	3b08      	subs	r3, #8
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	210f      	movs	r1, #15
 8001c52:	693b      	ldr	r3, [r7, #16]
 8001c54:	fa01 f303 	lsl.w	r3, r1, r3
 8001c58:	43db      	mvns	r3, r3
 8001c5a:	401a      	ands	r2, r3
 8001c5c:	6a39      	ldr	r1, [r7, #32]
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	fa01 f303 	lsl.w	r3, r1, r3
 8001c64:	431a      	orrs	r2, r3
 8001c66:	697b      	ldr	r3, [r7, #20]
 8001c68:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80b1 	beq.w	8001dda <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c78:	4b4d      	ldr	r3, [pc, #308]	@ (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	4a4c      	ldr	r2, [pc, #304]	@ (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c7e:	f043 0301 	orr.w	r3, r3, #1
 8001c82:	6193      	str	r3, [r2, #24]
 8001c84:	4b4a      	ldr	r3, [pc, #296]	@ (8001db0 <HAL_GPIO_Init+0x2b8>)
 8001c86:	699b      	ldr	r3, [r3, #24]
 8001c88:	f003 0301 	and.w	r3, r3, #1
 8001c8c:	60bb      	str	r3, [r7, #8]
 8001c8e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c90:	4a48      	ldr	r2, [pc, #288]	@ (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	089b      	lsrs	r3, r3, #2
 8001c96:	3302      	adds	r3, #2
 8001c98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c9c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca0:	f003 0303 	and.w	r3, r3, #3
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	220f      	movs	r2, #15
 8001ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cac:	43db      	mvns	r3, r3
 8001cae:	68fa      	ldr	r2, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	4a40      	ldr	r2, [pc, #256]	@ (8001db8 <HAL_GPIO_Init+0x2c0>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d013      	beq.n	8001ce4 <HAL_GPIO_Init+0x1ec>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4a3f      	ldr	r2, [pc, #252]	@ (8001dbc <HAL_GPIO_Init+0x2c4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d00d      	beq.n	8001ce0 <HAL_GPIO_Init+0x1e8>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4a3e      	ldr	r2, [pc, #248]	@ (8001dc0 <HAL_GPIO_Init+0x2c8>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d007      	beq.n	8001cdc <HAL_GPIO_Init+0x1e4>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	4a3d      	ldr	r2, [pc, #244]	@ (8001dc4 <HAL_GPIO_Init+0x2cc>)
 8001cd0:	4293      	cmp	r3, r2
 8001cd2:	d101      	bne.n	8001cd8 <HAL_GPIO_Init+0x1e0>
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	e006      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001cd8:	2304      	movs	r3, #4
 8001cda:	e004      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001cdc:	2302      	movs	r3, #2
 8001cde:	e002      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e000      	b.n	8001ce6 <HAL_GPIO_Init+0x1ee>
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ce8:	f002 0203 	and.w	r2, r2, #3
 8001cec:	0092      	lsls	r2, r2, #2
 8001cee:	4093      	lsls	r3, r2
 8001cf0:	68fa      	ldr	r2, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cf6:	492f      	ldr	r1, [pc, #188]	@ (8001db4 <HAL_GPIO_Init+0x2bc>)
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	089b      	lsrs	r3, r3, #2
 8001cfc:	3302      	adds	r3, #2
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d006      	beq.n	8001d1e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d10:	4b2d      	ldr	r3, [pc, #180]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	492c      	ldr	r1, [pc, #176]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	608b      	str	r3, [r1, #8]
 8001d1c:	e006      	b.n	8001d2c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d20:	689a      	ldr	r2, [r3, #8]
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	43db      	mvns	r3, r3
 8001d26:	4928      	ldr	r1, [pc, #160]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d28:	4013      	ands	r3, r2
 8001d2a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	685b      	ldr	r3, [r3, #4]
 8001d30:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d006      	beq.n	8001d46 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d38:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d3a:	68da      	ldr	r2, [r3, #12]
 8001d3c:	4922      	ldr	r1, [pc, #136]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d3e:	69bb      	ldr	r3, [r7, #24]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	60cb      	str	r3, [r1, #12]
 8001d44:	e006      	b.n	8001d54 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d48:	68da      	ldr	r2, [r3, #12]
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	491e      	ldr	r1, [pc, #120]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d50:	4013      	ands	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d60:	4b19      	ldr	r3, [pc, #100]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d62:	685a      	ldr	r2, [r3, #4]
 8001d64:	4918      	ldr	r1, [pc, #96]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	604b      	str	r3, [r1, #4]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d6e:	4b16      	ldr	r3, [pc, #88]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4914      	ldr	r1, [pc, #80]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d021      	beq.n	8001dcc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b0f      	ldr	r3, [pc, #60]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	490e      	ldr	r1, [pc, #56]	@ (8001dc8 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	600b      	str	r3, [r1, #0]
 8001d94:	e021      	b.n	8001dda <HAL_GPIO_Init+0x2e2>
 8001d96:	bf00      	nop
 8001d98:	10320000 	.word	0x10320000
 8001d9c:	10310000 	.word	0x10310000
 8001da0:	10220000 	.word	0x10220000
 8001da4:	10210000 	.word	0x10210000
 8001da8:	10120000 	.word	0x10120000
 8001dac:	10110000 	.word	0x10110000
 8001db0:	40021000 	.word	0x40021000
 8001db4:	40010000 	.word	0x40010000
 8001db8:	40010800 	.word	0x40010800
 8001dbc:	40010c00 	.word	0x40010c00
 8001dc0:	40011000 	.word	0x40011000
 8001dc4:	40011400 	.word	0x40011400
 8001dc8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8001dfc <HAL_GPIO_Init+0x304>)
 8001dce:	681a      	ldr	r2, [r3, #0]
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4909      	ldr	r1, [pc, #36]	@ (8001dfc <HAL_GPIO_Init+0x304>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ddc:	3301      	adds	r3, #1
 8001dde:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001de6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f47f ae8e 	bne.w	8001b0c <HAL_GPIO_Init+0x14>
  }
}
 8001df0:	bf00      	nop
 8001df2:	bf00      	nop
 8001df4:	372c      	adds	r7, #44	@ 0x2c
 8001df6:	46bd      	mov	sp, r7
 8001df8:	bc80      	pop	{r7}
 8001dfa:	4770      	bx	lr
 8001dfc:	40010400 	.word	0x40010400

08001e00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	6078      	str	r0, [r7, #4]
 8001e08:	460b      	mov	r3, r1
 8001e0a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689a      	ldr	r2, [r3, #8]
 8001e10:	887b      	ldrh	r3, [r7, #2]
 8001e12:	4013      	ands	r3, r2
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d002      	beq.n	8001e1e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e18:	2301      	movs	r3, #1
 8001e1a:	73fb      	strb	r3, [r7, #15]
 8001e1c:	e001      	b.n	8001e22 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr

08001e2e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e2e:	b480      	push	{r7}
 8001e30:	b083      	sub	sp, #12
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	6078      	str	r0, [r7, #4]
 8001e36:	460b      	mov	r3, r1
 8001e38:	807b      	strh	r3, [r7, #2]
 8001e3a:	4613      	mov	r3, r2
 8001e3c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e3e:	787b      	ldrb	r3, [r7, #1]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e44:	887a      	ldrh	r2, [r7, #2]
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e4a:	e003      	b.n	8001e54 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	041a      	lsls	r2, r3, #16
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	611a      	str	r2, [r3, #16]
}
 8001e54:	bf00      	nop
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bc80      	pop	{r7}
 8001e5c:	4770      	bx	lr

08001e5e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e5e:	b480      	push	{r7}
 8001e60:	b085      	sub	sp, #20
 8001e62:	af00      	add	r7, sp, #0
 8001e64:	6078      	str	r0, [r7, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68db      	ldr	r3, [r3, #12]
 8001e6e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e70:	887a      	ldrh	r2, [r7, #2]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	4013      	ands	r3, r2
 8001e76:	041a      	lsls	r2, r3, #16
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	43d9      	mvns	r1, r3
 8001e7c:	887b      	ldrh	r3, [r7, #2]
 8001e7e:	400b      	ands	r3, r1
 8001e80:	431a      	orrs	r2, r3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]
}
 8001e86:	bf00      	nop
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b084      	sub	sp, #16
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e12b      	b.n	80020fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d106      	bne.n	8001ebc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f7ff fc00 	bl	80016bc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2224      	movs	r2, #36	@ 0x24
 8001ec0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 0201 	bic.w	r2, r2, #1
 8001ed2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001ee2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ef2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ef4:	f001 f960 	bl	80031b8 <HAL_RCC_GetPCLK1Freq>
 8001ef8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	4a81      	ldr	r2, [pc, #516]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f00:	4293      	cmp	r3, r2
 8001f02:	d807      	bhi.n	8001f14 <HAL_I2C_Init+0x84>
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	4a80      	ldr	r2, [pc, #512]	@ (8002108 <HAL_I2C_Init+0x278>)
 8001f08:	4293      	cmp	r3, r2
 8001f0a:	bf94      	ite	ls
 8001f0c:	2301      	movls	r3, #1
 8001f0e:	2300      	movhi	r3, #0
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	e006      	b.n	8001f22 <HAL_I2C_Init+0x92>
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	4a7d      	ldr	r2, [pc, #500]	@ (800210c <HAL_I2C_Init+0x27c>)
 8001f18:	4293      	cmp	r3, r2
 8001f1a:	bf94      	ite	ls
 8001f1c:	2301      	movls	r3, #1
 8001f1e:	2300      	movhi	r3, #0
 8001f20:	b2db      	uxtb	r3, r3
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e0e7      	b.n	80020fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	4a78      	ldr	r2, [pc, #480]	@ (8002110 <HAL_I2C_Init+0x280>)
 8001f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001f32:	0c9b      	lsrs	r3, r3, #18
 8001f34:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	68ba      	ldr	r2, [r7, #8]
 8001f46:	430a      	orrs	r2, r1
 8001f48:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	6a1b      	ldr	r3, [r3, #32]
 8001f50:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	4a6a      	ldr	r2, [pc, #424]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d802      	bhi.n	8001f64 <HAL_I2C_Init+0xd4>
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	3301      	adds	r3, #1
 8001f62:	e009      	b.n	8001f78 <HAL_I2C_Init+0xe8>
 8001f64:	68bb      	ldr	r3, [r7, #8]
 8001f66:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001f6a:	fb02 f303 	mul.w	r3, r2, r3
 8001f6e:	4a69      	ldr	r2, [pc, #420]	@ (8002114 <HAL_I2C_Init+0x284>)
 8001f70:	fba2 2303 	umull	r2, r3, r2, r3
 8001f74:	099b      	lsrs	r3, r3, #6
 8001f76:	3301      	adds	r3, #1
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6812      	ldr	r2, [r2, #0]
 8001f7c:	430b      	orrs	r3, r1
 8001f7e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	69db      	ldr	r3, [r3, #28]
 8001f86:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001f8a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	495c      	ldr	r1, [pc, #368]	@ (8002104 <HAL_I2C_Init+0x274>)
 8001f94:	428b      	cmp	r3, r1
 8001f96:	d819      	bhi.n	8001fcc <HAL_I2C_Init+0x13c>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	1e59      	subs	r1, r3, #1
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	005b      	lsls	r3, r3, #1
 8001fa2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fa6:	1c59      	adds	r1, r3, #1
 8001fa8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fac:	400b      	ands	r3, r1
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d00a      	beq.n	8001fc8 <HAL_I2C_Init+0x138>
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	1e59      	subs	r1, r3, #1
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	005b      	lsls	r3, r3, #1
 8001fbc:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fc0:	3301      	adds	r3, #1
 8001fc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc6:	e051      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fc8:	2304      	movs	r3, #4
 8001fca:	e04f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <HAL_I2C_Init+0x168>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e58      	subs	r0, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	6859      	ldr	r1, [r3, #4]
 8001fdc:	460b      	mov	r3, r1
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	440b      	add	r3, r1
 8001fe2:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fe6:	3301      	adds	r3, #1
 8001fe8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	bf0c      	ite	eq
 8001ff0:	2301      	moveq	r3, #1
 8001ff2:	2300      	movne	r3, #0
 8001ff4:	b2db      	uxtb	r3, r3
 8001ff6:	e012      	b.n	800201e <HAL_I2C_Init+0x18e>
 8001ff8:	68fb      	ldr	r3, [r7, #12]
 8001ffa:	1e58      	subs	r0, r3, #1
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6859      	ldr	r1, [r3, #4]
 8002000:	460b      	mov	r3, r1
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	0099      	lsls	r1, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	fbb0 f3f3 	udiv	r3, r0, r3
 800200e:	3301      	adds	r3, #1
 8002010:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	2b00      	cmp	r3, #0
 8002020:	d001      	beq.n	8002026 <HAL_I2C_Init+0x196>
 8002022:	2301      	movs	r3, #1
 8002024:	e022      	b.n	800206c <HAL_I2C_Init+0x1dc>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d10e      	bne.n	800204c <HAL_I2C_Init+0x1bc>
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	1e58      	subs	r0, r3, #1
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6859      	ldr	r1, [r3, #4]
 8002036:	460b      	mov	r3, r1
 8002038:	005b      	lsls	r3, r3, #1
 800203a:	440b      	add	r3, r1
 800203c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002040:	3301      	adds	r3, #1
 8002042:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002046:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800204a:	e00f      	b.n	800206c <HAL_I2C_Init+0x1dc>
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	1e58      	subs	r0, r3, #1
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6859      	ldr	r1, [r3, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	440b      	add	r3, r1
 800205a:	0099      	lsls	r1, r3, #2
 800205c:	440b      	add	r3, r1
 800205e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002062:	3301      	adds	r3, #1
 8002064:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002068:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	6809      	ldr	r1, [r1, #0]
 8002070:	4313      	orrs	r3, r2
 8002072:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	69da      	ldr	r2, [r3, #28]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6a1b      	ldr	r3, [r3, #32]
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	430a      	orrs	r2, r1
 800208e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800209a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800209e:	687a      	ldr	r2, [r7, #4]
 80020a0:	6911      	ldr	r1, [r2, #16]
 80020a2:	687a      	ldr	r2, [r7, #4]
 80020a4:	68d2      	ldr	r2, [r2, #12]
 80020a6:	4311      	orrs	r1, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	6812      	ldr	r2, [r2, #0]
 80020ac:	430b      	orrs	r3, r1
 80020ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	68db      	ldr	r3, [r3, #12]
 80020b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	695a      	ldr	r2, [r3, #20]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0201 	orr.w	r2, r2, #1
 80020da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2200      	movs	r2, #0
 80020e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2220      	movs	r2, #32
 80020e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	000186a0 	.word	0x000186a0
 8002108:	001e847f 	.word	0x001e847f
 800210c:	003d08ff 	.word	0x003d08ff
 8002110:	431bde83 	.word	0x431bde83
 8002114:	10624dd3 	.word	0x10624dd3

08002118 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b088      	sub	sp, #32
 800211c:	af02      	add	r7, sp, #8
 800211e:	60f8      	str	r0, [r7, #12]
 8002120:	607a      	str	r2, [r7, #4]
 8002122:	461a      	mov	r2, r3
 8002124:	460b      	mov	r3, r1
 8002126:	817b      	strh	r3, [r7, #10]
 8002128:	4613      	mov	r3, r2
 800212a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800212c:	f7ff fbfa 	bl	8001924 <HAL_GetTick>
 8002130:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002138:	b2db      	uxtb	r3, r3
 800213a:	2b20      	cmp	r3, #32
 800213c:	f040 80e0 	bne.w	8002300 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	9300      	str	r3, [sp, #0]
 8002144:	2319      	movs	r3, #25
 8002146:	2201      	movs	r2, #1
 8002148:	4970      	ldr	r1, [pc, #448]	@ (800230c <HAL_I2C_Master_Transmit+0x1f4>)
 800214a:	68f8      	ldr	r0, [r7, #12]
 800214c:	f000 fa92 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002156:	2302      	movs	r3, #2
 8002158:	e0d3      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002160:	2b01      	cmp	r3, #1
 8002162:	d101      	bne.n	8002168 <HAL_I2C_Master_Transmit+0x50>
 8002164:	2302      	movs	r3, #2
 8002166:	e0cc      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	2201      	movs	r2, #1
 800216c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f003 0301 	and.w	r3, r3, #1
 800217a:	2b01      	cmp	r3, #1
 800217c:	d007      	beq.n	800218e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	f042 0201 	orr.w	r2, r2, #1
 800218c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800219c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2221      	movs	r2, #33	@ 0x21
 80021a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2210      	movs	r2, #16
 80021aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	2200      	movs	r2, #0
 80021b2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	687a      	ldr	r2, [r7, #4]
 80021b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	893a      	ldrh	r2, [r7, #8]
 80021be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	4a50      	ldr	r2, [pc, #320]	@ (8002310 <HAL_I2C_Master_Transmit+0x1f8>)
 80021ce:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021d0:	8979      	ldrh	r1, [r7, #10]
 80021d2:	697b      	ldr	r3, [r7, #20]
 80021d4:	6a3a      	ldr	r2, [r7, #32]
 80021d6:	68f8      	ldr	r0, [r7, #12]
 80021d8:	f000 f9ca 	bl	8002570 <I2C_MasterRequestWrite>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e08d      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80021e6:	2300      	movs	r3, #0
 80021e8:	613b      	str	r3, [r7, #16]
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	695b      	ldr	r3, [r3, #20]
 80021f0:	613b      	str	r3, [r7, #16]
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	613b      	str	r3, [r7, #16]
 80021fa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021fc:	e066      	b.n	80022cc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	6a39      	ldr	r1, [r7, #32]
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fb50 	bl	80028a8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00d      	beq.n	800222a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002212:	2b04      	cmp	r3, #4
 8002214:	d107      	bne.n	8002226 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	681a      	ldr	r2, [r3, #0]
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002224:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e06b      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222e:	781a      	ldrb	r2, [r3, #0]
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002244:	b29b      	uxth	r3, r3
 8002246:	3b01      	subs	r3, #1
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	3b01      	subs	r3, #1
 8002254:	b29a      	uxth	r2, r3
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	695b      	ldr	r3, [r3, #20]
 8002260:	f003 0304 	and.w	r3, r3, #4
 8002264:	2b04      	cmp	r3, #4
 8002266:	d11b      	bne.n	80022a0 <HAL_I2C_Master_Transmit+0x188>
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800226c:	2b00      	cmp	r3, #0
 800226e:	d017      	beq.n	80022a0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002274:	781a      	ldrb	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800228a:	b29b      	uxth	r3, r3
 800228c:	3b01      	subs	r3, #1
 800228e:	b29a      	uxth	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002298:	3b01      	subs	r3, #1
 800229a:	b29a      	uxth	r2, r3
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022a0:	697a      	ldr	r2, [r7, #20]
 80022a2:	6a39      	ldr	r1, [r7, #32]
 80022a4:	68f8      	ldr	r0, [r7, #12]
 80022a6:	f000 fb47 	bl	8002938 <I2C_WaitOnBTFFlagUntilTimeout>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d00d      	beq.n	80022cc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022b4:	2b04      	cmp	r3, #4
 80022b6:	d107      	bne.n	80022c8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022c6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	e01a      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d194      	bne.n	80021fe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80022e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	2220      	movs	r2, #32
 80022e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80022fc:	2300      	movs	r3, #0
 80022fe:	e000      	b.n	8002302 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002300:	2302      	movs	r3, #2
  }
}
 8002302:	4618      	mov	r0, r3
 8002304:	3718      	adds	r7, #24
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	00100002 	.word	0x00100002
 8002310:	ffff0000 	.word	0xffff0000

08002314 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	@ 0x28
 8002318:	af02      	add	r7, sp, #8
 800231a:	60f8      	str	r0, [r7, #12]
 800231c:	607a      	str	r2, [r7, #4]
 800231e:	603b      	str	r3, [r7, #0]
 8002320:	460b      	mov	r3, r1
 8002322:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002324:	f7ff fafe 	bl	8001924 <HAL_GetTick>
 8002328:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 800232a:	2300      	movs	r3, #0
 800232c:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b20      	cmp	r3, #32
 8002338:	f040 8111 	bne.w	800255e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800233c:	69fb      	ldr	r3, [r7, #28]
 800233e:	9300      	str	r3, [sp, #0]
 8002340:	2319      	movs	r3, #25
 8002342:	2201      	movs	r2, #1
 8002344:	4988      	ldr	r1, [pc, #544]	@ (8002568 <HAL_I2C_IsDeviceReady+0x254>)
 8002346:	68f8      	ldr	r0, [r7, #12]
 8002348:	f000 f994 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d001      	beq.n	8002356 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002352:	2302      	movs	r3, #2
 8002354:	e104      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800235c:	2b01      	cmp	r3, #1
 800235e:	d101      	bne.n	8002364 <HAL_I2C_IsDeviceReady+0x50>
 8002360:	2302      	movs	r3, #2
 8002362:	e0fd      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	2201      	movs	r2, #1
 8002368:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	2b01      	cmp	r3, #1
 8002378:	d007      	beq.n	800238a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	681a      	ldr	r2, [r3, #0]
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f042 0201 	orr.w	r2, r2, #1
 8002388:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002398:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2224      	movs	r2, #36	@ 0x24
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	4a70      	ldr	r2, [pc, #448]	@ (800256c <HAL_I2C_IsDeviceReady+0x258>)
 80023ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80023bc:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	9300      	str	r3, [sp, #0]
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2200      	movs	r2, #0
 80023c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f952 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d00d      	beq.n	80023f2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023e4:	d103      	bne.n	80023ee <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023ec:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80023ee:	2303      	movs	r3, #3
 80023f0:	e0b6      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80023f2:	897b      	ldrh	r3, [r7, #10]
 80023f4:	b2db      	uxtb	r3, r3
 80023f6:	461a      	mov	r2, r3
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002400:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002402:	f7ff fa8f 	bl	8001924 <HAL_GetTick>
 8002406:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	bf0c      	ite	eq
 8002416:	2301      	moveq	r3, #1
 8002418:	2300      	movne	r3, #0
 800241a:	b2db      	uxtb	r3, r3
 800241c:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	695b      	ldr	r3, [r3, #20]
 8002424:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002428:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800242c:	bf0c      	ite	eq
 800242e:	2301      	moveq	r3, #1
 8002430:	2300      	movne	r3, #0
 8002432:	b2db      	uxtb	r3, r3
 8002434:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002436:	e025      	b.n	8002484 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002438:	f7ff fa74 	bl	8001924 <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d302      	bcc.n	800244e <HAL_I2C_IsDeviceReady+0x13a>
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d103      	bne.n	8002456 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22a0      	movs	r2, #160	@ 0xa0
 8002452:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	695b      	ldr	r3, [r3, #20]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b02      	cmp	r3, #2
 8002462:	bf0c      	ite	eq
 8002464:	2301      	moveq	r3, #1
 8002466:	2300      	movne	r3, #0
 8002468:	b2db      	uxtb	r3, r3
 800246a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695b      	ldr	r3, [r3, #20]
 8002472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002476:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247a:	bf0c      	ite	eq
 800247c:	2301      	moveq	r3, #1
 800247e:	2300      	movne	r3, #0
 8002480:	b2db      	uxtb	r3, r3
 8002482:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800248a:	b2db      	uxtb	r3, r3
 800248c:	2ba0      	cmp	r3, #160	@ 0xa0
 800248e:	d005      	beq.n	800249c <HAL_I2C_IsDeviceReady+0x188>
 8002490:	7dfb      	ldrb	r3, [r7, #23]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d102      	bne.n	800249c <HAL_I2C_IsDeviceReady+0x188>
 8002496:	7dbb      	ldrb	r3, [r7, #22]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d0cd      	beq.n	8002438 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	2220      	movs	r2, #32
 80024a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	695b      	ldr	r3, [r3, #20]
 80024aa:	f003 0302 	and.w	r3, r3, #2
 80024ae:	2b02      	cmp	r3, #2
 80024b0:	d129      	bne.n	8002506 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024c0:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024c2:	2300      	movs	r3, #0
 80024c4:	613b      	str	r3, [r7, #16]
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	695b      	ldr	r3, [r3, #20]
 80024cc:	613b      	str	r3, [r7, #16]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	9300      	str	r3, [sp, #0]
 80024dc:	2319      	movs	r3, #25
 80024de:	2201      	movs	r2, #1
 80024e0:	4921      	ldr	r1, [pc, #132]	@ (8002568 <HAL_I2C_IsDeviceReady+0x254>)
 80024e2:	68f8      	ldr	r0, [r7, #12]
 80024e4:	f000 f8c6 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e036      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	2220      	movs	r2, #32
 80024f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	2200      	movs	r2, #0
 80024fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002502:	2300      	movs	r3, #0
 8002504:	e02c      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002514:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800251e:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	9300      	str	r3, [sp, #0]
 8002524:	2319      	movs	r3, #25
 8002526:	2201      	movs	r2, #1
 8002528:	490f      	ldr	r1, [pc, #60]	@ (8002568 <HAL_I2C_IsDeviceReady+0x254>)
 800252a:	68f8      	ldr	r0, [r7, #12]
 800252c:	f000 f8a2 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e012      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	3301      	adds	r3, #1
 800253e:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002540:	69ba      	ldr	r2, [r7, #24]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	429a      	cmp	r2, r3
 8002546:	f4ff af32 	bcc.w	80023ae <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2220      	movs	r2, #32
 800254e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e000      	b.n	8002560 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800255e:	2302      	movs	r3, #2
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3720      	adds	r7, #32
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}
 8002568:	00100002 	.word	0x00100002
 800256c:	ffff0000 	.word	0xffff0000

08002570 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b088      	sub	sp, #32
 8002574:	af02      	add	r7, sp, #8
 8002576:	60f8      	str	r0, [r7, #12]
 8002578:	607a      	str	r2, [r7, #4]
 800257a:	603b      	str	r3, [r7, #0]
 800257c:	460b      	mov	r3, r1
 800257e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002584:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2b08      	cmp	r3, #8
 800258a:	d006      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2b01      	cmp	r3, #1
 8002590:	d003      	beq.n	800259a <I2C_MasterRequestWrite+0x2a>
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002598:	d108      	bne.n	80025ac <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025a8:	601a      	str	r2, [r3, #0]
 80025aa:	e00b      	b.n	80025c4 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025b0:	2b12      	cmp	r3, #18
 80025b2:	d107      	bne.n	80025c4 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	681a      	ldr	r2, [r3, #0]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80025c2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	9300      	str	r3, [sp, #0]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f000 f84f 	bl	8002674 <I2C_WaitOnFlagUntilTimeout>
 80025d6:	4603      	mov	r3, r0
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d00d      	beq.n	80025f8 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025ea:	d103      	bne.n	80025f4 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025f2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e035      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002600:	d108      	bne.n	8002614 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002602:	897b      	ldrh	r3, [r7, #10]
 8002604:	b2db      	uxtb	r3, r3
 8002606:	461a      	mov	r2, r3
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002610:	611a      	str	r2, [r3, #16]
 8002612:	e01b      	b.n	800264c <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002614:	897b      	ldrh	r3, [r7, #10]
 8002616:	11db      	asrs	r3, r3, #7
 8002618:	b2db      	uxtb	r3, r3
 800261a:	f003 0306 	and.w	r3, r3, #6
 800261e:	b2db      	uxtb	r3, r3
 8002620:	f063 030f 	orn	r3, r3, #15
 8002624:	b2da      	uxtb	r2, r3
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	687a      	ldr	r2, [r7, #4]
 8002630:	490e      	ldr	r1, [pc, #56]	@ (800266c <I2C_MasterRequestWrite+0xfc>)
 8002632:	68f8      	ldr	r0, [r7, #12]
 8002634:	f000 f898 	bl	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002638:	4603      	mov	r3, r0
 800263a:	2b00      	cmp	r3, #0
 800263c:	d001      	beq.n	8002642 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800263e:	2301      	movs	r3, #1
 8002640:	e010      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002642:	897b      	ldrh	r3, [r7, #10]
 8002644:	b2da      	uxtb	r2, r3
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	4907      	ldr	r1, [pc, #28]	@ (8002670 <I2C_MasterRequestWrite+0x100>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f000 f888 	bl	8002768 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002658:	4603      	mov	r3, r0
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	00010008 	.word	0x00010008
 8002670:	00010002 	.word	0x00010002

08002674 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	4613      	mov	r3, r2
 8002682:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002684:	e048      	b.n	8002718 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f1b3 3fff 	cmp.w	r3, #4294967295
 800268c:	d044      	beq.n	8002718 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800268e:	f7ff f949 	bl	8001924 <HAL_GetTick>
 8002692:	4602      	mov	r2, r0
 8002694:	69bb      	ldr	r3, [r7, #24]
 8002696:	1ad3      	subs	r3, r2, r3
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	429a      	cmp	r2, r3
 800269c:	d302      	bcc.n	80026a4 <I2C_WaitOnFlagUntilTimeout+0x30>
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d139      	bne.n	8002718 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	0c1b      	lsrs	r3, r3, #16
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b01      	cmp	r3, #1
 80026ac:	d10d      	bne.n	80026ca <I2C_WaitOnFlagUntilTimeout+0x56>
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695b      	ldr	r3, [r3, #20]
 80026b4:	43da      	mvns	r2, r3
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4013      	ands	r3, r2
 80026ba:	b29b      	uxth	r3, r3
 80026bc:	2b00      	cmp	r3, #0
 80026be:	bf0c      	ite	eq
 80026c0:	2301      	moveq	r3, #1
 80026c2:	2300      	movne	r3, #0
 80026c4:	b2db      	uxtb	r3, r3
 80026c6:	461a      	mov	r2, r3
 80026c8:	e00c      	b.n	80026e4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	699b      	ldr	r3, [r3, #24]
 80026d0:	43da      	mvns	r2, r3
 80026d2:	68bb      	ldr	r3, [r7, #8]
 80026d4:	4013      	ands	r3, r2
 80026d6:	b29b      	uxth	r3, r3
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	79fb      	ldrb	r3, [r7, #7]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d116      	bne.n	8002718 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	2200      	movs	r2, #0
 80026ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	2220      	movs	r2, #32
 80026f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	2200      	movs	r2, #0
 80026fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	f043 0220 	orr.w	r2, r3, #32
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	2200      	movs	r2, #0
 8002710:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002714:	2301      	movs	r3, #1
 8002716:	e023      	b.n	8002760 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	0c1b      	lsrs	r3, r3, #16
 800271c:	b2db      	uxtb	r3, r3
 800271e:	2b01      	cmp	r3, #1
 8002720:	d10d      	bne.n	800273e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	695b      	ldr	r3, [r3, #20]
 8002728:	43da      	mvns	r2, r3
 800272a:	68bb      	ldr	r3, [r7, #8]
 800272c:	4013      	ands	r3, r2
 800272e:	b29b      	uxth	r3, r3
 8002730:	2b00      	cmp	r3, #0
 8002732:	bf0c      	ite	eq
 8002734:	2301      	moveq	r3, #1
 8002736:	2300      	movne	r3, #0
 8002738:	b2db      	uxtb	r3, r3
 800273a:	461a      	mov	r2, r3
 800273c:	e00c      	b.n	8002758 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	43da      	mvns	r2, r3
 8002746:	68bb      	ldr	r3, [r7, #8]
 8002748:	4013      	ands	r3, r2
 800274a:	b29b      	uxth	r3, r3
 800274c:	2b00      	cmp	r3, #0
 800274e:	bf0c      	ite	eq
 8002750:	2301      	moveq	r3, #1
 8002752:	2300      	movne	r3, #0
 8002754:	b2db      	uxtb	r3, r3
 8002756:	461a      	mov	r2, r3
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	429a      	cmp	r2, r3
 800275c:	d093      	beq.n	8002686 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b084      	sub	sp, #16
 800276c:	af00      	add	r7, sp, #0
 800276e:	60f8      	str	r0, [r7, #12]
 8002770:	60b9      	str	r1, [r7, #8]
 8002772:	607a      	str	r2, [r7, #4]
 8002774:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002776:	e071      	b.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002782:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002786:	d123      	bne.n	80027d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	681a      	ldr	r2, [r3, #0]
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002796:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80027a0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2220      	movs	r2, #32
 80027ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	2200      	movs	r2, #0
 80027b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	f043 0204 	orr.w	r2, r3, #4
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e067      	b.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027d6:	d041      	beq.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80027d8:	f7ff f8a4 	bl	8001924 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	687a      	ldr	r2, [r7, #4]
 80027e4:	429a      	cmp	r2, r3
 80027e6:	d302      	bcc.n	80027ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d136      	bne.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	b2db      	uxtb	r3, r3
 80027f4:	2b01      	cmp	r3, #1
 80027f6:	d10c      	bne.n	8002812 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	43da      	mvns	r2, r3
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	4013      	ands	r3, r2
 8002804:	b29b      	uxth	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	bf14      	ite	ne
 800280a:	2301      	movne	r3, #1
 800280c:	2300      	moveq	r3, #0
 800280e:	b2db      	uxtb	r3, r3
 8002810:	e00b      	b.n	800282a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	699b      	ldr	r3, [r3, #24]
 8002818:	43da      	mvns	r2, r3
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4013      	ands	r3, r2
 800281e:	b29b      	uxth	r3, r3
 8002820:	2b00      	cmp	r3, #0
 8002822:	bf14      	ite	ne
 8002824:	2301      	movne	r3, #1
 8002826:	2300      	moveq	r3, #0
 8002828:	b2db      	uxtb	r3, r3
 800282a:	2b00      	cmp	r3, #0
 800282c:	d016      	beq.n	800285c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2200      	movs	r2, #0
 8002832:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2220      	movs	r2, #32
 8002838:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2200      	movs	r2, #0
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002848:	f043 0220 	orr.w	r2, r3, #32
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2200      	movs	r2, #0
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002858:	2301      	movs	r3, #1
 800285a:	e021      	b.n	80028a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	0c1b      	lsrs	r3, r3, #16
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b01      	cmp	r3, #1
 8002864:	d10c      	bne.n	8002880 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	695b      	ldr	r3, [r3, #20]
 800286c:	43da      	mvns	r2, r3
 800286e:	68bb      	ldr	r3, [r7, #8]
 8002870:	4013      	ands	r3, r2
 8002872:	b29b      	uxth	r3, r3
 8002874:	2b00      	cmp	r3, #0
 8002876:	bf14      	ite	ne
 8002878:	2301      	movne	r3, #1
 800287a:	2300      	moveq	r3, #0
 800287c:	b2db      	uxtb	r3, r3
 800287e:	e00b      	b.n	8002898 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	699b      	ldr	r3, [r3, #24]
 8002886:	43da      	mvns	r2, r3
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	4013      	ands	r3, r2
 800288c:	b29b      	uxth	r3, r3
 800288e:	2b00      	cmp	r3, #0
 8002890:	bf14      	ite	ne
 8002892:	2301      	movne	r3, #1
 8002894:	2300      	moveq	r3, #0
 8002896:	b2db      	uxtb	r3, r3
 8002898:	2b00      	cmp	r3, #0
 800289a:	f47f af6d 	bne.w	8002778 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800289e:	2300      	movs	r3, #0
}
 80028a0:	4618      	mov	r0, r3
 80028a2:	3710      	adds	r7, #16
 80028a4:	46bd      	mov	sp, r7
 80028a6:	bd80      	pop	{r7, pc}

080028a8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80028b4:	e034      	b.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80028b6:	68f8      	ldr	r0, [r7, #12]
 80028b8:	f000 f886 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80028c2:	2301      	movs	r3, #1
 80028c4:	e034      	b.n	8002930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028cc:	d028      	beq.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028ce:	f7ff f829 	bl	8001924 <HAL_GetTick>
 80028d2:	4602      	mov	r2, r0
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	1ad3      	subs	r3, r2, r3
 80028d8:	68ba      	ldr	r2, [r7, #8]
 80028da:	429a      	cmp	r2, r3
 80028dc:	d302      	bcc.n	80028e4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d11d      	bne.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	695b      	ldr	r3, [r3, #20]
 80028ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028ee:	2b80      	cmp	r3, #128	@ 0x80
 80028f0:	d016      	beq.n	8002920 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	2200      	movs	r2, #0
 80028f6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	2220      	movs	r2, #32
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	2200      	movs	r2, #0
 8002904:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800290c:	f043 0220 	orr.w	r2, r3, #32
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2200      	movs	r2, #0
 8002918:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800291c:	2301      	movs	r3, #1
 800291e:	e007      	b.n	8002930 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	695b      	ldr	r3, [r3, #20]
 8002926:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800292a:	2b80      	cmp	r3, #128	@ 0x80
 800292c:	d1c3      	bne.n	80028b6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800292e:	2300      	movs	r3, #0
}
 8002930:	4618      	mov	r0, r3
 8002932:	3710      	adds	r7, #16
 8002934:	46bd      	mov	sp, r7
 8002936:	bd80      	pop	{r7, pc}

08002938 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002938:	b580      	push	{r7, lr}
 800293a:	b084      	sub	sp, #16
 800293c:	af00      	add	r7, sp, #0
 800293e:	60f8      	str	r0, [r7, #12]
 8002940:	60b9      	str	r1, [r7, #8]
 8002942:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002944:	e034      	b.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002946:	68f8      	ldr	r0, [r7, #12]
 8002948:	f000 f83e 	bl	80029c8 <I2C_IsAcknowledgeFailed>
 800294c:	4603      	mov	r3, r0
 800294e:	2b00      	cmp	r3, #0
 8002950:	d001      	beq.n	8002956 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e034      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002956:	68bb      	ldr	r3, [r7, #8]
 8002958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295c:	d028      	beq.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800295e:	f7fe ffe1 	bl	8001924 <HAL_GetTick>
 8002962:	4602      	mov	r2, r0
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	1ad3      	subs	r3, r2, r3
 8002968:	68ba      	ldr	r2, [r7, #8]
 800296a:	429a      	cmp	r2, r3
 800296c:	d302      	bcc.n	8002974 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800296e:	68bb      	ldr	r3, [r7, #8]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d11d      	bne.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	695b      	ldr	r3, [r3, #20]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b04      	cmp	r3, #4
 8002980:	d016      	beq.n	80029b0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	2200      	movs	r2, #0
 8002986:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	2220      	movs	r2, #32
 800298c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	2200      	movs	r2, #0
 8002994:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	f043 0220 	orr.w	r2, r3, #32
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80029ac:	2301      	movs	r3, #1
 80029ae:	e007      	b.n	80029c0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	695b      	ldr	r3, [r3, #20]
 80029b6:	f003 0304 	and.w	r3, r3, #4
 80029ba:	2b04      	cmp	r3, #4
 80029bc:	d1c3      	bne.n	8002946 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80029be:	2300      	movs	r3, #0
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}

080029c8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80029c8:	b480      	push	{r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80029de:	d11b      	bne.n	8002a18 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80029e8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2200      	movs	r2, #0
 80029ee:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2220      	movs	r2, #32
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a04:	f043 0204 	orr.w	r2, r3, #4
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002a14:	2301      	movs	r3, #1
 8002a16:	e000      	b.n	8002a1a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	370c      	adds	r7, #12
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bc80      	pop	{r7}
 8002a22:	4770      	bx	lr

08002a24 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e272      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f003 0301 	and.w	r3, r3, #1
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	f000 8087 	beq.w	8002b52 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a44:	4b92      	ldr	r3, [pc, #584]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	f003 030c 	and.w	r3, r3, #12
 8002a4c:	2b04      	cmp	r3, #4
 8002a4e:	d00c      	beq.n	8002a6a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002a50:	4b8f      	ldr	r3, [pc, #572]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f003 030c 	and.w	r3, r3, #12
 8002a58:	2b08      	cmp	r3, #8
 8002a5a:	d112      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
 8002a5c:	4b8c      	ldr	r3, [pc, #560]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a5e:	685b      	ldr	r3, [r3, #4]
 8002a60:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a64:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a68:	d10b      	bne.n	8002a82 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a6a:	4b89      	ldr	r3, [pc, #548]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d06c      	beq.n	8002b50 <HAL_RCC_OscConfig+0x12c>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d168      	bne.n	8002b50 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e24c      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a8a:	d106      	bne.n	8002a9a <HAL_RCC_OscConfig+0x76>
 8002a8c:	4b80      	ldr	r3, [pc, #512]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a7f      	ldr	r2, [pc, #508]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002a92:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	e02e      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x98>
 8002aa2:	4b7b      	ldr	r3, [pc, #492]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a7a      	ldr	r2, [pc, #488]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aa8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aac:	6013      	str	r3, [r2, #0]
 8002aae:	4b78      	ldr	r3, [pc, #480]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a77      	ldr	r2, [pc, #476]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ab4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e01d      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002ac4:	d10c      	bne.n	8002ae0 <HAL_RCC_OscConfig+0xbc>
 8002ac6:	4b72      	ldr	r3, [pc, #456]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	4a71      	ldr	r2, [pc, #452]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002acc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ad0:	6013      	str	r3, [r2, #0]
 8002ad2:	4b6f      	ldr	r3, [pc, #444]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a6e      	ldr	r2, [pc, #440]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ad8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002adc:	6013      	str	r3, [r2, #0]
 8002ade:	e00b      	b.n	8002af8 <HAL_RCC_OscConfig+0xd4>
 8002ae0:	4b6b      	ldr	r3, [pc, #428]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4a6a      	ldr	r2, [pc, #424]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002ae6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002aea:	6013      	str	r3, [r2, #0]
 8002aec:	4b68      	ldr	r3, [pc, #416]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	4a67      	ldr	r2, [pc, #412]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002af2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002af6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d013      	beq.n	8002b28 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b00:	f7fe ff10 	bl	8001924 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b06:	e008      	b.n	8002b1a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b08:	f7fe ff0c 	bl	8001924 <HAL_GetTick>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	693b      	ldr	r3, [r7, #16]
 8002b10:	1ad3      	subs	r3, r2, r3
 8002b12:	2b64      	cmp	r3, #100	@ 0x64
 8002b14:	d901      	bls.n	8002b1a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002b16:	2303      	movs	r3, #3
 8002b18:	e200      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b1a:	4b5d      	ldr	r3, [pc, #372]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d0f0      	beq.n	8002b08 <HAL_RCC_OscConfig+0xe4>
 8002b26:	e014      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7fe fefc 	bl	8001924 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b30:	f7fe fef8 	bl	8001924 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b64      	cmp	r3, #100	@ 0x64
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e1ec      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002b42:	4b53      	ldr	r3, [pc, #332]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x10c>
 8002b4e:	e000      	b.n	8002b52 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0302 	and.w	r3, r3, #2
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d063      	beq.n	8002c26 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002b5e:	4b4c      	ldr	r3, [pc, #304]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f003 030c 	and.w	r3, r3, #12
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002b6a:	4b49      	ldr	r3, [pc, #292]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b6c:	685b      	ldr	r3, [r3, #4]
 8002b6e:	f003 030c 	and.w	r3, r3, #12
 8002b72:	2b08      	cmp	r3, #8
 8002b74:	d11c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
 8002b76:	4b46      	ldr	r3, [pc, #280]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d116      	bne.n	8002bb0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b82:	4b43      	ldr	r3, [pc, #268]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f003 0302 	and.w	r3, r3, #2
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d005      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d001      	beq.n	8002b9a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e1c0      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b9a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	695b      	ldr	r3, [r3, #20]
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	4939      	ldr	r1, [pc, #228]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002baa:	4313      	orrs	r3, r2
 8002bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002bae:	e03a      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d020      	beq.n	8002bfa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002bb8:	4b36      	ldr	r3, [pc, #216]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bba:	2201      	movs	r2, #1
 8002bbc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bbe:	f7fe feb1 	bl	8001924 <HAL_GetTick>
 8002bc2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bc4:	e008      	b.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bc6:	f7fe fead 	bl	8001924 <HAL_GetTick>
 8002bca:	4602      	mov	r2, r0
 8002bcc:	693b      	ldr	r3, [r7, #16]
 8002bce:	1ad3      	subs	r3, r2, r3
 8002bd0:	2b02      	cmp	r3, #2
 8002bd2:	d901      	bls.n	8002bd8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002bd4:	2303      	movs	r3, #3
 8002bd6:	e1a1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002bd8:	4b2d      	ldr	r3, [pc, #180]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f003 0302 	and.w	r3, r3, #2
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d0f0      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002be4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	695b      	ldr	r3, [r3, #20]
 8002bf0:	00db      	lsls	r3, r3, #3
 8002bf2:	4927      	ldr	r1, [pc, #156]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002bf4:	4313      	orrs	r3, r2
 8002bf6:	600b      	str	r3, [r1, #0]
 8002bf8:	e015      	b.n	8002c26 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bfa:	4b26      	ldr	r3, [pc, #152]	@ (8002c94 <HAL_RCC_OscConfig+0x270>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c00:	f7fe fe90 	bl	8001924 <HAL_GetTick>
 8002c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c06:	e008      	b.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c08:	f7fe fe8c 	bl	8001924 <HAL_GetTick>
 8002c0c:	4602      	mov	r2, r0
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	1ad3      	subs	r3, r2, r3
 8002c12:	2b02      	cmp	r3, #2
 8002c14:	d901      	bls.n	8002c1a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002c16:	2303      	movs	r3, #3
 8002c18:	e180      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c1a:	4b1d      	ldr	r3, [pc, #116]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	f003 0302 	and.w	r3, r3, #2
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d1f0      	bne.n	8002c08 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 0308 	and.w	r3, r3, #8
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d03a      	beq.n	8002ca8 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d019      	beq.n	8002c6e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002c3a:	4b17      	ldr	r3, [pc, #92]	@ (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c40:	f7fe fe70 	bl	8001924 <HAL_GetTick>
 8002c44:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c46:	e008      	b.n	8002c5a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c48:	f7fe fe6c 	bl	8001924 <HAL_GetTick>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	1ad3      	subs	r3, r2, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d901      	bls.n	8002c5a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002c56:	2303      	movs	r3, #3
 8002c58:	e160      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002c90 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d0f0      	beq.n	8002c48 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002c66:	2001      	movs	r0, #1
 8002c68:	f000 faea 	bl	8003240 <RCC_Delay>
 8002c6c:	e01c      	b.n	8002ca8 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	@ (8002c98 <HAL_RCC_OscConfig+0x274>)
 8002c70:	2200      	movs	r2, #0
 8002c72:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c74:	f7fe fe56 	bl	8001924 <HAL_GetTick>
 8002c78:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c7a:	e00f      	b.n	8002c9c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c7c:	f7fe fe52 	bl	8001924 <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	2b02      	cmp	r3, #2
 8002c88:	d908      	bls.n	8002c9c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e146      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002c8e:	bf00      	nop
 8002c90:	40021000 	.word	0x40021000
 8002c94:	42420000 	.word	0x42420000
 8002c98:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c9c:	4b92      	ldr	r3, [pc, #584]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002c9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d1e9      	bne.n	8002c7c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	f000 80a6 	beq.w	8002e02 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cba:	4b8b      	ldr	r3, [pc, #556]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10d      	bne.n	8002ce2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	4b88      	ldr	r3, [pc, #544]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cc8:	69db      	ldr	r3, [r3, #28]
 8002cca:	4a87      	ldr	r2, [pc, #540]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ccc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002cd0:	61d3      	str	r3, [r2, #28]
 8002cd2:	4b85      	ldr	r3, [pc, #532]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002cd4:	69db      	ldr	r3, [r3, #28]
 8002cd6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cda:	60bb      	str	r3, [r7, #8]
 8002cdc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ce2:	4b82      	ldr	r3, [pc, #520]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d118      	bne.n	8002d20 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cee:	4b7f      	ldr	r3, [pc, #508]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002cf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cf8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe fe13 	bl	8001924 <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d00:	e008      	b.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d02:	f7fe fe0f 	bl	8001924 <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b64      	cmp	r3, #100	@ 0x64
 8002d0e:	d901      	bls.n	8002d14 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e103      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d14:	4b75      	ldr	r3, [pc, #468]	@ (8002eec <HAL_RCC_OscConfig+0x4c8>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d0f0      	beq.n	8002d02 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	2b01      	cmp	r3, #1
 8002d26:	d106      	bne.n	8002d36 <HAL_RCC_OscConfig+0x312>
 8002d28:	4b6f      	ldr	r3, [pc, #444]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2a:	6a1b      	ldr	r3, [r3, #32]
 8002d2c:	4a6e      	ldr	r2, [pc, #440]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d2e:	f043 0301 	orr.w	r3, r3, #1
 8002d32:	6213      	str	r3, [r2, #32]
 8002d34:	e02d      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d10c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x334>
 8002d3e:	4b6a      	ldr	r3, [pc, #424]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d40:	6a1b      	ldr	r3, [r3, #32]
 8002d42:	4a69      	ldr	r2, [pc, #420]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d44:	f023 0301 	bic.w	r3, r3, #1
 8002d48:	6213      	str	r3, [r2, #32]
 8002d4a:	4b67      	ldr	r3, [pc, #412]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d4c:	6a1b      	ldr	r3, [r3, #32]
 8002d4e:	4a66      	ldr	r2, [pc, #408]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d50:	f023 0304 	bic.w	r3, r3, #4
 8002d54:	6213      	str	r3, [r2, #32]
 8002d56:	e01c      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
 8002d5c:	2b05      	cmp	r3, #5
 8002d5e:	d10c      	bne.n	8002d7a <HAL_RCC_OscConfig+0x356>
 8002d60:	4b61      	ldr	r3, [pc, #388]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d62:	6a1b      	ldr	r3, [r3, #32]
 8002d64:	4a60      	ldr	r2, [pc, #384]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d66:	f043 0304 	orr.w	r3, r3, #4
 8002d6a:	6213      	str	r3, [r2, #32]
 8002d6c:	4b5e      	ldr	r3, [pc, #376]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d6e:	6a1b      	ldr	r3, [r3, #32]
 8002d70:	4a5d      	ldr	r2, [pc, #372]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d72:	f043 0301 	orr.w	r3, r3, #1
 8002d76:	6213      	str	r3, [r2, #32]
 8002d78:	e00b      	b.n	8002d92 <HAL_RCC_OscConfig+0x36e>
 8002d7a:	4b5b      	ldr	r3, [pc, #364]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d7c:	6a1b      	ldr	r3, [r3, #32]
 8002d7e:	4a5a      	ldr	r2, [pc, #360]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d80:	f023 0301 	bic.w	r3, r3, #1
 8002d84:	6213      	str	r3, [r2, #32]
 8002d86:	4b58      	ldr	r3, [pc, #352]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d88:	6a1b      	ldr	r3, [r3, #32]
 8002d8a:	4a57      	ldr	r2, [pc, #348]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002d8c:	f023 0304 	bic.w	r3, r3, #4
 8002d90:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	68db      	ldr	r3, [r3, #12]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d015      	beq.n	8002dc6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d9a:	f7fe fdc3 	bl	8001924 <HAL_GetTick>
 8002d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002da0:	e00a      	b.n	8002db8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002da2:	f7fe fdbf 	bl	8001924 <HAL_GetTick>
 8002da6:	4602      	mov	r2, r0
 8002da8:	693b      	ldr	r3, [r7, #16]
 8002daa:	1ad3      	subs	r3, r2, r3
 8002dac:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e0b1      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002db8:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dba:	6a1b      	ldr	r3, [r3, #32]
 8002dbc:	f003 0302 	and.w	r3, r3, #2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ee      	beq.n	8002da2 <HAL_RCC_OscConfig+0x37e>
 8002dc4:	e014      	b.n	8002df0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dc6:	f7fe fdad 	bl	8001924 <HAL_GetTick>
 8002dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002dcc:	e00a      	b.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dce:	f7fe fda9 	bl	8001924 <HAL_GetTick>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	1ad3      	subs	r3, r2, r3
 8002dd8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d901      	bls.n	8002de4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e09b      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002de4:	4b40      	ldr	r3, [pc, #256]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002de6:	6a1b      	ldr	r3, [r3, #32]
 8002de8:	f003 0302 	and.w	r3, r3, #2
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d1ee      	bne.n	8002dce <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002df0:	7dfb      	ldrb	r3, [r7, #23]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d105      	bne.n	8002e02 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002df6:	4b3c      	ldr	r3, [pc, #240]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002df8:	69db      	ldr	r3, [r3, #28]
 8002dfa:	4a3b      	ldr	r2, [pc, #236]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002dfc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e00:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	69db      	ldr	r3, [r3, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	f000 8087 	beq.w	8002f1a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002e0c:	4b36      	ldr	r3, [pc, #216]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	f003 030c 	and.w	r3, r3, #12
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d061      	beq.n	8002edc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	69db      	ldr	r3, [r3, #28]
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d146      	bne.n	8002eae <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e20:	4b33      	ldr	r3, [pc, #204]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e26:	f7fe fd7d 	bl	8001924 <HAL_GetTick>
 8002e2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e2c:	e008      	b.n	8002e40 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2e:	f7fe fd79 	bl	8001924 <HAL_GetTick>
 8002e32:	4602      	mov	r2, r0
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	2b02      	cmp	r3, #2
 8002e3a:	d901      	bls.n	8002e40 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002e3c:	2303      	movs	r3, #3
 8002e3e:	e06d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e40:	4b29      	ldr	r3, [pc, #164]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d1f0      	bne.n	8002e2e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6a1b      	ldr	r3, [r3, #32]
 8002e50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e54:	d108      	bne.n	8002e68 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002e56:	4b24      	ldr	r3, [pc, #144]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	4921      	ldr	r1, [pc, #132]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	4313      	orrs	r3, r2
 8002e66:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b1f      	ldr	r3, [pc, #124]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a19      	ldr	r1, [r3, #32]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	430b      	orrs	r3, r1
 8002e7a:	491b      	ldr	r1, [pc, #108]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e80:	4b1b      	ldr	r3, [pc, #108]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e86:	f7fe fd4d 	bl	8001924 <HAL_GetTick>
 8002e8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002e8c:	e008      	b.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e8e:	f7fe fd49 	bl	8001924 <HAL_GetTick>
 8002e92:	4602      	mov	r2, r0
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d901      	bls.n	8002ea0 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	e03d      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ea0:	4b11      	ldr	r3, [pc, #68]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d0f0      	beq.n	8002e8e <HAL_RCC_OscConfig+0x46a>
 8002eac:	e035      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002eae:	4b10      	ldr	r3, [pc, #64]	@ (8002ef0 <HAL_RCC_OscConfig+0x4cc>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb4:	f7fe fd36 	bl	8001924 <HAL_GetTick>
 8002eb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002eba:	e008      	b.n	8002ece <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ebc:	f7fe fd32 	bl	8001924 <HAL_GetTick>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	2b02      	cmp	r3, #2
 8002ec8:	d901      	bls.n	8002ece <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002eca:	2303      	movs	r3, #3
 8002ecc:	e026      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ece:	4b06      	ldr	r3, [pc, #24]	@ (8002ee8 <HAL_RCC_OscConfig+0x4c4>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d1f0      	bne.n	8002ebc <HAL_RCC_OscConfig+0x498>
 8002eda:	e01e      	b.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	69db      	ldr	r3, [r3, #28]
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d107      	bne.n	8002ef4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e019      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
 8002ee8:	40021000 	.word	0x40021000
 8002eec:	40007000 	.word	0x40007000
 8002ef0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ef4:	4b0b      	ldr	r3, [pc, #44]	@ (8002f24 <HAL_RCC_OscConfig+0x500>)
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a1b      	ldr	r3, [r3, #32]
 8002f04:	429a      	cmp	r2, r3
 8002f06:	d106      	bne.n	8002f16 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f12:	429a      	cmp	r2, r3
 8002f14:	d001      	beq.n	8002f1a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e000      	b.n	8002f1c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002f1a:	2300      	movs	r3, #0
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	3718      	adds	r7, #24
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	40021000 	.word	0x40021000

08002f28 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b084      	sub	sp, #16
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d101      	bne.n	8002f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e0d0      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f3c:	4b6a      	ldr	r3, [pc, #424]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f003 0307 	and.w	r3, r3, #7
 8002f44:	683a      	ldr	r2, [r7, #0]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d910      	bls.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f4a:	4b67      	ldr	r3, [pc, #412]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f023 0207 	bic.w	r2, r3, #7
 8002f52:	4965      	ldr	r1, [pc, #404]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	4313      	orrs	r3, r2
 8002f58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f5a:	4b63      	ldr	r3, [pc, #396]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0307 	and.w	r3, r3, #7
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	429a      	cmp	r2, r3
 8002f66:	d001      	beq.n	8002f6c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002f68:	2301      	movs	r3, #1
 8002f6a:	e0b8      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d020      	beq.n	8002fba <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f003 0304 	and.w	r3, r3, #4
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d005      	beq.n	8002f90 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002f84:	4b59      	ldr	r3, [pc, #356]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	4a58      	ldr	r2, [pc, #352]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f8a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002f8e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f003 0308 	and.w	r3, r3, #8
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d005      	beq.n	8002fa8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002f9c:	4b53      	ldr	r3, [pc, #332]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	4a52      	ldr	r2, [pc, #328]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fa2:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002fa6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	494d      	ldr	r1, [pc, #308]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0301 	and.w	r3, r3, #1
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d040      	beq.n	8003048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b01      	cmp	r3, #1
 8002fcc:	d107      	bne.n	8002fde <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fce:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d115      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e07f      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	2b02      	cmp	r3, #2
 8002fe4:	d107      	bne.n	8002ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fe6:	4b41      	ldr	r3, [pc, #260]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d109      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ff2:	2301      	movs	r3, #1
 8002ff4:	e073      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	4b3d      	ldr	r3, [pc, #244]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d101      	bne.n	8003006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e06b      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003006:	4b39      	ldr	r3, [pc, #228]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003008:	685b      	ldr	r3, [r3, #4]
 800300a:	f023 0203 	bic.w	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	4936      	ldr	r1, [pc, #216]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003014:	4313      	orrs	r3, r2
 8003016:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003018:	f7fe fc84 	bl	8001924 <HAL_GetTick>
 800301c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800301e:	e00a      	b.n	8003036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003020:	f7fe fc80 	bl	8001924 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800302e:	4293      	cmp	r3, r2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e053      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003036:	4b2d      	ldr	r3, [pc, #180]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003038:	685b      	ldr	r3, [r3, #4]
 800303a:	f003 020c 	and.w	r2, r3, #12
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	009b      	lsls	r3, r3, #2
 8003044:	429a      	cmp	r2, r3
 8003046:	d1eb      	bne.n	8003020 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003048:	4b27      	ldr	r3, [pc, #156]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 0307 	and.w	r3, r3, #7
 8003050:	683a      	ldr	r2, [r7, #0]
 8003052:	429a      	cmp	r2, r3
 8003054:	d210      	bcs.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003056:	4b24      	ldr	r3, [pc, #144]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 0207 	bic.w	r2, r3, #7
 800305e:	4922      	ldr	r1, [pc, #136]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	4313      	orrs	r3, r2
 8003064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003066:	4b20      	ldr	r3, [pc, #128]	@ (80030e8 <HAL_RCC_ClockConfig+0x1c0>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f003 0307 	and.w	r3, r3, #7
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d001      	beq.n	8003078 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003074:	2301      	movs	r3, #1
 8003076:	e032      	b.n	80030de <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	d008      	beq.n	8003096 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003084:	4b19      	ldr	r3, [pc, #100]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	4916      	ldr	r1, [pc, #88]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 8003092:	4313      	orrs	r3, r2
 8003094:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0308 	and.w	r3, r3, #8
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d009      	beq.n	80030b6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80030a2:	4b12      	ldr	r3, [pc, #72]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	00db      	lsls	r3, r3, #3
 80030b0:	490e      	ldr	r1, [pc, #56]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	4313      	orrs	r3, r2
 80030b4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80030b6:	f000 f821 	bl	80030fc <HAL_RCC_GetSysClockFreq>
 80030ba:	4602      	mov	r2, r0
 80030bc:	4b0b      	ldr	r3, [pc, #44]	@ (80030ec <HAL_RCC_ClockConfig+0x1c4>)
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	091b      	lsrs	r3, r3, #4
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	490a      	ldr	r1, [pc, #40]	@ (80030f0 <HAL_RCC_ClockConfig+0x1c8>)
 80030c8:	5ccb      	ldrb	r3, [r1, r3]
 80030ca:	fa22 f303 	lsr.w	r3, r2, r3
 80030ce:	4a09      	ldr	r2, [pc, #36]	@ (80030f4 <HAL_RCC_ClockConfig+0x1cc>)
 80030d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80030d2:	4b09      	ldr	r3, [pc, #36]	@ (80030f8 <HAL_RCC_ClockConfig+0x1d0>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe fb2e 	bl	8001738 <HAL_InitTick>

  return HAL_OK;
 80030dc:	2300      	movs	r3, #0
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3710      	adds	r7, #16
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}
 80030e6:	bf00      	nop
 80030e8:	40022000 	.word	0x40022000
 80030ec:	40021000 	.word	0x40021000
 80030f0:	08007834 	.word	0x08007834
 80030f4:	20000008 	.word	0x20000008
 80030f8:	2000000c 	.word	0x2000000c

080030fc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030fc:	b480      	push	{r7}
 80030fe:	b087      	sub	sp, #28
 8003100:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	60fb      	str	r3, [r7, #12]
 8003106:	2300      	movs	r3, #0
 8003108:	60bb      	str	r3, [r7, #8]
 800310a:	2300      	movs	r3, #0
 800310c:	617b      	str	r3, [r7, #20]
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003112:	2300      	movs	r3, #0
 8003114:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003116:	4b1e      	ldr	r3, [pc, #120]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f003 030c 	and.w	r3, r3, #12
 8003122:	2b04      	cmp	r3, #4
 8003124:	d002      	beq.n	800312c <HAL_RCC_GetSysClockFreq+0x30>
 8003126:	2b08      	cmp	r3, #8
 8003128:	d003      	beq.n	8003132 <HAL_RCC_GetSysClockFreq+0x36>
 800312a:	e027      	b.n	800317c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800312e:	613b      	str	r3, [r7, #16]
      break;
 8003130:	e027      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	0c9b      	lsrs	r3, r3, #18
 8003136:	f003 030f 	and.w	r3, r3, #15
 800313a:	4a17      	ldr	r2, [pc, #92]	@ (8003198 <HAL_RCC_GetSysClockFreq+0x9c>)
 800313c:	5cd3      	ldrb	r3, [r2, r3]
 800313e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d010      	beq.n	800316c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800314a:	4b11      	ldr	r3, [pc, #68]	@ (8003190 <HAL_RCC_GetSysClockFreq+0x94>)
 800314c:	685b      	ldr	r3, [r3, #4]
 800314e:	0c5b      	lsrs	r3, r3, #17
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	4a11      	ldr	r2, [pc, #68]	@ (800319c <HAL_RCC_GetSysClockFreq+0xa0>)
 8003156:	5cd3      	ldrb	r3, [r2, r3]
 8003158:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a0d      	ldr	r2, [pc, #52]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800315e:	fb03 f202 	mul.w	r2, r3, r2
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	fbb2 f3f3 	udiv	r3, r2, r3
 8003168:	617b      	str	r3, [r7, #20]
 800316a:	e004      	b.n	8003176 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a0c      	ldr	r2, [pc, #48]	@ (80031a0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003170:	fb02 f303 	mul.w	r3, r2, r3
 8003174:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003176:	697b      	ldr	r3, [r7, #20]
 8003178:	613b      	str	r3, [r7, #16]
      break;
 800317a:	e002      	b.n	8003182 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800317c:	4b05      	ldr	r3, [pc, #20]	@ (8003194 <HAL_RCC_GetSysClockFreq+0x98>)
 800317e:	613b      	str	r3, [r7, #16]
      break;
 8003180:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003182:	693b      	ldr	r3, [r7, #16]
}
 8003184:	4618      	mov	r0, r3
 8003186:	371c      	adds	r7, #28
 8003188:	46bd      	mov	sp, r7
 800318a:	bc80      	pop	{r7}
 800318c:	4770      	bx	lr
 800318e:	bf00      	nop
 8003190:	40021000 	.word	0x40021000
 8003194:	007a1200 	.word	0x007a1200
 8003198:	0800784c 	.word	0x0800784c
 800319c:	0800785c 	.word	0x0800785c
 80031a0:	003d0900 	.word	0x003d0900

080031a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031a8:	4b02      	ldr	r3, [pc, #8]	@ (80031b4 <HAL_RCC_GetHCLKFreq+0x10>)
 80031aa:	681b      	ldr	r3, [r3, #0]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bc80      	pop	{r7}
 80031b2:	4770      	bx	lr
 80031b4:	20000008 	.word	0x20000008

080031b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031bc:	f7ff fff2 	bl	80031a4 <HAL_RCC_GetHCLKFreq>
 80031c0:	4602      	mov	r2, r0
 80031c2:	4b05      	ldr	r3, [pc, #20]	@ (80031d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	0a1b      	lsrs	r3, r3, #8
 80031c8:	f003 0307 	and.w	r3, r3, #7
 80031cc:	4903      	ldr	r1, [pc, #12]	@ (80031dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80031ce:	5ccb      	ldrb	r3, [r1, r3]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	40021000 	.word	0x40021000
 80031dc:	08007844 	.word	0x08007844

080031e0 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	220f      	movs	r2, #15
 80031ee:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80031f0:	4b11      	ldr	r3, [pc, #68]	@ (8003238 <HAL_RCC_GetClockConfig+0x58>)
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0203 	and.w	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80031fc:	4b0e      	ldr	r3, [pc, #56]	@ (8003238 <HAL_RCC_GetClockConfig+0x58>)
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003208:	4b0b      	ldr	r3, [pc, #44]	@ (8003238 <HAL_RCC_GetClockConfig+0x58>)
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003214:	4b08      	ldr	r3, [pc, #32]	@ (8003238 <HAL_RCC_GetClockConfig+0x58>)
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	08db      	lsrs	r3, r3, #3
 800321a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003222:	4b06      	ldr	r3, [pc, #24]	@ (800323c <HAL_RCC_GetClockConfig+0x5c>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0207 	and.w	r2, r3, #7
 800322a:	683b      	ldr	r3, [r7, #0]
 800322c:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr
 8003238:	40021000 	.word	0x40021000
 800323c:	40022000 	.word	0x40022000

08003240 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003240:	b480      	push	{r7}
 8003242:	b085      	sub	sp, #20
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003248:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <RCC_Delay+0x34>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	4a0a      	ldr	r2, [pc, #40]	@ (8003278 <RCC_Delay+0x38>)
 800324e:	fba2 2303 	umull	r2, r3, r2, r3
 8003252:	0a5b      	lsrs	r3, r3, #9
 8003254:	687a      	ldr	r2, [r7, #4]
 8003256:	fb02 f303 	mul.w	r3, r2, r3
 800325a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800325c:	bf00      	nop
  }
  while (Delay --);
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	1e5a      	subs	r2, r3, #1
 8003262:	60fa      	str	r2, [r7, #12]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1f9      	bne.n	800325c <RCC_Delay+0x1c>
}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	3714      	adds	r7, #20
 800326e:	46bd      	mov	sp, r7
 8003270:	bc80      	pop	{r7}
 8003272:	4770      	bx	lr
 8003274:	20000008 	.word	0x20000008
 8003278:	10624dd3 	.word	0x10624dd3

0800327c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d101      	bne.n	800328e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e041      	b.n	8003312 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003294:	b2db      	uxtb	r3, r3
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 f839 	bl	800331a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2202      	movs	r2, #2
 80032ac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	3304      	adds	r3, #4
 80032b8:	4619      	mov	r1, r3
 80032ba:	4610      	mov	r0, r2
 80032bc:	f000 f99c 	bl	80035f8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2201      	movs	r2, #1
 800330c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003310:	2300      	movs	r3, #0
}
 8003312:	4618      	mov	r0, r3
 8003314:	3708      	adds	r7, #8
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}

0800331a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800331a:	b480      	push	{r7}
 800331c:	b083      	sub	sp, #12
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003322:	bf00      	nop
 8003324:	370c      	adds	r7, #12
 8003326:	46bd      	mov	sp, r7
 8003328:	bc80      	pop	{r7}
 800332a:	4770      	bx	lr

0800332c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800332c:	b480      	push	{r7}
 800332e:	b085      	sub	sp, #20
 8003330:	af00      	add	r7, sp, #0
 8003332:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b01      	cmp	r3, #1
 800333e:	d001      	beq.n	8003344 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003340:	2301      	movs	r3, #1
 8003342:	e03a      	b.n	80033ba <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2202      	movs	r2, #2
 8003348:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f042 0201 	orr.w	r2, r2, #1
 800335a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a18      	ldr	r2, [pc, #96]	@ (80033c4 <HAL_TIM_Base_Start_IT+0x98>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d00e      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800336e:	d009      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a14      	ldr	r2, [pc, #80]	@ (80033c8 <HAL_TIM_Base_Start_IT+0x9c>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d004      	beq.n	8003384 <HAL_TIM_Base_Start_IT+0x58>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a13      	ldr	r2, [pc, #76]	@ (80033cc <HAL_TIM_Base_Start_IT+0xa0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d111      	bne.n	80033a8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0307 	and.w	r3, r3, #7
 800338e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2b06      	cmp	r3, #6
 8003394:	d010      	beq.n	80033b8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	681a      	ldr	r2, [r3, #0]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f042 0201 	orr.w	r2, r2, #1
 80033a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033a6:	e007      	b.n	80033b8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	681a      	ldr	r2, [r3, #0]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f042 0201 	orr.w	r2, r2, #1
 80033b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3714      	adds	r7, #20
 80033be:	46bd      	mov	sp, r7
 80033c0:	bc80      	pop	{r7}
 80033c2:	4770      	bx	lr
 80033c4:	40012c00 	.word	0x40012c00
 80033c8:	40000400 	.word	0x40000400
 80033cc:	40000800 	.word	0x40000800

080033d0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	68db      	ldr	r3, [r3, #12]
 80033de:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	691b      	ldr	r3, [r3, #16]
 80033e6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	f003 0302 	and.w	r3, r3, #2
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d020      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d01b      	beq.n	8003434 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f06f 0202 	mvn.w	r2, #2
 8003404:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2201      	movs	r2, #1
 800340a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699b      	ldr	r3, [r3, #24]
 8003412:	f003 0303 	and.w	r3, r3, #3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800341a:	6878      	ldr	r0, [r7, #4]
 800341c:	f000 f8d1 	bl	80035c2 <HAL_TIM_IC_CaptureCallback>
 8003420:	e005      	b.n	800342e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f000 f8c4 	bl	80035b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003428:	6878      	ldr	r0, [r7, #4]
 800342a:	f000 f8d3 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	2200      	movs	r2, #0
 8003432:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	f003 0304 	and.w	r3, r3, #4
 800343a:	2b00      	cmp	r3, #0
 800343c:	d020      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f003 0304 	and.w	r3, r3, #4
 8003444:	2b00      	cmp	r3, #0
 8003446:	d01b      	beq.n	8003480 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	f06f 0204 	mvn.w	r2, #4
 8003450:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2202      	movs	r2, #2
 8003456:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	699b      	ldr	r3, [r3, #24]
 800345e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003462:	2b00      	cmp	r3, #0
 8003464:	d003      	beq.n	800346e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003466:	6878      	ldr	r0, [r7, #4]
 8003468:	f000 f8ab 	bl	80035c2 <HAL_TIM_IC_CaptureCallback>
 800346c:	e005      	b.n	800347a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f89e 	bl	80035b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8ad 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003480:	68bb      	ldr	r3, [r7, #8]
 8003482:	f003 0308 	and.w	r3, r3, #8
 8003486:	2b00      	cmp	r3, #0
 8003488:	d020      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	f003 0308 	and.w	r3, r3, #8
 8003490:	2b00      	cmp	r3, #0
 8003492:	d01b      	beq.n	80034cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f06f 0208 	mvn.w	r2, #8
 800349c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2204      	movs	r2, #4
 80034a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d003      	beq.n	80034ba <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034b2:	6878      	ldr	r0, [r7, #4]
 80034b4:	f000 f885 	bl	80035c2 <HAL_TIM_IC_CaptureCallback>
 80034b8:	e005      	b.n	80034c6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ba:	6878      	ldr	r0, [r7, #4]
 80034bc:	f000 f878 	bl	80035b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f887 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034cc:	68bb      	ldr	r3, [r7, #8]
 80034ce:	f003 0310 	and.w	r3, r3, #16
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d020      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f003 0310 	and.w	r3, r3, #16
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01b      	beq.n	8003518 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f06f 0210 	mvn.w	r2, #16
 80034e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2208      	movs	r2, #8
 80034ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	69db      	ldr	r3, [r3, #28]
 80034f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f85f 	bl	80035c2 <HAL_TIM_IC_CaptureCallback>
 8003504:	e005      	b.n	8003512 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003506:	6878      	ldr	r0, [r7, #4]
 8003508:	f000 f852 	bl	80035b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800350c:	6878      	ldr	r0, [r7, #4]
 800350e:	f000 f861 	bl	80035d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003518:	68bb      	ldr	r3, [r7, #8]
 800351a:	f003 0301 	and.w	r3, r3, #1
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00c      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	f003 0301 	and.w	r3, r3, #1
 8003528:	2b00      	cmp	r3, #0
 800352a:	d007      	beq.n	800353c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f06f 0201 	mvn.w	r2, #1
 8003534:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f7fd fbbc 	bl	8000cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003542:	2b00      	cmp	r3, #0
 8003544:	d00c      	beq.n	8003560 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800354c:	2b00      	cmp	r3, #0
 800354e:	d007      	beq.n	8003560 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003558:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800355a:	6878      	ldr	r0, [r7, #4]
 800355c:	f000 f8c3 	bl	80036e6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003566:	2b00      	cmp	r3, #0
 8003568:	d00c      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003570:	2b00      	cmp	r3, #0
 8003572:	d007      	beq.n	8003584 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800357c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800357e:	6878      	ldr	r0, [r7, #4]
 8003580:	f000 f831 	bl	80035e6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	f003 0320 	and.w	r3, r3, #32
 800358a:	2b00      	cmp	r3, #0
 800358c:	d00c      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0320 	and.w	r3, r3, #32
 8003594:	2b00      	cmp	r3, #0
 8003596:	d007      	beq.n	80035a8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 0220 	mvn.w	r2, #32
 80035a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035a2:	6878      	ldr	r0, [r7, #4]
 80035a4:	f000 f896 	bl	80036d4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035a8:	bf00      	nop
 80035aa:	3710      	adds	r7, #16
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}

080035b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b083      	sub	sp, #12
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	bc80      	pop	{r7}
 80035c0:	4770      	bx	lr

080035c2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80035c2:	b480      	push	{r7}
 80035c4:	b083      	sub	sp, #12
 80035c6:	af00      	add	r7, sp, #0
 80035c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80035ca:	bf00      	nop
 80035cc:	370c      	adds	r7, #12
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bc80      	pop	{r7}
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr

080035e6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035e6:	b480      	push	{r7}
 80035e8:	b083      	sub	sp, #12
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ee:	bf00      	nop
 80035f0:	370c      	adds	r7, #12
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bc80      	pop	{r7}
 80035f6:	4770      	bx	lr

080035f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b085      	sub	sp, #20
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	4a2f      	ldr	r2, [pc, #188]	@ (80036c8 <TIM_Base_SetConfig+0xd0>)
 800360c:	4293      	cmp	r3, r2
 800360e:	d00b      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003616:	d007      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	4a2c      	ldr	r2, [pc, #176]	@ (80036cc <TIM_Base_SetConfig+0xd4>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d003      	beq.n	8003628 <TIM_Base_SetConfig+0x30>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a2b      	ldr	r2, [pc, #172]	@ (80036d0 <TIM_Base_SetConfig+0xd8>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d108      	bne.n	800363a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800362e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	68fa      	ldr	r2, [r7, #12]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a22      	ldr	r2, [pc, #136]	@ (80036c8 <TIM_Base_SetConfig+0xd0>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d00b      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003648:	d007      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	4a1f      	ldr	r2, [pc, #124]	@ (80036cc <TIM_Base_SetConfig+0xd4>)
 800364e:	4293      	cmp	r3, r2
 8003650:	d003      	beq.n	800365a <TIM_Base_SetConfig+0x62>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4a1e      	ldr	r2, [pc, #120]	@ (80036d0 <TIM_Base_SetConfig+0xd8>)
 8003656:	4293      	cmp	r3, r2
 8003658:	d108      	bne.n	800366c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003662:	683b      	ldr	r3, [r7, #0]
 8003664:	68db      	ldr	r3, [r3, #12]
 8003666:	68fa      	ldr	r2, [r7, #12]
 8003668:	4313      	orrs	r3, r2
 800366a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	4313      	orrs	r3, r2
 8003678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	68fa      	ldr	r2, [r7, #12]
 800367e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	689a      	ldr	r2, [r3, #8]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	4a0d      	ldr	r2, [pc, #52]	@ (80036c8 <TIM_Base_SetConfig+0xd0>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d103      	bne.n	80036a0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	691a      	ldr	r2, [r3, #16]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	f003 0301 	and.w	r3, r3, #1
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d005      	beq.n	80036be <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	f023 0201 	bic.w	r2, r3, #1
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	611a      	str	r2, [r3, #16]
  }
}
 80036be:	bf00      	nop
 80036c0:	3714      	adds	r7, #20
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bc80      	pop	{r7}
 80036c6:	4770      	bx	lr
 80036c8:	40012c00 	.word	0x40012c00
 80036cc:	40000400 	.word	0x40000400
 80036d0:	40000800 	.word	0x40000800

080036d4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80036d4:	b480      	push	{r7}
 80036d6:	b083      	sub	sp, #12
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80036dc:	bf00      	nop
 80036de:	370c      	adds	r7, #12
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bc80      	pop	{r7}
 80036e4:	4770      	bx	lr

080036e6 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bc80      	pop	{r7}
 80036f6:	4770      	bx	lr

080036f8 <__NVIC_SetPriority>:
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	6039      	str	r1, [r7, #0]
 8003702:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003708:	2b00      	cmp	r3, #0
 800370a:	db0a      	blt.n	8003722 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	b2da      	uxtb	r2, r3
 8003710:	490c      	ldr	r1, [pc, #48]	@ (8003744 <__NVIC_SetPriority+0x4c>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	0112      	lsls	r2, r2, #4
 8003718:	b2d2      	uxtb	r2, r2
 800371a:	440b      	add	r3, r1
 800371c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003720:	e00a      	b.n	8003738 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	b2da      	uxtb	r2, r3
 8003726:	4908      	ldr	r1, [pc, #32]	@ (8003748 <__NVIC_SetPriority+0x50>)
 8003728:	79fb      	ldrb	r3, [r7, #7]
 800372a:	f003 030f 	and.w	r3, r3, #15
 800372e:	3b04      	subs	r3, #4
 8003730:	0112      	lsls	r2, r2, #4
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	440b      	add	r3, r1
 8003736:	761a      	strb	r2, [r3, #24]
}
 8003738:	bf00      	nop
 800373a:	370c      	adds	r7, #12
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	e000e100 	.word	0xe000e100
 8003748:	e000ed00 	.word	0xe000ed00

0800374c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SysTick_Handler+0x1c>)
 8003752:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003754:	f001 fd38 	bl	80051c8 <xTaskGetSchedulerState>
 8003758:	4603      	mov	r3, r0
 800375a:	2b01      	cmp	r3, #1
 800375c:	d001      	beq.n	8003762 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800375e:	f002 fadb 	bl	8005d18 <xPortSysTickHandler>
  }
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003770:	2100      	movs	r1, #0
 8003772:	f06f 0004 	mvn.w	r0, #4
 8003776:	f7ff ffbf 	bl	80036f8 <__NVIC_SetPriority>
#endif
}
 800377a:	bf00      	nop
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003786:	f3ef 8305 	mrs	r3, IPSR
 800378a:	603b      	str	r3, [r7, #0]
  return(result);
 800378c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800378e:	2b00      	cmp	r3, #0
 8003790:	d003      	beq.n	800379a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003792:	f06f 0305 	mvn.w	r3, #5
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	e00c      	b.n	80037b4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800379a:	4b09      	ldr	r3, [pc, #36]	@ (80037c0 <osKernelInitialize+0x40>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d105      	bne.n	80037ae <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80037a2:	4b07      	ldr	r3, [pc, #28]	@ (80037c0 <osKernelInitialize+0x40>)
 80037a4:	2201      	movs	r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80037a8:	2300      	movs	r3, #0
 80037aa:	607b      	str	r3, [r7, #4]
 80037ac:	e002      	b.n	80037b4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80037ae:	f04f 33ff 	mov.w	r3, #4294967295
 80037b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037b4:	687b      	ldr	r3, [r7, #4]
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	370c      	adds	r7, #12
 80037ba:	46bd      	mov	sp, r7
 80037bc:	bc80      	pop	{r7}
 80037be:	4770      	bx	lr
 80037c0:	20000550 	.word	0x20000550

080037c4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ca:	f3ef 8305 	mrs	r3, IPSR
 80037ce:	603b      	str	r3, [r7, #0]
  return(result);
 80037d0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d003      	beq.n	80037de <osKernelStart+0x1a>
    stat = osErrorISR;
 80037d6:	f06f 0305 	mvn.w	r3, #5
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e010      	b.n	8003800 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037de:	4b0b      	ldr	r3, [pc, #44]	@ (800380c <osKernelStart+0x48>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d109      	bne.n	80037fa <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037e6:	f7ff ffc1 	bl	800376c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ea:	4b08      	ldr	r3, [pc, #32]	@ (800380c <osKernelStart+0x48>)
 80037ec:	2202      	movs	r2, #2
 80037ee:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037f0:	f001 f88a 	bl	8004908 <vTaskStartScheduler>
      stat = osOK;
 80037f4:	2300      	movs	r3, #0
 80037f6:	607b      	str	r3, [r7, #4]
 80037f8:	e002      	b.n	8003800 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037fa:	f04f 33ff 	mov.w	r3, #4294967295
 80037fe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003800:	687b      	ldr	r3, [r7, #4]
}
 8003802:	4618      	mov	r0, r3
 8003804:	3708      	adds	r7, #8
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}
 800380a:	bf00      	nop
 800380c:	20000550 	.word	0x20000550

08003810 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003810:	b580      	push	{r7, lr}
 8003812:	b08e      	sub	sp, #56	@ 0x38
 8003814:	af04      	add	r7, sp, #16
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800381c:	2300      	movs	r3, #0
 800381e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003820:	f3ef 8305 	mrs	r3, IPSR
 8003824:	617b      	str	r3, [r7, #20]
  return(result);
 8003826:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003828:	2b00      	cmp	r3, #0
 800382a:	d17e      	bne.n	800392a <osThreadNew+0x11a>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2b00      	cmp	r3, #0
 8003830:	d07b      	beq.n	800392a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003832:	2380      	movs	r3, #128	@ 0x80
 8003834:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003836:	2318      	movs	r3, #24
 8003838:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800383a:	2300      	movs	r3, #0
 800383c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800383e:	f04f 33ff 	mov.w	r3, #4294967295
 8003842:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d045      	beq.n	80038d6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <osThreadNew+0x48>
        name = attr->name;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699b      	ldr	r3, [r3, #24]
 8003864:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d008      	beq.n	800387e <osThreadNew+0x6e>
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	2b38      	cmp	r3, #56	@ 0x38
 8003870:	d805      	bhi.n	800387e <osThreadNew+0x6e>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	f003 0301 	and.w	r3, r3, #1
 800387a:	2b00      	cmp	r3, #0
 800387c:	d001      	beq.n	8003882 <osThreadNew+0x72>
        return (NULL);
 800387e:	2300      	movs	r3, #0
 8003880:	e054      	b.n	800392c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	695b      	ldr	r3, [r3, #20]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d003      	beq.n	8003892 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	2b00      	cmp	r3, #0
 8003898:	d00e      	beq.n	80038b8 <osThreadNew+0xa8>
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	68db      	ldr	r3, [r3, #12]
 800389e:	2ba7      	cmp	r3, #167	@ 0xa7
 80038a0:	d90a      	bls.n	80038b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d006      	beq.n	80038b8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	695b      	ldr	r3, [r3, #20]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <osThreadNew+0xa8>
        mem = 1;
 80038b2:	2301      	movs	r3, #1
 80038b4:	61bb      	str	r3, [r7, #24]
 80038b6:	e010      	b.n	80038da <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d10c      	bne.n	80038da <osThreadNew+0xca>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	68db      	ldr	r3, [r3, #12]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d108      	bne.n	80038da <osThreadNew+0xca>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	691b      	ldr	r3, [r3, #16]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d104      	bne.n	80038da <osThreadNew+0xca>
          mem = 0;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]
 80038d4:	e001      	b.n	80038da <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038d6:	2300      	movs	r3, #0
 80038d8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038da:	69bb      	ldr	r3, [r7, #24]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d110      	bne.n	8003902 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038e4:	687a      	ldr	r2, [r7, #4]
 80038e6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038e8:	9202      	str	r2, [sp, #8]
 80038ea:	9301      	str	r3, [sp, #4]
 80038ec:	69fb      	ldr	r3, [r7, #28]
 80038ee:	9300      	str	r3, [sp, #0]
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	6a3a      	ldr	r2, [r7, #32]
 80038f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80038f6:	68f8      	ldr	r0, [r7, #12]
 80038f8:	f000 fe12 	bl	8004520 <xTaskCreateStatic>
 80038fc:	4603      	mov	r3, r0
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	e013      	b.n	800392a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	2b00      	cmp	r3, #0
 8003906:	d110      	bne.n	800392a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003908:	6a3b      	ldr	r3, [r7, #32]
 800390a:	b29a      	uxth	r2, r3
 800390c:	f107 0310 	add.w	r3, r7, #16
 8003910:	9301      	str	r3, [sp, #4]
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	9300      	str	r3, [sp, #0]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 fe60 	bl	80045e0 <xTaskCreate>
 8003920:	4603      	mov	r3, r0
 8003922:	2b01      	cmp	r3, #1
 8003924:	d001      	beq.n	800392a <osThreadNew+0x11a>
            hTask = NULL;
 8003926:	2300      	movs	r3, #0
 8003928:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800392a:	693b      	ldr	r3, [r7, #16]
}
 800392c:	4618      	mov	r0, r3
 800392e:	3728      	adds	r7, #40	@ 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003934:	b580      	push	{r7, lr}
 8003936:	b084      	sub	sp, #16
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800393c:	f3ef 8305 	mrs	r3, IPSR
 8003940:	60bb      	str	r3, [r7, #8]
  return(result);
 8003942:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003944:	2b00      	cmp	r3, #0
 8003946:	d003      	beq.n	8003950 <osDelay+0x1c>
    stat = osErrorISR;
 8003948:	f06f 0305 	mvn.w	r3, #5
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	e007      	b.n	8003960 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003950:	2300      	movs	r3, #0
 8003952:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d002      	beq.n	8003960 <osDelay+0x2c>
      vTaskDelay(ticks);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 ff9e 	bl	800489c <vTaskDelay>
    }
  }

  return (stat);
 8003960:	68fb      	ldr	r3, [r7, #12]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}
	...

0800396c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800396c:	b480      	push	{r7}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	4a06      	ldr	r2, [pc, #24]	@ (8003994 <vApplicationGetIdleTaskMemory+0x28>)
 800397c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800397e:	68bb      	ldr	r3, [r7, #8]
 8003980:	4a05      	ldr	r2, [pc, #20]	@ (8003998 <vApplicationGetIdleTaskMemory+0x2c>)
 8003982:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2280      	movs	r2, #128	@ 0x80
 8003988:	601a      	str	r2, [r3, #0]
}
 800398a:	bf00      	nop
 800398c:	3714      	adds	r7, #20
 800398e:	46bd      	mov	sp, r7
 8003990:	bc80      	pop	{r7}
 8003992:	4770      	bx	lr
 8003994:	20000554 	.word	0x20000554
 8003998:	200005fc 	.word	0x200005fc

0800399c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	4a07      	ldr	r2, [pc, #28]	@ (80039c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80039ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4a06      	ldr	r2, [pc, #24]	@ (80039cc <vApplicationGetTimerTaskMemory+0x30>)
 80039b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80039ba:	601a      	str	r2, [r3, #0]
}
 80039bc:	bf00      	nop
 80039be:	3714      	adds	r7, #20
 80039c0:	46bd      	mov	sp, r7
 80039c2:	bc80      	pop	{r7}
 80039c4:	4770      	bx	lr
 80039c6:	bf00      	nop
 80039c8:	200007fc 	.word	0x200007fc
 80039cc:	200008a4 	.word	0x200008a4

080039d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f103 0208 	add.w	r2, r3, #8
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f103 0208 	add.w	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	f103 0208 	add.w	r2, r3, #8
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bc80      	pop	{r7}
 8003a0c:	4770      	bx	lr

08003a0e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2200      	movs	r2, #0
 8003a1a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	bc80      	pop	{r7}
 8003a24:	4770      	bx	lr

08003a26 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a26:	b480      	push	{r7}
 8003a28:	b085      	sub	sp, #20
 8003a2a:	af00      	add	r7, sp, #0
 8003a2c:	6078      	str	r0, [r7, #4]
 8003a2e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a36:	683b      	ldr	r3, [r7, #0]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	683a      	ldr	r2, [r7, #0]
 8003a50:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	1c5a      	adds	r2, r3, #1
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	601a      	str	r2, [r3, #0]
}
 8003a62:	bf00      	nop
 8003a64:	3714      	adds	r7, #20
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bc80      	pop	{r7}
 8003a6a:	4770      	bx	lr

08003a6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b085      	sub	sp, #20
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a82:	d103      	bne.n	8003a8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	691b      	ldr	r3, [r3, #16]
 8003a88:	60fb      	str	r3, [r7, #12]
 8003a8a:	e00c      	b.n	8003aa6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	3308      	adds	r3, #8
 8003a90:	60fb      	str	r3, [r7, #12]
 8003a92:	e002      	b.n	8003a9a <vListInsert+0x2e>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	60fb      	str	r3, [r7, #12]
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	68ba      	ldr	r2, [r7, #8]
 8003aa2:	429a      	cmp	r2, r3
 8003aa4:	d2f6      	bcs.n	8003a94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685b      	ldr	r3, [r3, #4]
 8003ab2:	683a      	ldr	r2, [r7, #0]
 8003ab4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	601a      	str	r2, [r3, #0]
}
 8003ad2:	bf00      	nop
 8003ad4:	3714      	adds	r7, #20
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bc80      	pop	{r7}
 8003ada:	4770      	bx	lr

08003adc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	691b      	ldr	r3, [r3, #16]
 8003ae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6892      	ldr	r2, [r2, #8]
 8003af2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	689b      	ldr	r3, [r3, #8]
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	6852      	ldr	r2, [r2, #4]
 8003afc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	685b      	ldr	r3, [r3, #4]
 8003b02:	687a      	ldr	r2, [r7, #4]
 8003b04:	429a      	cmp	r2, r3
 8003b06:	d103      	bne.n	8003b10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	689a      	ldr	r2, [r3, #8]
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	1e5a      	subs	r2, r3, #1
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	681b      	ldr	r3, [r3, #0]
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	3714      	adds	r7, #20
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	bc80      	pop	{r7}
 8003b2c:	4770      	bx	lr
	...

08003b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b084      	sub	sp, #16
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
 8003b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d10b      	bne.n	8003b5c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003b48:	f383 8811 	msr	BASEPRI, r3
 8003b4c:	f3bf 8f6f 	isb	sy
 8003b50:	f3bf 8f4f 	dsb	sy
 8003b54:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b56:	bf00      	nop
 8003b58:	bf00      	nop
 8003b5a:	e7fd      	b.n	8003b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b5c:	f002 f85e 	bl	8005c1c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b68:	68f9      	ldr	r1, [r7, #12]
 8003b6a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b6c:	fb01 f303 	mul.w	r3, r1, r3
 8003b70:	441a      	add	r2, r3
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681a      	ldr	r2, [r3, #0]
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	68f9      	ldr	r1, [r7, #12]
 8003b90:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8003b92:	fb01 f303 	mul.w	r3, r1, r3
 8003b96:	441a      	add	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	22ff      	movs	r2, #255	@ 0xff
 8003ba0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	22ff      	movs	r2, #255	@ 0xff
 8003ba8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d114      	bne.n	8003bdc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	691b      	ldr	r3, [r3, #16]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d01a      	beq.n	8003bf0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	3310      	adds	r3, #16
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f001 f93c 	bl	8004e3c <xTaskRemoveFromEventList>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003bca:	4b0d      	ldr	r3, [pc, #52]	@ (8003c00 <xQueueGenericReset+0xd0>)
 8003bcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	f3bf 8f4f 	dsb	sy
 8003bd6:	f3bf 8f6f 	isb	sy
 8003bda:	e009      	b.n	8003bf0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	3310      	adds	r3, #16
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff fef5 	bl	80039d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	3324      	adds	r3, #36	@ 0x24
 8003bea:	4618      	mov	r0, r3
 8003bec:	f7ff fef0 	bl	80039d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bf0:	f002 f844 	bl	8005c7c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bf4:	2301      	movs	r3, #1
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3710      	adds	r7, #16
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	e000ed04 	.word	0xe000ed04

08003c04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b08e      	sub	sp, #56	@ 0x38
 8003c08:	af02      	add	r7, sp, #8
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
 8003c10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d10b      	bne.n	8003c30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8003c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c1c:	f383 8811 	msr	BASEPRI, r3
 8003c20:	f3bf 8f6f 	isb	sy
 8003c24:	f3bf 8f4f 	dsb	sy
 8003c28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003c2a:	bf00      	nop
 8003c2c:	bf00      	nop
 8003c2e:	e7fd      	b.n	8003c2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d10b      	bne.n	8003c4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8003c36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c3a:	f383 8811 	msr	BASEPRI, r3
 8003c3e:	f3bf 8f6f 	isb	sy
 8003c42:	f3bf 8f4f 	dsb	sy
 8003c46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003c48:	bf00      	nop
 8003c4a:	bf00      	nop
 8003c4c:	e7fd      	b.n	8003c4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d002      	beq.n	8003c5a <xQueueGenericCreateStatic+0x56>
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <xQueueGenericCreateStatic+0x5a>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <xQueueGenericCreateStatic+0x5c>
 8003c5e:	2300      	movs	r3, #0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d10b      	bne.n	8003c7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8003c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c68:	f383 8811 	msr	BASEPRI, r3
 8003c6c:	f3bf 8f6f 	isb	sy
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	623b      	str	r3, [r7, #32]
}
 8003c76:	bf00      	nop
 8003c78:	bf00      	nop
 8003c7a:	e7fd      	b.n	8003c78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d102      	bne.n	8003c88 <xQueueGenericCreateStatic+0x84>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d101      	bne.n	8003c8c <xQueueGenericCreateStatic+0x88>
 8003c88:	2301      	movs	r3, #1
 8003c8a:	e000      	b.n	8003c8e <xQueueGenericCreateStatic+0x8a>
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d10b      	bne.n	8003caa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8003c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003c96:	f383 8811 	msr	BASEPRI, r3
 8003c9a:	f3bf 8f6f 	isb	sy
 8003c9e:	f3bf 8f4f 	dsb	sy
 8003ca2:	61fb      	str	r3, [r7, #28]
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	e7fd      	b.n	8003ca6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003caa:	2350      	movs	r3, #80	@ 0x50
 8003cac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003cae:	697b      	ldr	r3, [r7, #20]
 8003cb0:	2b50      	cmp	r3, #80	@ 0x50
 8003cb2:	d00b      	beq.n	8003ccc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8003cb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003cb8:	f383 8811 	msr	BASEPRI, r3
 8003cbc:	f3bf 8f6f 	isb	sy
 8003cc0:	f3bf 8f4f 	dsb	sy
 8003cc4:	61bb      	str	r3, [r7, #24]
}
 8003cc6:	bf00      	nop
 8003cc8:	bf00      	nop
 8003cca:	e7fd      	b.n	8003cc8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ccc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8003cd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00d      	beq.n	8003cf4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003cd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003cda:	2201      	movs	r2, #1
 8003cdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003ce0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8003ce4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003ce6:	9300      	str	r3, [sp, #0]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	687a      	ldr	r2, [r7, #4]
 8003cec:	68b9      	ldr	r1, [r7, #8]
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 f805 	bl	8003cfe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3730      	adds	r7, #48	@ 0x30
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b084      	sub	sp, #16
 8003d02:	af00      	add	r7, sp, #0
 8003d04:	60f8      	str	r0, [r7, #12]
 8003d06:	60b9      	str	r1, [r7, #8]
 8003d08:	607a      	str	r2, [r7, #4]
 8003d0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d103      	bne.n	8003d1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003d12:	69bb      	ldr	r3, [r7, #24]
 8003d14:	69ba      	ldr	r2, [r7, #24]
 8003d16:	601a      	str	r2, [r3, #0]
 8003d18:	e002      	b.n	8003d20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003d26:	69bb      	ldr	r3, [r7, #24]
 8003d28:	68ba      	ldr	r2, [r7, #8]
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003d2c:	2101      	movs	r1, #1
 8003d2e:	69b8      	ldr	r0, [r7, #24]
 8003d30:	f7ff fefe 	bl	8003b30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	78fa      	ldrb	r2, [r7, #3]
 8003d38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003d3c:	bf00      	nop
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b08e      	sub	sp, #56	@ 0x38
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	607a      	str	r2, [r7, #4]
 8003d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d52:	2300      	movs	r3, #0
 8003d54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8003d5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10b      	bne.n	8003d78 <xQueueGenericSend+0x34>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003d72:	bf00      	nop
 8003d74:	bf00      	nop
 8003d76:	e7fd      	b.n	8003d74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d78:	68bb      	ldr	r3, [r7, #8]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d103      	bne.n	8003d86 <xQueueGenericSend+0x42>
 8003d7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d101      	bne.n	8003d8a <xQueueGenericSend+0x46>
 8003d86:	2301      	movs	r3, #1
 8003d88:	e000      	b.n	8003d8c <xQueueGenericSend+0x48>
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <xQueueGenericSend+0x64>
	__asm volatile
 8003d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003d94:	f383 8811 	msr	BASEPRI, r3
 8003d98:	f3bf 8f6f 	isb	sy
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003da2:	bf00      	nop
 8003da4:	bf00      	nop
 8003da6:	e7fd      	b.n	8003da4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d103      	bne.n	8003db6 <xQueueGenericSend+0x72>
 8003dae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d101      	bne.n	8003dba <xQueueGenericSend+0x76>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e000      	b.n	8003dbc <xQueueGenericSend+0x78>
 8003dba:	2300      	movs	r3, #0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d10b      	bne.n	8003dd8 <xQueueGenericSend+0x94>
	__asm volatile
 8003dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003dc4:	f383 8811 	msr	BASEPRI, r3
 8003dc8:	f3bf 8f6f 	isb	sy
 8003dcc:	f3bf 8f4f 	dsb	sy
 8003dd0:	623b      	str	r3, [r7, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	bf00      	nop
 8003dd6:	e7fd      	b.n	8003dd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003dd8:	f001 f9f6 	bl	80051c8 <xTaskGetSchedulerState>
 8003ddc:	4603      	mov	r3, r0
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d102      	bne.n	8003de8 <xQueueGenericSend+0xa4>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d101      	bne.n	8003dec <xQueueGenericSend+0xa8>
 8003de8:	2301      	movs	r3, #1
 8003dea:	e000      	b.n	8003dee <xQueueGenericSend+0xaa>
 8003dec:	2300      	movs	r3, #0
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10b      	bne.n	8003e0a <xQueueGenericSend+0xc6>
	__asm volatile
 8003df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003df6:	f383 8811 	msr	BASEPRI, r3
 8003dfa:	f3bf 8f6f 	isb	sy
 8003dfe:	f3bf 8f4f 	dsb	sy
 8003e02:	61fb      	str	r3, [r7, #28]
}
 8003e04:	bf00      	nop
 8003e06:	bf00      	nop
 8003e08:	e7fd      	b.n	8003e06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e0a:	f001 ff07 	bl	8005c1c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	429a      	cmp	r2, r3
 8003e18:	d302      	bcc.n	8003e20 <xQueueGenericSend+0xdc>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b02      	cmp	r3, #2
 8003e1e:	d129      	bne.n	8003e74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003e26:	f000 fa0f 	bl	8004248 <prvCopyDataToQueue>
 8003e2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d010      	beq.n	8003e56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e36:	3324      	adds	r3, #36	@ 0x24
 8003e38:	4618      	mov	r0, r3
 8003e3a:	f000 ffff 	bl	8004e3c <xTaskRemoveFromEventList>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d013      	beq.n	8003e6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003e44:	4b3f      	ldr	r3, [pc, #252]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003e46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e4a:	601a      	str	r2, [r3, #0]
 8003e4c:	f3bf 8f4f 	dsb	sy
 8003e50:	f3bf 8f6f 	isb	sy
 8003e54:	e00a      	b.n	8003e6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d007      	beq.n	8003e6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e5c:	4b39      	ldr	r3, [pc, #228]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003e5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003e62:	601a      	str	r2, [r3, #0]
 8003e64:	f3bf 8f4f 	dsb	sy
 8003e68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e6c:	f001 ff06 	bl	8005c7c <vPortExitCritical>
				return pdPASS;
 8003e70:	2301      	movs	r3, #1
 8003e72:	e063      	b.n	8003f3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e7a:	f001 feff 	bl	8005c7c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	e05c      	b.n	8003f3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d106      	bne.n	8003e96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f001 f839 	bl	8004f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e92:	2301      	movs	r3, #1
 8003e94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e96:	f001 fef1 	bl	8005c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e9a:	f000 fda5 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e9e:	f001 febd 	bl	8005c1c <vPortEnterCritical>
 8003ea2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ea4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003ea8:	b25b      	sxtb	r3, r3
 8003eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eae:	d103      	bne.n	8003eb8 <xQueueGenericSend+0x174>
 8003eb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003eb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003eba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003ebe:	b25b      	sxtb	r3, r3
 8003ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec4:	d103      	bne.n	8003ece <xQueueGenericSend+0x18a>
 8003ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ec8:	2200      	movs	r2, #0
 8003eca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003ece:	f001 fed5 	bl	8005c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ed2:	1d3a      	adds	r2, r7, #4
 8003ed4:	f107 0314 	add.w	r3, r7, #20
 8003ed8:	4611      	mov	r1, r2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f001 f828 	bl	8004f30 <xTaskCheckForTimeOut>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d124      	bne.n	8003f30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003ee6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003ee8:	f000 faa6 	bl	8004438 <prvIsQueueFull>
 8003eec:	4603      	mov	r3, r0
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d018      	beq.n	8003f24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ef2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003ef4:	3310      	adds	r3, #16
 8003ef6:	687a      	ldr	r2, [r7, #4]
 8003ef8:	4611      	mov	r1, r2
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 ff4c 	bl	8004d98 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003f00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f02:	f000 fa31 	bl	8004368 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003f06:	f000 fd7d 	bl	8004a04 <xTaskResumeAll>
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	f47f af7c 	bne.w	8003e0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8003f12:	4b0c      	ldr	r3, [pc, #48]	@ (8003f44 <xQueueGenericSend+0x200>)
 8003f14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
 8003f22:	e772      	b.n	8003e0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003f24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f26:	f000 fa1f 	bl	8004368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f2a:	f000 fd6b 	bl	8004a04 <xTaskResumeAll>
 8003f2e:	e76c      	b.n	8003e0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003f30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8003f32:	f000 fa19 	bl	8004368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f36:	f000 fd65 	bl	8004a04 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003f3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3738      	adds	r7, #56	@ 0x38
 8003f40:	46bd      	mov	sp, r7
 8003f42:	bd80      	pop	{r7, pc}
 8003f44:	e000ed04 	.word	0xe000ed04

08003f48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b090      	sub	sp, #64	@ 0x40
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	60f8      	str	r0, [r7, #12]
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8003f5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d10b      	bne.n	8003f78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8003f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f64:	f383 8811 	msr	BASEPRI, r3
 8003f68:	f3bf 8f6f 	isb	sy
 8003f6c:	f3bf 8f4f 	dsb	sy
 8003f70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8003f72:	bf00      	nop
 8003f74:	bf00      	nop
 8003f76:	e7fd      	b.n	8003f74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f78:	68bb      	ldr	r3, [r7, #8]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d103      	bne.n	8003f86 <xQueueGenericSendFromISR+0x3e>
 8003f7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d101      	bne.n	8003f8a <xQueueGenericSendFromISR+0x42>
 8003f86:	2301      	movs	r3, #1
 8003f88:	e000      	b.n	8003f8c <xQueueGenericSendFromISR+0x44>
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d10b      	bne.n	8003fa8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8003f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003f94:	f383 8811 	msr	BASEPRI, r3
 8003f98:	f3bf 8f6f 	isb	sy
 8003f9c:	f3bf 8f4f 	dsb	sy
 8003fa0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8003fa2:	bf00      	nop
 8003fa4:	bf00      	nop
 8003fa6:	e7fd      	b.n	8003fa4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b02      	cmp	r3, #2
 8003fac:	d103      	bne.n	8003fb6 <xQueueGenericSendFromISR+0x6e>
 8003fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fb2:	2b01      	cmp	r3, #1
 8003fb4:	d101      	bne.n	8003fba <xQueueGenericSendFromISR+0x72>
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e000      	b.n	8003fbc <xQueueGenericSendFromISR+0x74>
 8003fba:	2300      	movs	r3, #0
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10b      	bne.n	8003fd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8003fc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fc4:	f383 8811 	msr	BASEPRI, r3
 8003fc8:	f3bf 8f6f 	isb	sy
 8003fcc:	f3bf 8f4f 	dsb	sy
 8003fd0:	623b      	str	r3, [r7, #32]
}
 8003fd2:	bf00      	nop
 8003fd4:	bf00      	nop
 8003fd6:	e7fd      	b.n	8003fd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003fd8:	f001 fee2 	bl	8005da0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003fdc:	f3ef 8211 	mrs	r2, BASEPRI
 8003fe0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8003fe4:	f383 8811 	msr	BASEPRI, r3
 8003fe8:	f3bf 8f6f 	isb	sy
 8003fec:	f3bf 8f4f 	dsb	sy
 8003ff0:	61fa      	str	r2, [r7, #28]
 8003ff2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003ff4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003ff6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003ff8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003ffc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003ffe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004000:	429a      	cmp	r2, r3
 8004002:	d302      	bcc.n	800400a <xQueueGenericSendFromISR+0xc2>
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	2b02      	cmp	r3, #2
 8004008:	d12f      	bne.n	800406a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800400a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800400c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004010:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004014:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004016:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004018:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800401a:	683a      	ldr	r2, [r7, #0]
 800401c:	68b9      	ldr	r1, [r7, #8]
 800401e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004020:	f000 f912 	bl	8004248 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004024:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d112      	bne.n	8004054 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800402e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004030:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004032:	2b00      	cmp	r3, #0
 8004034:	d016      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004038:	3324      	adds	r3, #36	@ 0x24
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fefe 	bl	8004e3c <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00e      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00b      	beq.n	8004064 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
 8004052:	e007      	b.n	8004064 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004054:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004058:	3301      	adds	r3, #1
 800405a:	b2db      	uxtb	r3, r3
 800405c:	b25a      	sxtb	r2, r3
 800405e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004060:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004064:	2301      	movs	r3, #1
 8004066:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004068:	e001      	b.n	800406e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800406a:	2300      	movs	r3, #0
 800406c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800406e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004070:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004078:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800407a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800407c:	4618      	mov	r0, r3
 800407e:	3740      	adds	r7, #64	@ 0x40
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}

08004084 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004084:	b580      	push	{r7, lr}
 8004086:	b08c      	sub	sp, #48	@ 0x30
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004090:	2300      	movs	r3, #0
 8004092:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004098:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <xQueueReceive+0x32>
	__asm volatile
 800409e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040a2:	f383 8811 	msr	BASEPRI, r3
 80040a6:	f3bf 8f6f 	isb	sy
 80040aa:	f3bf 8f4f 	dsb	sy
 80040ae:	623b      	str	r3, [r7, #32]
}
 80040b0:	bf00      	nop
 80040b2:	bf00      	nop
 80040b4:	e7fd      	b.n	80040b2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d103      	bne.n	80040c4 <xQueueReceive+0x40>
 80040bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d101      	bne.n	80040c8 <xQueueReceive+0x44>
 80040c4:	2301      	movs	r3, #1
 80040c6:	e000      	b.n	80040ca <xQueueReceive+0x46>
 80040c8:	2300      	movs	r3, #0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10b      	bne.n	80040e6 <xQueueReceive+0x62>
	__asm volatile
 80040ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80040d2:	f383 8811 	msr	BASEPRI, r3
 80040d6:	f3bf 8f6f 	isb	sy
 80040da:	f3bf 8f4f 	dsb	sy
 80040de:	61fb      	str	r3, [r7, #28]
}
 80040e0:	bf00      	nop
 80040e2:	bf00      	nop
 80040e4:	e7fd      	b.n	80040e2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040e6:	f001 f86f 	bl	80051c8 <xTaskGetSchedulerState>
 80040ea:	4603      	mov	r3, r0
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d102      	bne.n	80040f6 <xQueueReceive+0x72>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d101      	bne.n	80040fa <xQueueReceive+0x76>
 80040f6:	2301      	movs	r3, #1
 80040f8:	e000      	b.n	80040fc <xQueueReceive+0x78>
 80040fa:	2300      	movs	r3, #0
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d10b      	bne.n	8004118 <xQueueReceive+0x94>
	__asm volatile
 8004100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004104:	f383 8811 	msr	BASEPRI, r3
 8004108:	f3bf 8f6f 	isb	sy
 800410c:	f3bf 8f4f 	dsb	sy
 8004110:	61bb      	str	r3, [r7, #24]
}
 8004112:	bf00      	nop
 8004114:	bf00      	nop
 8004116:	e7fd      	b.n	8004114 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004118:	f001 fd80 	bl	8005c1c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800411c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800411e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004120:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004124:	2b00      	cmp	r3, #0
 8004126:	d01f      	beq.n	8004168 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004128:	68b9      	ldr	r1, [r7, #8]
 800412a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800412c:	f000 f8f6 	bl	800431c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004132:	1e5a      	subs	r2, r3, #1
 8004134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004136:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004138:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800413a:	691b      	ldr	r3, [r3, #16]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d00f      	beq.n	8004160 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004142:	3310      	adds	r3, #16
 8004144:	4618      	mov	r0, r3
 8004146:	f000 fe79 	bl	8004e3c <xTaskRemoveFromEventList>
 800414a:	4603      	mov	r3, r0
 800414c:	2b00      	cmp	r3, #0
 800414e:	d007      	beq.n	8004160 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004150:	4b3c      	ldr	r3, [pc, #240]	@ (8004244 <xQueueReceive+0x1c0>)
 8004152:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004156:	601a      	str	r2, [r3, #0]
 8004158:	f3bf 8f4f 	dsb	sy
 800415c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004160:	f001 fd8c 	bl	8005c7c <vPortExitCritical>
				return pdPASS;
 8004164:	2301      	movs	r3, #1
 8004166:	e069      	b.n	800423c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d103      	bne.n	8004176 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800416e:	f001 fd85 	bl	8005c7c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004172:	2300      	movs	r3, #0
 8004174:	e062      	b.n	800423c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004178:	2b00      	cmp	r3, #0
 800417a:	d106      	bne.n	800418a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800417c:	f107 0310 	add.w	r3, r7, #16
 8004180:	4618      	mov	r0, r3
 8004182:	f000 febf 	bl	8004f04 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004186:	2301      	movs	r3, #1
 8004188:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800418a:	f001 fd77 	bl	8005c7c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800418e:	f000 fc2b 	bl	80049e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004192:	f001 fd43 	bl	8005c1c <vPortEnterCritical>
 8004196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004198:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800419c:	b25b      	sxtb	r3, r3
 800419e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a2:	d103      	bne.n	80041ac <xQueueReceive+0x128>
 80041a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80041ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80041b2:	b25b      	sxtb	r3, r3
 80041b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b8:	d103      	bne.n	80041c2 <xQueueReceive+0x13e>
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80041c2:	f001 fd5b 	bl	8005c7c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80041c6:	1d3a      	adds	r2, r7, #4
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	4611      	mov	r1, r2
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 feae 	bl	8004f30 <xTaskCheckForTimeOut>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d123      	bne.n	8004222 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041dc:	f000 f916 	bl	800440c <prvIsQueueEmpty>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d017      	beq.n	8004216 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041e8:	3324      	adds	r3, #36	@ 0x24
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	4611      	mov	r1, r2
 80041ee:	4618      	mov	r0, r3
 80041f0:	f000 fdd2 	bl	8004d98 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80041f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80041f6:	f000 f8b7 	bl	8004368 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041fa:	f000 fc03 	bl	8004a04 <xTaskResumeAll>
 80041fe:	4603      	mov	r3, r0
 8004200:	2b00      	cmp	r3, #0
 8004202:	d189      	bne.n	8004118 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004204:	4b0f      	ldr	r3, [pc, #60]	@ (8004244 <xQueueReceive+0x1c0>)
 8004206:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800420a:	601a      	str	r2, [r3, #0]
 800420c:	f3bf 8f4f 	dsb	sy
 8004210:	f3bf 8f6f 	isb	sy
 8004214:	e780      	b.n	8004118 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004216:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004218:	f000 f8a6 	bl	8004368 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800421c:	f000 fbf2 	bl	8004a04 <xTaskResumeAll>
 8004220:	e77a      	b.n	8004118 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004222:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004224:	f000 f8a0 	bl	8004368 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004228:	f000 fbec 	bl	8004a04 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800422c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800422e:	f000 f8ed 	bl	800440c <prvIsQueueEmpty>
 8004232:	4603      	mov	r3, r0
 8004234:	2b00      	cmp	r3, #0
 8004236:	f43f af6f 	beq.w	8004118 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800423a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800423c:	4618      	mov	r0, r3
 800423e:	3730      	adds	r7, #48	@ 0x30
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	e000ed04 	.word	0xe000ed04

08004248 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b086      	sub	sp, #24
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10d      	bne.n	8004282 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d14d      	bne.n	800430a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	4618      	mov	r0, r3
 8004274:	f000 ffc6 	bl	8005204 <xTaskPriorityDisinherit>
 8004278:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2200      	movs	r2, #0
 800427e:	609a      	str	r2, [r3, #8]
 8004280:	e043      	b.n	800430a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d119      	bne.n	80042bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	6858      	ldr	r0, [r3, #4]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	461a      	mov	r2, r3
 8004292:	68b9      	ldr	r1, [r7, #8]
 8004294:	f002 f83c 	bl	8006310 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042a0:	441a      	add	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689b      	ldr	r3, [r3, #8]
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d32b      	bcc.n	800430a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	605a      	str	r2, [r3, #4]
 80042ba:	e026      	b.n	800430a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	68d8      	ldr	r0, [r3, #12]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c4:	461a      	mov	r2, r3
 80042c6:	68b9      	ldr	r1, [r7, #8]
 80042c8:	f002 f822 	bl	8006310 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	68da      	ldr	r2, [r3, #12]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042d4:	425b      	negs	r3, r3
 80042d6:	441a      	add	r2, r3
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	68da      	ldr	r2, [r3, #12]
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d207      	bcs.n	80042f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f0:	425b      	negs	r3, r3
 80042f2:	441a      	add	r2, r3
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d105      	bne.n	800430a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3b01      	subs	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	1c5a      	adds	r2, r3, #1
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004312:	697b      	ldr	r3, [r7, #20]
}
 8004314:	4618      	mov	r0, r3
 8004316:	3718      	adds	r7, #24
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}

0800431c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d018      	beq.n	8004360 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	68da      	ldr	r2, [r3, #12]
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004336:	441a      	add	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	68da      	ldr	r2, [r3, #12]
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	429a      	cmp	r2, r3
 8004346:	d303      	bcc.n	8004350 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	68d9      	ldr	r1, [r3, #12]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004358:	461a      	mov	r2, r3
 800435a:	6838      	ldr	r0, [r7, #0]
 800435c:	f001 ffd8 	bl	8006310 <memcpy>
	}
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b084      	sub	sp, #16
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004370:	f001 fc54 	bl	8005c1c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800437a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800437c:	e011      	b.n	80043a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004382:	2b00      	cmp	r3, #0
 8004384:	d012      	beq.n	80043ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	3324      	adds	r3, #36	@ 0x24
 800438a:	4618      	mov	r0, r3
 800438c:	f000 fd56 	bl	8004e3c <xTaskRemoveFromEventList>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	d001      	beq.n	800439a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004396:	f000 fe2f 	bl	8004ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800439a:	7bfb      	ldrb	r3, [r7, #15]
 800439c:	3b01      	subs	r3, #1
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80043a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	dce9      	bgt.n	800437e <prvUnlockQueue+0x16>
 80043aa:	e000      	b.n	80043ae <prvUnlockQueue+0x46>
					break;
 80043ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	22ff      	movs	r2, #255	@ 0xff
 80043b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80043b6:	f001 fc61 	bl	8005c7c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80043ba:	f001 fc2f 	bl	8005c1c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80043c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043c6:	e011      	b.n	80043ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	691b      	ldr	r3, [r3, #16]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d012      	beq.n	80043f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	3310      	adds	r3, #16
 80043d4:	4618      	mov	r0, r3
 80043d6:	f000 fd31 	bl	8004e3c <xTaskRemoveFromEventList>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d001      	beq.n	80043e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80043e0:	f000 fe0a 	bl	8004ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80043e4:	7bbb      	ldrb	r3, [r7, #14]
 80043e6:	3b01      	subs	r3, #1
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80043ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	dce9      	bgt.n	80043c8 <prvUnlockQueue+0x60>
 80043f4:	e000      	b.n	80043f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	22ff      	movs	r2, #255	@ 0xff
 80043fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004400:	f001 fc3c 	bl	8005c7c <vPortExitCritical>
}
 8004404:	bf00      	nop
 8004406:	3710      	adds	r7, #16
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004414:	f001 fc02 	bl	8005c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800441c:	2b00      	cmp	r3, #0
 800441e:	d102      	bne.n	8004426 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004420:	2301      	movs	r3, #1
 8004422:	60fb      	str	r3, [r7, #12]
 8004424:	e001      	b.n	800442a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004426:	2300      	movs	r3, #0
 8004428:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800442a:	f001 fc27 	bl	8005c7c <vPortExitCritical>

	return xReturn;
 800442e:	68fb      	ldr	r3, [r7, #12]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3710      	adds	r7, #16
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}

08004438 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004440:	f001 fbec 	bl	8005c1c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800444c:	429a      	cmp	r2, r3
 800444e:	d102      	bne.n	8004456 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004450:	2301      	movs	r3, #1
 8004452:	60fb      	str	r3, [r7, #12]
 8004454:	e001      	b.n	800445a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004456:	2300      	movs	r3, #0
 8004458:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800445a:	f001 fc0f 	bl	8005c7c <vPortExitCritical>

	return xReturn;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3710      	adds	r7, #16
 8004464:	46bd      	mov	sp, r7
 8004466:	bd80      	pop	{r7, pc}

08004468 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004472:	2300      	movs	r3, #0
 8004474:	60fb      	str	r3, [r7, #12]
 8004476:	e014      	b.n	80044a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004478:	4a0e      	ldr	r2, [pc, #56]	@ (80044b4 <vQueueAddToRegistry+0x4c>)
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d10b      	bne.n	800449c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004484:	490b      	ldr	r1, [pc, #44]	@ (80044b4 <vQueueAddToRegistry+0x4c>)
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800448e:	4a09      	ldr	r2, [pc, #36]	@ (80044b4 <vQueueAddToRegistry+0x4c>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	00db      	lsls	r3, r3, #3
 8004494:	4413      	add	r3, r2
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800449a:	e006      	b.n	80044aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	3301      	adds	r3, #1
 80044a0:	60fb      	str	r3, [r7, #12]
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	2b07      	cmp	r3, #7
 80044a6:	d9e7      	bls.n	8004478 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80044a8:	bf00      	nop
 80044aa:	bf00      	nop
 80044ac:	3714      	adds	r7, #20
 80044ae:	46bd      	mov	sp, r7
 80044b0:	bc80      	pop	{r7}
 80044b2:	4770      	bx	lr
 80044b4:	20000ca4 	.word	0x20000ca4

080044b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80044b8:	b580      	push	{r7, lr}
 80044ba:	b086      	sub	sp, #24
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80044c8:	f001 fba8 	bl	8005c1c <vPortEnterCritical>
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80044d2:	b25b      	sxtb	r3, r3
 80044d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d8:	d103      	bne.n	80044e2 <vQueueWaitForMessageRestricted+0x2a>
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80044e8:	b25b      	sxtb	r3, r3
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d103      	bne.n	80044f8 <vQueueWaitForMessageRestricted+0x40>
 80044f0:	697b      	ldr	r3, [r7, #20]
 80044f2:	2200      	movs	r2, #0
 80044f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80044f8:	f001 fbc0 	bl	8005c7c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004500:	2b00      	cmp	r3, #0
 8004502:	d106      	bne.n	8004512 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	3324      	adds	r3, #36	@ 0x24
 8004508:	687a      	ldr	r2, [r7, #4]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	4618      	mov	r0, r3
 800450e:	f000 fc69 	bl	8004de4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004512:	6978      	ldr	r0, [r7, #20]
 8004514:	f7ff ff28 	bl	8004368 <prvUnlockQueue>
	}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}

08004520 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004520:	b580      	push	{r7, lr}
 8004522:	b08e      	sub	sp, #56	@ 0x38
 8004524:	af04      	add	r7, sp, #16
 8004526:	60f8      	str	r0, [r7, #12]
 8004528:	60b9      	str	r1, [r7, #8]
 800452a:	607a      	str	r2, [r7, #4]
 800452c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800452e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004530:	2b00      	cmp	r3, #0
 8004532:	d10b      	bne.n	800454c <xTaskCreateStatic+0x2c>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	623b      	str	r3, [r7, #32]
}
 8004546:	bf00      	nop
 8004548:	bf00      	nop
 800454a:	e7fd      	b.n	8004548 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800454c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800454e:	2b00      	cmp	r3, #0
 8004550:	d10b      	bne.n	800456a <xTaskCreateStatic+0x4a>
	__asm volatile
 8004552:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004556:	f383 8811 	msr	BASEPRI, r3
 800455a:	f3bf 8f6f 	isb	sy
 800455e:	f3bf 8f4f 	dsb	sy
 8004562:	61fb      	str	r3, [r7, #28]
}
 8004564:	bf00      	nop
 8004566:	bf00      	nop
 8004568:	e7fd      	b.n	8004566 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800456a:	23a8      	movs	r3, #168	@ 0xa8
 800456c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800456e:	693b      	ldr	r3, [r7, #16]
 8004570:	2ba8      	cmp	r3, #168	@ 0xa8
 8004572:	d00b      	beq.n	800458c <xTaskCreateStatic+0x6c>
	__asm volatile
 8004574:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004578:	f383 8811 	msr	BASEPRI, r3
 800457c:	f3bf 8f6f 	isb	sy
 8004580:	f3bf 8f4f 	dsb	sy
 8004584:	61bb      	str	r3, [r7, #24]
}
 8004586:	bf00      	nop
 8004588:	bf00      	nop
 800458a:	e7fd      	b.n	8004588 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800458c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800458e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004590:	2b00      	cmp	r3, #0
 8004592:	d01e      	beq.n	80045d2 <xTaskCreateStatic+0xb2>
 8004594:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004596:	2b00      	cmp	r3, #0
 8004598:	d01b      	beq.n	80045d2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800459a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800459c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800459e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80045a2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80045a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045a6:	2202      	movs	r2, #2
 80045a8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80045ac:	2300      	movs	r3, #0
 80045ae:	9303      	str	r3, [sp, #12]
 80045b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045b2:	9302      	str	r3, [sp, #8]
 80045b4:	f107 0314 	add.w	r3, r7, #20
 80045b8:	9301      	str	r3, [sp, #4]
 80045ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045bc:	9300      	str	r3, [sp, #0]
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	687a      	ldr	r2, [r7, #4]
 80045c2:	68b9      	ldr	r1, [r7, #8]
 80045c4:	68f8      	ldr	r0, [r7, #12]
 80045c6:	f000 f851 	bl	800466c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80045cc:	f000 f8f6 	bl	80047bc <prvAddNewTaskToReadyList>
 80045d0:	e001      	b.n	80045d6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80045d2:	2300      	movs	r3, #0
 80045d4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80045d6:	697b      	ldr	r3, [r7, #20]
	}
 80045d8:	4618      	mov	r0, r3
 80045da:	3728      	adds	r7, #40	@ 0x28
 80045dc:	46bd      	mov	sp, r7
 80045de:	bd80      	pop	{r7, pc}

080045e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b08c      	sub	sp, #48	@ 0x30
 80045e4:	af04      	add	r7, sp, #16
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	603b      	str	r3, [r7, #0]
 80045ec:	4613      	mov	r3, r2
 80045ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80045f0:	88fb      	ldrh	r3, [r7, #6]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	4618      	mov	r0, r3
 80045f6:	f001 fc13 	bl	8005e20 <pvPortMalloc>
 80045fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d00e      	beq.n	8004620 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004602:	20a8      	movs	r0, #168	@ 0xa8
 8004604:	f001 fc0c 	bl	8005e20 <pvPortMalloc>
 8004608:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d003      	beq.n	8004618 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	631a      	str	r2, [r3, #48]	@ 0x30
 8004616:	e005      	b.n	8004624 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004618:	6978      	ldr	r0, [r7, #20]
 800461a:	f001 fccf 	bl	8005fbc <vPortFree>
 800461e:	e001      	b.n	8004624 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004620:	2300      	movs	r3, #0
 8004622:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004624:	69fb      	ldr	r3, [r7, #28]
 8004626:	2b00      	cmp	r3, #0
 8004628:	d017      	beq.n	800465a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	2200      	movs	r2, #0
 800462e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004632:	88fa      	ldrh	r2, [r7, #6]
 8004634:	2300      	movs	r3, #0
 8004636:	9303      	str	r3, [sp, #12]
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	9302      	str	r3, [sp, #8]
 800463c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800463e:	9301      	str	r3, [sp, #4]
 8004640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004642:	9300      	str	r3, [sp, #0]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	68b9      	ldr	r1, [r7, #8]
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f80f 	bl	800466c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800464e:	69f8      	ldr	r0, [r7, #28]
 8004650:	f000 f8b4 	bl	80047bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004654:	2301      	movs	r3, #1
 8004656:	61bb      	str	r3, [r7, #24]
 8004658:	e002      	b.n	8004660 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800465a:	f04f 33ff 	mov.w	r3, #4294967295
 800465e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004660:	69bb      	ldr	r3, [r7, #24]
	}
 8004662:	4618      	mov	r0, r3
 8004664:	3720      	adds	r7, #32
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
	...

0800466c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800466c:	b580      	push	{r7, lr}
 800466e:	b088      	sub	sp, #32
 8004670:	af00      	add	r7, sp, #0
 8004672:	60f8      	str	r0, [r7, #12]
 8004674:	60b9      	str	r1, [r7, #8]
 8004676:	607a      	str	r2, [r7, #4]
 8004678:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800467a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800467c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	009b      	lsls	r3, r3, #2
 8004682:	461a      	mov	r2, r3
 8004684:	21a5      	movs	r1, #165	@ 0xa5
 8004686:	f001 fdb7 	bl	80061f8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800468a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800468c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004694:	3b01      	subs	r3, #1
 8004696:	009b      	lsls	r3, r3, #2
 8004698:	4413      	add	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800469c:	69bb      	ldr	r3, [r7, #24]
 800469e:	f023 0307 	bic.w	r3, r3, #7
 80046a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80046a4:	69bb      	ldr	r3, [r7, #24]
 80046a6:	f003 0307 	and.w	r3, r3, #7
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00b      	beq.n	80046c6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80046ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b2:	f383 8811 	msr	BASEPRI, r3
 80046b6:	f3bf 8f6f 	isb	sy
 80046ba:	f3bf 8f4f 	dsb	sy
 80046be:	617b      	str	r3, [r7, #20]
}
 80046c0:	bf00      	nop
 80046c2:	bf00      	nop
 80046c4:	e7fd      	b.n	80046c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80046c6:	68bb      	ldr	r3, [r7, #8]
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d01f      	beq.n	800470c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046cc:	2300      	movs	r3, #0
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e012      	b.n	80046f8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80046d2:	68ba      	ldr	r2, [r7, #8]
 80046d4:	69fb      	ldr	r3, [r7, #28]
 80046d6:	4413      	add	r3, r2
 80046d8:	7819      	ldrb	r1, [r3, #0]
 80046da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	4413      	add	r3, r2
 80046e0:	3334      	adds	r3, #52	@ 0x34
 80046e2:	460a      	mov	r2, r1
 80046e4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80046e6:	68ba      	ldr	r2, [r7, #8]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	4413      	add	r3, r2
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d006      	beq.n	8004700 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	3301      	adds	r3, #1
 80046f6:	61fb      	str	r3, [r7, #28]
 80046f8:	69fb      	ldr	r3, [r7, #28]
 80046fa:	2b0f      	cmp	r3, #15
 80046fc:	d9e9      	bls.n	80046d2 <prvInitialiseNewTask+0x66>
 80046fe:	e000      	b.n	8004702 <prvInitialiseNewTask+0x96>
			{
				break;
 8004700:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004704:	2200      	movs	r2, #0
 8004706:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800470a:	e003      	b.n	8004714 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800470c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800470e:	2200      	movs	r2, #0
 8004710:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004714:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004716:	2b37      	cmp	r3, #55	@ 0x37
 8004718:	d901      	bls.n	800471e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800471a:	2337      	movs	r3, #55	@ 0x37
 800471c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800471e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004720:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004722:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004724:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004728:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800472a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800472c:	2200      	movs	r2, #0
 800472e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004730:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004732:	3304      	adds	r3, #4
 8004734:	4618      	mov	r0, r3
 8004736:	f7ff f96a 	bl	8003a0e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800473a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800473c:	3318      	adds	r3, #24
 800473e:	4618      	mov	r0, r3
 8004740:	f7ff f965 	bl	8003a0e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004744:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004748:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800474a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800474c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004750:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004752:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004756:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004758:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800475a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800475c:	2200      	movs	r2, #0
 800475e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004762:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004764:	2200      	movs	r2, #0
 8004766:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800476a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800476c:	3354      	adds	r3, #84	@ 0x54
 800476e:	224c      	movs	r2, #76	@ 0x4c
 8004770:	2100      	movs	r1, #0
 8004772:	4618      	mov	r0, r3
 8004774:	f001 fd40 	bl	80061f8 <memset>
 8004778:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800477a:	4a0d      	ldr	r2, [pc, #52]	@ (80047b0 <prvInitialiseNewTask+0x144>)
 800477c:	659a      	str	r2, [r3, #88]	@ 0x58
 800477e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004780:	4a0c      	ldr	r2, [pc, #48]	@ (80047b4 <prvInitialiseNewTask+0x148>)
 8004782:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004784:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004786:	4a0c      	ldr	r2, [pc, #48]	@ (80047b8 <prvInitialiseNewTask+0x14c>)
 8004788:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	68f9      	ldr	r1, [r7, #12]
 800478e:	69b8      	ldr	r0, [r7, #24]
 8004790:	f001 f954 	bl	8005a3c <pxPortInitialiseStack>
 8004794:	4602      	mov	r2, r0
 8004796:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004798:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800479a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80047a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80047a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047a6:	bf00      	nop
 80047a8:	3720      	adds	r7, #32
 80047aa:	46bd      	mov	sp, r7
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	bf00      	nop
 80047b0:	20002338 	.word	0x20002338
 80047b4:	200023a0 	.word	0x200023a0
 80047b8:	20002408 	.word	0x20002408

080047bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80047c4:	f001 fa2a 	bl	8005c1c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80047c8:	4b2d      	ldr	r3, [pc, #180]	@ (8004880 <prvAddNewTaskToReadyList+0xc4>)
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	3301      	adds	r3, #1
 80047ce:	4a2c      	ldr	r2, [pc, #176]	@ (8004880 <prvAddNewTaskToReadyList+0xc4>)
 80047d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80047d2:	4b2c      	ldr	r3, [pc, #176]	@ (8004884 <prvAddNewTaskToReadyList+0xc8>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d109      	bne.n	80047ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80047da:	4a2a      	ldr	r2, [pc, #168]	@ (8004884 <prvAddNewTaskToReadyList+0xc8>)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80047e0:	4b27      	ldr	r3, [pc, #156]	@ (8004880 <prvAddNewTaskToReadyList+0xc4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d110      	bne.n	800480a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80047e8:	f000 fc2a 	bl	8005040 <prvInitialiseTaskLists>
 80047ec:	e00d      	b.n	800480a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80047ee:	4b26      	ldr	r3, [pc, #152]	@ (8004888 <prvAddNewTaskToReadyList+0xcc>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d109      	bne.n	800480a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80047f6:	4b23      	ldr	r3, [pc, #140]	@ (8004884 <prvAddNewTaskToReadyList+0xc8>)
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004800:	429a      	cmp	r2, r3
 8004802:	d802      	bhi.n	800480a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004804:	4a1f      	ldr	r2, [pc, #124]	@ (8004884 <prvAddNewTaskToReadyList+0xc8>)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800480a:	4b20      	ldr	r3, [pc, #128]	@ (800488c <prvAddNewTaskToReadyList+0xd0>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	3301      	adds	r3, #1
 8004810:	4a1e      	ldr	r2, [pc, #120]	@ (800488c <prvAddNewTaskToReadyList+0xd0>)
 8004812:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004814:	4b1d      	ldr	r3, [pc, #116]	@ (800488c <prvAddNewTaskToReadyList+0xd0>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004820:	4b1b      	ldr	r3, [pc, #108]	@ (8004890 <prvAddNewTaskToReadyList+0xd4>)
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	429a      	cmp	r2, r3
 8004826:	d903      	bls.n	8004830 <prvAddNewTaskToReadyList+0x74>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800482c:	4a18      	ldr	r2, [pc, #96]	@ (8004890 <prvAddNewTaskToReadyList+0xd4>)
 800482e:	6013      	str	r3, [r2, #0]
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	009b      	lsls	r3, r3, #2
 800483c:	4a15      	ldr	r2, [pc, #84]	@ (8004894 <prvAddNewTaskToReadyList+0xd8>)
 800483e:	441a      	add	r2, r3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3304      	adds	r3, #4
 8004844:	4619      	mov	r1, r3
 8004846:	4610      	mov	r0, r2
 8004848:	f7ff f8ed 	bl	8003a26 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800484c:	f001 fa16 	bl	8005c7c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004850:	4b0d      	ldr	r3, [pc, #52]	@ (8004888 <prvAddNewTaskToReadyList+0xcc>)
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	2b00      	cmp	r3, #0
 8004856:	d00e      	beq.n	8004876 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004858:	4b0a      	ldr	r3, [pc, #40]	@ (8004884 <prvAddNewTaskToReadyList+0xc8>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004862:	429a      	cmp	r2, r3
 8004864:	d207      	bcs.n	8004876 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004866:	4b0c      	ldr	r3, [pc, #48]	@ (8004898 <prvAddNewTaskToReadyList+0xdc>)
 8004868:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800486c:	601a      	str	r2, [r3, #0]
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004876:	bf00      	nop
 8004878:	3708      	adds	r7, #8
 800487a:	46bd      	mov	sp, r7
 800487c:	bd80      	pop	{r7, pc}
 800487e:	bf00      	nop
 8004880:	200011b8 	.word	0x200011b8
 8004884:	20000ce4 	.word	0x20000ce4
 8004888:	200011c4 	.word	0x200011c4
 800488c:	200011d4 	.word	0x200011d4
 8004890:	200011c0 	.word	0x200011c0
 8004894:	20000ce8 	.word	0x20000ce8
 8004898:	e000ed04 	.word	0xe000ed04

0800489c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800489c:	b580      	push	{r7, lr}
 800489e:	b084      	sub	sp, #16
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80048a4:	2300      	movs	r3, #0
 80048a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d018      	beq.n	80048e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80048ae:	4b14      	ldr	r3, [pc, #80]	@ (8004900 <vTaskDelay+0x64>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00b      	beq.n	80048ce <vTaskDelay+0x32>
	__asm volatile
 80048b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80048ba:	f383 8811 	msr	BASEPRI, r3
 80048be:	f3bf 8f6f 	isb	sy
 80048c2:	f3bf 8f4f 	dsb	sy
 80048c6:	60bb      	str	r3, [r7, #8]
}
 80048c8:	bf00      	nop
 80048ca:	bf00      	nop
 80048cc:	e7fd      	b.n	80048ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80048ce:	f000 f88b 	bl	80049e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80048d2:	2100      	movs	r1, #0
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fd05 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80048da:	f000 f893 	bl	8004a04 <xTaskResumeAll>
 80048de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d107      	bne.n	80048f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80048e6:	4b07      	ldr	r3, [pc, #28]	@ (8004904 <vTaskDelay+0x68>)
 80048e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ec:	601a      	str	r2, [r3, #0]
 80048ee:	f3bf 8f4f 	dsb	sy
 80048f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048f6:	bf00      	nop
 80048f8:	3710      	adds	r7, #16
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
 80048fe:	bf00      	nop
 8004900:	200011e0 	.word	0x200011e0
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800490e:	2300      	movs	r3, #0
 8004910:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004916:	463a      	mov	r2, r7
 8004918:	1d39      	adds	r1, r7, #4
 800491a:	f107 0308 	add.w	r3, r7, #8
 800491e:	4618      	mov	r0, r3
 8004920:	f7ff f824 	bl	800396c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004924:	6839      	ldr	r1, [r7, #0]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68ba      	ldr	r2, [r7, #8]
 800492a:	9202      	str	r2, [sp, #8]
 800492c:	9301      	str	r3, [sp, #4]
 800492e:	2300      	movs	r3, #0
 8004930:	9300      	str	r3, [sp, #0]
 8004932:	2300      	movs	r3, #0
 8004934:	460a      	mov	r2, r1
 8004936:	4924      	ldr	r1, [pc, #144]	@ (80049c8 <vTaskStartScheduler+0xc0>)
 8004938:	4824      	ldr	r0, [pc, #144]	@ (80049cc <vTaskStartScheduler+0xc4>)
 800493a:	f7ff fdf1 	bl	8004520 <xTaskCreateStatic>
 800493e:	4603      	mov	r3, r0
 8004940:	4a23      	ldr	r2, [pc, #140]	@ (80049d0 <vTaskStartScheduler+0xc8>)
 8004942:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004944:	4b22      	ldr	r3, [pc, #136]	@ (80049d0 <vTaskStartScheduler+0xc8>)
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800494c:	2301      	movs	r3, #1
 800494e:	617b      	str	r3, [r7, #20]
 8004950:	e001      	b.n	8004956 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004952:	2300      	movs	r3, #0
 8004954:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004956:	697b      	ldr	r3, [r7, #20]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d102      	bne.n	8004962 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800495c:	f000 fd16 	bl	800538c <xTimerCreateTimerTask>
 8004960:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d11b      	bne.n	80049a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004968:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800496c:	f383 8811 	msr	BASEPRI, r3
 8004970:	f3bf 8f6f 	isb	sy
 8004974:	f3bf 8f4f 	dsb	sy
 8004978:	613b      	str	r3, [r7, #16]
}
 800497a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800497c:	4b15      	ldr	r3, [pc, #84]	@ (80049d4 <vTaskStartScheduler+0xcc>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	3354      	adds	r3, #84	@ 0x54
 8004982:	4a15      	ldr	r2, [pc, #84]	@ (80049d8 <vTaskStartScheduler+0xd0>)
 8004984:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004986:	4b15      	ldr	r3, [pc, #84]	@ (80049dc <vTaskStartScheduler+0xd4>)
 8004988:	f04f 32ff 	mov.w	r2, #4294967295
 800498c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800498e:	4b14      	ldr	r3, [pc, #80]	@ (80049e0 <vTaskStartScheduler+0xd8>)
 8004990:	2201      	movs	r2, #1
 8004992:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004994:	4b13      	ldr	r3, [pc, #76]	@ (80049e4 <vTaskStartScheduler+0xdc>)
 8004996:	2200      	movs	r2, #0
 8004998:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800499a:	f001 f8cd 	bl	8005b38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800499e:	e00f      	b.n	80049c0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d10b      	bne.n	80049c0 <vTaskStartScheduler+0xb8>
	__asm volatile
 80049a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049ac:	f383 8811 	msr	BASEPRI, r3
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	f3bf 8f4f 	dsb	sy
 80049b8:	60fb      	str	r3, [r7, #12]
}
 80049ba:	bf00      	nop
 80049bc:	bf00      	nop
 80049be:	e7fd      	b.n	80049bc <vTaskStartScheduler+0xb4>
}
 80049c0:	bf00      	nop
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	0800649c 	.word	0x0800649c
 80049cc:	08005011 	.word	0x08005011
 80049d0:	200011dc 	.word	0x200011dc
 80049d4:	20000ce4 	.word	0x20000ce4
 80049d8:	20000018 	.word	0x20000018
 80049dc:	200011d8 	.word	0x200011d8
 80049e0:	200011c4 	.word	0x200011c4
 80049e4:	200011bc 	.word	0x200011bc

080049e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049ec:	4b04      	ldr	r3, [pc, #16]	@ (8004a00 <vTaskSuspendAll+0x18>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	3301      	adds	r3, #1
 80049f2:	4a03      	ldr	r2, [pc, #12]	@ (8004a00 <vTaskSuspendAll+0x18>)
 80049f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049f6:	bf00      	nop
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bc80      	pop	{r7}
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	200011e0 	.word	0x200011e0

08004a04 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b084      	sub	sp, #16
 8004a08:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a12:	4b42      	ldr	r3, [pc, #264]	@ (8004b1c <xTaskResumeAll+0x118>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <xTaskResumeAll+0x2e>
	__asm volatile
 8004a1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1e:	f383 8811 	msr	BASEPRI, r3
 8004a22:	f3bf 8f6f 	isb	sy
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	603b      	str	r3, [r7, #0]
}
 8004a2c:	bf00      	nop
 8004a2e:	bf00      	nop
 8004a30:	e7fd      	b.n	8004a2e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a32:	f001 f8f3 	bl	8005c1c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a36:	4b39      	ldr	r3, [pc, #228]	@ (8004b1c <xTaskResumeAll+0x118>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	4a37      	ldr	r2, [pc, #220]	@ (8004b1c <xTaskResumeAll+0x118>)
 8004a3e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a40:	4b36      	ldr	r3, [pc, #216]	@ (8004b1c <xTaskResumeAll+0x118>)
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d162      	bne.n	8004b0e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a48:	4b35      	ldr	r3, [pc, #212]	@ (8004b20 <xTaskResumeAll+0x11c>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d05e      	beq.n	8004b0e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a50:	e02f      	b.n	8004ab2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a52:	4b34      	ldr	r3, [pc, #208]	@ (8004b24 <xTaskResumeAll+0x120>)
 8004a54:	68db      	ldr	r3, [r3, #12]
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	3318      	adds	r3, #24
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f7ff f83c 	bl	8003adc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	3304      	adds	r3, #4
 8004a68:	4618      	mov	r0, r3
 8004a6a:	f7ff f837 	bl	8003adc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a72:	4b2d      	ldr	r3, [pc, #180]	@ (8004b28 <xTaskResumeAll+0x124>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	429a      	cmp	r2, r3
 8004a78:	d903      	bls.n	8004a82 <xTaskResumeAll+0x7e>
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a7e:	4a2a      	ldr	r2, [pc, #168]	@ (8004b28 <xTaskResumeAll+0x124>)
 8004a80:	6013      	str	r3, [r2, #0]
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a86:	4613      	mov	r3, r2
 8004a88:	009b      	lsls	r3, r3, #2
 8004a8a:	4413      	add	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4a27      	ldr	r2, [pc, #156]	@ (8004b2c <xTaskResumeAll+0x128>)
 8004a90:	441a      	add	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	3304      	adds	r3, #4
 8004a96:	4619      	mov	r1, r3
 8004a98:	4610      	mov	r0, r2
 8004a9a:	f7fe ffc4 	bl	8003a26 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa2:	4b23      	ldr	r3, [pc, #140]	@ (8004b30 <xTaskResumeAll+0x12c>)
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d302      	bcc.n	8004ab2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8004aac:	4b21      	ldr	r3, [pc, #132]	@ (8004b34 <xTaskResumeAll+0x130>)
 8004aae:	2201      	movs	r2, #1
 8004ab0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab2:	4b1c      	ldr	r3, [pc, #112]	@ (8004b24 <xTaskResumeAll+0x120>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1cb      	bne.n	8004a52 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d001      	beq.n	8004ac4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac0:	f000 fb62 	bl	8005188 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ac4:	4b1c      	ldr	r3, [pc, #112]	@ (8004b38 <xTaskResumeAll+0x134>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d010      	beq.n	8004af2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad0:	f000 f844 	bl	8004b5c <xTaskIncrementTick>
 8004ad4:	4603      	mov	r3, r0
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d002      	beq.n	8004ae0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8004ada:	4b16      	ldr	r3, [pc, #88]	@ (8004b34 <xTaskResumeAll+0x130>)
 8004adc:	2201      	movs	r2, #1
 8004ade:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	3b01      	subs	r3, #1
 8004ae4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f1      	bne.n	8004ad0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8004aec:	4b12      	ldr	r3, [pc, #72]	@ (8004b38 <xTaskResumeAll+0x134>)
 8004aee:	2200      	movs	r2, #0
 8004af0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af2:	4b10      	ldr	r3, [pc, #64]	@ (8004b34 <xTaskResumeAll+0x130>)
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004afa:	2301      	movs	r3, #1
 8004afc:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004afe:	4b0f      	ldr	r3, [pc, #60]	@ (8004b3c <xTaskResumeAll+0x138>)
 8004b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b04:	601a      	str	r2, [r3, #0]
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b0e:	f001 f8b5 	bl	8005c7c <vPortExitCritical>

	return xAlreadyYielded;
 8004b12:	68bb      	ldr	r3, [r7, #8]
}
 8004b14:	4618      	mov	r0, r3
 8004b16:	3710      	adds	r7, #16
 8004b18:	46bd      	mov	sp, r7
 8004b1a:	bd80      	pop	{r7, pc}
 8004b1c:	200011e0 	.word	0x200011e0
 8004b20:	200011b8 	.word	0x200011b8
 8004b24:	20001178 	.word	0x20001178
 8004b28:	200011c0 	.word	0x200011c0
 8004b2c:	20000ce8 	.word	0x20000ce8
 8004b30:	20000ce4 	.word	0x20000ce4
 8004b34:	200011cc 	.word	0x200011cc
 8004b38:	200011c8 	.word	0x200011c8
 8004b3c:	e000ed04 	.word	0xe000ed04

08004b40 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b46:	4b04      	ldr	r3, [pc, #16]	@ (8004b58 <xTaskGetTickCount+0x18>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b4c:	687b      	ldr	r3, [r7, #4]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	370c      	adds	r7, #12
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bc80      	pop	{r7}
 8004b56:	4770      	bx	lr
 8004b58:	200011bc 	.word	0x200011bc

08004b5c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b086      	sub	sp, #24
 8004b60:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b66:	4b4f      	ldr	r3, [pc, #316]	@ (8004ca4 <xTaskIncrementTick+0x148>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f040 8090 	bne.w	8004c90 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b70:	4b4d      	ldr	r3, [pc, #308]	@ (8004ca8 <xTaskIncrementTick+0x14c>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3301      	adds	r3, #1
 8004b76:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b78:	4a4b      	ldr	r2, [pc, #300]	@ (8004ca8 <xTaskIncrementTick+0x14c>)
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d121      	bne.n	8004bc8 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b84:	4b49      	ldr	r3, [pc, #292]	@ (8004cac <xTaskIncrementTick+0x150>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00b      	beq.n	8004ba6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	603b      	str	r3, [r7, #0]
}
 8004ba0:	bf00      	nop
 8004ba2:	bf00      	nop
 8004ba4:	e7fd      	b.n	8004ba2 <xTaskIncrementTick+0x46>
 8004ba6:	4b41      	ldr	r3, [pc, #260]	@ (8004cac <xTaskIncrementTick+0x150>)
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	60fb      	str	r3, [r7, #12]
 8004bac:	4b40      	ldr	r3, [pc, #256]	@ (8004cb0 <xTaskIncrementTick+0x154>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a3e      	ldr	r2, [pc, #248]	@ (8004cac <xTaskIncrementTick+0x150>)
 8004bb2:	6013      	str	r3, [r2, #0]
 8004bb4:	4a3e      	ldr	r2, [pc, #248]	@ (8004cb0 <xTaskIncrementTick+0x154>)
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4b3e      	ldr	r3, [pc, #248]	@ (8004cb4 <xTaskIncrementTick+0x158>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	3301      	adds	r3, #1
 8004bc0:	4a3c      	ldr	r2, [pc, #240]	@ (8004cb4 <xTaskIncrementTick+0x158>)
 8004bc2:	6013      	str	r3, [r2, #0]
 8004bc4:	f000 fae0 	bl	8005188 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bc8:	4b3b      	ldr	r3, [pc, #236]	@ (8004cb8 <xTaskIncrementTick+0x15c>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	693a      	ldr	r2, [r7, #16]
 8004bce:	429a      	cmp	r2, r3
 8004bd0:	d349      	bcc.n	8004c66 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd2:	4b36      	ldr	r3, [pc, #216]	@ (8004cac <xTaskIncrementTick+0x150>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d104      	bne.n	8004be6 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bdc:	4b36      	ldr	r3, [pc, #216]	@ (8004cb8 <xTaskIncrementTick+0x15c>)
 8004bde:	f04f 32ff 	mov.w	r2, #4294967295
 8004be2:	601a      	str	r2, [r3, #0]
					break;
 8004be4:	e03f      	b.n	8004c66 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004be6:	4b31      	ldr	r3, [pc, #196]	@ (8004cac <xTaskIncrementTick+0x150>)
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	68db      	ldr	r3, [r3, #12]
 8004bec:	68db      	ldr	r3, [r3, #12]
 8004bee:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	685b      	ldr	r3, [r3, #4]
 8004bf4:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bf6:	693a      	ldr	r2, [r7, #16]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	429a      	cmp	r2, r3
 8004bfc:	d203      	bcs.n	8004c06 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004bfe:	4a2e      	ldr	r2, [pc, #184]	@ (8004cb8 <xTaskIncrementTick+0x15c>)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c04:	e02f      	b.n	8004c66 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	3304      	adds	r3, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe ff66 	bl	8003adc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d004      	beq.n	8004c22 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	3318      	adds	r3, #24
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fe ff5d 	bl	8003adc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c26:	4b25      	ldr	r3, [pc, #148]	@ (8004cbc <xTaskIncrementTick+0x160>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	429a      	cmp	r2, r3
 8004c2c:	d903      	bls.n	8004c36 <xTaskIncrementTick+0xda>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c32:	4a22      	ldr	r2, [pc, #136]	@ (8004cbc <xTaskIncrementTick+0x160>)
 8004c34:	6013      	str	r3, [r2, #0]
 8004c36:	68bb      	ldr	r3, [r7, #8]
 8004c38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	009b      	lsls	r3, r3, #2
 8004c42:	4a1f      	ldr	r2, [pc, #124]	@ (8004cc0 <xTaskIncrementTick+0x164>)
 8004c44:	441a      	add	r2, r3
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	3304      	adds	r3, #4
 8004c4a:	4619      	mov	r1, r3
 8004c4c:	4610      	mov	r0, r2
 8004c4e:	f7fe feea 	bl	8003a26 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c56:	4b1b      	ldr	r3, [pc, #108]	@ (8004cc4 <xTaskIncrementTick+0x168>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004c5c:	429a      	cmp	r2, r3
 8004c5e:	d3b8      	bcc.n	8004bd2 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8004c60:	2301      	movs	r3, #1
 8004c62:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c64:	e7b5      	b.n	8004bd2 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c66:	4b17      	ldr	r3, [pc, #92]	@ (8004cc4 <xTaskIncrementTick+0x168>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004c6c:	4914      	ldr	r1, [pc, #80]	@ (8004cc0 <xTaskIncrementTick+0x164>)
 8004c6e:	4613      	mov	r3, r2
 8004c70:	009b      	lsls	r3, r3, #2
 8004c72:	4413      	add	r3, r2
 8004c74:	009b      	lsls	r3, r3, #2
 8004c76:	440b      	add	r3, r1
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d901      	bls.n	8004c82 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c82:	4b11      	ldr	r3, [pc, #68]	@ (8004cc8 <xTaskIncrementTick+0x16c>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8004c8a:	2301      	movs	r3, #1
 8004c8c:	617b      	str	r3, [r7, #20]
 8004c8e:	e004      	b.n	8004c9a <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c90:	4b0e      	ldr	r3, [pc, #56]	@ (8004ccc <xTaskIncrementTick+0x170>)
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3301      	adds	r3, #1
 8004c96:	4a0d      	ldr	r2, [pc, #52]	@ (8004ccc <xTaskIncrementTick+0x170>)
 8004c98:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004c9a:	697b      	ldr	r3, [r7, #20]
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3718      	adds	r7, #24
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}
 8004ca4:	200011e0 	.word	0x200011e0
 8004ca8:	200011bc 	.word	0x200011bc
 8004cac:	20001170 	.word	0x20001170
 8004cb0:	20001174 	.word	0x20001174
 8004cb4:	200011d0 	.word	0x200011d0
 8004cb8:	200011d8 	.word	0x200011d8
 8004cbc:	200011c0 	.word	0x200011c0
 8004cc0:	20000ce8 	.word	0x20000ce8
 8004cc4:	20000ce4 	.word	0x20000ce4
 8004cc8:	200011cc 	.word	0x200011cc
 8004ccc:	200011c8 	.word	0x200011c8

08004cd0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cd6:	4b2a      	ldr	r3, [pc, #168]	@ (8004d80 <vTaskSwitchContext+0xb0>)
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d003      	beq.n	8004ce6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004cde:	4b29      	ldr	r3, [pc, #164]	@ (8004d84 <vTaskSwitchContext+0xb4>)
 8004ce0:	2201      	movs	r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004ce4:	e047      	b.n	8004d76 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8004ce6:	4b27      	ldr	r3, [pc, #156]	@ (8004d84 <vTaskSwitchContext+0xb4>)
 8004ce8:	2200      	movs	r2, #0
 8004cea:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cec:	4b26      	ldr	r3, [pc, #152]	@ (8004d88 <vTaskSwitchContext+0xb8>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	e011      	b.n	8004d18 <vTaskSwitchContext+0x48>
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d10b      	bne.n	8004d12 <vTaskSwitchContext+0x42>
	__asm volatile
 8004cfa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004cfe:	f383 8811 	msr	BASEPRI, r3
 8004d02:	f3bf 8f6f 	isb	sy
 8004d06:	f3bf 8f4f 	dsb	sy
 8004d0a:	607b      	str	r3, [r7, #4]
}
 8004d0c:	bf00      	nop
 8004d0e:	bf00      	nop
 8004d10:	e7fd      	b.n	8004d0e <vTaskSwitchContext+0x3e>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
 8004d18:	491c      	ldr	r1, [pc, #112]	@ (8004d8c <vTaskSwitchContext+0xbc>)
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	4613      	mov	r3, r2
 8004d1e:	009b      	lsls	r3, r3, #2
 8004d20:	4413      	add	r3, r2
 8004d22:	009b      	lsls	r3, r3, #2
 8004d24:	440b      	add	r3, r1
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d0e3      	beq.n	8004cf4 <vTaskSwitchContext+0x24>
 8004d2c:	68fa      	ldr	r2, [r7, #12]
 8004d2e:	4613      	mov	r3, r2
 8004d30:	009b      	lsls	r3, r3, #2
 8004d32:	4413      	add	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4a15      	ldr	r2, [pc, #84]	@ (8004d8c <vTaskSwitchContext+0xbc>)
 8004d38:	4413      	add	r3, r2
 8004d3a:	60bb      	str	r3, [r7, #8]
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	605a      	str	r2, [r3, #4]
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	685a      	ldr	r2, [r3, #4]
 8004d4a:	68bb      	ldr	r3, [r7, #8]
 8004d4c:	3308      	adds	r3, #8
 8004d4e:	429a      	cmp	r2, r3
 8004d50:	d104      	bne.n	8004d5c <vTaskSwitchContext+0x8c>
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	685a      	ldr	r2, [r3, #4]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	605a      	str	r2, [r3, #4]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	68db      	ldr	r3, [r3, #12]
 8004d62:	4a0b      	ldr	r2, [pc, #44]	@ (8004d90 <vTaskSwitchContext+0xc0>)
 8004d64:	6013      	str	r3, [r2, #0]
 8004d66:	4a08      	ldr	r2, [pc, #32]	@ (8004d88 <vTaskSwitchContext+0xb8>)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d6c:	4b08      	ldr	r3, [pc, #32]	@ (8004d90 <vTaskSwitchContext+0xc0>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	3354      	adds	r3, #84	@ 0x54
 8004d72:	4a08      	ldr	r2, [pc, #32]	@ (8004d94 <vTaskSwitchContext+0xc4>)
 8004d74:	6013      	str	r3, [r2, #0]
}
 8004d76:	bf00      	nop
 8004d78:	3714      	adds	r7, #20
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bc80      	pop	{r7}
 8004d7e:	4770      	bx	lr
 8004d80:	200011e0 	.word	0x200011e0
 8004d84:	200011cc 	.word	0x200011cc
 8004d88:	200011c0 	.word	0x200011c0
 8004d8c:	20000ce8 	.word	0x20000ce8
 8004d90:	20000ce4 	.word	0x20000ce4
 8004d94:	20000018 	.word	0x20000018

08004d98 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b084      	sub	sp, #16
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d10b      	bne.n	8004dc0 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8004da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dac:	f383 8811 	msr	BASEPRI, r3
 8004db0:	f3bf 8f6f 	isb	sy
 8004db4:	f3bf 8f4f 	dsb	sy
 8004db8:	60fb      	str	r3, [r7, #12]
}
 8004dba:	bf00      	nop
 8004dbc:	bf00      	nop
 8004dbe:	e7fd      	b.n	8004dbc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dc0:	4b07      	ldr	r3, [pc, #28]	@ (8004de0 <vTaskPlaceOnEventList+0x48>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	3318      	adds	r3, #24
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f7fe fe4f 	bl	8003a6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dce:	2101      	movs	r1, #1
 8004dd0:	6838      	ldr	r0, [r7, #0]
 8004dd2:	f000 fa87 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
}
 8004dd6:	bf00      	nop
 8004dd8:	3710      	adds	r7, #16
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	bd80      	pop	{r7, pc}
 8004dde:	bf00      	nop
 8004de0:	20000ce4 	.word	0x20000ce4

08004de4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b086      	sub	sp, #24
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	60f8      	str	r0, [r7, #12]
 8004dec:	60b9      	str	r1, [r7, #8]
 8004dee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d10b      	bne.n	8004e0e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8004df6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dfa:	f383 8811 	msr	BASEPRI, r3
 8004dfe:	f3bf 8f6f 	isb	sy
 8004e02:	f3bf 8f4f 	dsb	sy
 8004e06:	617b      	str	r3, [r7, #20]
}
 8004e08:	bf00      	nop
 8004e0a:	bf00      	nop
 8004e0c:	e7fd      	b.n	8004e0a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e0e:	4b0a      	ldr	r3, [pc, #40]	@ (8004e38 <vTaskPlaceOnEventListRestricted+0x54>)
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	3318      	adds	r3, #24
 8004e14:	4619      	mov	r1, r3
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7fe fe05 	bl	8003a26 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d002      	beq.n	8004e28 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8004e22:	f04f 33ff 	mov.w	r3, #4294967295
 8004e26:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e28:	6879      	ldr	r1, [r7, #4]
 8004e2a:	68b8      	ldr	r0, [r7, #8]
 8004e2c:	f000 fa5a 	bl	80052e4 <prvAddCurrentTaskToDelayedList>
	}
 8004e30:	bf00      	nop
 8004e32:	3718      	adds	r7, #24
 8004e34:	46bd      	mov	sp, r7
 8004e36:	bd80      	pop	{r7, pc}
 8004e38:	20000ce4 	.word	0x20000ce4

08004e3c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b086      	sub	sp, #24
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d10b      	bne.n	8004e6a <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8004e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e56:	f383 8811 	msr	BASEPRI, r3
 8004e5a:	f3bf 8f6f 	isb	sy
 8004e5e:	f3bf 8f4f 	dsb	sy
 8004e62:	60fb      	str	r3, [r7, #12]
}
 8004e64:	bf00      	nop
 8004e66:	bf00      	nop
 8004e68:	e7fd      	b.n	8004e66 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	3318      	adds	r3, #24
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f7fe fe34 	bl	8003adc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e74:	4b1d      	ldr	r3, [pc, #116]	@ (8004eec <xTaskRemoveFromEventList+0xb0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d11d      	bne.n	8004eb8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e7c:	693b      	ldr	r3, [r7, #16]
 8004e7e:	3304      	adds	r3, #4
 8004e80:	4618      	mov	r0, r3
 8004e82:	f7fe fe2b 	bl	8003adc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e86:	693b      	ldr	r3, [r7, #16]
 8004e88:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e8a:	4b19      	ldr	r3, [pc, #100]	@ (8004ef0 <xTaskRemoveFromEventList+0xb4>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	429a      	cmp	r2, r3
 8004e90:	d903      	bls.n	8004e9a <xTaskRemoveFromEventList+0x5e>
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e96:	4a16      	ldr	r2, [pc, #88]	@ (8004ef0 <xTaskRemoveFromEventList+0xb4>)
 8004e98:	6013      	str	r3, [r2, #0]
 8004e9a:	693b      	ldr	r3, [r7, #16]
 8004e9c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e9e:	4613      	mov	r3, r2
 8004ea0:	009b      	lsls	r3, r3, #2
 8004ea2:	4413      	add	r3, r2
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4a13      	ldr	r2, [pc, #76]	@ (8004ef4 <xTaskRemoveFromEventList+0xb8>)
 8004ea8:	441a      	add	r2, r3
 8004eaa:	693b      	ldr	r3, [r7, #16]
 8004eac:	3304      	adds	r3, #4
 8004eae:	4619      	mov	r1, r3
 8004eb0:	4610      	mov	r0, r2
 8004eb2:	f7fe fdb8 	bl	8003a26 <vListInsertEnd>
 8004eb6:	e005      	b.n	8004ec4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eb8:	693b      	ldr	r3, [r7, #16]
 8004eba:	3318      	adds	r3, #24
 8004ebc:	4619      	mov	r1, r3
 8004ebe:	480e      	ldr	r0, [pc, #56]	@ (8004ef8 <xTaskRemoveFromEventList+0xbc>)
 8004ec0:	f7fe fdb1 	bl	8003a26 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ec4:	693b      	ldr	r3, [r7, #16]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec8:	4b0c      	ldr	r3, [pc, #48]	@ (8004efc <xTaskRemoveFromEventList+0xc0>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d905      	bls.n	8004ede <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ed2:	2301      	movs	r3, #1
 8004ed4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ed6:	4b0a      	ldr	r3, [pc, #40]	@ (8004f00 <xTaskRemoveFromEventList+0xc4>)
 8004ed8:	2201      	movs	r2, #1
 8004eda:	601a      	str	r2, [r3, #0]
 8004edc:	e001      	b.n	8004ee2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ee2:	697b      	ldr	r3, [r7, #20]
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3718      	adds	r7, #24
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	200011e0 	.word	0x200011e0
 8004ef0:	200011c0 	.word	0x200011c0
 8004ef4:	20000ce8 	.word	0x20000ce8
 8004ef8:	20001178 	.word	0x20001178
 8004efc:	20000ce4 	.word	0x20000ce4
 8004f00:	200011cc 	.word	0x200011cc

08004f04 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f0c:	4b06      	ldr	r3, [pc, #24]	@ (8004f28 <vTaskInternalSetTimeOutState+0x24>)
 8004f0e:	681a      	ldr	r2, [r3, #0]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f14:	4b05      	ldr	r3, [pc, #20]	@ (8004f2c <vTaskInternalSetTimeOutState+0x28>)
 8004f16:	681a      	ldr	r2, [r3, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	605a      	str	r2, [r3, #4]
}
 8004f1c:	bf00      	nop
 8004f1e:	370c      	adds	r7, #12
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bc80      	pop	{r7}
 8004f24:	4770      	bx	lr
 8004f26:	bf00      	nop
 8004f28:	200011d0 	.word	0x200011d0
 8004f2c:	200011bc 	.word	0x200011bc

08004f30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b088      	sub	sp, #32
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d10b      	bne.n	8004f58 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8004f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f44:	f383 8811 	msr	BASEPRI, r3
 8004f48:	f3bf 8f6f 	isb	sy
 8004f4c:	f3bf 8f4f 	dsb	sy
 8004f50:	613b      	str	r3, [r7, #16]
}
 8004f52:	bf00      	nop
 8004f54:	bf00      	nop
 8004f56:	e7fd      	b.n	8004f54 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d10b      	bne.n	8004f76 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8004f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f62:	f383 8811 	msr	BASEPRI, r3
 8004f66:	f3bf 8f6f 	isb	sy
 8004f6a:	f3bf 8f4f 	dsb	sy
 8004f6e:	60fb      	str	r3, [r7, #12]
}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	e7fd      	b.n	8004f72 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8004f76:	f000 fe51 	bl	8005c1c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	@ (8004ff0 <xTaskCheckForTimeOut+0xc0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d102      	bne.n	8004f9a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e023      	b.n	8004fe2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b15      	ldr	r3, [pc, #84]	@ (8004ff4 <xTaskCheckForTimeOut+0xc4>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d007      	beq.n	8004fb6 <xTaskCheckForTimeOut+0x86>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e015      	b.n	8004fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d20b      	bcs.n	8004fd8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff99 	bl	8004f04 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e004      	b.n	8004fe2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fe2:	f000 fe4b 	bl	8005c7c <vPortExitCritical>

	return xReturn;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	200011bc 	.word	0x200011bc
 8004ff4:	200011d0 	.word	0x200011d0

08004ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	@ (800500c <vTaskMissedYield+0x14>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	bc80      	pop	{r7}
 8005008:	4770      	bx	lr
 800500a:	bf00      	nop
 800500c:	200011cc 	.word	0x200011cc

08005010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005018:	f000 f852 	bl	80050c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800501c:	4b06      	ldr	r3, [pc, #24]	@ (8005038 <prvIdleTask+0x28>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d9f9      	bls.n	8005018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005024:	4b05      	ldr	r3, [pc, #20]	@ (800503c <prvIdleTask+0x2c>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005034:	e7f0      	b.n	8005018 <prvIdleTask+0x8>
 8005036:	bf00      	nop
 8005038:	20000ce8 	.word	0x20000ce8
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e00c      	b.n	8005066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a12      	ldr	r2, [pc, #72]	@ (80050a0 <prvInitialiseTaskLists+0x60>)
 8005058:	4413      	add	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fcb8 	bl	80039d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b37      	cmp	r3, #55	@ 0x37
 800506a:	d9ef      	bls.n	800504c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800506c:	480d      	ldr	r0, [pc, #52]	@ (80050a4 <prvInitialiseTaskLists+0x64>)
 800506e:	f7fe fcaf 	bl	80039d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005072:	480d      	ldr	r0, [pc, #52]	@ (80050a8 <prvInitialiseTaskLists+0x68>)
 8005074:	f7fe fcac 	bl	80039d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005078:	480c      	ldr	r0, [pc, #48]	@ (80050ac <prvInitialiseTaskLists+0x6c>)
 800507a:	f7fe fca9 	bl	80039d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800507e:	480c      	ldr	r0, [pc, #48]	@ (80050b0 <prvInitialiseTaskLists+0x70>)
 8005080:	f7fe fca6 	bl	80039d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005084:	480b      	ldr	r0, [pc, #44]	@ (80050b4 <prvInitialiseTaskLists+0x74>)
 8005086:	f7fe fca3 	bl	80039d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800508a:	4b0b      	ldr	r3, [pc, #44]	@ (80050b8 <prvInitialiseTaskLists+0x78>)
 800508c:	4a05      	ldr	r2, [pc, #20]	@ (80050a4 <prvInitialiseTaskLists+0x64>)
 800508e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005090:	4b0a      	ldr	r3, [pc, #40]	@ (80050bc <prvInitialiseTaskLists+0x7c>)
 8005092:	4a05      	ldr	r2, [pc, #20]	@ (80050a8 <prvInitialiseTaskLists+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000ce8 	.word	0x20000ce8
 80050a4:	20001148 	.word	0x20001148
 80050a8:	2000115c 	.word	0x2000115c
 80050ac:	20001178 	.word	0x20001178
 80050b0:	2000118c 	.word	0x2000118c
 80050b4:	200011a4 	.word	0x200011a4
 80050b8:	20001170 	.word	0x20001170
 80050bc:	20001174 	.word	0x20001174

080050c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c6:	e019      	b.n	80050fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050c8:	f000 fda8 	bl	8005c1c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050cc:	4b10      	ldr	r3, [pc, #64]	@ (8005110 <prvCheckTasksWaitingTermination+0x50>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fcff 	bl	8003adc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4a0b      	ldr	r2, [pc, #44]	@ (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050e8:	4b0b      	ldr	r3, [pc, #44]	@ (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a0a      	ldr	r2, [pc, #40]	@ (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050f2:	f000 fdc3 	bl	8005c7c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f810 	bl	800511c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fc:	4b06      	ldr	r3, [pc, #24]	@ (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e1      	bne.n	80050c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	2000118c 	.word	0x2000118c
 8005114:	200011b8 	.word	0x200011b8
 8005118:	200011a0 	.word	0x200011a0

0800511c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3354      	adds	r3, #84	@ 0x54
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f86d 	bl	8006208 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005134:	2b00      	cmp	r3, #0
 8005136:	d108      	bne.n	800514a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	4618      	mov	r0, r3
 800513e:	f000 ff3d 	bl	8005fbc <vPortFree>
				vPortFree( pxTCB );
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ff3a 	bl	8005fbc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005148:	e019      	b.n	800517e <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005150:	2b01      	cmp	r3, #1
 8005152:	d103      	bne.n	800515c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 ff31 	bl	8005fbc <vPortFree>
	}
 800515a:	e010      	b.n	800517e <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005162:	2b02      	cmp	r3, #2
 8005164:	d00b      	beq.n	800517e <prvDeleteTCB+0x62>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fb      	str	r3, [r7, #12]
}
 8005178:	bf00      	nop
 800517a:	bf00      	nop
 800517c:	e7fd      	b.n	800517a <prvDeleteTCB+0x5e>
	}
 800517e:	bf00      	nop
 8005180:	3710      	adds	r7, #16
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
	...

08005188 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518e:	4b0c      	ldr	r3, [pc, #48]	@ (80051c0 <prvResetNextTaskUnblockTime+0x38>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d104      	bne.n	80051a2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005198:	4b0a      	ldr	r3, [pc, #40]	@ (80051c4 <prvResetNextTaskUnblockTime+0x3c>)
 800519a:	f04f 32ff 	mov.w	r2, #4294967295
 800519e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80051a0:	e008      	b.n	80051b4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051a2:	4b07      	ldr	r3, [pc, #28]	@ (80051c0 <prvResetNextTaskUnblockTime+0x38>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	68db      	ldr	r3, [r3, #12]
 80051aa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	4a04      	ldr	r2, [pc, #16]	@ (80051c4 <prvResetNextTaskUnblockTime+0x3c>)
 80051b2:	6013      	str	r3, [r2, #0]
}
 80051b4:	bf00      	nop
 80051b6:	370c      	adds	r7, #12
 80051b8:	46bd      	mov	sp, r7
 80051ba:	bc80      	pop	{r7}
 80051bc:	4770      	bx	lr
 80051be:	bf00      	nop
 80051c0:	20001170 	.word	0x20001170
 80051c4:	200011d8 	.word	0x200011d8

080051c8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ce:	4b0b      	ldr	r3, [pc, #44]	@ (80051fc <xTaskGetSchedulerState+0x34>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d102      	bne.n	80051dc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051d6:	2301      	movs	r3, #1
 80051d8:	607b      	str	r3, [r7, #4]
 80051da:	e008      	b.n	80051ee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051dc:	4b08      	ldr	r3, [pc, #32]	@ (8005200 <xTaskGetSchedulerState+0x38>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d102      	bne.n	80051ea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e4:	2302      	movs	r3, #2
 80051e6:	607b      	str	r3, [r7, #4]
 80051e8:	e001      	b.n	80051ee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051ea:	2300      	movs	r3, #0
 80051ec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051ee:	687b      	ldr	r3, [r7, #4]
	}
 80051f0:	4618      	mov	r0, r3
 80051f2:	370c      	adds	r7, #12
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bc80      	pop	{r7}
 80051f8:	4770      	bx	lr
 80051fa:	bf00      	nop
 80051fc:	200011c4 	.word	0x200011c4
 8005200:	200011e0 	.word	0x200011e0

08005204 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005204:	b580      	push	{r7, lr}
 8005206:	b086      	sub	sp, #24
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d058      	beq.n	80052cc <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800521a:	4b2f      	ldr	r3, [pc, #188]	@ (80052d8 <xTaskPriorityDisinherit+0xd4>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	429a      	cmp	r2, r3
 8005222:	d00b      	beq.n	800523c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8005224:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005228:	f383 8811 	msr	BASEPRI, r3
 800522c:	f3bf 8f6f 	isb	sy
 8005230:	f3bf 8f4f 	dsb	sy
 8005234:	60fb      	str	r3, [r7, #12]
}
 8005236:	bf00      	nop
 8005238:	bf00      	nop
 800523a:	e7fd      	b.n	8005238 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10b      	bne.n	800525c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
}
 8005256:	bf00      	nop
 8005258:	bf00      	nop
 800525a:	e7fd      	b.n	8005258 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800525c:	693b      	ldr	r3, [r7, #16]
 800525e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005260:	1e5a      	subs	r2, r3, #1
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800526e:	429a      	cmp	r2, r3
 8005270:	d02c      	beq.n	80052cc <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005276:	2b00      	cmp	r3, #0
 8005278:	d128      	bne.n	80052cc <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	3304      	adds	r3, #4
 800527e:	4618      	mov	r0, r3
 8005280:	f7fe fc2c 	bl	8003adc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005288:	693b      	ldr	r3, [r7, #16]
 800528a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005290:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005294:	693b      	ldr	r3, [r7, #16]
 8005296:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005298:	693b      	ldr	r3, [r7, #16]
 800529a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800529c:	4b0f      	ldr	r3, [pc, #60]	@ (80052dc <xTaskPriorityDisinherit+0xd8>)
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d903      	bls.n	80052ac <xTaskPriorityDisinherit+0xa8>
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052a8:	4a0c      	ldr	r2, [pc, #48]	@ (80052dc <xTaskPriorityDisinherit+0xd8>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052b0:	4613      	mov	r3, r2
 80052b2:	009b      	lsls	r3, r3, #2
 80052b4:	4413      	add	r3, r2
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	4a09      	ldr	r2, [pc, #36]	@ (80052e0 <xTaskPriorityDisinherit+0xdc>)
 80052ba:	441a      	add	r2, r3
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	3304      	adds	r3, #4
 80052c0:	4619      	mov	r1, r3
 80052c2:	4610      	mov	r0, r2
 80052c4:	f7fe fbaf 	bl	8003a26 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c8:	2301      	movs	r3, #1
 80052ca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052cc:	697b      	ldr	r3, [r7, #20]
	}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000ce4 	.word	0x20000ce4
 80052dc:	200011c0 	.word	0x200011c0
 80052e0:	20000ce8 	.word	0x20000ce8

080052e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052e4:	b580      	push	{r7, lr}
 80052e6:	b084      	sub	sp, #16
 80052e8:	af00      	add	r7, sp, #0
 80052ea:	6078      	str	r0, [r7, #4]
 80052ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052ee:	4b21      	ldr	r3, [pc, #132]	@ (8005374 <prvAddCurrentTaskToDelayedList+0x90>)
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052f4:	4b20      	ldr	r3, [pc, #128]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	3304      	adds	r3, #4
 80052fa:	4618      	mov	r0, r3
 80052fc:	f7fe fbee 	bl	8003adc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005306:	d10a      	bne.n	800531e <prvAddCurrentTaskToDelayedList+0x3a>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800530e:	4b1a      	ldr	r3, [pc, #104]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	3304      	adds	r3, #4
 8005314:	4619      	mov	r1, r3
 8005316:	4819      	ldr	r0, [pc, #100]	@ (800537c <prvAddCurrentTaskToDelayedList+0x98>)
 8005318:	f7fe fb85 	bl	8003a26 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800531c:	e026      	b.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	4413      	add	r3, r2
 8005324:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005326:	4b14      	ldr	r3, [pc, #80]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68ba      	ldr	r2, [r7, #8]
 800532c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800532e:	68ba      	ldr	r2, [r7, #8]
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	429a      	cmp	r2, r3
 8005334:	d209      	bcs.n	800534a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005336:	4b12      	ldr	r3, [pc, #72]	@ (8005380 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	4b0f      	ldr	r3, [pc, #60]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	3304      	adds	r3, #4
 8005340:	4619      	mov	r1, r3
 8005342:	4610      	mov	r0, r2
 8005344:	f7fe fb92 	bl	8003a6c <vListInsert>
}
 8005348:	e010      	b.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800534a:	4b0e      	ldr	r3, [pc, #56]	@ (8005384 <prvAddCurrentTaskToDelayedList+0xa0>)
 800534c:	681a      	ldr	r2, [r3, #0]
 800534e:	4b0a      	ldr	r3, [pc, #40]	@ (8005378 <prvAddCurrentTaskToDelayedList+0x94>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	3304      	adds	r3, #4
 8005354:	4619      	mov	r1, r3
 8005356:	4610      	mov	r0, r2
 8005358:	f7fe fb88 	bl	8003a6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800535c:	4b0a      	ldr	r3, [pc, #40]	@ (8005388 <prvAddCurrentTaskToDelayedList+0xa4>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68ba      	ldr	r2, [r7, #8]
 8005362:	429a      	cmp	r2, r3
 8005364:	d202      	bcs.n	800536c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005366:	4a08      	ldr	r2, [pc, #32]	@ (8005388 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	6013      	str	r3, [r2, #0]
}
 800536c:	bf00      	nop
 800536e:	3710      	adds	r7, #16
 8005370:	46bd      	mov	sp, r7
 8005372:	bd80      	pop	{r7, pc}
 8005374:	200011bc 	.word	0x200011bc
 8005378:	20000ce4 	.word	0x20000ce4
 800537c:	200011a4 	.word	0x200011a4
 8005380:	20001174 	.word	0x20001174
 8005384:	20001170 	.word	0x20001170
 8005388:	200011d8 	.word	0x200011d8

0800538c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b08a      	sub	sp, #40	@ 0x28
 8005390:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005392:	2300      	movs	r3, #0
 8005394:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005396:	f000 fb11 	bl	80059bc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800539a:	4b1d      	ldr	r3, [pc, #116]	@ (8005410 <xTimerCreateTimerTask+0x84>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d021      	beq.n	80053e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80053a6:	2300      	movs	r3, #0
 80053a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053aa:	1d3a      	adds	r2, r7, #4
 80053ac:	f107 0108 	add.w	r1, r7, #8
 80053b0:	f107 030c 	add.w	r3, r7, #12
 80053b4:	4618      	mov	r0, r3
 80053b6:	f7fe faf1 	bl	800399c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053ba:	6879      	ldr	r1, [r7, #4]
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	68fa      	ldr	r2, [r7, #12]
 80053c0:	9202      	str	r2, [sp, #8]
 80053c2:	9301      	str	r3, [sp, #4]
 80053c4:	2302      	movs	r3, #2
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	2300      	movs	r3, #0
 80053ca:	460a      	mov	r2, r1
 80053cc:	4911      	ldr	r1, [pc, #68]	@ (8005414 <xTimerCreateTimerTask+0x88>)
 80053ce:	4812      	ldr	r0, [pc, #72]	@ (8005418 <xTimerCreateTimerTask+0x8c>)
 80053d0:	f7ff f8a6 	bl	8004520 <xTaskCreateStatic>
 80053d4:	4603      	mov	r3, r0
 80053d6:	4a11      	ldr	r2, [pc, #68]	@ (800541c <xTimerCreateTimerTask+0x90>)
 80053d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053da:	4b10      	ldr	r3, [pc, #64]	@ (800541c <xTimerCreateTimerTask+0x90>)
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d001      	beq.n	80053e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053e2:	2301      	movs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053e6:	697b      	ldr	r3, [r7, #20]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10b      	bne.n	8005404 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80053ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f0:	f383 8811 	msr	BASEPRI, r3
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	f3bf 8f4f 	dsb	sy
 80053fc:	613b      	str	r3, [r7, #16]
}
 80053fe:	bf00      	nop
 8005400:	bf00      	nop
 8005402:	e7fd      	b.n	8005400 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005404:	697b      	ldr	r3, [r7, #20]
}
 8005406:	4618      	mov	r0, r3
 8005408:	3718      	adds	r7, #24
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20001214 	.word	0x20001214
 8005414:	080064a4 	.word	0x080064a4
 8005418:	08005559 	.word	0x08005559
 800541c:	20001218 	.word	0x20001218

08005420 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b08a      	sub	sp, #40	@ 0x28
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
 800542c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800542e:	2300      	movs	r3, #0
 8005430:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d10b      	bne.n	8005450 <xTimerGenericCommand+0x30>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	623b      	str	r3, [r7, #32]
}
 800544a:	bf00      	nop
 800544c:	bf00      	nop
 800544e:	e7fd      	b.n	800544c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005450:	4b19      	ldr	r3, [pc, #100]	@ (80054b8 <xTimerGenericCommand+0x98>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	2b00      	cmp	r3, #0
 8005456:	d02a      	beq.n	80054ae <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	2b05      	cmp	r3, #5
 8005468:	dc18      	bgt.n	800549c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800546a:	f7ff fead 	bl	80051c8 <xTaskGetSchedulerState>
 800546e:	4603      	mov	r3, r0
 8005470:	2b02      	cmp	r3, #2
 8005472:	d109      	bne.n	8005488 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005474:	4b10      	ldr	r3, [pc, #64]	@ (80054b8 <xTimerGenericCommand+0x98>)
 8005476:	6818      	ldr	r0, [r3, #0]
 8005478:	f107 0110 	add.w	r1, r7, #16
 800547c:	2300      	movs	r3, #0
 800547e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005480:	f7fe fc60 	bl	8003d44 <xQueueGenericSend>
 8005484:	6278      	str	r0, [r7, #36]	@ 0x24
 8005486:	e012      	b.n	80054ae <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005488:	4b0b      	ldr	r3, [pc, #44]	@ (80054b8 <xTimerGenericCommand+0x98>)
 800548a:	6818      	ldr	r0, [r3, #0]
 800548c:	f107 0110 	add.w	r1, r7, #16
 8005490:	2300      	movs	r3, #0
 8005492:	2200      	movs	r2, #0
 8005494:	f7fe fc56 	bl	8003d44 <xQueueGenericSend>
 8005498:	6278      	str	r0, [r7, #36]	@ 0x24
 800549a:	e008      	b.n	80054ae <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800549c:	4b06      	ldr	r3, [pc, #24]	@ (80054b8 <xTimerGenericCommand+0x98>)
 800549e:	6818      	ldr	r0, [r3, #0]
 80054a0:	f107 0110 	add.w	r1, r7, #16
 80054a4:	2300      	movs	r3, #0
 80054a6:	683a      	ldr	r2, [r7, #0]
 80054a8:	f7fe fd4e 	bl	8003f48 <xQueueGenericSendFromISR>
 80054ac:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3728      	adds	r7, #40	@ 0x28
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}
 80054b8:	20001214 	.word	0x20001214

080054bc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	6078      	str	r0, [r7, #4]
 80054c4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054c6:	4b23      	ldr	r3, [pc, #140]	@ (8005554 <prvProcessExpiredTimer+0x98>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68db      	ldr	r3, [r3, #12]
 80054cc:	68db      	ldr	r3, [r3, #12]
 80054ce:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	3304      	adds	r3, #4
 80054d4:	4618      	mov	r0, r3
 80054d6:	f7fe fb01 	bl	8003adc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054da:	697b      	ldr	r3, [r7, #20]
 80054dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80054e0:	f003 0304 	and.w	r3, r3, #4
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d023      	beq.n	8005530 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	699a      	ldr	r2, [r3, #24]
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	18d1      	adds	r1, r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	683a      	ldr	r2, [r7, #0]
 80054f4:	6978      	ldr	r0, [r7, #20]
 80054f6:	f000 f8d3 	bl	80056a0 <prvInsertTimerInActiveList>
 80054fa:	4603      	mov	r3, r0
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d020      	beq.n	8005542 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005500:	2300      	movs	r3, #0
 8005502:	9300      	str	r3, [sp, #0]
 8005504:	2300      	movs	r3, #0
 8005506:	687a      	ldr	r2, [r7, #4]
 8005508:	2100      	movs	r1, #0
 800550a:	6978      	ldr	r0, [r7, #20]
 800550c:	f7ff ff88 	bl	8005420 <xTimerGenericCommand>
 8005510:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d114      	bne.n	8005542 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005518:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800551c:	f383 8811 	msr	BASEPRI, r3
 8005520:	f3bf 8f6f 	isb	sy
 8005524:	f3bf 8f4f 	dsb	sy
 8005528:	60fb      	str	r3, [r7, #12]
}
 800552a:	bf00      	nop
 800552c:	bf00      	nop
 800552e:	e7fd      	b.n	800552c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005536:	f023 0301 	bic.w	r3, r3, #1
 800553a:	b2da      	uxtb	r2, r3
 800553c:	697b      	ldr	r3, [r7, #20]
 800553e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	6978      	ldr	r0, [r7, #20]
 8005548:	4798      	blx	r3
}
 800554a:	bf00      	nop
 800554c:	3718      	adds	r7, #24
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	2000120c 	.word	0x2000120c

08005558 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f000 f859 	bl	800561c <prvGetNextExpireTime>
 800556a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800556c:	68bb      	ldr	r3, [r7, #8]
 800556e:	4619      	mov	r1, r3
 8005570:	68f8      	ldr	r0, [r7, #12]
 8005572:	f000 f805 	bl	8005580 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005576:	f000 f8d5 	bl	8005724 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800557a:	bf00      	nop
 800557c:	e7f0      	b.n	8005560 <prvTimerTask+0x8>
	...

08005580 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800558a:	f7ff fa2d 	bl	80049e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800558e:	f107 0308 	add.w	r3, r7, #8
 8005592:	4618      	mov	r0, r3
 8005594:	f000 f864 	bl	8005660 <prvSampleTimeNow>
 8005598:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800559a:	68bb      	ldr	r3, [r7, #8]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d130      	bne.n	8005602 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10a      	bne.n	80055bc <prvProcessTimerOrBlockTask+0x3c>
 80055a6:	687a      	ldr	r2, [r7, #4]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	429a      	cmp	r2, r3
 80055ac:	d806      	bhi.n	80055bc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80055ae:	f7ff fa29 	bl	8004a04 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80055b2:	68f9      	ldr	r1, [r7, #12]
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff ff81 	bl	80054bc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055ba:	e024      	b.n	8005606 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d008      	beq.n	80055d4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055c2:	4b13      	ldr	r3, [pc, #76]	@ (8005610 <prvProcessTimerOrBlockTask+0x90>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d101      	bne.n	80055d0 <prvProcessTimerOrBlockTask+0x50>
 80055cc:	2301      	movs	r3, #1
 80055ce:	e000      	b.n	80055d2 <prvProcessTimerOrBlockTask+0x52>
 80055d0:	2300      	movs	r3, #0
 80055d2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055d4:	4b0f      	ldr	r3, [pc, #60]	@ (8005614 <prvProcessTimerOrBlockTask+0x94>)
 80055d6:	6818      	ldr	r0, [r3, #0]
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	4619      	mov	r1, r3
 80055e2:	f7fe ff69 	bl	80044b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055e6:	f7ff fa0d 	bl	8004a04 <xTaskResumeAll>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d10a      	bne.n	8005606 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055f0:	4b09      	ldr	r3, [pc, #36]	@ (8005618 <prvProcessTimerOrBlockTask+0x98>)
 80055f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80055f6:	601a      	str	r2, [r3, #0]
 80055f8:	f3bf 8f4f 	dsb	sy
 80055fc:	f3bf 8f6f 	isb	sy
}
 8005600:	e001      	b.n	8005606 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005602:	f7ff f9ff 	bl	8004a04 <xTaskResumeAll>
}
 8005606:	bf00      	nop
 8005608:	3710      	adds	r7, #16
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}
 800560e:	bf00      	nop
 8005610:	20001210 	.word	0x20001210
 8005614:	20001214 	.word	0x20001214
 8005618:	e000ed04 	.word	0xe000ed04

0800561c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800561c:	b480      	push	{r7}
 800561e:	b085      	sub	sp, #20
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005624:	4b0d      	ldr	r3, [pc, #52]	@ (800565c <prvGetNextExpireTime+0x40>)
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d101      	bne.n	8005632 <prvGetNextExpireTime+0x16>
 800562e:	2201      	movs	r2, #1
 8005630:	e000      	b.n	8005634 <prvGetNextExpireTime+0x18>
 8005632:	2200      	movs	r2, #0
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d105      	bne.n	800564c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005640:	4b06      	ldr	r3, [pc, #24]	@ (800565c <prvGetNextExpireTime+0x40>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60fb      	str	r3, [r7, #12]
 800564a:	e001      	b.n	8005650 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005650:	68fb      	ldr	r3, [r7, #12]
}
 8005652:	4618      	mov	r0, r3
 8005654:	3714      	adds	r7, #20
 8005656:	46bd      	mov	sp, r7
 8005658:	bc80      	pop	{r7}
 800565a:	4770      	bx	lr
 800565c:	2000120c 	.word	0x2000120c

08005660 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b084      	sub	sp, #16
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005668:	f7ff fa6a 	bl	8004b40 <xTaskGetTickCount>
 800566c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800566e:	4b0b      	ldr	r3, [pc, #44]	@ (800569c <prvSampleTimeNow+0x3c>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	68fa      	ldr	r2, [r7, #12]
 8005674:	429a      	cmp	r2, r3
 8005676:	d205      	bcs.n	8005684 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005678:	f000 f93a 	bl	80058f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	2201      	movs	r2, #1
 8005680:	601a      	str	r2, [r3, #0]
 8005682:	e002      	b.n	800568a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2200      	movs	r2, #0
 8005688:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800568a:	4a04      	ldr	r2, [pc, #16]	@ (800569c <prvSampleTimeNow+0x3c>)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005690:	68fb      	ldr	r3, [r7, #12]
}
 8005692:	4618      	mov	r0, r3
 8005694:	3710      	adds	r7, #16
 8005696:	46bd      	mov	sp, r7
 8005698:	bd80      	pop	{r7, pc}
 800569a:	bf00      	nop
 800569c:	2000121c 	.word	0x2000121c

080056a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b086      	sub	sp, #24
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	60f8      	str	r0, [r7, #12]
 80056a8:	60b9      	str	r1, [r7, #8]
 80056aa:	607a      	str	r2, [r7, #4]
 80056ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68ba      	ldr	r2, [r7, #8]
 80056b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	429a      	cmp	r2, r3
 80056c4:	d812      	bhi.n	80056ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056c6:	687a      	ldr	r2, [r7, #4]
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	1ad2      	subs	r2, r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	699b      	ldr	r3, [r3, #24]
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d302      	bcc.n	80056da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	e01b      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056da:	4b10      	ldr	r3, [pc, #64]	@ (800571c <prvInsertTimerInActiveList+0x7c>)
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	3304      	adds	r3, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f7fe f9c1 	bl	8003a6c <vListInsert>
 80056ea:	e012      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056ec:	687a      	ldr	r2, [r7, #4]
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	429a      	cmp	r2, r3
 80056f2:	d206      	bcs.n	8005702 <prvInsertTimerInActiveList+0x62>
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	429a      	cmp	r2, r3
 80056fa:	d302      	bcc.n	8005702 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056fc:	2301      	movs	r3, #1
 80056fe:	617b      	str	r3, [r7, #20]
 8005700:	e007      	b.n	8005712 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005702:	4b07      	ldr	r3, [pc, #28]	@ (8005720 <prvInsertTimerInActiveList+0x80>)
 8005704:	681a      	ldr	r2, [r3, #0]
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	3304      	adds	r3, #4
 800570a:	4619      	mov	r1, r3
 800570c:	4610      	mov	r0, r2
 800570e:	f7fe f9ad 	bl	8003a6c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005712:	697b      	ldr	r3, [r7, #20]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3718      	adds	r7, #24
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}
 800571c:	20001210 	.word	0x20001210
 8005720:	2000120c 	.word	0x2000120c

08005724 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005724:	b580      	push	{r7, lr}
 8005726:	b08e      	sub	sp, #56	@ 0x38
 8005728:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800572a:	e0ce      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	da19      	bge.n	8005766 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005732:	1d3b      	adds	r3, r7, #4
 8005734:	3304      	adds	r3, #4
 8005736:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d10b      	bne.n	8005756 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800573e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005742:	f383 8811 	msr	BASEPRI, r3
 8005746:	f3bf 8f6f 	isb	sy
 800574a:	f3bf 8f4f 	dsb	sy
 800574e:	61fb      	str	r3, [r7, #28]
}
 8005750:	bf00      	nop
 8005752:	bf00      	nop
 8005754:	e7fd      	b.n	8005752 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005756:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800575c:	6850      	ldr	r0, [r2, #4]
 800575e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005760:	6892      	ldr	r2, [r2, #8]
 8005762:	4611      	mov	r1, r2
 8005764:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	f2c0 80ae 	blt.w	80058ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005774:	695b      	ldr	r3, [r3, #20]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800577a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800577c:	3304      	adds	r3, #4
 800577e:	4618      	mov	r0, r3
 8005780:	f7fe f9ac 	bl	8003adc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005784:	463b      	mov	r3, r7
 8005786:	4618      	mov	r0, r3
 8005788:	f7ff ff6a 	bl	8005660 <prvSampleTimeNow>
 800578c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b09      	cmp	r3, #9
 8005792:	f200 8097 	bhi.w	80058c4 <prvProcessReceivedCommands+0x1a0>
 8005796:	a201      	add	r2, pc, #4	@ (adr r2, 800579c <prvProcessReceivedCommands+0x78>)
 8005798:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800579c:	080057c5 	.word	0x080057c5
 80057a0:	080057c5 	.word	0x080057c5
 80057a4:	080057c5 	.word	0x080057c5
 80057a8:	0800583b 	.word	0x0800583b
 80057ac:	0800584f 	.word	0x0800584f
 80057b0:	0800589b 	.word	0x0800589b
 80057b4:	080057c5 	.word	0x080057c5
 80057b8:	080057c5 	.word	0x080057c5
 80057bc:	0800583b 	.word	0x0800583b
 80057c0:	0800584f 	.word	0x0800584f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057ca:	f043 0301 	orr.w	r3, r3, #1
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057d6:	68ba      	ldr	r2, [r7, #8]
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	699b      	ldr	r3, [r3, #24]
 80057dc:	18d1      	adds	r1, r2, r3
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057e4:	f7ff ff5c 	bl	80056a0 <prvInsertTimerInActiveList>
 80057e8:	4603      	mov	r3, r0
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d06c      	beq.n	80058c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	6a1b      	ldr	r3, [r3, #32]
 80057f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80057f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80057fc:	f003 0304 	and.w	r3, r3, #4
 8005800:	2b00      	cmp	r3, #0
 8005802:	d061      	beq.n	80058c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005804:	68ba      	ldr	r2, [r7, #8]
 8005806:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005808:	699b      	ldr	r3, [r3, #24]
 800580a:	441a      	add	r2, r3
 800580c:	2300      	movs	r3, #0
 800580e:	9300      	str	r3, [sp, #0]
 8005810:	2300      	movs	r3, #0
 8005812:	2100      	movs	r1, #0
 8005814:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005816:	f7ff fe03 	bl	8005420 <xTimerGenericCommand>
 800581a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800581c:	6a3b      	ldr	r3, [r7, #32]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d152      	bne.n	80058c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005822:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005826:	f383 8811 	msr	BASEPRI, r3
 800582a:	f3bf 8f6f 	isb	sy
 800582e:	f3bf 8f4f 	dsb	sy
 8005832:	61bb      	str	r3, [r7, #24]
}
 8005834:	bf00      	nop
 8005836:	bf00      	nop
 8005838:	e7fd      	b.n	8005836 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800583a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800583c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005840:	f023 0301 	bic.w	r3, r3, #1
 8005844:	b2da      	uxtb	r2, r3
 8005846:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005848:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800584c:	e03d      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005854:	f043 0301 	orr.w	r3, r3, #1
 8005858:	b2da      	uxtb	r2, r3
 800585a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800585c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005864:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	2b00      	cmp	r3, #0
 800586c:	d10b      	bne.n	8005886 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800586e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005872:	f383 8811 	msr	BASEPRI, r3
 8005876:	f3bf 8f6f 	isb	sy
 800587a:	f3bf 8f4f 	dsb	sy
 800587e:	617b      	str	r3, [r7, #20]
}
 8005880:	bf00      	nop
 8005882:	bf00      	nop
 8005884:	e7fd      	b.n	8005882 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005886:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005888:	699a      	ldr	r2, [r3, #24]
 800588a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800588c:	18d1      	adds	r1, r2, r3
 800588e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005892:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005894:	f7ff ff04 	bl	80056a0 <prvInsertTimerInActiveList>
					break;
 8005898:	e017      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800589a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800589c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058a0:	f003 0302 	and.w	r3, r3, #2
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d103      	bne.n	80058b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80058a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80058aa:	f000 fb87 	bl	8005fbc <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058ae:	e00c      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80058b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80058b6:	f023 0301 	bic.w	r3, r3, #1
 80058ba:	b2da      	uxtb	r2, r3
 80058bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80058be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80058c2:	e002      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <prvProcessReceivedCommands+0x1a6>
					break;
 80058c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ca:	4b08      	ldr	r3, [pc, #32]	@ (80058ec <prvProcessReceivedCommands+0x1c8>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	1d39      	adds	r1, r7, #4
 80058d0:	2200      	movs	r2, #0
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7fe fbd6 	bl	8004084 <xQueueReceive>
 80058d8:	4603      	mov	r3, r0
 80058da:	2b00      	cmp	r3, #0
 80058dc:	f47f af26 	bne.w	800572c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80058e0:	bf00      	nop
 80058e2:	bf00      	nop
 80058e4:	3730      	adds	r7, #48	@ 0x30
 80058e6:	46bd      	mov	sp, r7
 80058e8:	bd80      	pop	{r7, pc}
 80058ea:	bf00      	nop
 80058ec:	20001214 	.word	0x20001214

080058f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b088      	sub	sp, #32
 80058f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058f6:	e049      	b.n	800598c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058f8:	4b2e      	ldr	r3, [pc, #184]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005902:	4b2c      	ldr	r3, [pc, #176]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	3304      	adds	r3, #4
 8005910:	4618      	mov	r0, r3
 8005912:	f7fe f8e3 	bl	8003adc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	6a1b      	ldr	r3, [r3, #32]
 800591a:	68f8      	ldr	r0, [r7, #12]
 800591c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005924:	f003 0304 	and.w	r3, r3, #4
 8005928:	2b00      	cmp	r3, #0
 800592a:	d02f      	beq.n	800598c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	699b      	ldr	r3, [r3, #24]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	4413      	add	r3, r2
 8005934:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	429a      	cmp	r2, r3
 800593c:	d90e      	bls.n	800595c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	68ba      	ldr	r2, [r7, #8]
 8005942:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800594a:	4b1a      	ldr	r3, [pc, #104]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 800594c:	681a      	ldr	r2, [r3, #0]
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	3304      	adds	r3, #4
 8005952:	4619      	mov	r1, r3
 8005954:	4610      	mov	r0, r2
 8005956:	f7fe f889 	bl	8003a6c <vListInsert>
 800595a:	e017      	b.n	800598c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800595c:	2300      	movs	r3, #0
 800595e:	9300      	str	r3, [sp, #0]
 8005960:	2300      	movs	r3, #0
 8005962:	693a      	ldr	r2, [r7, #16]
 8005964:	2100      	movs	r1, #0
 8005966:	68f8      	ldr	r0, [r7, #12]
 8005968:	f7ff fd5a 	bl	8005420 <xTimerGenericCommand>
 800596c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d10b      	bne.n	800598c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8005974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005978:	f383 8811 	msr	BASEPRI, r3
 800597c:	f3bf 8f6f 	isb	sy
 8005980:	f3bf 8f4f 	dsb	sy
 8005984:	603b      	str	r3, [r7, #0]
}
 8005986:	bf00      	nop
 8005988:	bf00      	nop
 800598a:	e7fd      	b.n	8005988 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800598c:	4b09      	ldr	r3, [pc, #36]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	2b00      	cmp	r3, #0
 8005994:	d1b0      	bne.n	80058f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005996:	4b07      	ldr	r3, [pc, #28]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800599c:	4b06      	ldr	r3, [pc, #24]	@ (80059b8 <prvSwitchTimerLists+0xc8>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	4a04      	ldr	r2, [pc, #16]	@ (80059b4 <prvSwitchTimerLists+0xc4>)
 80059a2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80059a4:	4a04      	ldr	r2, [pc, #16]	@ (80059b8 <prvSwitchTimerLists+0xc8>)
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	6013      	str	r3, [r2, #0]
}
 80059aa:	bf00      	nop
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	2000120c 	.word	0x2000120c
 80059b8:	20001210 	.word	0x20001210

080059bc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059c2:	f000 f92b 	bl	8005c1c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059c6:	4b15      	ldr	r3, [pc, #84]	@ (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d120      	bne.n	8005a10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059ce:	4814      	ldr	r0, [pc, #80]	@ (8005a20 <prvCheckForValidListAndQueue+0x64>)
 80059d0:	f7fd fffe 	bl	80039d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059d4:	4813      	ldr	r0, [pc, #76]	@ (8005a24 <prvCheckForValidListAndQueue+0x68>)
 80059d6:	f7fd fffb 	bl	80039d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059da:	4b13      	ldr	r3, [pc, #76]	@ (8005a28 <prvCheckForValidListAndQueue+0x6c>)
 80059dc:	4a10      	ldr	r2, [pc, #64]	@ (8005a20 <prvCheckForValidListAndQueue+0x64>)
 80059de:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059e0:	4b12      	ldr	r3, [pc, #72]	@ (8005a2c <prvCheckForValidListAndQueue+0x70>)
 80059e2:	4a10      	ldr	r2, [pc, #64]	@ (8005a24 <prvCheckForValidListAndQueue+0x68>)
 80059e4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059e6:	2300      	movs	r3, #0
 80059e8:	9300      	str	r3, [sp, #0]
 80059ea:	4b11      	ldr	r3, [pc, #68]	@ (8005a30 <prvCheckForValidListAndQueue+0x74>)
 80059ec:	4a11      	ldr	r2, [pc, #68]	@ (8005a34 <prvCheckForValidListAndQueue+0x78>)
 80059ee:	2110      	movs	r1, #16
 80059f0:	200a      	movs	r0, #10
 80059f2:	f7fe f907 	bl	8003c04 <xQueueGenericCreateStatic>
 80059f6:	4603      	mov	r3, r0
 80059f8:	4a08      	ldr	r2, [pc, #32]	@ (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059fa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059fc:	4b07      	ldr	r3, [pc, #28]	@ (8005a1c <prvCheckForValidListAndQueue+0x60>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d005      	beq.n	8005a10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005a04:	4b05      	ldr	r3, [pc, #20]	@ (8005a1c <prvCheckForValidListAndQueue+0x60>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	490b      	ldr	r1, [pc, #44]	@ (8005a38 <prvCheckForValidListAndQueue+0x7c>)
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7fe fd2c 	bl	8004468 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005a10:	f000 f934 	bl	8005c7c <vPortExitCritical>
}
 8005a14:	bf00      	nop
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20001214 	.word	0x20001214
 8005a20:	200011e4 	.word	0x200011e4
 8005a24:	200011f8 	.word	0x200011f8
 8005a28:	2000120c 	.word	0x2000120c
 8005a2c:	20001210 	.word	0x20001210
 8005a30:	200012c0 	.word	0x200012c0
 8005a34:	20001220 	.word	0x20001220
 8005a38:	080064ac 	.word	0x080064ac

08005a3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	60f8      	str	r0, [r7, #12]
 8005a44:	60b9      	str	r1, [r7, #8]
 8005a46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	3b04      	subs	r3, #4
 8005a4c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8005a54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b04      	subs	r3, #4
 8005a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	f023 0201 	bic.w	r2, r3, #1
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	3b04      	subs	r3, #4
 8005a6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a6c:	4a08      	ldr	r2, [pc, #32]	@ (8005a90 <pxPortInitialiseStack+0x54>)
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	3b14      	subs	r3, #20
 8005a76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a78:	687a      	ldr	r2, [r7, #4]
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	3b20      	subs	r3, #32
 8005a82:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a84:	68fb      	ldr	r3, [r7, #12]
}
 8005a86:	4618      	mov	r0, r3
 8005a88:	3714      	adds	r7, #20
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	bc80      	pop	{r7}
 8005a8e:	4770      	bx	lr
 8005a90:	08005a95 	.word	0x08005a95

08005a94 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a9e:	4b12      	ldr	r3, [pc, #72]	@ (8005ae8 <prvTaskExitError+0x54>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005aa6:	d00b      	beq.n	8005ac0 <prvTaskExitError+0x2c>
	__asm volatile
 8005aa8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aac:	f383 8811 	msr	BASEPRI, r3
 8005ab0:	f3bf 8f6f 	isb	sy
 8005ab4:	f3bf 8f4f 	dsb	sy
 8005ab8:	60fb      	str	r3, [r7, #12]
}
 8005aba:	bf00      	nop
 8005abc:	bf00      	nop
 8005abe:	e7fd      	b.n	8005abc <prvTaskExitError+0x28>
	__asm volatile
 8005ac0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ac4:	f383 8811 	msr	BASEPRI, r3
 8005ac8:	f3bf 8f6f 	isb	sy
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	60bb      	str	r3, [r7, #8]
}
 8005ad2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ad4:	bf00      	nop
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d0fc      	beq.n	8005ad6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005adc:	bf00      	nop
 8005ade:	bf00      	nop
 8005ae0:	3714      	adds	r7, #20
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	bc80      	pop	{r7}
 8005ae6:	4770      	bx	lr
 8005ae8:	20000014 	.word	0x20000014
 8005aec:	00000000 	.word	0x00000000

08005af0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005af0:	4b07      	ldr	r3, [pc, #28]	@ (8005b10 <pxCurrentTCBConst2>)
 8005af2:	6819      	ldr	r1, [r3, #0]
 8005af4:	6808      	ldr	r0, [r1, #0]
 8005af6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005afa:	f380 8809 	msr	PSP, r0
 8005afe:	f3bf 8f6f 	isb	sy
 8005b02:	f04f 0000 	mov.w	r0, #0
 8005b06:	f380 8811 	msr	BASEPRI, r0
 8005b0a:	f04e 0e0d 	orr.w	lr, lr, #13
 8005b0e:	4770      	bx	lr

08005b10 <pxCurrentTCBConst2>:
 8005b10:	20000ce4 	.word	0x20000ce4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b14:	bf00      	nop
 8005b16:	bf00      	nop

08005b18 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8005b18:	4806      	ldr	r0, [pc, #24]	@ (8005b34 <prvPortStartFirstTask+0x1c>)
 8005b1a:	6800      	ldr	r0, [r0, #0]
 8005b1c:	6800      	ldr	r0, [r0, #0]
 8005b1e:	f380 8808 	msr	MSP, r0
 8005b22:	b662      	cpsie	i
 8005b24:	b661      	cpsie	f
 8005b26:	f3bf 8f4f 	dsb	sy
 8005b2a:	f3bf 8f6f 	isb	sy
 8005b2e:	df00      	svc	0
 8005b30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b32:	bf00      	nop
 8005b34:	e000ed08 	.word	0xe000ed08

08005b38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b38:	b580      	push	{r7, lr}
 8005b3a:	b084      	sub	sp, #16
 8005b3c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b3e:	4b32      	ldr	r3, [pc, #200]	@ (8005c08 <xPortStartScheduler+0xd0>)
 8005b40:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	781b      	ldrb	r3, [r3, #0]
 8005b46:	b2db      	uxtb	r3, r3
 8005b48:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	22ff      	movs	r2, #255	@ 0xff
 8005b4e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b58:	78fb      	ldrb	r3, [r7, #3]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8005b60:	b2da      	uxtb	r2, r3
 8005b62:	4b2a      	ldr	r3, [pc, #168]	@ (8005c0c <xPortStartScheduler+0xd4>)
 8005b64:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b66:	4b2a      	ldr	r3, [pc, #168]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005b68:	2207      	movs	r2, #7
 8005b6a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b6c:	e009      	b.n	8005b82 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8005b6e:	4b28      	ldr	r3, [pc, #160]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	3b01      	subs	r3, #1
 8005b74:	4a26      	ldr	r2, [pc, #152]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005b76:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005b78:	78fb      	ldrb	r3, [r7, #3]
 8005b7a:	b2db      	uxtb	r3, r3
 8005b7c:	005b      	lsls	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005b82:	78fb      	ldrb	r3, [r7, #3]
 8005b84:	b2db      	uxtb	r3, r3
 8005b86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b8a:	2b80      	cmp	r3, #128	@ 0x80
 8005b8c:	d0ef      	beq.n	8005b6e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005b8e:	4b20      	ldr	r3, [pc, #128]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f1c3 0307 	rsb	r3, r3, #7
 8005b96:	2b04      	cmp	r3, #4
 8005b98:	d00b      	beq.n	8005bb2 <xPortStartScheduler+0x7a>
	__asm volatile
 8005b9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b9e:	f383 8811 	msr	BASEPRI, r3
 8005ba2:	f3bf 8f6f 	isb	sy
 8005ba6:	f3bf 8f4f 	dsb	sy
 8005baa:	60bb      	str	r3, [r7, #8]
}
 8005bac:	bf00      	nop
 8005bae:	bf00      	nop
 8005bb0:	e7fd      	b.n	8005bae <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005bb2:	4b17      	ldr	r3, [pc, #92]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	4a15      	ldr	r2, [pc, #84]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005bba:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bbc:	4b14      	ldr	r3, [pc, #80]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8005bc4:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <xPortStartScheduler+0xd8>)
 8005bc6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	b2da      	uxtb	r2, r3
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005bd0:	4b10      	ldr	r3, [pc, #64]	@ (8005c14 <xPortStartScheduler+0xdc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c14 <xPortStartScheduler+0xdc>)
 8005bd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8005bda:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005bdc:	4b0d      	ldr	r3, [pc, #52]	@ (8005c14 <xPortStartScheduler+0xdc>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a0c      	ldr	r2, [pc, #48]	@ (8005c14 <xPortStartScheduler+0xdc>)
 8005be2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8005be6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005be8:	f000 f8b8 	bl	8005d5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005bec:	4b0a      	ldr	r3, [pc, #40]	@ (8005c18 <xPortStartScheduler+0xe0>)
 8005bee:	2200      	movs	r2, #0
 8005bf0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005bf2:	f7ff ff91 	bl	8005b18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005bf6:	f7ff f86b 	bl	8004cd0 <vTaskSwitchContext>
	prvTaskExitError();
 8005bfa:	f7ff ff4b 	bl	8005a94 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005bfe:	2300      	movs	r3, #0
}
 8005c00:	4618      	mov	r0, r3
 8005c02:	3710      	adds	r7, #16
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000e400 	.word	0xe000e400
 8005c0c:	20001310 	.word	0x20001310
 8005c10:	20001314 	.word	0x20001314
 8005c14:	e000ed20 	.word	0xe000ed20
 8005c18:	20000014 	.word	0x20000014

08005c1c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c1c:	b480      	push	{r7}
 8005c1e:	b083      	sub	sp, #12
 8005c20:	af00      	add	r7, sp, #0
	__asm volatile
 8005c22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c26:	f383 8811 	msr	BASEPRI, r3
 8005c2a:	f3bf 8f6f 	isb	sy
 8005c2e:	f3bf 8f4f 	dsb	sy
 8005c32:	607b      	str	r3, [r7, #4]
}
 8005c34:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c36:	4b0f      	ldr	r3, [pc, #60]	@ (8005c74 <vPortEnterCritical+0x58>)
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	3301      	adds	r3, #1
 8005c3c:	4a0d      	ldr	r2, [pc, #52]	@ (8005c74 <vPortEnterCritical+0x58>)
 8005c3e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c40:	4b0c      	ldr	r3, [pc, #48]	@ (8005c74 <vPortEnterCritical+0x58>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b01      	cmp	r3, #1
 8005c46:	d110      	bne.n	8005c6a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005c48:	4b0b      	ldr	r3, [pc, #44]	@ (8005c78 <vPortEnterCritical+0x5c>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d00b      	beq.n	8005c6a <vPortEnterCritical+0x4e>
	__asm volatile
 8005c52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c56:	f383 8811 	msr	BASEPRI, r3
 8005c5a:	f3bf 8f6f 	isb	sy
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	603b      	str	r3, [r7, #0]
}
 8005c64:	bf00      	nop
 8005c66:	bf00      	nop
 8005c68:	e7fd      	b.n	8005c66 <vPortEnterCritical+0x4a>
	}
}
 8005c6a:	bf00      	nop
 8005c6c:	370c      	adds	r7, #12
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr
 8005c74:	20000014 	.word	0x20000014
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b083      	sub	sp, #12
 8005c80:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005c82:	4b12      	ldr	r3, [pc, #72]	@ (8005ccc <vPortExitCritical+0x50>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <vPortExitCritical+0x26>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	607b      	str	r3, [r7, #4]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8005ccc <vPortExitCritical+0x50>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	4a08      	ldr	r2, [pc, #32]	@ (8005ccc <vPortExitCritical+0x50>)
 8005caa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005cac:	4b07      	ldr	r3, [pc, #28]	@ (8005ccc <vPortExitCritical+0x50>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d105      	bne.n	8005cc0 <vPortExitCritical+0x44>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	f383 8811 	msr	BASEPRI, r3
}
 8005cbe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	bc80      	pop	{r7}
 8005cc8:	4770      	bx	lr
 8005cca:	bf00      	nop
 8005ccc:	20000014 	.word	0x20000014

08005cd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005cd0:	f3ef 8009 	mrs	r0, PSP
 8005cd4:	f3bf 8f6f 	isb	sy
 8005cd8:	4b0d      	ldr	r3, [pc, #52]	@ (8005d10 <pxCurrentTCBConst>)
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005ce0:	6010      	str	r0, [r2, #0]
 8005ce2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8005ce6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8005cea:	f380 8811 	msr	BASEPRI, r0
 8005cee:	f7fe ffef 	bl	8004cd0 <vTaskSwitchContext>
 8005cf2:	f04f 0000 	mov.w	r0, #0
 8005cf6:	f380 8811 	msr	BASEPRI, r0
 8005cfa:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8005cfe:	6819      	ldr	r1, [r3, #0]
 8005d00:	6808      	ldr	r0, [r1, #0]
 8005d02:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8005d06:	f380 8809 	msr	PSP, r0
 8005d0a:	f3bf 8f6f 	isb	sy
 8005d0e:	4770      	bx	lr

08005d10 <pxCurrentTCBConst>:
 8005d10:	20000ce4 	.word	0x20000ce4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d14:	bf00      	nop
 8005d16:	bf00      	nop

08005d18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	607b      	str	r3, [r7, #4]
}
 8005d30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005d32:	f7fe ff13 	bl	8004b5c <xTaskIncrementTick>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d003      	beq.n	8005d44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005d3c:	4b06      	ldr	r3, [pc, #24]	@ (8005d58 <xPortSysTickHandler+0x40>)
 8005d3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d42:	601a      	str	r2, [r3, #0]
 8005d44:	2300      	movs	r3, #0
 8005d46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	f383 8811 	msr	BASEPRI, r3
}
 8005d4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005d50:	bf00      	nop
 8005d52:	3708      	adds	r7, #8
 8005d54:	46bd      	mov	sp, r7
 8005d56:	bd80      	pop	{r7, pc}
 8005d58:	e000ed04 	.word	0xe000ed04

08005d5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005d60:	4b0a      	ldr	r3, [pc, #40]	@ (8005d8c <vPortSetupTimerInterrupt+0x30>)
 8005d62:	2200      	movs	r2, #0
 8005d64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005d66:	4b0a      	ldr	r3, [pc, #40]	@ (8005d90 <vPortSetupTimerInterrupt+0x34>)
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005d6c:	4b09      	ldr	r3, [pc, #36]	@ (8005d94 <vPortSetupTimerInterrupt+0x38>)
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4a09      	ldr	r2, [pc, #36]	@ (8005d98 <vPortSetupTimerInterrupt+0x3c>)
 8005d72:	fba2 2303 	umull	r2, r3, r2, r3
 8005d76:	099b      	lsrs	r3, r3, #6
 8005d78:	4a08      	ldr	r2, [pc, #32]	@ (8005d9c <vPortSetupTimerInterrupt+0x40>)
 8005d7a:	3b01      	subs	r3, #1
 8005d7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005d7e:	4b03      	ldr	r3, [pc, #12]	@ (8005d8c <vPortSetupTimerInterrupt+0x30>)
 8005d80:	2207      	movs	r2, #7
 8005d82:	601a      	str	r2, [r3, #0]
}
 8005d84:	bf00      	nop
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bc80      	pop	{r7}
 8005d8a:	4770      	bx	lr
 8005d8c:	e000e010 	.word	0xe000e010
 8005d90:	e000e018 	.word	0xe000e018
 8005d94:	20000008 	.word	0x20000008
 8005d98:	10624dd3 	.word	0x10624dd3
 8005d9c:	e000e014 	.word	0xe000e014

08005da0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005da0:	b480      	push	{r7}
 8005da2:	b085      	sub	sp, #20
 8005da4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005da6:	f3ef 8305 	mrs	r3, IPSR
 8005daa:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	2b0f      	cmp	r3, #15
 8005db0:	d915      	bls.n	8005dde <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005db2:	4a17      	ldr	r2, [pc, #92]	@ (8005e10 <vPortValidateInterruptPriority+0x70>)
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	781b      	ldrb	r3, [r3, #0]
 8005dba:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005dbc:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <vPortValidateInterruptPriority+0x74>)
 8005dbe:	781b      	ldrb	r3, [r3, #0]
 8005dc0:	7afa      	ldrb	r2, [r7, #11]
 8005dc2:	429a      	cmp	r2, r3
 8005dc4:	d20b      	bcs.n	8005dde <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8005dc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dca:	f383 8811 	msr	BASEPRI, r3
 8005dce:	f3bf 8f6f 	isb	sy
 8005dd2:	f3bf 8f4f 	dsb	sy
 8005dd6:	607b      	str	r3, [r7, #4]
}
 8005dd8:	bf00      	nop
 8005dda:	bf00      	nop
 8005ddc:	e7fd      	b.n	8005dda <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005dde:	4b0e      	ldr	r3, [pc, #56]	@ (8005e18 <vPortValidateInterruptPriority+0x78>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005de6:	4b0d      	ldr	r3, [pc, #52]	@ (8005e1c <vPortValidateInterruptPriority+0x7c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d90b      	bls.n	8005e06 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8005dee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005df2:	f383 8811 	msr	BASEPRI, r3
 8005df6:	f3bf 8f6f 	isb	sy
 8005dfa:	f3bf 8f4f 	dsb	sy
 8005dfe:	603b      	str	r3, [r7, #0]
}
 8005e00:	bf00      	nop
 8005e02:	bf00      	nop
 8005e04:	e7fd      	b.n	8005e02 <vPortValidateInterruptPriority+0x62>
	}
 8005e06:	bf00      	nop
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	bc80      	pop	{r7}
 8005e0e:	4770      	bx	lr
 8005e10:	e000e3f0 	.word	0xe000e3f0
 8005e14:	20001310 	.word	0x20001310
 8005e18:	e000ed0c 	.word	0xe000ed0c
 8005e1c:	20001314 	.word	0x20001314

08005e20 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b08a      	sub	sp, #40	@ 0x28
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005e2c:	f7fe fddc 	bl	80049e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005e30:	4b5c      	ldr	r3, [pc, #368]	@ (8005fa4 <pvPortMalloc+0x184>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d101      	bne.n	8005e3c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005e38:	f000 f924 	bl	8006084 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005e3c:	4b5a      	ldr	r3, [pc, #360]	@ (8005fa8 <pvPortMalloc+0x188>)
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4013      	ands	r3, r2
 8005e44:	2b00      	cmp	r3, #0
 8005e46:	f040 8095 	bne.w	8005f74 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d01e      	beq.n	8005e8e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8005e50:	2208      	movs	r2, #8
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4413      	add	r3, r2
 8005e56:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d015      	beq.n	8005e8e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	f023 0307 	bic.w	r3, r3, #7
 8005e68:	3308      	adds	r3, #8
 8005e6a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f003 0307 	and.w	r3, r3, #7
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d00b      	beq.n	8005e8e <pvPortMalloc+0x6e>
	__asm volatile
 8005e76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e7a:	f383 8811 	msr	BASEPRI, r3
 8005e7e:	f3bf 8f6f 	isb	sy
 8005e82:	f3bf 8f4f 	dsb	sy
 8005e86:	617b      	str	r3, [r7, #20]
}
 8005e88:	bf00      	nop
 8005e8a:	bf00      	nop
 8005e8c:	e7fd      	b.n	8005e8a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d06f      	beq.n	8005f74 <pvPortMalloc+0x154>
 8005e94:	4b45      	ldr	r3, [pc, #276]	@ (8005fac <pvPortMalloc+0x18c>)
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	687a      	ldr	r2, [r7, #4]
 8005e9a:	429a      	cmp	r2, r3
 8005e9c:	d86a      	bhi.n	8005f74 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005e9e:	4b44      	ldr	r3, [pc, #272]	@ (8005fb0 <pvPortMalloc+0x190>)
 8005ea0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005ea2:	4b43      	ldr	r3, [pc, #268]	@ (8005fb0 <pvPortMalloc+0x190>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005ea8:	e004      	b.n	8005eb4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eac:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	687a      	ldr	r2, [r7, #4]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d903      	bls.n	8005ec6 <pvPortMalloc+0xa6>
 8005ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1f1      	bne.n	8005eaa <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005ec6:	4b37      	ldr	r3, [pc, #220]	@ (8005fa4 <pvPortMalloc+0x184>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d051      	beq.n	8005f74 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005ed0:	6a3b      	ldr	r3, [r7, #32]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	2208      	movs	r2, #8
 8005ed6:	4413      	add	r3, r2
 8005ed8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	6a3b      	ldr	r3, [r7, #32]
 8005ee0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	1ad2      	subs	r2, r2, r3
 8005eea:	2308      	movs	r3, #8
 8005eec:	005b      	lsls	r3, r3, #1
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d920      	bls.n	8005f34 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005ef2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	4413      	add	r3, r2
 8005ef8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005efa:	69bb      	ldr	r3, [r7, #24]
 8005efc:	f003 0307 	and.w	r3, r3, #7
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d00b      	beq.n	8005f1c <pvPortMalloc+0xfc>
	__asm volatile
 8005f04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f08:	f383 8811 	msr	BASEPRI, r3
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f3bf 8f4f 	dsb	sy
 8005f14:	613b      	str	r3, [r7, #16]
}
 8005f16:	bf00      	nop
 8005f18:	bf00      	nop
 8005f1a:	e7fd      	b.n	8005f18 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1e:	685a      	ldr	r2, [r3, #4]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	1ad2      	subs	r2, r2, r3
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005f28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f2a:	687a      	ldr	r2, [r7, #4]
 8005f2c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005f2e:	69b8      	ldr	r0, [r7, #24]
 8005f30:	f000 f90a 	bl	8006148 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005f34:	4b1d      	ldr	r3, [pc, #116]	@ (8005fac <pvPortMalloc+0x18c>)
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	1ad3      	subs	r3, r2, r3
 8005f3e:	4a1b      	ldr	r2, [pc, #108]	@ (8005fac <pvPortMalloc+0x18c>)
 8005f40:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005f42:	4b1a      	ldr	r3, [pc, #104]	@ (8005fac <pvPortMalloc+0x18c>)
 8005f44:	681a      	ldr	r2, [r3, #0]
 8005f46:	4b1b      	ldr	r3, [pc, #108]	@ (8005fb4 <pvPortMalloc+0x194>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	429a      	cmp	r2, r3
 8005f4c:	d203      	bcs.n	8005f56 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005f4e:	4b17      	ldr	r3, [pc, #92]	@ (8005fac <pvPortMalloc+0x18c>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a18      	ldr	r2, [pc, #96]	@ (8005fb4 <pvPortMalloc+0x194>)
 8005f54:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f58:	685a      	ldr	r2, [r3, #4]
 8005f5a:	4b13      	ldr	r3, [pc, #76]	@ (8005fa8 <pvPortMalloc+0x188>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	431a      	orrs	r2, r3
 8005f60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f62:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005f64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f66:	2200      	movs	r2, #0
 8005f68:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005f6a:	4b13      	ldr	r3, [pc, #76]	@ (8005fb8 <pvPortMalloc+0x198>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	4a11      	ldr	r2, [pc, #68]	@ (8005fb8 <pvPortMalloc+0x198>)
 8005f72:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005f74:	f7fe fd46 	bl	8004a04 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f78:	69fb      	ldr	r3, [r7, #28]
 8005f7a:	f003 0307 	and.w	r3, r3, #7
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <pvPortMalloc+0x17a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	60fb      	str	r3, [r7, #12]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <pvPortMalloc+0x176>
	return pvReturn;
 8005f9a:	69fb      	ldr	r3, [r7, #28]
}
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	3728      	adds	r7, #40	@ 0x28
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}
 8005fa4:	20002320 	.word	0x20002320
 8005fa8:	20002334 	.word	0x20002334
 8005fac:	20002324 	.word	0x20002324
 8005fb0:	20002318 	.word	0x20002318
 8005fb4:	20002328 	.word	0x20002328
 8005fb8:	2000232c 	.word	0x2000232c

08005fbc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b086      	sub	sp, #24
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d04f      	beq.n	800606e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005fce:	2308      	movs	r3, #8
 8005fd0:	425b      	negs	r3, r3
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4413      	add	r3, r2
 8005fd6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005fd8:	697b      	ldr	r3, [r7, #20]
 8005fda:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685a      	ldr	r2, [r3, #4]
 8005fe0:	4b25      	ldr	r3, [pc, #148]	@ (8006078 <vPortFree+0xbc>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4013      	ands	r3, r2
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d10b      	bne.n	8006002 <vPortFree+0x46>
	__asm volatile
 8005fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fee:	f383 8811 	msr	BASEPRI, r3
 8005ff2:	f3bf 8f6f 	isb	sy
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	60fb      	str	r3, [r7, #12]
}
 8005ffc:	bf00      	nop
 8005ffe:	bf00      	nop
 8006000:	e7fd      	b.n	8005ffe <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006002:	693b      	ldr	r3, [r7, #16]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00b      	beq.n	8006022 <vPortFree+0x66>
	__asm volatile
 800600a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800600e:	f383 8811 	msr	BASEPRI, r3
 8006012:	f3bf 8f6f 	isb	sy
 8006016:	f3bf 8f4f 	dsb	sy
 800601a:	60bb      	str	r3, [r7, #8]
}
 800601c:	bf00      	nop
 800601e:	bf00      	nop
 8006020:	e7fd      	b.n	800601e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006022:	693b      	ldr	r3, [r7, #16]
 8006024:	685a      	ldr	r2, [r3, #4]
 8006026:	4b14      	ldr	r3, [pc, #80]	@ (8006078 <vPortFree+0xbc>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4013      	ands	r3, r2
 800602c:	2b00      	cmp	r3, #0
 800602e:	d01e      	beq.n	800606e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	2b00      	cmp	r3, #0
 8006036:	d11a      	bne.n	800606e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006038:	693b      	ldr	r3, [r7, #16]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	4b0e      	ldr	r3, [pc, #56]	@ (8006078 <vPortFree+0xbc>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	43db      	mvns	r3, r3
 8006042:	401a      	ands	r2, r3
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006048:	f7fe fcce 	bl	80049e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800604c:	693b      	ldr	r3, [r7, #16]
 800604e:	685a      	ldr	r2, [r3, #4]
 8006050:	4b0a      	ldr	r3, [pc, #40]	@ (800607c <vPortFree+0xc0>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	4413      	add	r3, r2
 8006056:	4a09      	ldr	r2, [pc, #36]	@ (800607c <vPortFree+0xc0>)
 8006058:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800605a:	6938      	ldr	r0, [r7, #16]
 800605c:	f000 f874 	bl	8006148 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006060:	4b07      	ldr	r3, [pc, #28]	@ (8006080 <vPortFree+0xc4>)
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	3301      	adds	r3, #1
 8006066:	4a06      	ldr	r2, [pc, #24]	@ (8006080 <vPortFree+0xc4>)
 8006068:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800606a:	f7fe fccb 	bl	8004a04 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800606e:	bf00      	nop
 8006070:	3718      	adds	r7, #24
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
 8006076:	bf00      	nop
 8006078:	20002334 	.word	0x20002334
 800607c:	20002324 	.word	0x20002324
 8006080:	20002330 	.word	0x20002330

08006084 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800608a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800608e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006090:	4b27      	ldr	r3, [pc, #156]	@ (8006130 <prvHeapInit+0xac>)
 8006092:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f003 0307 	and.w	r3, r3, #7
 800609a:	2b00      	cmp	r3, #0
 800609c:	d00c      	beq.n	80060b8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	3307      	adds	r3, #7
 80060a2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	f023 0307 	bic.w	r3, r3, #7
 80060aa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80060ac:	68ba      	ldr	r2, [r7, #8]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	1ad3      	subs	r3, r2, r3
 80060b2:	4a1f      	ldr	r2, [pc, #124]	@ (8006130 <prvHeapInit+0xac>)
 80060b4:	4413      	add	r3, r2
 80060b6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80060bc:	4a1d      	ldr	r2, [pc, #116]	@ (8006134 <prvHeapInit+0xb0>)
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80060c2:	4b1c      	ldr	r3, [pc, #112]	@ (8006134 <prvHeapInit+0xb0>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	68ba      	ldr	r2, [r7, #8]
 80060cc:	4413      	add	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80060d0:	2208      	movs	r2, #8
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	1a9b      	subs	r3, r3, r2
 80060d6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	f023 0307 	bic.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	4a15      	ldr	r2, [pc, #84]	@ (8006138 <prvHeapInit+0xb4>)
 80060e4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80060e6:	4b14      	ldr	r3, [pc, #80]	@ (8006138 <prvHeapInit+0xb4>)
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	2200      	movs	r2, #0
 80060ec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80060ee:	4b12      	ldr	r3, [pc, #72]	@ (8006138 <prvHeapInit+0xb4>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	2200      	movs	r2, #0
 80060f4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	68fa      	ldr	r2, [r7, #12]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	683b      	ldr	r3, [r7, #0]
 8006102:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006104:	4b0c      	ldr	r3, [pc, #48]	@ (8006138 <prvHeapInit+0xb4>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	683b      	ldr	r3, [r7, #0]
 800610a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800610c:	683b      	ldr	r3, [r7, #0]
 800610e:	685b      	ldr	r3, [r3, #4]
 8006110:	4a0a      	ldr	r2, [pc, #40]	@ (800613c <prvHeapInit+0xb8>)
 8006112:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006114:	683b      	ldr	r3, [r7, #0]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	4a09      	ldr	r2, [pc, #36]	@ (8006140 <prvHeapInit+0xbc>)
 800611a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800611c:	4b09      	ldr	r3, [pc, #36]	@ (8006144 <prvHeapInit+0xc0>)
 800611e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006122:	601a      	str	r2, [r3, #0]
}
 8006124:	bf00      	nop
 8006126:	3714      	adds	r7, #20
 8006128:	46bd      	mov	sp, r7
 800612a:	bc80      	pop	{r7}
 800612c:	4770      	bx	lr
 800612e:	bf00      	nop
 8006130:	20001318 	.word	0x20001318
 8006134:	20002318 	.word	0x20002318
 8006138:	20002320 	.word	0x20002320
 800613c:	20002328 	.word	0x20002328
 8006140:	20002324 	.word	0x20002324
 8006144:	20002334 	.word	0x20002334

08006148 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006150:	4b27      	ldr	r3, [pc, #156]	@ (80061f0 <prvInsertBlockIntoFreeList+0xa8>)
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	e002      	b.n	800615c <prvInsertBlockIntoFreeList+0x14>
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	60fb      	str	r3, [r7, #12]
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	429a      	cmp	r2, r3
 8006164:	d8f7      	bhi.n	8006156 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	685b      	ldr	r3, [r3, #4]
 800616e:	68ba      	ldr	r2, [r7, #8]
 8006170:	4413      	add	r3, r2
 8006172:	687a      	ldr	r2, [r7, #4]
 8006174:	429a      	cmp	r2, r3
 8006176:	d108      	bne.n	800618a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	441a      	add	r2, r3
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	68ba      	ldr	r2, [r7, #8]
 8006194:	441a      	add	r2, r3
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	429a      	cmp	r2, r3
 800619c:	d118      	bne.n	80061d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	4b14      	ldr	r3, [pc, #80]	@ (80061f4 <prvInsertBlockIntoFreeList+0xac>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d00d      	beq.n	80061c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	685b      	ldr	r3, [r3, #4]
 80061b4:	441a      	add	r2, r3
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	681a      	ldr	r2, [r3, #0]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	601a      	str	r2, [r3, #0]
 80061c4:	e008      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80061c6:	4b0b      	ldr	r3, [pc, #44]	@ (80061f4 <prvInsertBlockIntoFreeList+0xac>)
 80061c8:	681a      	ldr	r2, [r3, #0]
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e003      	b.n	80061d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681a      	ldr	r2, [r3, #0]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	429a      	cmp	r2, r3
 80061de:	d002      	beq.n	80061e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80061e6:	bf00      	nop
 80061e8:	3714      	adds	r7, #20
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bc80      	pop	{r7}
 80061ee:	4770      	bx	lr
 80061f0:	20002318 	.word	0x20002318
 80061f4:	20002320 	.word	0x20002320

080061f8 <memset>:
 80061f8:	4603      	mov	r3, r0
 80061fa:	4402      	add	r2, r0
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d100      	bne.n	8006202 <memset+0xa>
 8006200:	4770      	bx	lr
 8006202:	f803 1b01 	strb.w	r1, [r3], #1
 8006206:	e7f9      	b.n	80061fc <memset+0x4>

08006208 <_reclaim_reent>:
 8006208:	4b2d      	ldr	r3, [pc, #180]	@ (80062c0 <_reclaim_reent+0xb8>)
 800620a:	b570      	push	{r4, r5, r6, lr}
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	4604      	mov	r4, r0
 8006210:	4283      	cmp	r3, r0
 8006212:	d053      	beq.n	80062bc <_reclaim_reent+0xb4>
 8006214:	69c3      	ldr	r3, [r0, #28]
 8006216:	b31b      	cbz	r3, 8006260 <_reclaim_reent+0x58>
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	b163      	cbz	r3, 8006236 <_reclaim_reent+0x2e>
 800621c:	2500      	movs	r5, #0
 800621e:	69e3      	ldr	r3, [r4, #28]
 8006220:	68db      	ldr	r3, [r3, #12]
 8006222:	5959      	ldr	r1, [r3, r5]
 8006224:	b9b1      	cbnz	r1, 8006254 <_reclaim_reent+0x4c>
 8006226:	3504      	adds	r5, #4
 8006228:	2d80      	cmp	r5, #128	@ 0x80
 800622a:	d1f8      	bne.n	800621e <_reclaim_reent+0x16>
 800622c:	69e3      	ldr	r3, [r4, #28]
 800622e:	4620      	mov	r0, r4
 8006230:	68d9      	ldr	r1, [r3, #12]
 8006232:	f000 f87b 	bl	800632c <_free_r>
 8006236:	69e3      	ldr	r3, [r4, #28]
 8006238:	6819      	ldr	r1, [r3, #0]
 800623a:	b111      	cbz	r1, 8006242 <_reclaim_reent+0x3a>
 800623c:	4620      	mov	r0, r4
 800623e:	f000 f875 	bl	800632c <_free_r>
 8006242:	69e3      	ldr	r3, [r4, #28]
 8006244:	689d      	ldr	r5, [r3, #8]
 8006246:	b15d      	cbz	r5, 8006260 <_reclaim_reent+0x58>
 8006248:	4629      	mov	r1, r5
 800624a:	4620      	mov	r0, r4
 800624c:	682d      	ldr	r5, [r5, #0]
 800624e:	f000 f86d 	bl	800632c <_free_r>
 8006252:	e7f8      	b.n	8006246 <_reclaim_reent+0x3e>
 8006254:	680e      	ldr	r6, [r1, #0]
 8006256:	4620      	mov	r0, r4
 8006258:	f000 f868 	bl	800632c <_free_r>
 800625c:	4631      	mov	r1, r6
 800625e:	e7e1      	b.n	8006224 <_reclaim_reent+0x1c>
 8006260:	6961      	ldr	r1, [r4, #20]
 8006262:	b111      	cbz	r1, 800626a <_reclaim_reent+0x62>
 8006264:	4620      	mov	r0, r4
 8006266:	f000 f861 	bl	800632c <_free_r>
 800626a:	69e1      	ldr	r1, [r4, #28]
 800626c:	b111      	cbz	r1, 8006274 <_reclaim_reent+0x6c>
 800626e:	4620      	mov	r0, r4
 8006270:	f000 f85c 	bl	800632c <_free_r>
 8006274:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006276:	b111      	cbz	r1, 800627e <_reclaim_reent+0x76>
 8006278:	4620      	mov	r0, r4
 800627a:	f000 f857 	bl	800632c <_free_r>
 800627e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006280:	b111      	cbz	r1, 8006288 <_reclaim_reent+0x80>
 8006282:	4620      	mov	r0, r4
 8006284:	f000 f852 	bl	800632c <_free_r>
 8006288:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800628a:	b111      	cbz	r1, 8006292 <_reclaim_reent+0x8a>
 800628c:	4620      	mov	r0, r4
 800628e:	f000 f84d 	bl	800632c <_free_r>
 8006292:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006294:	b111      	cbz	r1, 800629c <_reclaim_reent+0x94>
 8006296:	4620      	mov	r0, r4
 8006298:	f000 f848 	bl	800632c <_free_r>
 800629c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800629e:	b111      	cbz	r1, 80062a6 <_reclaim_reent+0x9e>
 80062a0:	4620      	mov	r0, r4
 80062a2:	f000 f843 	bl	800632c <_free_r>
 80062a6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80062a8:	b111      	cbz	r1, 80062b0 <_reclaim_reent+0xa8>
 80062aa:	4620      	mov	r0, r4
 80062ac:	f000 f83e 	bl	800632c <_free_r>
 80062b0:	6a23      	ldr	r3, [r4, #32]
 80062b2:	b11b      	cbz	r3, 80062bc <_reclaim_reent+0xb4>
 80062b4:	4620      	mov	r0, r4
 80062b6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80062ba:	4718      	bx	r3
 80062bc:	bd70      	pop	{r4, r5, r6, pc}
 80062be:	bf00      	nop
 80062c0:	20000018 	.word	0x20000018

080062c4 <__libc_init_array>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	2600      	movs	r6, #0
 80062c8:	4d0c      	ldr	r5, [pc, #48]	@ (80062fc <__libc_init_array+0x38>)
 80062ca:	4c0d      	ldr	r4, [pc, #52]	@ (8006300 <__libc_init_array+0x3c>)
 80062cc:	1b64      	subs	r4, r4, r5
 80062ce:	10a4      	asrs	r4, r4, #2
 80062d0:	42a6      	cmp	r6, r4
 80062d2:	d109      	bne.n	80062e8 <__libc_init_array+0x24>
 80062d4:	f000 f87e 	bl	80063d4 <_init>
 80062d8:	2600      	movs	r6, #0
 80062da:	4d0a      	ldr	r5, [pc, #40]	@ (8006304 <__libc_init_array+0x40>)
 80062dc:	4c0a      	ldr	r4, [pc, #40]	@ (8006308 <__libc_init_array+0x44>)
 80062de:	1b64      	subs	r4, r4, r5
 80062e0:	10a4      	asrs	r4, r4, #2
 80062e2:	42a6      	cmp	r6, r4
 80062e4:	d105      	bne.n	80062f2 <__libc_init_array+0x2e>
 80062e6:	bd70      	pop	{r4, r5, r6, pc}
 80062e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062ec:	4798      	blx	r3
 80062ee:	3601      	adds	r6, #1
 80062f0:	e7ee      	b.n	80062d0 <__libc_init_array+0xc>
 80062f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062f6:	4798      	blx	r3
 80062f8:	3601      	adds	r6, #1
 80062fa:	e7f2      	b.n	80062e2 <__libc_init_array+0x1e>
 80062fc:	08007860 	.word	0x08007860
 8006300:	08007860 	.word	0x08007860
 8006304:	08007860 	.word	0x08007860
 8006308:	08007864 	.word	0x08007864

0800630c <__retarget_lock_acquire_recursive>:
 800630c:	4770      	bx	lr

0800630e <__retarget_lock_release_recursive>:
 800630e:	4770      	bx	lr

08006310 <memcpy>:
 8006310:	440a      	add	r2, r1
 8006312:	4291      	cmp	r1, r2
 8006314:	f100 33ff 	add.w	r3, r0, #4294967295
 8006318:	d100      	bne.n	800631c <memcpy+0xc>
 800631a:	4770      	bx	lr
 800631c:	b510      	push	{r4, lr}
 800631e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006322:	4291      	cmp	r1, r2
 8006324:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006328:	d1f9      	bne.n	800631e <memcpy+0xe>
 800632a:	bd10      	pop	{r4, pc}

0800632c <_free_r>:
 800632c:	b538      	push	{r3, r4, r5, lr}
 800632e:	4605      	mov	r5, r0
 8006330:	2900      	cmp	r1, #0
 8006332:	d040      	beq.n	80063b6 <_free_r+0x8a>
 8006334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006338:	1f0c      	subs	r4, r1, #4
 800633a:	2b00      	cmp	r3, #0
 800633c:	bfb8      	it	lt
 800633e:	18e4      	addlt	r4, r4, r3
 8006340:	f000 f83c 	bl	80063bc <__malloc_lock>
 8006344:	4a1c      	ldr	r2, [pc, #112]	@ (80063b8 <_free_r+0x8c>)
 8006346:	6813      	ldr	r3, [r2, #0]
 8006348:	b933      	cbnz	r3, 8006358 <_free_r+0x2c>
 800634a:	6063      	str	r3, [r4, #4]
 800634c:	6014      	str	r4, [r2, #0]
 800634e:	4628      	mov	r0, r5
 8006350:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006354:	f000 b838 	b.w	80063c8 <__malloc_unlock>
 8006358:	42a3      	cmp	r3, r4
 800635a:	d908      	bls.n	800636e <_free_r+0x42>
 800635c:	6820      	ldr	r0, [r4, #0]
 800635e:	1821      	adds	r1, r4, r0
 8006360:	428b      	cmp	r3, r1
 8006362:	bf01      	itttt	eq
 8006364:	6819      	ldreq	r1, [r3, #0]
 8006366:	685b      	ldreq	r3, [r3, #4]
 8006368:	1809      	addeq	r1, r1, r0
 800636a:	6021      	streq	r1, [r4, #0]
 800636c:	e7ed      	b.n	800634a <_free_r+0x1e>
 800636e:	461a      	mov	r2, r3
 8006370:	685b      	ldr	r3, [r3, #4]
 8006372:	b10b      	cbz	r3, 8006378 <_free_r+0x4c>
 8006374:	42a3      	cmp	r3, r4
 8006376:	d9fa      	bls.n	800636e <_free_r+0x42>
 8006378:	6811      	ldr	r1, [r2, #0]
 800637a:	1850      	adds	r0, r2, r1
 800637c:	42a0      	cmp	r0, r4
 800637e:	d10b      	bne.n	8006398 <_free_r+0x6c>
 8006380:	6820      	ldr	r0, [r4, #0]
 8006382:	4401      	add	r1, r0
 8006384:	1850      	adds	r0, r2, r1
 8006386:	4283      	cmp	r3, r0
 8006388:	6011      	str	r1, [r2, #0]
 800638a:	d1e0      	bne.n	800634e <_free_r+0x22>
 800638c:	6818      	ldr	r0, [r3, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	4408      	add	r0, r1
 8006392:	6010      	str	r0, [r2, #0]
 8006394:	6053      	str	r3, [r2, #4]
 8006396:	e7da      	b.n	800634e <_free_r+0x22>
 8006398:	d902      	bls.n	80063a0 <_free_r+0x74>
 800639a:	230c      	movs	r3, #12
 800639c:	602b      	str	r3, [r5, #0]
 800639e:	e7d6      	b.n	800634e <_free_r+0x22>
 80063a0:	6820      	ldr	r0, [r4, #0]
 80063a2:	1821      	adds	r1, r4, r0
 80063a4:	428b      	cmp	r3, r1
 80063a6:	bf01      	itttt	eq
 80063a8:	6819      	ldreq	r1, [r3, #0]
 80063aa:	685b      	ldreq	r3, [r3, #4]
 80063ac:	1809      	addeq	r1, r1, r0
 80063ae:	6021      	streq	r1, [r4, #0]
 80063b0:	6063      	str	r3, [r4, #4]
 80063b2:	6054      	str	r4, [r2, #4]
 80063b4:	e7cb      	b.n	800634e <_free_r+0x22>
 80063b6:	bd38      	pop	{r3, r4, r5, pc}
 80063b8:	20002474 	.word	0x20002474

080063bc <__malloc_lock>:
 80063bc:	4801      	ldr	r0, [pc, #4]	@ (80063c4 <__malloc_lock+0x8>)
 80063be:	f7ff bfa5 	b.w	800630c <__retarget_lock_acquire_recursive>
 80063c2:	bf00      	nop
 80063c4:	20002470 	.word	0x20002470

080063c8 <__malloc_unlock>:
 80063c8:	4801      	ldr	r0, [pc, #4]	@ (80063d0 <__malloc_unlock+0x8>)
 80063ca:	f7ff bfa0 	b.w	800630e <__retarget_lock_release_recursive>
 80063ce:	bf00      	nop
 80063d0:	20002470 	.word	0x20002470

080063d4 <_init>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	bf00      	nop
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr

080063e0 <_fini>:
 80063e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063e2:	bf00      	nop
 80063e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063e6:	bc08      	pop	{r3}
 80063e8:	469e      	mov	lr, r3
 80063ea:	4770      	bx	lr
