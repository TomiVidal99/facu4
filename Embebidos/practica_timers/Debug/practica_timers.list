
practica_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079f8  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001040  08007b08  08007b08  00008b08  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b48  08008b48  0000a068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08008b48  08008b48  0000a068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08008b48  08008b48  0000a068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b48  08008b48  00009b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b4c  08008b4c  00009b4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08008b50  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ffc  20000068  08008bb8  0000a068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002064  08008bb8  0000b064  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001710e  00000000  00000000  0000a091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000034bc  00000000  00000000  0002119f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001530  00000000  00000000  00024660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001081  00000000  00000000  00025b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019506  00000000  00000000  00026c11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017aba  00000000  00000000  00040117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000956de  00000000  00000000  00057bd1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ed2af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006168  00000000  00000000  000ed2f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000f345c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08007af0 	.word	0x08007af0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08007af0 	.word	0x08007af0

08000150 <__aeabi_dmul>:
 8000150:	b570      	push	{r4, r5, r6, lr}
 8000152:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000156:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800015a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800015e:	bf1d      	ittte	ne
 8000160:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000164:	ea94 0f0c 	teqne	r4, ip
 8000168:	ea95 0f0c 	teqne	r5, ip
 800016c:	f000 f8de 	bleq	800032c <__aeabi_dmul+0x1dc>
 8000170:	442c      	add	r4, r5
 8000172:	ea81 0603 	eor.w	r6, r1, r3
 8000176:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800017a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800017e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000182:	bf18      	it	ne
 8000184:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000188:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800018c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000190:	d038      	beq.n	8000204 <__aeabi_dmul+0xb4>
 8000192:	fba0 ce02 	umull	ip, lr, r0, r2
 8000196:	f04f 0500 	mov.w	r5, #0
 800019a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800019e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80001a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001a6:	f04f 0600 	mov.w	r6, #0
 80001aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ae:	f09c 0f00 	teq	ip, #0
 80001b2:	bf18      	it	ne
 80001b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80001bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80001c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80001c4:	d204      	bcs.n	80001d0 <__aeabi_dmul+0x80>
 80001c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80001ca:	416d      	adcs	r5, r5
 80001cc:	eb46 0606 	adc.w	r6, r6, r6
 80001d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80001d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80001d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80001dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80001e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80001e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80001e8:	bf88      	it	hi
 80001ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80001ee:	d81e      	bhi.n	800022e <__aeabi_dmul+0xde>
 80001f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80001f4:	bf08      	it	eq
 80001f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80001fa:	f150 0000 	adcs.w	r0, r0, #0
 80001fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000202:	bd70      	pop	{r4, r5, r6, pc}
 8000204:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000208:	ea46 0101 	orr.w	r1, r6, r1
 800020c:	ea40 0002 	orr.w	r0, r0, r2
 8000210:	ea81 0103 	eor.w	r1, r1, r3
 8000214:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000218:	bfc2      	ittt	gt
 800021a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800021e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000222:	bd70      	popgt	{r4, r5, r6, pc}
 8000224:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000228:	f04f 0e00 	mov.w	lr, #0
 800022c:	3c01      	subs	r4, #1
 800022e:	f300 80ab 	bgt.w	8000388 <__aeabi_dmul+0x238>
 8000232:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000236:	bfde      	ittt	le
 8000238:	2000      	movle	r0, #0
 800023a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800023e:	bd70      	pople	{r4, r5, r6, pc}
 8000240:	f1c4 0400 	rsb	r4, r4, #0
 8000244:	3c20      	subs	r4, #32
 8000246:	da35      	bge.n	80002b4 <__aeabi_dmul+0x164>
 8000248:	340c      	adds	r4, #12
 800024a:	dc1b      	bgt.n	8000284 <__aeabi_dmul+0x134>
 800024c:	f104 0414 	add.w	r4, r4, #20
 8000250:	f1c4 0520 	rsb	r5, r4, #32
 8000254:	fa00 f305 	lsl.w	r3, r0, r5
 8000258:	fa20 f004 	lsr.w	r0, r0, r4
 800025c:	fa01 f205 	lsl.w	r2, r1, r5
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000268:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800026c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000270:	fa21 f604 	lsr.w	r6, r1, r4
 8000274:	eb42 0106 	adc.w	r1, r2, r6
 8000278:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800027c:	bf08      	it	eq
 800027e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000282:	bd70      	pop	{r4, r5, r6, pc}
 8000284:	f1c4 040c 	rsb	r4, r4, #12
 8000288:	f1c4 0520 	rsb	r5, r4, #32
 800028c:	fa00 f304 	lsl.w	r3, r0, r4
 8000290:	fa20 f005 	lsr.w	r0, r0, r5
 8000294:	fa01 f204 	lsl.w	r2, r1, r4
 8000298:	ea40 0002 	orr.w	r0, r0, r2
 800029c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002a4:	f141 0100 	adc.w	r1, r1, #0
 80002a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ac:	bf08      	it	eq
 80002ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002b2:	bd70      	pop	{r4, r5, r6, pc}
 80002b4:	f1c4 0520 	rsb	r5, r4, #32
 80002b8:	fa00 f205 	lsl.w	r2, r0, r5
 80002bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80002c0:	fa20 f304 	lsr.w	r3, r0, r4
 80002c4:	fa01 f205 	lsl.w	r2, r1, r5
 80002c8:	ea43 0302 	orr.w	r3, r3, r2
 80002cc:	fa21 f004 	lsr.w	r0, r1, r4
 80002d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	fa21 f204 	lsr.w	r2, r1, r4
 80002d8:	ea20 0002 	bic.w	r0, r0, r2
 80002dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80002e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002e4:	bf08      	it	eq
 80002e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002ea:	bd70      	pop	{r4, r5, r6, pc}
 80002ec:	f094 0f00 	teq	r4, #0
 80002f0:	d10f      	bne.n	8000312 <__aeabi_dmul+0x1c2>
 80002f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80002f6:	0040      	lsls	r0, r0, #1
 80002f8:	eb41 0101 	adc.w	r1, r1, r1
 80002fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000300:	bf08      	it	eq
 8000302:	3c01      	subeq	r4, #1
 8000304:	d0f7      	beq.n	80002f6 <__aeabi_dmul+0x1a6>
 8000306:	ea41 0106 	orr.w	r1, r1, r6
 800030a:	f095 0f00 	teq	r5, #0
 800030e:	bf18      	it	ne
 8000310:	4770      	bxne	lr
 8000312:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000316:	0052      	lsls	r2, r2, #1
 8000318:	eb43 0303 	adc.w	r3, r3, r3
 800031c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000320:	bf08      	it	eq
 8000322:	3d01      	subeq	r5, #1
 8000324:	d0f7      	beq.n	8000316 <__aeabi_dmul+0x1c6>
 8000326:	ea43 0306 	orr.w	r3, r3, r6
 800032a:	4770      	bx	lr
 800032c:	ea94 0f0c 	teq	r4, ip
 8000330:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000334:	bf18      	it	ne
 8000336:	ea95 0f0c 	teqne	r5, ip
 800033a:	d00c      	beq.n	8000356 <__aeabi_dmul+0x206>
 800033c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000340:	bf18      	it	ne
 8000342:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000346:	d1d1      	bne.n	80002ec <__aeabi_dmul+0x19c>
 8000348:	ea81 0103 	eor.w	r1, r1, r3
 800034c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000350:	f04f 0000 	mov.w	r0, #0
 8000354:	bd70      	pop	{r4, r5, r6, pc}
 8000356:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800035a:	bf06      	itte	eq
 800035c:	4610      	moveq	r0, r2
 800035e:	4619      	moveq	r1, r3
 8000360:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000364:	d019      	beq.n	800039a <__aeabi_dmul+0x24a>
 8000366:	ea94 0f0c 	teq	r4, ip
 800036a:	d102      	bne.n	8000372 <__aeabi_dmul+0x222>
 800036c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000370:	d113      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000372:	ea95 0f0c 	teq	r5, ip
 8000376:	d105      	bne.n	8000384 <__aeabi_dmul+0x234>
 8000378:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800037c:	bf1c      	itt	ne
 800037e:	4610      	movne	r0, r2
 8000380:	4619      	movne	r1, r3
 8000382:	d10a      	bne.n	800039a <__aeabi_dmul+0x24a>
 8000384:	ea81 0103 	eor.w	r1, r1, r3
 8000388:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000390:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000394:	f04f 0000 	mov.w	r0, #0
 8000398:	bd70      	pop	{r4, r5, r6, pc}
 800039a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800039e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80003a2:	bd70      	pop	{r4, r5, r6, pc}

080003a4 <__aeabi_drsub>:
 80003a4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80003a8:	e002      	b.n	80003b0 <__adddf3>
 80003aa:	bf00      	nop

080003ac <__aeabi_dsub>:
 80003ac:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080003b0 <__adddf3>:
 80003b0:	b530      	push	{r4, r5, lr}
 80003b2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003b6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003ba:	ea94 0f05 	teq	r4, r5
 80003be:	bf08      	it	eq
 80003c0:	ea90 0f02 	teqeq	r0, r2
 80003c4:	bf1f      	itttt	ne
 80003c6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003ca:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ce:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003d2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003d6:	f000 80e2 	beq.w	800059e <__adddf3+0x1ee>
 80003da:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003de:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003e2:	bfb8      	it	lt
 80003e4:	426d      	neglt	r5, r5
 80003e6:	dd0c      	ble.n	8000402 <__adddf3+0x52>
 80003e8:	442c      	add	r4, r5
 80003ea:	ea80 0202 	eor.w	r2, r0, r2
 80003ee:	ea81 0303 	eor.w	r3, r1, r3
 80003f2:	ea82 0000 	eor.w	r0, r2, r0
 80003f6:	ea83 0101 	eor.w	r1, r3, r1
 80003fa:	ea80 0202 	eor.w	r2, r0, r2
 80003fe:	ea81 0303 	eor.w	r3, r1, r3
 8000402:	2d36      	cmp	r5, #54	@ 0x36
 8000404:	bf88      	it	hi
 8000406:	bd30      	pophi	{r4, r5, pc}
 8000408:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800040c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000410:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000414:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x70>
 800041a:	4240      	negs	r0, r0
 800041c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000420:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000424:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000428:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800042c:	d002      	beq.n	8000434 <__adddf3+0x84>
 800042e:	4252      	negs	r2, r2
 8000430:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000434:	ea94 0f05 	teq	r4, r5
 8000438:	f000 80a7 	beq.w	800058a <__adddf3+0x1da>
 800043c:	f1a4 0401 	sub.w	r4, r4, #1
 8000440:	f1d5 0e20 	rsbs	lr, r5, #32
 8000444:	db0d      	blt.n	8000462 <__adddf3+0xb2>
 8000446:	fa02 fc0e 	lsl.w	ip, r2, lr
 800044a:	fa22 f205 	lsr.w	r2, r2, r5
 800044e:	1880      	adds	r0, r0, r2
 8000450:	f141 0100 	adc.w	r1, r1, #0
 8000454:	fa03 f20e 	lsl.w	r2, r3, lr
 8000458:	1880      	adds	r0, r0, r2
 800045a:	fa43 f305 	asr.w	r3, r3, r5
 800045e:	4159      	adcs	r1, r3
 8000460:	e00e      	b.n	8000480 <__adddf3+0xd0>
 8000462:	f1a5 0520 	sub.w	r5, r5, #32
 8000466:	f10e 0e20 	add.w	lr, lr, #32
 800046a:	2a01      	cmp	r2, #1
 800046c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000470:	bf28      	it	cs
 8000472:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000476:	fa43 f305 	asr.w	r3, r3, r5
 800047a:	18c0      	adds	r0, r0, r3
 800047c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000480:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000484:	d507      	bpl.n	8000496 <__adddf3+0xe6>
 8000486:	f04f 0e00 	mov.w	lr, #0
 800048a:	f1dc 0c00 	rsbs	ip, ip, #0
 800048e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000492:	eb6e 0101 	sbc.w	r1, lr, r1
 8000496:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800049a:	d31b      	bcc.n	80004d4 <__adddf3+0x124>
 800049c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80004a0:	d30c      	bcc.n	80004bc <__adddf3+0x10c>
 80004a2:	0849      	lsrs	r1, r1, #1
 80004a4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004a8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ac:	f104 0401 	add.w	r4, r4, #1
 80004b0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004b4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004b8:	f080 809a 	bcs.w	80005f0 <__adddf3+0x240>
 80004bc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004c0:	bf08      	it	eq
 80004c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004c6:	f150 0000 	adcs.w	r0, r0, #0
 80004ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ce:	ea41 0105 	orr.w	r1, r1, r5
 80004d2:	bd30      	pop	{r4, r5, pc}
 80004d4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004d8:	4140      	adcs	r0, r0
 80004da:	eb41 0101 	adc.w	r1, r1, r1
 80004de:	3c01      	subs	r4, #1
 80004e0:	bf28      	it	cs
 80004e2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004e6:	d2e9      	bcs.n	80004bc <__adddf3+0x10c>
 80004e8:	f091 0f00 	teq	r1, #0
 80004ec:	bf04      	itt	eq
 80004ee:	4601      	moveq	r1, r0
 80004f0:	2000      	moveq	r0, #0
 80004f2:	fab1 f381 	clz	r3, r1
 80004f6:	bf08      	it	eq
 80004f8:	3320      	addeq	r3, #32
 80004fa:	f1a3 030b 	sub.w	r3, r3, #11
 80004fe:	f1b3 0220 	subs.w	r2, r3, #32
 8000502:	da0c      	bge.n	800051e <__adddf3+0x16e>
 8000504:	320c      	adds	r2, #12
 8000506:	dd08      	ble.n	800051a <__adddf3+0x16a>
 8000508:	f102 0c14 	add.w	ip, r2, #20
 800050c:	f1c2 020c 	rsb	r2, r2, #12
 8000510:	fa01 f00c 	lsl.w	r0, r1, ip
 8000514:	fa21 f102 	lsr.w	r1, r1, r2
 8000518:	e00c      	b.n	8000534 <__adddf3+0x184>
 800051a:	f102 0214 	add.w	r2, r2, #20
 800051e:	bfd8      	it	le
 8000520:	f1c2 0c20 	rsble	ip, r2, #32
 8000524:	fa01 f102 	lsl.w	r1, r1, r2
 8000528:	fa20 fc0c 	lsr.w	ip, r0, ip
 800052c:	bfdc      	itt	le
 800052e:	ea41 010c 	orrle.w	r1, r1, ip
 8000532:	4090      	lslle	r0, r2
 8000534:	1ae4      	subs	r4, r4, r3
 8000536:	bfa2      	ittt	ge
 8000538:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800053c:	4329      	orrge	r1, r5
 800053e:	bd30      	popge	{r4, r5, pc}
 8000540:	ea6f 0404 	mvn.w	r4, r4
 8000544:	3c1f      	subs	r4, #31
 8000546:	da1c      	bge.n	8000582 <__adddf3+0x1d2>
 8000548:	340c      	adds	r4, #12
 800054a:	dc0e      	bgt.n	800056a <__adddf3+0x1ba>
 800054c:	f104 0414 	add.w	r4, r4, #20
 8000550:	f1c4 0220 	rsb	r2, r4, #32
 8000554:	fa20 f004 	lsr.w	r0, r0, r4
 8000558:	fa01 f302 	lsl.w	r3, r1, r2
 800055c:	ea40 0003 	orr.w	r0, r0, r3
 8000560:	fa21 f304 	lsr.w	r3, r1, r4
 8000564:	ea45 0103 	orr.w	r1, r5, r3
 8000568:	bd30      	pop	{r4, r5, pc}
 800056a:	f1c4 040c 	rsb	r4, r4, #12
 800056e:	f1c4 0220 	rsb	r2, r4, #32
 8000572:	fa20 f002 	lsr.w	r0, r0, r2
 8000576:	fa01 f304 	lsl.w	r3, r1, r4
 800057a:	ea40 0003 	orr.w	r0, r0, r3
 800057e:	4629      	mov	r1, r5
 8000580:	bd30      	pop	{r4, r5, pc}
 8000582:	fa21 f004 	lsr.w	r0, r1, r4
 8000586:	4629      	mov	r1, r5
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	f094 0f00 	teq	r4, #0
 800058e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000592:	bf06      	itte	eq
 8000594:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000598:	3401      	addeq	r4, #1
 800059a:	3d01      	subne	r5, #1
 800059c:	e74e      	b.n	800043c <__adddf3+0x8c>
 800059e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005a2:	bf18      	it	ne
 80005a4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005a8:	d029      	beq.n	80005fe <__adddf3+0x24e>
 80005aa:	ea94 0f05 	teq	r4, r5
 80005ae:	bf08      	it	eq
 80005b0:	ea90 0f02 	teqeq	r0, r2
 80005b4:	d005      	beq.n	80005c2 <__adddf3+0x212>
 80005b6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005ba:	bf04      	itt	eq
 80005bc:	4619      	moveq	r1, r3
 80005be:	4610      	moveq	r0, r2
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	ea91 0f03 	teq	r1, r3
 80005c6:	bf1e      	ittt	ne
 80005c8:	2100      	movne	r1, #0
 80005ca:	2000      	movne	r0, #0
 80005cc:	bd30      	popne	{r4, r5, pc}
 80005ce:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005d2:	d105      	bne.n	80005e0 <__adddf3+0x230>
 80005d4:	0040      	lsls	r0, r0, #1
 80005d6:	4149      	adcs	r1, r1
 80005d8:	bf28      	it	cs
 80005da:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005de:	bd30      	pop	{r4, r5, pc}
 80005e0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005e4:	bf3c      	itt	cc
 80005e6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005ea:	bd30      	popcc	{r4, r5, pc}
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005f4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005f8:	f04f 0000 	mov.w	r0, #0
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000602:	bf1a      	itte	ne
 8000604:	4619      	movne	r1, r3
 8000606:	4610      	movne	r0, r2
 8000608:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800060c:	bf1c      	itt	ne
 800060e:	460b      	movne	r3, r1
 8000610:	4602      	movne	r2, r0
 8000612:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000616:	bf06      	itte	eq
 8000618:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800061c:	ea91 0f03 	teqeq	r1, r3
 8000620:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000624:	bd30      	pop	{r4, r5, pc}
 8000626:	bf00      	nop

08000628 <__aeabi_ui2d>:
 8000628:	f090 0f00 	teq	r0, #0
 800062c:	bf04      	itt	eq
 800062e:	2100      	moveq	r1, #0
 8000630:	4770      	bxeq	lr
 8000632:	b530      	push	{r4, r5, lr}
 8000634:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000638:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800063c:	f04f 0500 	mov.w	r5, #0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e750      	b.n	80004e8 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_i2d>:
 8000648:	f090 0f00 	teq	r0, #0
 800064c:	bf04      	itt	eq
 800064e:	2100      	moveq	r1, #0
 8000650:	4770      	bxeq	lr
 8000652:	b530      	push	{r4, r5, lr}
 8000654:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000658:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000660:	bf48      	it	mi
 8000662:	4240      	negmi	r0, r0
 8000664:	f04f 0100 	mov.w	r1, #0
 8000668:	e73e      	b.n	80004e8 <__adddf3+0x138>
 800066a:	bf00      	nop

0800066c <__aeabi_f2d>:
 800066c:	0042      	lsls	r2, r0, #1
 800066e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000672:	ea4f 0131 	mov.w	r1, r1, rrx
 8000676:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800067a:	bf1f      	itttt	ne
 800067c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000680:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000684:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000688:	4770      	bxne	lr
 800068a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800068e:	bf08      	it	eq
 8000690:	4770      	bxeq	lr
 8000692:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000696:	bf04      	itt	eq
 8000698:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800069c:	4770      	bxeq	lr
 800069e:	b530      	push	{r4, r5, lr}
 80006a0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80006a4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	e71c      	b.n	80004e8 <__adddf3+0x138>
 80006ae:	bf00      	nop

080006b0 <__aeabi_ul2d>:
 80006b0:	ea50 0201 	orrs.w	r2, r0, r1
 80006b4:	bf08      	it	eq
 80006b6:	4770      	bxeq	lr
 80006b8:	b530      	push	{r4, r5, lr}
 80006ba:	f04f 0500 	mov.w	r5, #0
 80006be:	e00a      	b.n	80006d6 <__aeabi_l2d+0x16>

080006c0 <__aeabi_l2d>:
 80006c0:	ea50 0201 	orrs.w	r2, r0, r1
 80006c4:	bf08      	it	eq
 80006c6:	4770      	bxeq	lr
 80006c8:	b530      	push	{r4, r5, lr}
 80006ca:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ce:	d502      	bpl.n	80006d6 <__aeabi_l2d+0x16>
 80006d0:	4240      	negs	r0, r0
 80006d2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006d6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006da:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006de:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006e2:	f43f aed8 	beq.w	8000496 <__adddf3+0xe6>
 80006e6:	f04f 0203 	mov.w	r2, #3
 80006ea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ee:	bf18      	it	ne
 80006f0:	3203      	addne	r2, #3
 80006f2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006f6:	bf18      	it	ne
 80006f8:	3203      	addne	r2, #3
 80006fa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006fe:	f1c2 0320 	rsb	r3, r2, #32
 8000702:	fa00 fc03 	lsl.w	ip, r0, r3
 8000706:	fa20 f002 	lsr.w	r0, r0, r2
 800070a:	fa01 fe03 	lsl.w	lr, r1, r3
 800070e:	ea40 000e 	orr.w	r0, r0, lr
 8000712:	fa21 f102 	lsr.w	r1, r1, r2
 8000716:	4414      	add	r4, r2
 8000718:	e6bd      	b.n	8000496 <__adddf3+0xe6>
 800071a:	bf00      	nop

0800071c <__gedf2>:
 800071c:	f04f 3cff 	mov.w	ip, #4294967295
 8000720:	e006      	b.n	8000730 <__cmpdf2+0x4>
 8000722:	bf00      	nop

08000724 <__ledf2>:
 8000724:	f04f 0c01 	mov.w	ip, #1
 8000728:	e002      	b.n	8000730 <__cmpdf2+0x4>
 800072a:	bf00      	nop

0800072c <__cmpdf2>:
 800072c:	f04f 0c01 	mov.w	ip, #1
 8000730:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000734:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000738:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800073c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000746:	d01b      	beq.n	8000780 <__cmpdf2+0x54>
 8000748:	b001      	add	sp, #4
 800074a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800074e:	bf0c      	ite	eq
 8000750:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000754:	ea91 0f03 	teqne	r1, r3
 8000758:	bf02      	ittt	eq
 800075a:	ea90 0f02 	teqeq	r0, r2
 800075e:	2000      	moveq	r0, #0
 8000760:	4770      	bxeq	lr
 8000762:	f110 0f00 	cmn.w	r0, #0
 8000766:	ea91 0f03 	teq	r1, r3
 800076a:	bf58      	it	pl
 800076c:	4299      	cmppl	r1, r3
 800076e:	bf08      	it	eq
 8000770:	4290      	cmpeq	r0, r2
 8000772:	bf2c      	ite	cs
 8000774:	17d8      	asrcs	r0, r3, #31
 8000776:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800077a:	f040 0001 	orr.w	r0, r0, #1
 800077e:	4770      	bx	lr
 8000780:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000784:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000788:	d102      	bne.n	8000790 <__cmpdf2+0x64>
 800078a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800078e:	d107      	bne.n	80007a0 <__cmpdf2+0x74>
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000798:	d1d6      	bne.n	8000748 <__cmpdf2+0x1c>
 800079a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800079e:	d0d3      	beq.n	8000748 <__cmpdf2+0x1c>
 80007a0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007a4:	4770      	bx	lr
 80007a6:	bf00      	nop

080007a8 <__aeabi_cdrcmple>:
 80007a8:	4684      	mov	ip, r0
 80007aa:	4610      	mov	r0, r2
 80007ac:	4662      	mov	r2, ip
 80007ae:	468c      	mov	ip, r1
 80007b0:	4619      	mov	r1, r3
 80007b2:	4663      	mov	r3, ip
 80007b4:	e000      	b.n	80007b8 <__aeabi_cdcmpeq>
 80007b6:	bf00      	nop

080007b8 <__aeabi_cdcmpeq>:
 80007b8:	b501      	push	{r0, lr}
 80007ba:	f7ff ffb7 	bl	800072c <__cmpdf2>
 80007be:	2800      	cmp	r0, #0
 80007c0:	bf48      	it	mi
 80007c2:	f110 0f00 	cmnmi.w	r0, #0
 80007c6:	bd01      	pop	{r0, pc}

080007c8 <__aeabi_dcmpeq>:
 80007c8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007cc:	f7ff fff4 	bl	80007b8 <__aeabi_cdcmpeq>
 80007d0:	bf0c      	ite	eq
 80007d2:	2001      	moveq	r0, #1
 80007d4:	2000      	movne	r0, #0
 80007d6:	f85d fb08 	ldr.w	pc, [sp], #8
 80007da:	bf00      	nop

080007dc <__aeabi_dcmplt>:
 80007dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007e0:	f7ff ffea 	bl	80007b8 <__aeabi_cdcmpeq>
 80007e4:	bf34      	ite	cc
 80007e6:	2001      	movcc	r0, #1
 80007e8:	2000      	movcs	r0, #0
 80007ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80007ee:	bf00      	nop

080007f0 <__aeabi_dcmple>:
 80007f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80007f4:	f7ff ffe0 	bl	80007b8 <__aeabi_cdcmpeq>
 80007f8:	bf94      	ite	ls
 80007fa:	2001      	movls	r0, #1
 80007fc:	2000      	movhi	r0, #0
 80007fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000802:	bf00      	nop

08000804 <__aeabi_dcmpge>:
 8000804:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000808:	f7ff ffce 	bl	80007a8 <__aeabi_cdrcmple>
 800080c:	bf94      	ite	ls
 800080e:	2001      	movls	r0, #1
 8000810:	2000      	movhi	r0, #0
 8000812:	f85d fb08 	ldr.w	pc, [sp], #8
 8000816:	bf00      	nop

08000818 <__aeabi_dcmpgt>:
 8000818:	f84d ed08 	str.w	lr, [sp, #-8]!
 800081c:	f7ff ffc4 	bl	80007a8 <__aeabi_cdrcmple>
 8000820:	bf34      	ite	cc
 8000822:	2001      	movcc	r0, #1
 8000824:	2000      	movcs	r0, #0
 8000826:	f85d fb08 	ldr.w	pc, [sp], #8
 800082a:	bf00      	nop

0800082c <__aeabi_d2iz>:
 800082c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000830:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000834:	d215      	bcs.n	8000862 <__aeabi_d2iz+0x36>
 8000836:	d511      	bpl.n	800085c <__aeabi_d2iz+0x30>
 8000838:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800083c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000840:	d912      	bls.n	8000868 <__aeabi_d2iz+0x3c>
 8000842:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000846:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800084a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800084e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000852:	fa23 f002 	lsr.w	r0, r3, r2
 8000856:	bf18      	it	ne
 8000858:	4240      	negne	r0, r0
 800085a:	4770      	bx	lr
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	4770      	bx	lr
 8000862:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000866:	d105      	bne.n	8000874 <__aeabi_d2iz+0x48>
 8000868:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800086c:	bf08      	it	eq
 800086e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000872:	4770      	bx	lr
 8000874:	f04f 0000 	mov.w	r0, #0
 8000878:	4770      	bx	lr
 800087a:	bf00      	nop

0800087c <__aeabi_d2f>:
 800087c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000880:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000884:	bf24      	itt	cs
 8000886:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 800088a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 800088e:	d90d      	bls.n	80008ac <__aeabi_d2f+0x30>
 8000890:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000894:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000898:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800089c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 80008a0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a4:	bf08      	it	eq
 80008a6:	f020 0001 	biceq.w	r0, r0, #1
 80008aa:	4770      	bx	lr
 80008ac:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 80008b0:	d121      	bne.n	80008f6 <__aeabi_d2f+0x7a>
 80008b2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 80008b6:	bfbc      	itt	lt
 80008b8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 80008bc:	4770      	bxlt	lr
 80008be:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008c6:	f1c2 0218 	rsb	r2, r2, #24
 80008ca:	f1c2 0c20 	rsb	ip, r2, #32
 80008ce:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d2:	fa20 f002 	lsr.w	r0, r0, r2
 80008d6:	bf18      	it	ne
 80008d8:	f040 0001 	orrne.w	r0, r0, #1
 80008dc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008e8:	ea40 000c 	orr.w	r0, r0, ip
 80008ec:	fa23 f302 	lsr.w	r3, r3, r2
 80008f0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f4:	e7cc      	b.n	8000890 <__aeabi_d2f+0x14>
 80008f6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fa:	d107      	bne.n	800090c <__aeabi_d2f+0x90>
 80008fc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000900:	bf1e      	ittt	ne
 8000902:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000906:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800090a:	4770      	bxne	lr
 800090c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000910:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000914:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop

0800091c <__aeabi_frsub>:
 800091c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000920:	e002      	b.n	8000928 <__addsf3>
 8000922:	bf00      	nop

08000924 <__aeabi_fsub>:
 8000924:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000928 <__addsf3>:
 8000928:	0042      	lsls	r2, r0, #1
 800092a:	bf1f      	itttt	ne
 800092c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000930:	ea92 0f03 	teqne	r2, r3
 8000934:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000938:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800093c:	d06a      	beq.n	8000a14 <__addsf3+0xec>
 800093e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000942:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000946:	bfc1      	itttt	gt
 8000948:	18d2      	addgt	r2, r2, r3
 800094a:	4041      	eorgt	r1, r0
 800094c:	4048      	eorgt	r0, r1
 800094e:	4041      	eorgt	r1, r0
 8000950:	bfb8      	it	lt
 8000952:	425b      	neglt	r3, r3
 8000954:	2b19      	cmp	r3, #25
 8000956:	bf88      	it	hi
 8000958:	4770      	bxhi	lr
 800095a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800095e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000962:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000966:	bf18      	it	ne
 8000968:	4240      	negne	r0, r0
 800096a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800096e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000972:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000976:	bf18      	it	ne
 8000978:	4249      	negne	r1, r1
 800097a:	ea92 0f03 	teq	r2, r3
 800097e:	d03f      	beq.n	8000a00 <__addsf3+0xd8>
 8000980:	f1a2 0201 	sub.w	r2, r2, #1
 8000984:	fa41 fc03 	asr.w	ip, r1, r3
 8000988:	eb10 000c 	adds.w	r0, r0, ip
 800098c:	f1c3 0320 	rsb	r3, r3, #32
 8000990:	fa01 f103 	lsl.w	r1, r1, r3
 8000994:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000998:	d502      	bpl.n	80009a0 <__addsf3+0x78>
 800099a:	4249      	negs	r1, r1
 800099c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009a0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80009a4:	d313      	bcc.n	80009ce <__addsf3+0xa6>
 80009a6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80009aa:	d306      	bcc.n	80009ba <__addsf3+0x92>
 80009ac:	0840      	lsrs	r0, r0, #1
 80009ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80009b2:	f102 0201 	add.w	r2, r2, #1
 80009b6:	2afe      	cmp	r2, #254	@ 0xfe
 80009b8:	d251      	bcs.n	8000a5e <__addsf3+0x136>
 80009ba:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80009be:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80009c2:	bf08      	it	eq
 80009c4:	f020 0001 	biceq.w	r0, r0, #1
 80009c8:	ea40 0003 	orr.w	r0, r0, r3
 80009cc:	4770      	bx	lr
 80009ce:	0049      	lsls	r1, r1, #1
 80009d0:	eb40 0000 	adc.w	r0, r0, r0
 80009d4:	3a01      	subs	r2, #1
 80009d6:	bf28      	it	cs
 80009d8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 80009dc:	d2ed      	bcs.n	80009ba <__addsf3+0x92>
 80009de:	fab0 fc80 	clz	ip, r0
 80009e2:	f1ac 0c08 	sub.w	ip, ip, #8
 80009e6:	ebb2 020c 	subs.w	r2, r2, ip
 80009ea:	fa00 f00c 	lsl.w	r0, r0, ip
 80009ee:	bfaa      	itet	ge
 80009f0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 80009f4:	4252      	neglt	r2, r2
 80009f6:	4318      	orrge	r0, r3
 80009f8:	bfbc      	itt	lt
 80009fa:	40d0      	lsrlt	r0, r2
 80009fc:	4318      	orrlt	r0, r3
 80009fe:	4770      	bx	lr
 8000a00:	f092 0f00 	teq	r2, #0
 8000a04:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a08:	bf06      	itte	eq
 8000a0a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a0e:	3201      	addeq	r2, #1
 8000a10:	3b01      	subne	r3, #1
 8000a12:	e7b5      	b.n	8000980 <__addsf3+0x58>
 8000a14:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a18:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a1c:	bf18      	it	ne
 8000a1e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a22:	d021      	beq.n	8000a68 <__addsf3+0x140>
 8000a24:	ea92 0f03 	teq	r2, r3
 8000a28:	d004      	beq.n	8000a34 <__addsf3+0x10c>
 8000a2a:	f092 0f00 	teq	r2, #0
 8000a2e:	bf08      	it	eq
 8000a30:	4608      	moveq	r0, r1
 8000a32:	4770      	bx	lr
 8000a34:	ea90 0f01 	teq	r0, r1
 8000a38:	bf1c      	itt	ne
 8000a3a:	2000      	movne	r0, #0
 8000a3c:	4770      	bxne	lr
 8000a3e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000a42:	d104      	bne.n	8000a4e <__addsf3+0x126>
 8000a44:	0040      	lsls	r0, r0, #1
 8000a46:	bf28      	it	cs
 8000a48:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000a4c:	4770      	bx	lr
 8000a4e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000a52:	bf3c      	itt	cc
 8000a54:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000a58:	4770      	bxcc	lr
 8000a5a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a5e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000a62:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000a66:	4770      	bx	lr
 8000a68:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000a6c:	bf16      	itet	ne
 8000a6e:	4608      	movne	r0, r1
 8000a70:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000a74:	4601      	movne	r1, r0
 8000a76:	0242      	lsls	r2, r0, #9
 8000a78:	bf06      	itte	eq
 8000a7a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000a7e:	ea90 0f01 	teqeq	r0, r1
 8000a82:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_ui2f>:
 8000a88:	f04f 0300 	mov.w	r3, #0
 8000a8c:	e004      	b.n	8000a98 <__aeabi_i2f+0x8>
 8000a8e:	bf00      	nop

08000a90 <__aeabi_i2f>:
 8000a90:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000a94:	bf48      	it	mi
 8000a96:	4240      	negmi	r0, r0
 8000a98:	ea5f 0c00 	movs.w	ip, r0
 8000a9c:	bf08      	it	eq
 8000a9e:	4770      	bxeq	lr
 8000aa0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000aa4:	4601      	mov	r1, r0
 8000aa6:	f04f 0000 	mov.w	r0, #0
 8000aaa:	e01c      	b.n	8000ae6 <__aeabi_l2f+0x2a>

08000aac <__aeabi_ul2f>:
 8000aac:	ea50 0201 	orrs.w	r2, r0, r1
 8000ab0:	bf08      	it	eq
 8000ab2:	4770      	bxeq	lr
 8000ab4:	f04f 0300 	mov.w	r3, #0
 8000ab8:	e00a      	b.n	8000ad0 <__aeabi_l2f+0x14>
 8000aba:	bf00      	nop

08000abc <__aeabi_l2f>:
 8000abc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ac0:	bf08      	it	eq
 8000ac2:	4770      	bxeq	lr
 8000ac4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ac8:	d502      	bpl.n	8000ad0 <__aeabi_l2f+0x14>
 8000aca:	4240      	negs	r0, r0
 8000acc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ad0:	ea5f 0c01 	movs.w	ip, r1
 8000ad4:	bf02      	ittt	eq
 8000ad6:	4684      	moveq	ip, r0
 8000ad8:	4601      	moveq	r1, r0
 8000ada:	2000      	moveq	r0, #0
 8000adc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000ae6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000aea:	fabc f28c 	clz	r2, ip
 8000aee:	3a08      	subs	r2, #8
 8000af0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000af4:	db10      	blt.n	8000b18 <__aeabi_l2f+0x5c>
 8000af6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000afa:	4463      	add	r3, ip
 8000afc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b00:	f1c2 0220 	rsb	r2, r2, #32
 8000b04:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b08:	fa20 f202 	lsr.w	r2, r0, r2
 8000b0c:	eb43 0002 	adc.w	r0, r3, r2
 8000b10:	bf08      	it	eq
 8000b12:	f020 0001 	biceq.w	r0, r0, #1
 8000b16:	4770      	bx	lr
 8000b18:	f102 0220 	add.w	r2, r2, #32
 8000b1c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b20:	f1c2 0220 	rsb	r2, r2, #32
 8000b24:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b28:	fa21 f202 	lsr.w	r2, r1, r2
 8000b2c:	eb43 0002 	adc.w	r0, r3, r2
 8000b30:	bf08      	it	eq
 8000b32:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b36:	4770      	bx	lr

08000b38 <__gesf2>:
 8000b38:	f04f 3cff 	mov.w	ip, #4294967295
 8000b3c:	e006      	b.n	8000b4c <__cmpsf2+0x4>
 8000b3e:	bf00      	nop

08000b40 <__lesf2>:
 8000b40:	f04f 0c01 	mov.w	ip, #1
 8000b44:	e002      	b.n	8000b4c <__cmpsf2+0x4>
 8000b46:	bf00      	nop

08000b48 <__cmpsf2>:
 8000b48:	f04f 0c01 	mov.w	ip, #1
 8000b4c:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000b50:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000b54:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b58:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b5c:	bf18      	it	ne
 8000b5e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b62:	d011      	beq.n	8000b88 <__cmpsf2+0x40>
 8000b64:	b001      	add	sp, #4
 8000b66:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000b6a:	bf18      	it	ne
 8000b6c:	ea90 0f01 	teqne	r0, r1
 8000b70:	bf58      	it	pl
 8000b72:	ebb2 0003 	subspl.w	r0, r2, r3
 8000b76:	bf88      	it	hi
 8000b78:	17c8      	asrhi	r0, r1, #31
 8000b7a:	bf38      	it	cc
 8000b7c:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000b80:	bf18      	it	ne
 8000b82:	f040 0001 	orrne.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b8c:	d102      	bne.n	8000b94 <__cmpsf2+0x4c>
 8000b8e:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000b92:	d105      	bne.n	8000ba0 <__cmpsf2+0x58>
 8000b94:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8000b98:	d1e4      	bne.n	8000b64 <__cmpsf2+0x1c>
 8000b9a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000b9e:	d0e1      	beq.n	8000b64 <__cmpsf2+0x1c>
 8000ba0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_cfrcmple>:
 8000ba8:	4684      	mov	ip, r0
 8000baa:	4608      	mov	r0, r1
 8000bac:	4661      	mov	r1, ip
 8000bae:	e7ff      	b.n	8000bb0 <__aeabi_cfcmpeq>

08000bb0 <__aeabi_cfcmpeq>:
 8000bb0:	b50f      	push	{r0, r1, r2, r3, lr}
 8000bb2:	f7ff ffc9 	bl	8000b48 <__cmpsf2>
 8000bb6:	2800      	cmp	r0, #0
 8000bb8:	bf48      	it	mi
 8000bba:	f110 0f00 	cmnmi.w	r0, #0
 8000bbe:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000bc0 <__aeabi_fcmpeq>:
 8000bc0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bc4:	f7ff fff4 	bl	8000bb0 <__aeabi_cfcmpeq>
 8000bc8:	bf0c      	ite	eq
 8000bca:	2001      	moveq	r0, #1
 8000bcc:	2000      	movne	r0, #0
 8000bce:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bd2:	bf00      	nop

08000bd4 <__aeabi_fcmplt>:
 8000bd4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bd8:	f7ff ffea 	bl	8000bb0 <__aeabi_cfcmpeq>
 8000bdc:	bf34      	ite	cc
 8000bde:	2001      	movcc	r0, #1
 8000be0:	2000      	movcs	r0, #0
 8000be2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000be6:	bf00      	nop

08000be8 <__aeabi_fcmple>:
 8000be8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bec:	f7ff ffe0 	bl	8000bb0 <__aeabi_cfcmpeq>
 8000bf0:	bf94      	ite	ls
 8000bf2:	2001      	movls	r0, #1
 8000bf4:	2000      	movhi	r0, #0
 8000bf6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bfa:	bf00      	nop

08000bfc <__aeabi_fcmpge>:
 8000bfc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c00:	f7ff ffd2 	bl	8000ba8 <__aeabi_cfrcmple>
 8000c04:	bf94      	ite	ls
 8000c06:	2001      	movls	r0, #1
 8000c08:	2000      	movhi	r0, #0
 8000c0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c0e:	bf00      	nop

08000c10 <__aeabi_fcmpgt>:
 8000c10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000c14:	f7ff ffc8 	bl	8000ba8 <__aeabi_cfrcmple>
 8000c18:	bf34      	ite	cc
 8000c1a:	2001      	movcc	r0, #1
 8000c1c:	2000      	movcs	r0, #0
 8000c1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000c22:	bf00      	nop

08000c24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c28:	f001 f9c8 	bl	8001fbc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c2c:	f000 f840 	bl	8000cb0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c30:	f000 f8b2 	bl	8000d98 <MX_GPIO_Init>
	MX_I2C1_Init();
 8000c34:	f000 f882 	bl	8000d3c <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */

	// si falla la conexion i2c se hace una hard fault
	if (SSD1306_Init() == 0) {
 8000c38:	f000 fbe4 	bl	8001404 <SSD1306_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d101      	bne.n	8000c46 <main+0x22>
		Error_Handler();
 8000c42:	f000 fbbd 	bl	80013c0 <Error_Handler>
	}

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8000c46:	f003 f90f 	bl	8003e68 <osKernelInitialize>
	/* creation of defaultTask */
//	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
//			&defaultTask_attributes);

	/* creation of menuTask */
	menuTaskHandle = osThreadNew(menu, (void*) (&displayParams),
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <main+0x60>)
 8000c4c:	490e      	ldr	r1, [pc, #56]	@ (8000c88 <main+0x64>)
 8000c4e:	480f      	ldr	r0, [pc, #60]	@ (8000c8c <main+0x68>)
 8000c50:	f003 f952 	bl	8003ef8 <osThreadNew>
 8000c54:	4603      	mov	r3, r0
 8000c56:	4a0e      	ldr	r2, [pc, #56]	@ (8000c90 <main+0x6c>)
 8000c58:	6013      	str	r3, [r2, #0]
			&menuTask_attributes);

	/* creation of acceptButtonTas */
	acceptButtonTasHandle = osThreadNew(handleButtonPress,
 8000c5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000c94 <main+0x70>)
 8000c5c:	490e      	ldr	r1, [pc, #56]	@ (8000c98 <main+0x74>)
 8000c5e:	480f      	ldr	r0, [pc, #60]	@ (8000c9c <main+0x78>)
 8000c60:	f003 f94a 	bl	8003ef8 <osThreadNew>
 8000c64:	4603      	mov	r3, r0
 8000c66:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca0 <main+0x7c>)
 8000c68:	6013      	str	r3, [r2, #0]
			(void*) (&acceptButtonParams), &acceptButtonTas_attributes);

	/* creation of cancelButtonTas */
	cancelButtonTasHandle = osThreadNew(handleButtonPress,
 8000c6a:	4a0e      	ldr	r2, [pc, #56]	@ (8000ca4 <main+0x80>)
 8000c6c:	490e      	ldr	r1, [pc, #56]	@ (8000ca8 <main+0x84>)
 8000c6e:	480b      	ldr	r0, [pc, #44]	@ (8000c9c <main+0x78>)
 8000c70:	f003 f942 	bl	8003ef8 <osThreadNew>
 8000c74:	4603      	mov	r3, r0
 8000c76:	4a0d      	ldr	r2, [pc, #52]	@ (8000cac <main+0x88>)
 8000c78:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8000c7a:	f003 f917 	bl	8003eac <osKernelStart>

	/* We should never get here as control is now taken by the scheduler */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
 8000c7e:	bf00      	nop
 8000c80:	e7fd      	b.n	8000c7e <main+0x5a>
 8000c82:	bf00      	nop
 8000c84:	080088c0 	.word	0x080088c0
 8000c88:	200000e4 	.word	0x200000e4
 8000c8c:	08000e69 	.word	0x08000e69
 8000c90:	200000d8 	.word	0x200000d8
 8000c94:	080088e4 	.word	0x080088e4
 8000c98:	0800892c 	.word	0x0800892c
 8000c9c:	080012f5 	.word	0x080012f5
 8000ca0:	200000dc 	.word	0x200000dc
 8000ca4:	08008908 	.word	0x08008908
 8000ca8:	08008938 	.word	0x08008938
 8000cac:	200000e0 	.word	0x200000e0

08000cb0 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b090      	sub	sp, #64	@ 0x40
 8000cb4:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000cb6:	f107 0318 	add.w	r3, r7, #24
 8000cba:	2228      	movs	r2, #40	@ 0x28
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	4618      	mov	r0, r3
 8000cc0:	f005 fe12 	bl	80068e8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000cc4:	1d3b      	adds	r3, r7, #4
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	601a      	str	r2, [r3, #0]
 8000cca:	605a      	str	r2, [r3, #4]
 8000ccc:	609a      	str	r2, [r3, #8]
 8000cce:	60da      	str	r2, [r3, #12]
 8000cd0:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000cd6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cda:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000ce8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000cec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000cee:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000cf2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000cf4:	f107 0318 	add.w	r3, r7, #24
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f002 fa07 	bl	800310c <HAL_RCC_OscConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x58>
		Error_Handler();
 8000d04:	f000 fb5c 	bl	80013c0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000d08:	230f      	movs	r3, #15
 8000d0a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0c:	2302      	movs	r3, #2
 8000d0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000d1e:	1d3b      	adds	r3, r7, #4
 8000d20:	2102      	movs	r1, #2
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fc74 	bl	8003610 <HAL_RCC_ClockConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <SystemClock_Config+0x82>
		Error_Handler();
 8000d2e:	f000 fb47 	bl	80013c0 <Error_Handler>
	}
}
 8000d32:	bf00      	nop
 8000d34:	3740      	adds	r7, #64	@ 0x40
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
	...

08000d3c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8000d40:	4b12      	ldr	r3, [pc, #72]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d42:	4a13      	ldr	r2, [pc, #76]	@ (8000d90 <MX_I2C1_Init+0x54>)
 8000d44:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 400000;
 8000d46:	4b11      	ldr	r3, [pc, #68]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d48:	4a12      	ldr	r2, [pc, #72]	@ (8000d94 <MX_I2C1_Init+0x58>)
 8000d4a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8000d52:	4b0e      	ldr	r3, [pc, #56]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d58:	4b0c      	ldr	r3, [pc, #48]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d5a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000d5e:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d60:	4b0a      	ldr	r3, [pc, #40]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8000d66:	4b09      	ldr	r3, [pc, #36]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d6c:	4b07      	ldr	r3, [pc, #28]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000d78:	4804      	ldr	r0, [pc, #16]	@ (8000d8c <MX_I2C1_Init+0x50>)
 8000d7a:	f001 fbfd 	bl	8002578 <HAL_I2C_Init>
 8000d7e:	4603      	mov	r3, r0
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d001      	beq.n	8000d88 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8000d84:	f000 fb1c 	bl	80013c0 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	20000084 	.word	0x20000084
 8000d90:	40005400 	.word	0x40005400
 8000d94:	00061a80 	.word	0x00061a80

08000d98 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b088      	sub	sp, #32
 8000d9c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000d9e:	f107 0310 	add.w	r3, r7, #16
 8000da2:	2200      	movs	r2, #0
 8000da4:	601a      	str	r2, [r3, #0]
 8000da6:	605a      	str	r2, [r3, #4]
 8000da8:	609a      	str	r2, [r3, #8]
 8000daa:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000dac:	4b2a      	ldr	r3, [pc, #168]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dae:	699b      	ldr	r3, [r3, #24]
 8000db0:	4a29      	ldr	r2, [pc, #164]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000db2:	f043 0310 	orr.w	r3, r3, #16
 8000db6:	6193      	str	r3, [r2, #24]
 8000db8:	4b27      	ldr	r3, [pc, #156]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dba:	699b      	ldr	r3, [r3, #24]
 8000dbc:	f003 0310 	and.w	r3, r3, #16
 8000dc0:	60fb      	str	r3, [r7, #12]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000dc4:	4b24      	ldr	r3, [pc, #144]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dc6:	699b      	ldr	r3, [r3, #24]
 8000dc8:	4a23      	ldr	r2, [pc, #140]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dca:	f043 0320 	orr.w	r3, r3, #32
 8000dce:	6193      	str	r3, [r2, #24]
 8000dd0:	4b21      	ldr	r3, [pc, #132]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dd2:	699b      	ldr	r3, [r3, #24]
 8000dd4:	f003 0320 	and.w	r3, r3, #32
 8000dd8:	60bb      	str	r3, [r7, #8]
 8000dda:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b1e      	ldr	r3, [pc, #120]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a1d      	ldr	r2, [pc, #116]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000de2:	f043 0304 	orr.w	r3, r3, #4
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0304 	and.w	r3, r3, #4
 8000df0:	607b      	str	r3, [r7, #4]
 8000df2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	4a17      	ldr	r2, [pc, #92]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000dfa:	f043 0308 	orr.w	r3, r3, #8
 8000dfe:	6193      	str	r3, [r2, #24]
 8000e00:	4b15      	ldr	r3, [pc, #84]	@ (8000e58 <MX_GPIO_Init+0xc0>)
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	f003 0308 	and.w	r3, r3, #8
 8000e08:	603b      	str	r3, [r7, #0]
 8000e0a:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000e12:	4812      	ldr	r0, [pc, #72]	@ (8000e5c <MX_GPIO_Init+0xc4>)
 8000e14:	f001 fb7f 	bl	8002516 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : PC13 */
	GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000e18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e1e:	2301      	movs	r3, #1
 8000e20:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e26:	2302      	movs	r3, #2
 8000e28:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e2a:	f107 0310 	add.w	r3, r7, #16
 8000e2e:	4619      	mov	r1, r3
 8000e30:	480a      	ldr	r0, [pc, #40]	@ (8000e5c <MX_GPIO_Init+0xc4>)
 8000e32:	f001 f9d5 	bl	80021e0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PA2 PA3 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 8000e36:	230c      	movs	r3, #12
 8000e38:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e42:	f107 0310 	add.w	r3, r7, #16
 8000e46:	4619      	mov	r1, r3
 8000e48:	4805      	ldr	r0, [pc, #20]	@ (8000e60 <MX_GPIO_Init+0xc8>)
 8000e4a:	f001 f9c9 	bl	80021e0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000e4e:	bf00      	nop
 8000e50:	3720      	adds	r7, #32
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}
 8000e56:	bf00      	nop
 8000e58:	40021000 	.word	0x40021000
 8000e5c:	40011000 	.word	0x40011000
 8000e60:	40010800 	.word	0x40010800
 8000e64:	00000000 	.word	0x00000000

08000e68 <menu>:
 * @brief Function implementing the menuTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menu */
void menu(void *argument) {
 8000e68:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e6a:	b089      	sub	sp, #36	@ 0x24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN menu */
	/* Infinite loop */

	DisplayMenu menu = START;
 8000e70:	2300      	movs	r3, #0
 8000e72:	74fb      	strb	r3, [r7, #19]
	DisplayMenu prevMenu = START;
 8000e74:	2300      	movs	r3, #0
 8000e76:	77fb      	strb	r3, [r7, #31]

	float prev_point_angle = 0;
 8000e78:	f04f 0300 	mov.w	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
	float point_angle = 0;
 8000e7e:	f04f 0300 	mov.w	r3, #0
 8000e82:	617b      	str	r3, [r7, #20]

	const uint16_t halfWidth = SCREEN_WIDTH / 2;
 8000e84:	2340      	movs	r3, #64	@ 0x40
 8000e86:	823b      	strh	r3, [r7, #16]
	const uint16_t halfHeight = SCREEN_HEIGHT / 2;
 8000e88:	2320      	movs	r3, #32
 8000e8a:	81fb      	strh	r3, [r7, #14]

	for (;;) {

		menu = ((DisplayParams*) argument)->menu;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	74fb      	strb	r3, [r7, #19]

		if (prevMenu != menu) {
 8000e92:	7ffa      	ldrb	r2, [r7, #31]
 8000e94:	7cfb      	ldrb	r3, [r7, #19]
 8000e96:	429a      	cmp	r2, r3
 8000e98:	d003      	beq.n	8000ea2 <menu+0x3a>
			prevMenu = menu;
 8000e9a:	7cfb      	ldrb	r3, [r7, #19]
 8000e9c:	77fb      	strb	r3, [r7, #31]
			SSD1306_Clear();
 8000e9e:	f000 fea8 	bl	8001bf2 <SSD1306_Clear>
		}

		switch (menu) {
 8000ea2:	7cfb      	ldrb	r3, [r7, #19]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d003      	beq.n	8000eb0 <menu+0x48>
 8000ea8:	2b01      	cmp	r3, #1
 8000eaa:	f000 8202 	beq.w	80012b2 <menu+0x44a>
		case EQUALIZER_LOW:
		case FOLDER_SEARCH:
		case FILES_SEARCH:

		default:
			break;
 8000eae:	e209      	b.n	80012c4 <menu+0x45c>
					halfWidth + SCREEN_HEIGHT / 3 * cos(prev_point_angle - 10),
 8000eb0:	8a3b      	ldrh	r3, [r7, #16]
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	f7ff fbc8 	bl	8000648 <__aeabi_i2d>
 8000eb8:	4604      	mov	r4, r0
 8000eba:	460d      	mov	r5, r1
 8000ebc:	49da      	ldr	r1, [pc, #872]	@ (8001228 <menu+0x3c0>)
 8000ebe:	69b8      	ldr	r0, [r7, #24]
 8000ec0:	f7ff fd30 	bl	8000924 <__aeabi_fsub>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff fbd0 	bl	800066c <__aeabi_f2d>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	460b      	mov	r3, r1
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	f005 fdf6 	bl	8006ac4 <cos>
 8000ed8:	f04f 0200 	mov.w	r2, #0
 8000edc:	4bd3      	ldr	r3, [pc, #844]	@ (800122c <menu+0x3c4>)
 8000ede:	f7ff f937 	bl	8000150 <__aeabi_dmul>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	460b      	mov	r3, r1
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	4629      	mov	r1, r5
 8000eea:	f7ff fa61 	bl	80003b0 <__adddf3>
 8000eee:	4602      	mov	r2, r0
 8000ef0:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 8000ef2:	4610      	mov	r0, r2
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f7ff fc99 	bl	800082c <__aeabi_d2iz>
 8000efa:	4603      	mov	r3, r0
 8000efc:	b21e      	sxth	r6, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin(prev_point_angle - 10),
 8000efe:	89fb      	ldrh	r3, [r7, #14]
 8000f00:	4618      	mov	r0, r3
 8000f02:	f7ff fba1 	bl	8000648 <__aeabi_i2d>
 8000f06:	4604      	mov	r4, r0
 8000f08:	460d      	mov	r5, r1
 8000f0a:	49c7      	ldr	r1, [pc, #796]	@ (8001228 <menu+0x3c0>)
 8000f0c:	69b8      	ldr	r0, [r7, #24]
 8000f0e:	f7ff fd09 	bl	8000924 <__aeabi_fsub>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4618      	mov	r0, r3
 8000f16:	f7ff fba9 	bl	800066c <__aeabi_f2d>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	4610      	mov	r0, r2
 8000f20:	4619      	mov	r1, r3
 8000f22:	f005 fe15 	bl	8006b50 <sin>
 8000f26:	f04f 0200 	mov.w	r2, #0
 8000f2a:	4bc0      	ldr	r3, [pc, #768]	@ (800122c <menu+0x3c4>)
 8000f2c:	f7ff f910 	bl	8000150 <__aeabi_dmul>
 8000f30:	4602      	mov	r2, r0
 8000f32:	460b      	mov	r3, r1
 8000f34:	4620      	mov	r0, r4
 8000f36:	4629      	mov	r1, r5
 8000f38:	f7ff fa3a 	bl	80003b0 <__adddf3>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 8000f40:	4610      	mov	r0, r2
 8000f42:	4619      	mov	r1, r3
 8000f44:	f7ff fc72 	bl	800082c <__aeabi_d2iz>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	b219      	sxth	r1, r3
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	2206      	movs	r2, #6
 8000f50:	4630      	mov	r0, r6
 8000f52:	f000 fd73 	bl	8001a3c <SSD1306_DrawFilledCircle>
					halfWidth + SCREEN_HEIGHT / 3 * cos(point_angle - 10),
 8000f56:	8a3b      	ldrh	r3, [r7, #16]
 8000f58:	4618      	mov	r0, r3
 8000f5a:	f7ff fb75 	bl	8000648 <__aeabi_i2d>
 8000f5e:	4604      	mov	r4, r0
 8000f60:	460d      	mov	r5, r1
 8000f62:	49b1      	ldr	r1, [pc, #708]	@ (8001228 <menu+0x3c0>)
 8000f64:	6978      	ldr	r0, [r7, #20]
 8000f66:	f7ff fcdd 	bl	8000924 <__aeabi_fsub>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f7ff fb7d 	bl	800066c <__aeabi_f2d>
 8000f72:	4602      	mov	r2, r0
 8000f74:	460b      	mov	r3, r1
 8000f76:	4610      	mov	r0, r2
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f005 fda3 	bl	8006ac4 <cos>
 8000f7e:	f04f 0200 	mov.w	r2, #0
 8000f82:	4baa      	ldr	r3, [pc, #680]	@ (800122c <menu+0x3c4>)
 8000f84:	f7ff f8e4 	bl	8000150 <__aeabi_dmul>
 8000f88:	4602      	mov	r2, r0
 8000f8a:	460b      	mov	r3, r1
 8000f8c:	4620      	mov	r0, r4
 8000f8e:	4629      	mov	r1, r5
 8000f90:	f7ff fa0e 	bl	80003b0 <__adddf3>
 8000f94:	4602      	mov	r2, r0
 8000f96:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 8000f98:	4610      	mov	r0, r2
 8000f9a:	4619      	mov	r1, r3
 8000f9c:	f7ff fc46 	bl	800082c <__aeabi_d2iz>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	b21e      	sxth	r6, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin(point_angle - 10), 6,
 8000fa4:	89fb      	ldrh	r3, [r7, #14]
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f7ff fb4e 	bl	8000648 <__aeabi_i2d>
 8000fac:	4604      	mov	r4, r0
 8000fae:	460d      	mov	r5, r1
 8000fb0:	499d      	ldr	r1, [pc, #628]	@ (8001228 <menu+0x3c0>)
 8000fb2:	6978      	ldr	r0, [r7, #20]
 8000fb4:	f7ff fcb6 	bl	8000924 <__aeabi_fsub>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f7ff fb56 	bl	800066c <__aeabi_f2d>
 8000fc0:	4602      	mov	r2, r0
 8000fc2:	460b      	mov	r3, r1
 8000fc4:	4610      	mov	r0, r2
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	f005 fdc2 	bl	8006b50 <sin>
 8000fcc:	f04f 0200 	mov.w	r2, #0
 8000fd0:	4b96      	ldr	r3, [pc, #600]	@ (800122c <menu+0x3c4>)
 8000fd2:	f7ff f8bd 	bl	8000150 <__aeabi_dmul>
 8000fd6:	4602      	mov	r2, r0
 8000fd8:	460b      	mov	r3, r1
 8000fda:	4620      	mov	r0, r4
 8000fdc:	4629      	mov	r1, r5
 8000fde:	f7ff f9e7 	bl	80003b0 <__adddf3>
 8000fe2:	4602      	mov	r2, r0
 8000fe4:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 8000fe6:	4610      	mov	r0, r2
 8000fe8:	4619      	mov	r1, r3
 8000fea:	f7ff fc1f 	bl	800082c <__aeabi_d2iz>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	b219      	sxth	r1, r3
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	2206      	movs	r2, #6
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	f000 fd20 	bl	8001a3c <SSD1306_DrawFilledCircle>
					halfWidth + SCREEN_HEIGHT / 3 * cos(prev_point_angle - 5),
 8000ffc:	8a3b      	ldrh	r3, [r7, #16]
 8000ffe:	4618      	mov	r0, r3
 8001000:	f7ff fb22 	bl	8000648 <__aeabi_i2d>
 8001004:	4604      	mov	r4, r0
 8001006:	460d      	mov	r5, r1
 8001008:	4989      	ldr	r1, [pc, #548]	@ (8001230 <menu+0x3c8>)
 800100a:	69b8      	ldr	r0, [r7, #24]
 800100c:	f7ff fc8a 	bl	8000924 <__aeabi_fsub>
 8001010:	4603      	mov	r3, r0
 8001012:	4618      	mov	r0, r3
 8001014:	f7ff fb2a 	bl	800066c <__aeabi_f2d>
 8001018:	4602      	mov	r2, r0
 800101a:	460b      	mov	r3, r1
 800101c:	4610      	mov	r0, r2
 800101e:	4619      	mov	r1, r3
 8001020:	f005 fd50 	bl	8006ac4 <cos>
 8001024:	f04f 0200 	mov.w	r2, #0
 8001028:	4b80      	ldr	r3, [pc, #512]	@ (800122c <menu+0x3c4>)
 800102a:	f7ff f891 	bl	8000150 <__aeabi_dmul>
 800102e:	4602      	mov	r2, r0
 8001030:	460b      	mov	r3, r1
 8001032:	4620      	mov	r0, r4
 8001034:	4629      	mov	r1, r5
 8001036:	f7ff f9bb 	bl	80003b0 <__adddf3>
 800103a:	4602      	mov	r2, r0
 800103c:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800103e:	4610      	mov	r0, r2
 8001040:	4619      	mov	r1, r3
 8001042:	f7ff fbf3 	bl	800082c <__aeabi_d2iz>
 8001046:	4603      	mov	r3, r0
 8001048:	b21e      	sxth	r6, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin(prev_point_angle - 5),
 800104a:	89fb      	ldrh	r3, [r7, #14]
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff fafb 	bl	8000648 <__aeabi_i2d>
 8001052:	4604      	mov	r4, r0
 8001054:	460d      	mov	r5, r1
 8001056:	4976      	ldr	r1, [pc, #472]	@ (8001230 <menu+0x3c8>)
 8001058:	69b8      	ldr	r0, [r7, #24]
 800105a:	f7ff fc63 	bl	8000924 <__aeabi_fsub>
 800105e:	4603      	mov	r3, r0
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff fb03 	bl	800066c <__aeabi_f2d>
 8001066:	4602      	mov	r2, r0
 8001068:	460b      	mov	r3, r1
 800106a:	4610      	mov	r0, r2
 800106c:	4619      	mov	r1, r3
 800106e:	f005 fd6f 	bl	8006b50 <sin>
 8001072:	f04f 0200 	mov.w	r2, #0
 8001076:	4b6d      	ldr	r3, [pc, #436]	@ (800122c <menu+0x3c4>)
 8001078:	f7ff f86a 	bl	8000150 <__aeabi_dmul>
 800107c:	4602      	mov	r2, r0
 800107e:	460b      	mov	r3, r1
 8001080:	4620      	mov	r0, r4
 8001082:	4629      	mov	r1, r5
 8001084:	f7ff f994 	bl	80003b0 <__adddf3>
 8001088:	4602      	mov	r2, r0
 800108a:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800108c:	4610      	mov	r0, r2
 800108e:	4619      	mov	r1, r3
 8001090:	f7ff fbcc 	bl	800082c <__aeabi_d2iz>
 8001094:	4603      	mov	r3, r0
 8001096:	b219      	sxth	r1, r3
 8001098:	2300      	movs	r3, #0
 800109a:	2204      	movs	r2, #4
 800109c:	4630      	mov	r0, r6
 800109e:	f000 fccd 	bl	8001a3c <SSD1306_DrawFilledCircle>
					halfWidth + SCREEN_HEIGHT / 3 * cos(point_angle - 5),
 80010a2:	8a3b      	ldrh	r3, [r7, #16]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff facf 	bl	8000648 <__aeabi_i2d>
 80010aa:	4604      	mov	r4, r0
 80010ac:	460d      	mov	r5, r1
 80010ae:	4960      	ldr	r1, [pc, #384]	@ (8001230 <menu+0x3c8>)
 80010b0:	6978      	ldr	r0, [r7, #20]
 80010b2:	f7ff fc37 	bl	8000924 <__aeabi_fsub>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f7ff fad7 	bl	800066c <__aeabi_f2d>
 80010be:	4602      	mov	r2, r0
 80010c0:	460b      	mov	r3, r1
 80010c2:	4610      	mov	r0, r2
 80010c4:	4619      	mov	r1, r3
 80010c6:	f005 fcfd 	bl	8006ac4 <cos>
 80010ca:	f04f 0200 	mov.w	r2, #0
 80010ce:	4b57      	ldr	r3, [pc, #348]	@ (800122c <menu+0x3c4>)
 80010d0:	f7ff f83e 	bl	8000150 <__aeabi_dmul>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4620      	mov	r0, r4
 80010da:	4629      	mov	r1, r5
 80010dc:	f7ff f968 	bl	80003b0 <__adddf3>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fba0 	bl	800082c <__aeabi_d2iz>
 80010ec:	4603      	mov	r3, r0
 80010ee:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin(point_angle - 5), 4,
 80010f0:	494f      	ldr	r1, [pc, #316]	@ (8001230 <menu+0x3c8>)
 80010f2:	6978      	ldr	r0, [r7, #20]
 80010f4:	f7ff fc16 	bl	8000924 <__aeabi_fsub>
 80010f8:	4603      	mov	r3, r0
 80010fa:	4618      	mov	r0, r3
 80010fc:	f7ff fab6 	bl	800066c <__aeabi_f2d>
 8001100:	4602      	mov	r2, r0
 8001102:	460b      	mov	r3, r1
 8001104:	4610      	mov	r0, r2
 8001106:	4619      	mov	r1, r3
 8001108:	f005 fd22 	bl	8006b50 <sin>
 800110c:	f04f 0200 	mov.w	r2, #0
 8001110:	4b46      	ldr	r3, [pc, #280]	@ (800122c <menu+0x3c4>)
 8001112:	f7ff f81d 	bl	8000150 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4610      	mov	r0, r2
 800111c:	4619      	mov	r1, r3
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b44      	ldr	r3, [pc, #272]	@ (8001234 <menu+0x3cc>)
 8001124:	f7ff f944 	bl	80003b0 <__adddf3>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fb7c 	bl	800082c <__aeabi_d2iz>
 8001134:	4603      	mov	r3, r0
 8001136:	b219      	sxth	r1, r3
 8001138:	2301      	movs	r3, #1
 800113a:	2204      	movs	r2, #4
 800113c:	4620      	mov	r0, r4
 800113e:	f000 fc7d 	bl	8001a3c <SSD1306_DrawFilledCircle>
					halfWidth + SCREEN_HEIGHT / 3 * cos(prev_point_angle),
 8001142:	8a3b      	ldrh	r3, [r7, #16]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff fa7f 	bl	8000648 <__aeabi_i2d>
 800114a:	4604      	mov	r4, r0
 800114c:	460d      	mov	r5, r1
 800114e:	69b8      	ldr	r0, [r7, #24]
 8001150:	f7ff fa8c 	bl	800066c <__aeabi_f2d>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f005 fcb2 	bl	8006ac4 <cos>
 8001160:	f04f 0200 	mov.w	r2, #0
 8001164:	4b31      	ldr	r3, [pc, #196]	@ (800122c <menu+0x3c4>)
 8001166:	f7fe fff3 	bl	8000150 <__aeabi_dmul>
 800116a:	4602      	mov	r2, r0
 800116c:	460b      	mov	r3, r1
 800116e:	4620      	mov	r0, r4
 8001170:	4629      	mov	r1, r5
 8001172:	f7ff f91d 	bl	80003b0 <__adddf3>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800117a:	4610      	mov	r0, r2
 800117c:	4619      	mov	r1, r3
 800117e:	f7ff fb55 	bl	800082c <__aeabi_d2iz>
 8001182:	4603      	mov	r3, r0
 8001184:	b21e      	sxth	r6, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin(prev_point_angle), 2,
 8001186:	89fb      	ldrh	r3, [r7, #14]
 8001188:	4618      	mov	r0, r3
 800118a:	f7ff fa5d 	bl	8000648 <__aeabi_i2d>
 800118e:	4604      	mov	r4, r0
 8001190:	460d      	mov	r5, r1
 8001192:	69b8      	ldr	r0, [r7, #24]
 8001194:	f7ff fa6a 	bl	800066c <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	4610      	mov	r0, r2
 800119e:	4619      	mov	r1, r3
 80011a0:	f005 fcd6 	bl	8006b50 <sin>
 80011a4:	f04f 0200 	mov.w	r2, #0
 80011a8:	4b20      	ldr	r3, [pc, #128]	@ (800122c <menu+0x3c4>)
 80011aa:	f7fe ffd1 	bl	8000150 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	4620      	mov	r0, r4
 80011b4:	4629      	mov	r1, r5
 80011b6:	f7ff f8fb 	bl	80003b0 <__adddf3>
 80011ba:	4602      	mov	r2, r0
 80011bc:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 80011be:	4610      	mov	r0, r2
 80011c0:	4619      	mov	r1, r3
 80011c2:	f7ff fb33 	bl	800082c <__aeabi_d2iz>
 80011c6:	4603      	mov	r3, r0
 80011c8:	b219      	sxth	r1, r3
 80011ca:	2300      	movs	r3, #0
 80011cc:	2202      	movs	r2, #2
 80011ce:	4630      	mov	r0, r6
 80011d0:	f000 fc34 	bl	8001a3c <SSD1306_DrawFilledCircle>
					halfWidth + SCREEN_HEIGHT / 3 * cos(point_angle),
 80011d4:	8a3b      	ldrh	r3, [r7, #16]
 80011d6:	4618      	mov	r0, r3
 80011d8:	f7ff fa36 	bl	8000648 <__aeabi_i2d>
 80011dc:	4604      	mov	r4, r0
 80011de:	460d      	mov	r5, r1
 80011e0:	6978      	ldr	r0, [r7, #20]
 80011e2:	f7ff fa43 	bl	800066c <__aeabi_f2d>
 80011e6:	4602      	mov	r2, r0
 80011e8:	460b      	mov	r3, r1
 80011ea:	4610      	mov	r0, r2
 80011ec:	4619      	mov	r1, r3
 80011ee:	f005 fc69 	bl	8006ac4 <cos>
 80011f2:	f04f 0200 	mov.w	r2, #0
 80011f6:	4b0d      	ldr	r3, [pc, #52]	@ (800122c <menu+0x3c4>)
 80011f8:	f7fe ffaa 	bl	8000150 <__aeabi_dmul>
 80011fc:	4602      	mov	r2, r0
 80011fe:	460b      	mov	r3, r1
 8001200:	4620      	mov	r0, r4
 8001202:	4629      	mov	r1, r5
 8001204:	f7ff f8d4 	bl	80003b0 <__adddf3>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	f7ff fb0c 	bl	800082c <__aeabi_d2iz>
 8001214:	4603      	mov	r3, r0
 8001216:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin(point_angle), 2, SSD1306_COLOR_WHITE);
 8001218:	6978      	ldr	r0, [r7, #20]
 800121a:	f7ff fa27 	bl	800066c <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	e007      	b.n	8001238 <menu+0x3d0>
 8001228:	41200000 	.word	0x41200000
 800122c:	40350000 	.word	0x40350000
 8001230:	40a00000 	.word	0x40a00000
 8001234:	40400000 	.word	0x40400000
 8001238:	f005 fc8a 	bl	8006b50 <sin>
 800123c:	f04f 0200 	mov.w	r2, #0
 8001240:	4b27      	ldr	r3, [pc, #156]	@ (80012e0 <menu+0x478>)
 8001242:	f7fe ff85 	bl	8000150 <__aeabi_dmul>
 8001246:	4602      	mov	r2, r0
 8001248:	460b      	mov	r3, r1
 800124a:	4610      	mov	r0, r2
 800124c:	4619      	mov	r1, r3
 800124e:	f04f 0200 	mov.w	r2, #0
 8001252:	4b24      	ldr	r3, [pc, #144]	@ (80012e4 <menu+0x47c>)
 8001254:	f7ff f8ac 	bl	80003b0 <__adddf3>
 8001258:	4602      	mov	r2, r0
 800125a:	460b      	mov	r3, r1
			SSD1306_DrawFilledCircle(
 800125c:	4610      	mov	r0, r2
 800125e:	4619      	mov	r1, r3
 8001260:	f7ff fae4 	bl	800082c <__aeabi_d2iz>
 8001264:	4603      	mov	r3, r0
 8001266:	b219      	sxth	r1, r3
 8001268:	2301      	movs	r3, #1
 800126a:	2202      	movs	r2, #2
 800126c:	4620      	mov	r0, r4
 800126e:	f000 fbe5 	bl	8001a3c <SSD1306_DrawFilledCircle>
			if (point_angle >= 360) {
 8001272:	491d      	ldr	r1, [pc, #116]	@ (80012e8 <menu+0x480>)
 8001274:	6978      	ldr	r0, [r7, #20]
 8001276:	f7ff fcc1 	bl	8000bfc <__aeabi_fcmpge>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	d005      	beq.n	800128c <menu+0x424>
				prev_point_angle = point_angle;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	61bb      	str	r3, [r7, #24]
				point_angle = 0.0;
 8001284:	f04f 0300 	mov.w	r3, #0
 8001288:	617b      	str	r3, [r7, #20]
			break;
 800128a:	e01c      	b.n	80012c6 <menu+0x45e>
				prev_point_angle = point_angle;
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	61bb      	str	r3, [r7, #24]
				point_angle += 0.1;
 8001290:	6978      	ldr	r0, [r7, #20]
 8001292:	f7ff f9eb 	bl	800066c <__aeabi_f2d>
 8001296:	a310      	add	r3, pc, #64	@ (adr r3, 80012d8 <menu+0x470>)
 8001298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800129c:	f7ff f888 	bl	80003b0 <__adddf3>
 80012a0:	4602      	mov	r2, r0
 80012a2:	460b      	mov	r3, r1
 80012a4:	4610      	mov	r0, r2
 80012a6:	4619      	mov	r1, r3
 80012a8:	f7ff fae8 	bl	800087c <__aeabi_d2f>
 80012ac:	4603      	mov	r3, r0
 80012ae:	617b      	str	r3, [r7, #20]
			break;
 80012b0:	e009      	b.n	80012c6 <menu+0x45e>
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 80012b2:	2120      	movs	r1, #32
 80012b4:	200a      	movs	r0, #10
 80012b6:	f000 fa0d 	bl	80016d4 <SSD1306_GotoXY>
			SSD1306_Puts("Hello World", &Font_11x18, 1);
 80012ba:	2201      	movs	r2, #1
 80012bc:	490b      	ldr	r1, [pc, #44]	@ (80012ec <menu+0x484>)
 80012be:	480c      	ldr	r0, [pc, #48]	@ (80012f0 <menu+0x488>)
 80012c0:	f000 fa9c 	bl	80017fc <SSD1306_Puts>
			break;
 80012c4:	bf00      	nop
		}

		SSD1306_UpdateScreen();
 80012c6:	f000 f961 	bl	800158c <SSD1306_UpdateScreen>
		osDelay(50);
 80012ca:	2032      	movs	r0, #50	@ 0x32
 80012cc:	f002 fea6 	bl	800401c <osDelay>
		menu = ((DisplayParams*) argument)->menu;
 80012d0:	e5dc      	b.n	8000e8c <menu+0x24>
 80012d2:	bf00      	nop
 80012d4:	f3af 8000 	nop.w
 80012d8:	9999999a 	.word	0x9999999a
 80012dc:	3fb99999 	.word	0x3fb99999
 80012e0:	40350000 	.word	0x40350000
 80012e4:	40400000 	.word	0x40400000
 80012e8:	43b40000 	.word	0x43b40000
 80012ec:	20000000 	.word	0x20000000
 80012f0:	08007b40 	.word	0x08007b40

080012f4 <handleButtonPress>:
 * @brief Function implementing the buttonTask thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handleButtonPress */
void handleButtonPress(void *argument) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN handleButtonPress */
	/* Infinite loop */
	Bool isButtonPressed = FALSE;
 80012fc:	2300      	movs	r3, #0
 80012fe:	75fb      	strb	r3, [r7, #23]

	// Recupero los parámetros del botón
	ButtonParams btnParams = *((ButtonParams*) argument);
 8001300:	687a      	ldr	r2, [r7, #4]
 8001302:	f107 0308 	add.w	r3, r7, #8
 8001306:	ca07      	ldmia	r2, {r0, r1, r2}
 8001308:	e883 0007 	stmia.w	r3, {r0, r1, r2}
//	struct configParpadeo_t conf =
//	*((struct configParpadeo_t*)argument);

	for (;;) {

		if (btnParams.type == CANCEL) {
 800130c:	7a3b      	ldrb	r3, [r7, #8]
 800130e:	2b01      	cmp	r3, #1
 8001310:	d105      	bne.n	800131e <handleButtonPress+0x2a>
			HAL_GPIO_TogglePin(btnParams.port, btnParams.pin);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	8a3a      	ldrh	r2, [r7, #16]
 8001316:	4611      	mov	r1, r2
 8001318:	4618      	mov	r0, r3
 800131a:	f001 f914 	bl	8002546 <HAL_GPIO_TogglePin>
		}

		// Esta lógica evita tener muchos disparos de botón
		if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin) == GPIO_PIN_RESET
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	8a3a      	ldrh	r2, [r7, #16]
 8001322:	4611      	mov	r1, r2
 8001324:	4618      	mov	r0, r3
 8001326:	f001 f8df 	bl	80024e8 <HAL_GPIO_ReadPin>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d11e      	bne.n	800136e <handleButtonPress+0x7a>
				&& isButtonPressed == FALSE) {
 8001330:	7dfb      	ldrb	r3, [r7, #23]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d11b      	bne.n	800136e <handleButtonPress+0x7a>
			isButtonPressed = TRUE;
 8001336:	2301      	movs	r3, #1
 8001338:	75fb      	strb	r3, [r7, #23]

			// lógica del boton aceptar
			if (btnParams.type == ACCEPT) {
 800133a:	7a3b      	ldrb	r3, [r7, #8]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d107      	bne.n	8001350 <handleButtonPress+0x5c>
				switch (displayParams.menu) {
 8001340:	4b15      	ldr	r3, [pc, #84]	@ (8001398 <handleButtonPress+0xa4>)
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10b      	bne.n	8001360 <handleButtonPress+0x6c>
				case START:
					displayParams.menu = MENU;
 8001348:	4b13      	ldr	r3, [pc, #76]	@ (8001398 <handleButtonPress+0xa4>)
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
					break;
 800134e:	e00a      	b.n	8001366 <handleButtonPress+0x72>
				default:
					break;
				}
			} else {
				switch (displayParams.menu) {
 8001350:	4b11      	ldr	r3, [pc, #68]	@ (8001398 <handleButtonPress+0xa4>)
 8001352:	781b      	ldrb	r3, [r3, #0]
 8001354:	2b01      	cmp	r3, #1
 8001356:	d105      	bne.n	8001364 <handleButtonPress+0x70>
				case MENU:
					displayParams.menu = START;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <handleButtonPress+0xa4>)
 800135a:	2200      	movs	r2, #0
 800135c:	701a      	strb	r2, [r3, #0]
					break;
 800135e:	e002      	b.n	8001366 <handleButtonPress+0x72>
					break;
 8001360:	bf00      	nop
 8001362:	e000      	b.n	8001366 <handleButtonPress+0x72>
				default:
					break;
 8001364:	bf00      	nop
				}
			}

			osDelay(50);
 8001366:	2032      	movs	r0, #50	@ 0x32
 8001368:	f002 fe58 	bl	800401c <osDelay>
 800136c:	e010      	b.n	8001390 <handleButtonPress+0x9c>
		} else if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin)
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	8a3a      	ldrh	r2, [r7, #16]
 8001372:	4611      	mov	r1, r2
 8001374:	4618      	mov	r0, r3
 8001376:	f001 f8b7 	bl	80024e8 <HAL_GPIO_ReadPin>
 800137a:	4603      	mov	r3, r0
 800137c:	2b01      	cmp	r3, #1
 800137e:	d107      	bne.n	8001390 <handleButtonPress+0x9c>
				== GPIO_PIN_SET && isButtonPressed == TRUE) {
 8001380:	7dfb      	ldrb	r3, [r7, #23]
 8001382:	2b01      	cmp	r3, #1
 8001384:	d104      	bne.n	8001390 <handleButtonPress+0x9c>
			isButtonPressed = FALSE;
 8001386:	2300      	movs	r3, #0
 8001388:	75fb      	strb	r3, [r7, #23]
			osDelay(50);
 800138a:	2032      	movs	r0, #50	@ 0x32
 800138c:	f002 fe46 	bl	800401c <osDelay>
		}
		osDelay(1);
 8001390:	2001      	movs	r0, #1
 8001392:	f002 fe43 	bl	800401c <osDelay>
		if (btnParams.type == CANCEL) {
 8001396:	e7b9      	b.n	800130c <handleButtonPress+0x18>
 8001398:	200000e4 	.word	0x200000e4

0800139c <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM4) {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80013aa:	4293      	cmp	r3, r2
 80013ac:	d101      	bne.n	80013b2 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 80013ae:	f000 fe1b 	bl	8001fe8 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80013b2:	bf00      	nop
 80013b4:	3708      	adds	r7, #8
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bd80      	pop	{r7, pc}
 80013ba:	bf00      	nop
 80013bc:	40000800 	.word	0x40000800

080013c0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b082      	sub	sp, #8
 80013c4:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013c6:	b672      	cpsid	i
}
 80013c8:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013ca:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013ce:	480c      	ldr	r0, [pc, #48]	@ (8001400 <Error_Handler+0x40>)
 80013d0:	f001 f8b9 	bl	8002546 <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 5000; i++) {
 80013d4:	2300      	movs	r3, #0
 80013d6:	607b      	str	r3, [r7, #4]
 80013d8:	e00b      	b.n	80013f2 <Error_Handler+0x32>
			for (uint32_t j = 0; j < 100; j++) {
 80013da:	2300      	movs	r3, #0
 80013dc:	603b      	str	r3, [r7, #0]
 80013de:	e002      	b.n	80013e6 <Error_Handler+0x26>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	3301      	adds	r3, #1
 80013e4:	603b      	str	r3, [r7, #0]
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	2b63      	cmp	r3, #99	@ 0x63
 80013ea:	d9f9      	bls.n	80013e0 <Error_Handler+0x20>
		for (uint32_t i = 0; i < 5000; i++) {
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	3301      	adds	r3, #1
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	f241 3287 	movw	r2, #4999	@ 0x1387
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d9ee      	bls.n	80013da <Error_Handler+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80013fc:	e7e5      	b.n	80013ca <Error_Handler+0xa>
 80013fe:	bf00      	nop
 8001400:	40011000 	.word	0x40011000

08001404 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 800140a:	f000 fbfb 	bl	8001c04 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 800140e:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001412:	2201      	movs	r2, #1
 8001414:	2178      	movs	r1, #120	@ 0x78
 8001416:	485b      	ldr	r0, [pc, #364]	@ (8001584 <SSD1306_Init+0x180>)
 8001418:	f001 faf0 	bl	80029fc <HAL_I2C_IsDeviceReady>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8001422:	2300      	movs	r3, #0
 8001424:	e0a9      	b.n	800157a <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8001426:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 800142a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800142c:	e002      	b.n	8001434 <SSD1306_Init+0x30>
		p--;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	3b01      	subs	r3, #1
 8001432:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d1f9      	bne.n	800142e <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800143a:	22ae      	movs	r2, #174	@ 0xae
 800143c:	2100      	movs	r1, #0
 800143e:	2078      	movs	r0, #120	@ 0x78
 8001440:	f000 fc5a 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8001444:	2220      	movs	r2, #32
 8001446:	2100      	movs	r1, #0
 8001448:	2078      	movs	r0, #120	@ 0x78
 800144a:	f000 fc55 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 800144e:	2210      	movs	r2, #16
 8001450:	2100      	movs	r1, #0
 8001452:	2078      	movs	r0, #120	@ 0x78
 8001454:	f000 fc50 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8001458:	22b0      	movs	r2, #176	@ 0xb0
 800145a:	2100      	movs	r1, #0
 800145c:	2078      	movs	r0, #120	@ 0x78
 800145e:	f000 fc4b 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8001462:	22c8      	movs	r2, #200	@ 0xc8
 8001464:	2100      	movs	r1, #0
 8001466:	2078      	movs	r0, #120	@ 0x78
 8001468:	f000 fc46 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800146c:	2200      	movs	r2, #0
 800146e:	2100      	movs	r1, #0
 8001470:	2078      	movs	r0, #120	@ 0x78
 8001472:	f000 fc41 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8001476:	2210      	movs	r2, #16
 8001478:	2100      	movs	r1, #0
 800147a:	2078      	movs	r0, #120	@ 0x78
 800147c:	f000 fc3c 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001480:	2240      	movs	r2, #64	@ 0x40
 8001482:	2100      	movs	r1, #0
 8001484:	2078      	movs	r0, #120	@ 0x78
 8001486:	f000 fc37 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800148a:	2281      	movs	r2, #129	@ 0x81
 800148c:	2100      	movs	r1, #0
 800148e:	2078      	movs	r0, #120	@ 0x78
 8001490:	f000 fc32 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8001494:	22ff      	movs	r2, #255	@ 0xff
 8001496:	2100      	movs	r1, #0
 8001498:	2078      	movs	r0, #120	@ 0x78
 800149a:	f000 fc2d 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 800149e:	22a1      	movs	r2, #161	@ 0xa1
 80014a0:	2100      	movs	r1, #0
 80014a2:	2078      	movs	r0, #120	@ 0x78
 80014a4:	f000 fc28 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80014a8:	22a6      	movs	r2, #166	@ 0xa6
 80014aa:	2100      	movs	r1, #0
 80014ac:	2078      	movs	r0, #120	@ 0x78
 80014ae:	f000 fc23 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80014b2:	22a8      	movs	r2, #168	@ 0xa8
 80014b4:	2100      	movs	r1, #0
 80014b6:	2078      	movs	r0, #120	@ 0x78
 80014b8:	f000 fc1e 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 80014bc:	223f      	movs	r2, #63	@ 0x3f
 80014be:	2100      	movs	r1, #0
 80014c0:	2078      	movs	r0, #120	@ 0x78
 80014c2:	f000 fc19 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80014c6:	22a4      	movs	r2, #164	@ 0xa4
 80014c8:	2100      	movs	r1, #0
 80014ca:	2078      	movs	r0, #120	@ 0x78
 80014cc:	f000 fc14 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80014d0:	22d3      	movs	r2, #211	@ 0xd3
 80014d2:	2100      	movs	r1, #0
 80014d4:	2078      	movs	r0, #120	@ 0x78
 80014d6:	f000 fc0f 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80014da:	2200      	movs	r2, #0
 80014dc:	2100      	movs	r1, #0
 80014de:	2078      	movs	r0, #120	@ 0x78
 80014e0:	f000 fc0a 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80014e4:	22d5      	movs	r2, #213	@ 0xd5
 80014e6:	2100      	movs	r1, #0
 80014e8:	2078      	movs	r0, #120	@ 0x78
 80014ea:	f000 fc05 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80014ee:	22f0      	movs	r2, #240	@ 0xf0
 80014f0:	2100      	movs	r1, #0
 80014f2:	2078      	movs	r0, #120	@ 0x78
 80014f4:	f000 fc00 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80014f8:	22d9      	movs	r2, #217	@ 0xd9
 80014fa:	2100      	movs	r1, #0
 80014fc:	2078      	movs	r0, #120	@ 0x78
 80014fe:	f000 fbfb 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 8001502:	2222      	movs	r2, #34	@ 0x22
 8001504:	2100      	movs	r1, #0
 8001506:	2078      	movs	r0, #120	@ 0x78
 8001508:	f000 fbf6 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 800150c:	22da      	movs	r2, #218	@ 0xda
 800150e:	2100      	movs	r1, #0
 8001510:	2078      	movs	r0, #120	@ 0x78
 8001512:	f000 fbf1 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 8001516:	2212      	movs	r2, #18
 8001518:	2100      	movs	r1, #0
 800151a:	2078      	movs	r0, #120	@ 0x78
 800151c:	f000 fbec 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8001520:	22db      	movs	r2, #219	@ 0xdb
 8001522:	2100      	movs	r1, #0
 8001524:	2078      	movs	r0, #120	@ 0x78
 8001526:	f000 fbe7 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 800152a:	2220      	movs	r2, #32
 800152c:	2100      	movs	r1, #0
 800152e:	2078      	movs	r0, #120	@ 0x78
 8001530:	f000 fbe2 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8001534:	228d      	movs	r2, #141	@ 0x8d
 8001536:	2100      	movs	r1, #0
 8001538:	2078      	movs	r0, #120	@ 0x78
 800153a:	f000 fbdd 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 800153e:	2214      	movs	r2, #20
 8001540:	2100      	movs	r1, #0
 8001542:	2078      	movs	r0, #120	@ 0x78
 8001544:	f000 fbd8 	bl	8001cf8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8001548:	22af      	movs	r2, #175	@ 0xaf
 800154a:	2100      	movs	r1, #0
 800154c:	2078      	movs	r0, #120	@ 0x78
 800154e:	f000 fbd3 	bl	8001cf8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8001552:	222e      	movs	r2, #46	@ 0x2e
 8001554:	2100      	movs	r1, #0
 8001556:	2078      	movs	r0, #120	@ 0x78
 8001558:	f000 fbce 	bl	8001cf8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800155c:	2000      	movs	r0, #0
 800155e:	f000 f843 	bl	80015e8 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8001562:	f000 f813 	bl	800158c <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8001566:	4b08      	ldr	r3, [pc, #32]	@ (8001588 <SSD1306_Init+0x184>)
 8001568:	2200      	movs	r2, #0
 800156a:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800156c:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <SSD1306_Init+0x184>)
 800156e:	2200      	movs	r2, #0
 8001570:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8001572:	4b05      	ldr	r3, [pc, #20]	@ (8001588 <SSD1306_Init+0x184>)
 8001574:	2201      	movs	r2, #1
 8001576:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001578:	2301      	movs	r3, #1
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	20000084 	.word	0x20000084
 8001588:	200004e8 	.word	0x200004e8

0800158c <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8001592:	2300      	movs	r3, #0
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	e01d      	b.n	80015d4 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001598:	79fb      	ldrb	r3, [r7, #7]
 800159a:	3b50      	subs	r3, #80	@ 0x50
 800159c:	b2db      	uxtb	r3, r3
 800159e:	461a      	mov	r2, r3
 80015a0:	2100      	movs	r1, #0
 80015a2:	2078      	movs	r0, #120	@ 0x78
 80015a4:	f000 fba8 	bl	8001cf8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80015a8:	2200      	movs	r2, #0
 80015aa:	2100      	movs	r1, #0
 80015ac:	2078      	movs	r0, #120	@ 0x78
 80015ae:	f000 fba3 	bl	8001cf8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80015b2:	2210      	movs	r2, #16
 80015b4:	2100      	movs	r1, #0
 80015b6:	2078      	movs	r0, #120	@ 0x78
 80015b8:	f000 fb9e 	bl	8001cf8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80015bc:	79fb      	ldrb	r3, [r7, #7]
 80015be:	01db      	lsls	r3, r3, #7
 80015c0:	4a08      	ldr	r2, [pc, #32]	@ (80015e4 <SSD1306_UpdateScreen+0x58>)
 80015c2:	441a      	add	r2, r3
 80015c4:	2380      	movs	r3, #128	@ 0x80
 80015c6:	2140      	movs	r1, #64	@ 0x40
 80015c8:	2078      	movs	r0, #120	@ 0x78
 80015ca:	f000 fb2f 	bl	8001c2c <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	3301      	adds	r3, #1
 80015d2:	71fb      	strb	r3, [r7, #7]
 80015d4:	79fb      	ldrb	r3, [r7, #7]
 80015d6:	2b07      	cmp	r3, #7
 80015d8:	d9de      	bls.n	8001598 <SSD1306_UpdateScreen+0xc>
	}
}
 80015da:	bf00      	nop
 80015dc:	bf00      	nop
 80015de:	3708      	adds	r7, #8
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}
 80015e4:	200000e8 	.word	0x200000e8

080015e8 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	4603      	mov	r3, r0
 80015f0:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80015f2:	79fb      	ldrb	r3, [r7, #7]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <SSD1306_Fill+0x14>
 80015f8:	2300      	movs	r3, #0
 80015fa:	e000      	b.n	80015fe <SSD1306_Fill+0x16>
 80015fc:	23ff      	movs	r3, #255	@ 0xff
 80015fe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001602:	4619      	mov	r1, r3
 8001604:	4803      	ldr	r0, [pc, #12]	@ (8001614 <SSD1306_Fill+0x2c>)
 8001606:	f005 f96f 	bl	80068e8 <memset>
}
 800160a:	bf00      	nop
 800160c:	3708      	adds	r7, #8
 800160e:	46bd      	mov	sp, r7
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200000e8 	.word	0x200000e8

08001618 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
 8001622:	460b      	mov	r3, r1
 8001624:	80bb      	strh	r3, [r7, #4]
 8001626:	4613      	mov	r3, r2
 8001628:	70fb      	strb	r3, [r7, #3]
	if (
 800162a:	88fb      	ldrh	r3, [r7, #6]
 800162c:	2b7f      	cmp	r3, #127	@ 0x7f
 800162e:	d848      	bhi.n	80016c2 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	2b3f      	cmp	r3, #63	@ 0x3f
 8001634:	d845      	bhi.n	80016c2 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8001636:	4b25      	ldr	r3, [pc, #148]	@ (80016cc <SSD1306_DrawPixel+0xb4>)
 8001638:	791b      	ldrb	r3, [r3, #4]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d006      	beq.n	800164c <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800163e:	78fb      	ldrb	r3, [r7, #3]
 8001640:	2b00      	cmp	r3, #0
 8001642:	bf0c      	ite	eq
 8001644:	2301      	moveq	r3, #1
 8001646:	2300      	movne	r3, #0
 8001648:	b2db      	uxtb	r3, r3
 800164a:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	2b01      	cmp	r3, #1
 8001650:	d11a      	bne.n	8001688 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8001652:	88fa      	ldrh	r2, [r7, #6]
 8001654:	88bb      	ldrh	r3, [r7, #4]
 8001656:	08db      	lsrs	r3, r3, #3
 8001658:	b298      	uxth	r0, r3
 800165a:	4603      	mov	r3, r0
 800165c:	01db      	lsls	r3, r3, #7
 800165e:	4413      	add	r3, r2
 8001660:	4a1b      	ldr	r2, [pc, #108]	@ (80016d0 <SSD1306_DrawPixel+0xb8>)
 8001662:	5cd3      	ldrb	r3, [r2, r3]
 8001664:	b25a      	sxtb	r2, r3
 8001666:	88bb      	ldrh	r3, [r7, #4]
 8001668:	f003 0307 	and.w	r3, r3, #7
 800166c:	2101      	movs	r1, #1
 800166e:	fa01 f303 	lsl.w	r3, r1, r3
 8001672:	b25b      	sxtb	r3, r3
 8001674:	4313      	orrs	r3, r2
 8001676:	b259      	sxtb	r1, r3
 8001678:	88fa      	ldrh	r2, [r7, #6]
 800167a:	4603      	mov	r3, r0
 800167c:	01db      	lsls	r3, r3, #7
 800167e:	4413      	add	r3, r2
 8001680:	b2c9      	uxtb	r1, r1
 8001682:	4a13      	ldr	r2, [pc, #76]	@ (80016d0 <SSD1306_DrawPixel+0xb8>)
 8001684:	54d1      	strb	r1, [r2, r3]
 8001686:	e01d      	b.n	80016c4 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001688:	88fa      	ldrh	r2, [r7, #6]
 800168a:	88bb      	ldrh	r3, [r7, #4]
 800168c:	08db      	lsrs	r3, r3, #3
 800168e:	b298      	uxth	r0, r3
 8001690:	4603      	mov	r3, r0
 8001692:	01db      	lsls	r3, r3, #7
 8001694:	4413      	add	r3, r2
 8001696:	4a0e      	ldr	r2, [pc, #56]	@ (80016d0 <SSD1306_DrawPixel+0xb8>)
 8001698:	5cd3      	ldrb	r3, [r2, r3]
 800169a:	b25a      	sxtb	r2, r3
 800169c:	88bb      	ldrh	r3, [r7, #4]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	2101      	movs	r1, #1
 80016a4:	fa01 f303 	lsl.w	r3, r1, r3
 80016a8:	b25b      	sxtb	r3, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	b25b      	sxtb	r3, r3
 80016ae:	4013      	ands	r3, r2
 80016b0:	b259      	sxtb	r1, r3
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	4603      	mov	r3, r0
 80016b6:	01db      	lsls	r3, r3, #7
 80016b8:	4413      	add	r3, r2
 80016ba:	b2c9      	uxtb	r1, r1
 80016bc:	4a04      	ldr	r2, [pc, #16]	@ (80016d0 <SSD1306_DrawPixel+0xb8>)
 80016be:	54d1      	strb	r1, [r2, r3]
 80016c0:	e000      	b.n	80016c4 <SSD1306_DrawPixel+0xac>
		return;
 80016c2:	bf00      	nop
	}
}
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr
 80016cc:	200004e8 	.word	0x200004e8
 80016d0:	200000e8 	.word	0x200000e8

080016d4 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80016d4:	b480      	push	{r7}
 80016d6:	b083      	sub	sp, #12
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	460a      	mov	r2, r1
 80016de:	80fb      	strh	r3, [r7, #6]
 80016e0:	4613      	mov	r3, r2
 80016e2:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80016e4:	4a05      	ldr	r2, [pc, #20]	@ (80016fc <SSD1306_GotoXY+0x28>)
 80016e6:	88fb      	ldrh	r3, [r7, #6]
 80016e8:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80016ea:	4a04      	ldr	r2, [pc, #16]	@ (80016fc <SSD1306_GotoXY+0x28>)
 80016ec:	88bb      	ldrh	r3, [r7, #4]
 80016ee:	8053      	strh	r3, [r2, #2]
}
 80016f0:	bf00      	nop
 80016f2:	370c      	adds	r7, #12
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bc80      	pop	{r7}
 80016f8:	4770      	bx	lr
 80016fa:	bf00      	nop
 80016fc:	200004e8 	.word	0x200004e8

08001700 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001700:	b580      	push	{r7, lr}
 8001702:	b086      	sub	sp, #24
 8001704:	af00      	add	r7, sp, #0
 8001706:	4603      	mov	r3, r0
 8001708:	6039      	str	r1, [r7, #0]
 800170a:	71fb      	strb	r3, [r7, #7]
 800170c:	4613      	mov	r3, r2
 800170e:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001710:	4b39      	ldr	r3, [pc, #228]	@ (80017f8 <SSD1306_Putc+0xf8>)
 8001712:	881b      	ldrh	r3, [r3, #0]
 8001714:	461a      	mov	r2, r3
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	781b      	ldrb	r3, [r3, #0]
 800171a:	4413      	add	r3, r2
	if (
 800171c:	2b7f      	cmp	r3, #127	@ 0x7f
 800171e:	dc07      	bgt.n	8001730 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 8001720:	4b35      	ldr	r3, [pc, #212]	@ (80017f8 <SSD1306_Putc+0xf8>)
 8001722:	885b      	ldrh	r3, [r3, #2]
 8001724:	461a      	mov	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	785b      	ldrb	r3, [r3, #1]
 800172a:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800172c:	2b3f      	cmp	r3, #63	@ 0x3f
 800172e:	dd01      	ble.n	8001734 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8001730:	2300      	movs	r3, #0
 8001732:	e05d      	b.n	80017f0 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8001734:	2300      	movs	r3, #0
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	e04b      	b.n	80017d2 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	79fb      	ldrb	r3, [r7, #7]
 8001740:	3b20      	subs	r3, #32
 8001742:	6839      	ldr	r1, [r7, #0]
 8001744:	7849      	ldrb	r1, [r1, #1]
 8001746:	fb01 f303 	mul.w	r3, r1, r3
 800174a:	4619      	mov	r1, r3
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	440b      	add	r3, r1
 8001750:	005b      	lsls	r3, r3, #1
 8001752:	4413      	add	r3, r2
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8001758:	2300      	movs	r3, #0
 800175a:	613b      	str	r3, [r7, #16]
 800175c:	e030      	b.n	80017c0 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800175e:	68fa      	ldr	r2, [r7, #12]
 8001760:	693b      	ldr	r3, [r7, #16]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d010      	beq.n	8001790 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 800176e:	4b22      	ldr	r3, [pc, #136]	@ (80017f8 <SSD1306_Putc+0xf8>)
 8001770:	881a      	ldrh	r2, [r3, #0]
 8001772:	693b      	ldr	r3, [r7, #16]
 8001774:	b29b      	uxth	r3, r3
 8001776:	4413      	add	r3, r2
 8001778:	b298      	uxth	r0, r3
 800177a:	4b1f      	ldr	r3, [pc, #124]	@ (80017f8 <SSD1306_Putc+0xf8>)
 800177c:	885a      	ldrh	r2, [r3, #2]
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	b29b      	uxth	r3, r3
 8001782:	4413      	add	r3, r2
 8001784:	b29b      	uxth	r3, r3
 8001786:	79ba      	ldrb	r2, [r7, #6]
 8001788:	4619      	mov	r1, r3
 800178a:	f7ff ff45 	bl	8001618 <SSD1306_DrawPixel>
 800178e:	e014      	b.n	80017ba <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001790:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <SSD1306_Putc+0xf8>)
 8001792:	881a      	ldrh	r2, [r3, #0]
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	b29b      	uxth	r3, r3
 8001798:	4413      	add	r3, r2
 800179a:	b298      	uxth	r0, r3
 800179c:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <SSD1306_Putc+0xf8>)
 800179e:	885a      	ldrh	r2, [r3, #2]
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	b299      	uxth	r1, r3
 80017a8:	79bb      	ldrb	r3, [r7, #6]
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	bf0c      	ite	eq
 80017ae:	2301      	moveq	r3, #1
 80017b0:	2300      	movne	r3, #0
 80017b2:	b2db      	uxtb	r3, r3
 80017b4:	461a      	mov	r2, r3
 80017b6:	f7ff ff2f 	bl	8001618 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	3301      	adds	r3, #1
 80017be:	613b      	str	r3, [r7, #16]
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	693b      	ldr	r3, [r7, #16]
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d3c8      	bcc.n	800175e <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	3301      	adds	r3, #1
 80017d0:	617b      	str	r3, [r7, #20]
 80017d2:	683b      	ldr	r3, [r7, #0]
 80017d4:	785b      	ldrb	r3, [r3, #1]
 80017d6:	461a      	mov	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4293      	cmp	r3, r2
 80017dc:	d3ad      	bcc.n	800173a <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80017de:	4b06      	ldr	r3, [pc, #24]	@ (80017f8 <SSD1306_Putc+0xf8>)
 80017e0:	881b      	ldrh	r3, [r3, #0]
 80017e2:	683a      	ldr	r2, [r7, #0]
 80017e4:	7812      	ldrb	r2, [r2, #0]
 80017e6:	4413      	add	r3, r2
 80017e8:	b29a      	uxth	r2, r3
 80017ea:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <SSD1306_Putc+0xf8>)
 80017ec:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80017ee:	79fb      	ldrb	r3, [r7, #7]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3718      	adds	r7, #24
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	200004e8 	.word	0x200004e8

080017fc <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	4613      	mov	r3, r2
 8001808:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 800180a:	e012      	b.n	8001832 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	79fa      	ldrb	r2, [r7, #7]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff73 	bl	8001700 <SSD1306_Putc>
 800181a:	4603      	mov	r3, r0
 800181c:	461a      	mov	r2, r3
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	429a      	cmp	r2, r3
 8001824:	d002      	beq.n	800182c <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	e008      	b.n	800183e <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	3301      	adds	r3, #1
 8001830:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d1e8      	bne.n	800180c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	781b      	ldrb	r3, [r3, #0]
}
 800183e:	4618      	mov	r0, r3
 8001840:	3710      	adds	r7, #16
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}

08001846 <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 8001846:	b590      	push	{r4, r7, lr}
 8001848:	b087      	sub	sp, #28
 800184a:	af00      	add	r7, sp, #0
 800184c:	4604      	mov	r4, r0
 800184e:	4608      	mov	r0, r1
 8001850:	4611      	mov	r1, r2
 8001852:	461a      	mov	r2, r3
 8001854:	4623      	mov	r3, r4
 8001856:	80fb      	strh	r3, [r7, #6]
 8001858:	4603      	mov	r3, r0
 800185a:	80bb      	strh	r3, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
 8001860:	4613      	mov	r3, r2
 8001862:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	2b7f      	cmp	r3, #127	@ 0x7f
 8001868:	d901      	bls.n	800186e <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 800186a:	237f      	movs	r3, #127	@ 0x7f
 800186c:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 800186e:	887b      	ldrh	r3, [r7, #2]
 8001870:	2b7f      	cmp	r3, #127	@ 0x7f
 8001872:	d901      	bls.n	8001878 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 8001874:	237f      	movs	r3, #127	@ 0x7f
 8001876:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	2b3f      	cmp	r3, #63	@ 0x3f
 800187c:	d901      	bls.n	8001882 <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 800187e:	233f      	movs	r3, #63	@ 0x3f
 8001880:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 8001882:	883b      	ldrh	r3, [r7, #0]
 8001884:	2b3f      	cmp	r3, #63	@ 0x3f
 8001886:	d901      	bls.n	800188c <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001888:	233f      	movs	r3, #63	@ 0x3f
 800188a:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 800188c:	88fa      	ldrh	r2, [r7, #6]
 800188e:	887b      	ldrh	r3, [r7, #2]
 8001890:	429a      	cmp	r2, r3
 8001892:	d205      	bcs.n	80018a0 <SSD1306_DrawLine+0x5a>
 8001894:	887a      	ldrh	r2, [r7, #2]
 8001896:	88fb      	ldrh	r3, [r7, #6]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	b29b      	uxth	r3, r3
 800189c:	b21b      	sxth	r3, r3
 800189e:	e004      	b.n	80018aa <SSD1306_DrawLine+0x64>
 80018a0:	88fa      	ldrh	r2, [r7, #6]
 80018a2:	887b      	ldrh	r3, [r7, #2]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 80018ac:	88ba      	ldrh	r2, [r7, #4]
 80018ae:	883b      	ldrh	r3, [r7, #0]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d205      	bcs.n	80018c0 <SSD1306_DrawLine+0x7a>
 80018b4:	883a      	ldrh	r2, [r7, #0]
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	b29b      	uxth	r3, r3
 80018bc:	b21b      	sxth	r3, r3
 80018be:	e004      	b.n	80018ca <SSD1306_DrawLine+0x84>
 80018c0:	88ba      	ldrh	r2, [r7, #4]
 80018c2:	883b      	ldrh	r3, [r7, #0]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	b29b      	uxth	r3, r3
 80018c8:	b21b      	sxth	r3, r3
 80018ca:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 80018cc:	88fa      	ldrh	r2, [r7, #6]
 80018ce:	887b      	ldrh	r3, [r7, #2]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d201      	bcs.n	80018d8 <SSD1306_DrawLine+0x92>
 80018d4:	2301      	movs	r3, #1
 80018d6:	e001      	b.n	80018dc <SSD1306_DrawLine+0x96>
 80018d8:	f04f 33ff 	mov.w	r3, #4294967295
 80018dc:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 80018de:	88ba      	ldrh	r2, [r7, #4]
 80018e0:	883b      	ldrh	r3, [r7, #0]
 80018e2:	429a      	cmp	r2, r3
 80018e4:	d201      	bcs.n	80018ea <SSD1306_DrawLine+0xa4>
 80018e6:	2301      	movs	r3, #1
 80018e8:	e001      	b.n	80018ee <SSD1306_DrawLine+0xa8>
 80018ea:	f04f 33ff 	mov.w	r3, #4294967295
 80018ee:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 80018f0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80018f4:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80018f8:	429a      	cmp	r2, r3
 80018fa:	dd06      	ble.n	800190a <SSD1306_DrawLine+0xc4>
 80018fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001900:	0fda      	lsrs	r2, r3, #31
 8001902:	4413      	add	r3, r2
 8001904:	105b      	asrs	r3, r3, #1
 8001906:	b21b      	sxth	r3, r3
 8001908:	e006      	b.n	8001918 <SSD1306_DrawLine+0xd2>
 800190a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800190e:	0fda      	lsrs	r2, r3, #31
 8001910:	4413      	add	r3, r2
 8001912:	105b      	asrs	r3, r3, #1
 8001914:	425b      	negs	r3, r3
 8001916:	b21b      	sxth	r3, r3
 8001918:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 800191a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d129      	bne.n	8001976 <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 8001922:	883a      	ldrh	r2, [r7, #0]
 8001924:	88bb      	ldrh	r3, [r7, #4]
 8001926:	429a      	cmp	r2, r3
 8001928:	d205      	bcs.n	8001936 <SSD1306_DrawLine+0xf0>
			tmp = y1;
 800192a:	883b      	ldrh	r3, [r7, #0]
 800192c:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800192e:	88bb      	ldrh	r3, [r7, #4]
 8001930:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001932:	893b      	ldrh	r3, [r7, #8]
 8001934:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001936:	887a      	ldrh	r2, [r7, #2]
 8001938:	88fb      	ldrh	r3, [r7, #6]
 800193a:	429a      	cmp	r2, r3
 800193c:	d205      	bcs.n	800194a <SSD1306_DrawLine+0x104>
			tmp = x1;
 800193e:	887b      	ldrh	r3, [r7, #2]
 8001940:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 8001946:	893b      	ldrh	r3, [r7, #8]
 8001948:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 800194a:	88bb      	ldrh	r3, [r7, #4]
 800194c:	82bb      	strh	r3, [r7, #20]
 800194e:	e00c      	b.n	800196a <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 8001950:	8ab9      	ldrh	r1, [r7, #20]
 8001952:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001956:	88fb      	ldrh	r3, [r7, #6]
 8001958:	4618      	mov	r0, r3
 800195a:	f7ff fe5d 	bl	8001618 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 800195e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001962:	b29b      	uxth	r3, r3
 8001964:	3301      	adds	r3, #1
 8001966:	b29b      	uxth	r3, r3
 8001968:	82bb      	strh	r3, [r7, #20]
 800196a:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800196e:	883b      	ldrh	r3, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	dded      	ble.n	8001950 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 8001974:	e05f      	b.n	8001a36 <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 8001976:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d129      	bne.n	80019d2 <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 800197e:	883a      	ldrh	r2, [r7, #0]
 8001980:	88bb      	ldrh	r3, [r7, #4]
 8001982:	429a      	cmp	r2, r3
 8001984:	d205      	bcs.n	8001992 <SSD1306_DrawLine+0x14c>
			tmp = y1;
 8001986:	883b      	ldrh	r3, [r7, #0]
 8001988:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 800198a:	88bb      	ldrh	r3, [r7, #4]
 800198c:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 800198e:	893b      	ldrh	r3, [r7, #8]
 8001990:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 8001992:	887a      	ldrh	r2, [r7, #2]
 8001994:	88fb      	ldrh	r3, [r7, #6]
 8001996:	429a      	cmp	r2, r3
 8001998:	d205      	bcs.n	80019a6 <SSD1306_DrawLine+0x160>
			tmp = x1;
 800199a:	887b      	ldrh	r3, [r7, #2]
 800199c:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 800199e:	88fb      	ldrh	r3, [r7, #6]
 80019a0:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80019a2:	893b      	ldrh	r3, [r7, #8]
 80019a4:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 80019a6:	88fb      	ldrh	r3, [r7, #6]
 80019a8:	82bb      	strh	r3, [r7, #20]
 80019aa:	e00c      	b.n	80019c6 <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 80019ac:	8abb      	ldrh	r3, [r7, #20]
 80019ae:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019b2:	88b9      	ldrh	r1, [r7, #4]
 80019b4:	4618      	mov	r0, r3
 80019b6:	f7ff fe2f 	bl	8001618 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 80019ba:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80019be:	b29b      	uxth	r3, r3
 80019c0:	3301      	adds	r3, #1
 80019c2:	b29b      	uxth	r3, r3
 80019c4:	82bb      	strh	r3, [r7, #20]
 80019c6:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80019ca:	887b      	ldrh	r3, [r7, #2]
 80019cc:	429a      	cmp	r2, r3
 80019ce:	dded      	ble.n	80019ac <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 80019d0:	e031      	b.n	8001a36 <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 80019d2:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80019d6:	88b9      	ldrh	r1, [r7, #4]
 80019d8:	88fb      	ldrh	r3, [r7, #6]
 80019da:	4618      	mov	r0, r3
 80019dc:	f7ff fe1c 	bl	8001618 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 80019e0:	88fa      	ldrh	r2, [r7, #6]
 80019e2:	887b      	ldrh	r3, [r7, #2]
 80019e4:	429a      	cmp	r2, r3
 80019e6:	d103      	bne.n	80019f0 <SSD1306_DrawLine+0x1aa>
 80019e8:	88ba      	ldrh	r2, [r7, #4]
 80019ea:	883b      	ldrh	r3, [r7, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d021      	beq.n	8001a34 <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 80019f0:	8afb      	ldrh	r3, [r7, #22]
 80019f2:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 80019f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80019f8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80019fc:	425b      	negs	r3, r3
 80019fe:	429a      	cmp	r2, r3
 8001a00:	dd08      	ble.n	8001a14 <SSD1306_DrawLine+0x1ce>
			err -= dy;
 8001a02:	8afa      	ldrh	r2, [r7, #22]
 8001a04:	8a3b      	ldrh	r3, [r7, #16]
 8001a06:	1ad3      	subs	r3, r2, r3
 8001a08:	b29b      	uxth	r3, r3
 8001a0a:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001a0c:	89fa      	ldrh	r2, [r7, #14]
 8001a0e:	88fb      	ldrh	r3, [r7, #6]
 8001a10:	4413      	add	r3, r2
 8001a12:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 8001a14:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001a18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	dad8      	bge.n	80019d2 <SSD1306_DrawLine+0x18c>
			err += dx;
 8001a20:	8afa      	ldrh	r2, [r7, #22]
 8001a22:	8a7b      	ldrh	r3, [r7, #18]
 8001a24:	4413      	add	r3, r2
 8001a26:	b29b      	uxth	r3, r3
 8001a28:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 8001a2a:	89ba      	ldrh	r2, [r7, #12]
 8001a2c:	88bb      	ldrh	r3, [r7, #4]
 8001a2e:	4413      	add	r3, r2
 8001a30:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 8001a32:	e7ce      	b.n	80019d2 <SSD1306_DrawLine+0x18c>
			break;
 8001a34:	bf00      	nop
		} 
	}
}
 8001a36:	371c      	adds	r7, #28
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd90      	pop	{r4, r7, pc}

08001a3c <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af02      	add	r7, sp, #8
 8001a42:	4604      	mov	r4, r0
 8001a44:	4608      	mov	r0, r1
 8001a46:	4611      	mov	r1, r2
 8001a48:	461a      	mov	r2, r3
 8001a4a:	4623      	mov	r3, r4
 8001a4c:	80fb      	strh	r3, [r7, #6]
 8001a4e:	4603      	mov	r3, r0
 8001a50:	80bb      	strh	r3, [r7, #4]
 8001a52:	460b      	mov	r3, r1
 8001a54:	807b      	strh	r3, [r7, #2]
 8001a56:	4613      	mov	r3, r2
 8001a58:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 8001a5a:	887b      	ldrh	r3, [r7, #2]
 8001a5c:	f1c3 0301 	rsb	r3, r3, #1
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 8001a64:	2301      	movs	r3, #1
 8001a66:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 8001a68:	887b      	ldrh	r3, [r7, #2]
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	03d2      	lsls	r2, r2, #15
 8001a6e:	1ad3      	subs	r3, r2, r3
 8001a70:	005b      	lsls	r3, r3, #1
 8001a72:	b29b      	uxth	r3, r3
 8001a74:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 8001a76:	2300      	movs	r3, #0
 8001a78:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001a7a:	887b      	ldrh	r3, [r7, #2]
 8001a7c:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001a7e:	88f8      	ldrh	r0, [r7, #6]
 8001a80:	88ba      	ldrh	r2, [r7, #4]
 8001a82:	887b      	ldrh	r3, [r7, #2]
 8001a84:	4413      	add	r3, r2
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	787a      	ldrb	r2, [r7, #1]
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff fdc4 	bl	8001618 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001a90:	88f8      	ldrh	r0, [r7, #6]
 8001a92:	88ba      	ldrh	r2, [r7, #4]
 8001a94:	887b      	ldrh	r3, [r7, #2]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	b29b      	uxth	r3, r3
 8001a9a:	787a      	ldrb	r2, [r7, #1]
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	f7ff fdbb 	bl	8001618 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 8001aa2:	88fa      	ldrh	r2, [r7, #6]
 8001aa4:	887b      	ldrh	r3, [r7, #2]
 8001aa6:	4413      	add	r3, r2
 8001aa8:	b29b      	uxth	r3, r3
 8001aaa:	88b9      	ldrh	r1, [r7, #4]
 8001aac:	787a      	ldrb	r2, [r7, #1]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fdb2 	bl	8001618 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 8001ab4:	88fa      	ldrh	r2, [r7, #6]
 8001ab6:	887b      	ldrh	r3, [r7, #2]
 8001ab8:	1ad3      	subs	r3, r2, r3
 8001aba:	b29b      	uxth	r3, r3
 8001abc:	88b9      	ldrh	r1, [r7, #4]
 8001abe:	787a      	ldrb	r2, [r7, #1]
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	f7ff fda9 	bl	8001618 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 8001ac6:	88fa      	ldrh	r2, [r7, #6]
 8001ac8:	887b      	ldrh	r3, [r7, #2]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	b298      	uxth	r0, r3
 8001ace:	88b9      	ldrh	r1, [r7, #4]
 8001ad0:	88fa      	ldrh	r2, [r7, #6]
 8001ad2:	887b      	ldrh	r3, [r7, #2]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b29a      	uxth	r2, r3
 8001ad8:	88bc      	ldrh	r4, [r7, #4]
 8001ada:	787b      	ldrb	r3, [r7, #1]
 8001adc:	9300      	str	r3, [sp, #0]
 8001ade:	4623      	mov	r3, r4
 8001ae0:	f7ff feb1 	bl	8001846 <SSD1306_DrawLine>

    while (x < y) {
 8001ae4:	e079      	b.n	8001bda <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 8001ae6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db0e      	blt.n	8001b0c <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001aee:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001af2:	b29b      	uxth	r3, r3
 8001af4:	3b01      	subs	r3, #1
 8001af6:	b29b      	uxth	r3, r3
 8001af8:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001afa:	8a7b      	ldrh	r3, [r7, #18]
 8001afc:	3302      	adds	r3, #2
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 8001b02:	8afa      	ldrh	r2, [r7, #22]
 8001b04:	8a7b      	ldrh	r3, [r7, #18]
 8001b06:	4413      	add	r3, r2
 8001b08:	b29b      	uxth	r3, r3
 8001b0a:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001b0c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001b10:	b29b      	uxth	r3, r3
 8001b12:	3301      	adds	r3, #1
 8001b14:	b29b      	uxth	r3, r3
 8001b16:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8001b18:	8abb      	ldrh	r3, [r7, #20]
 8001b1a:	3302      	adds	r3, #2
 8001b1c:	b29b      	uxth	r3, r3
 8001b1e:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8001b20:	8afa      	ldrh	r2, [r7, #22]
 8001b22:	8abb      	ldrh	r3, [r7, #20]
 8001b24:	4413      	add	r3, r2
 8001b26:	b29b      	uxth	r3, r3
 8001b28:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 8001b2a:	88fa      	ldrh	r2, [r7, #6]
 8001b2c:	8a3b      	ldrh	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	b298      	uxth	r0, r3
 8001b32:	88ba      	ldrh	r2, [r7, #4]
 8001b34:	89fb      	ldrh	r3, [r7, #14]
 8001b36:	4413      	add	r3, r2
 8001b38:	b299      	uxth	r1, r3
 8001b3a:	88fa      	ldrh	r2, [r7, #6]
 8001b3c:	8a3b      	ldrh	r3, [r7, #16]
 8001b3e:	4413      	add	r3, r2
 8001b40:	b29c      	uxth	r4, r3
 8001b42:	88ba      	ldrh	r2, [r7, #4]
 8001b44:	89fb      	ldrh	r3, [r7, #14]
 8001b46:	4413      	add	r3, r2
 8001b48:	b29a      	uxth	r2, r3
 8001b4a:	787b      	ldrb	r3, [r7, #1]
 8001b4c:	9300      	str	r3, [sp, #0]
 8001b4e:	4613      	mov	r3, r2
 8001b50:	4622      	mov	r2, r4
 8001b52:	f7ff fe78 	bl	8001846 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 8001b56:	88fa      	ldrh	r2, [r7, #6]
 8001b58:	8a3b      	ldrh	r3, [r7, #16]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	88ba      	ldrh	r2, [r7, #4]
 8001b60:	89fb      	ldrh	r3, [r7, #14]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	b299      	uxth	r1, r3
 8001b66:	88fa      	ldrh	r2, [r7, #6]
 8001b68:	8a3b      	ldrh	r3, [r7, #16]
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	b29c      	uxth	r4, r3
 8001b6e:	88ba      	ldrh	r2, [r7, #4]
 8001b70:	89fb      	ldrh	r3, [r7, #14]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	787b      	ldrb	r3, [r7, #1]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	4613      	mov	r3, r2
 8001b7c:	4622      	mov	r2, r4
 8001b7e:	f7ff fe62 	bl	8001846 <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 8001b82:	88fa      	ldrh	r2, [r7, #6]
 8001b84:	89fb      	ldrh	r3, [r7, #14]
 8001b86:	4413      	add	r3, r2
 8001b88:	b298      	uxth	r0, r3
 8001b8a:	88ba      	ldrh	r2, [r7, #4]
 8001b8c:	8a3b      	ldrh	r3, [r7, #16]
 8001b8e:	4413      	add	r3, r2
 8001b90:	b299      	uxth	r1, r3
 8001b92:	88fa      	ldrh	r2, [r7, #6]
 8001b94:	89fb      	ldrh	r3, [r7, #14]
 8001b96:	1ad3      	subs	r3, r2, r3
 8001b98:	b29c      	uxth	r4, r3
 8001b9a:	88ba      	ldrh	r2, [r7, #4]
 8001b9c:	8a3b      	ldrh	r3, [r7, #16]
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b29a      	uxth	r2, r3
 8001ba2:	787b      	ldrb	r3, [r7, #1]
 8001ba4:	9300      	str	r3, [sp, #0]
 8001ba6:	4613      	mov	r3, r2
 8001ba8:	4622      	mov	r2, r4
 8001baa:	f7ff fe4c 	bl	8001846 <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001bae:	88fa      	ldrh	r2, [r7, #6]
 8001bb0:	89fb      	ldrh	r3, [r7, #14]
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	88ba      	ldrh	r2, [r7, #4]
 8001bb8:	8a3b      	ldrh	r3, [r7, #16]
 8001bba:	1ad3      	subs	r3, r2, r3
 8001bbc:	b299      	uxth	r1, r3
 8001bbe:	88fa      	ldrh	r2, [r7, #6]
 8001bc0:	89fb      	ldrh	r3, [r7, #14]
 8001bc2:	1ad3      	subs	r3, r2, r3
 8001bc4:	b29c      	uxth	r4, r3
 8001bc6:	88ba      	ldrh	r2, [r7, #4]
 8001bc8:	8a3b      	ldrh	r3, [r7, #16]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	787b      	ldrb	r3, [r7, #1]
 8001bd0:	9300      	str	r3, [sp, #0]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	4622      	mov	r2, r4
 8001bd6:	f7ff fe36 	bl	8001846 <SSD1306_DrawLine>
    while (x < y) {
 8001bda:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001bde:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001be2:	429a      	cmp	r2, r3
 8001be4:	f6ff af7f 	blt.w	8001ae6 <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	371c      	adds	r7, #28
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd90      	pop	{r4, r7, pc}

08001bf2 <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8001bf6:	2000      	movs	r0, #0
 8001bf8:	f7ff fcf6 	bl	80015e8 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001bfc:	f7ff fcc6 	bl	800158c <SSD1306_UpdateScreen>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001c0a:	4b07      	ldr	r3, [pc, #28]	@ (8001c28 <ssd1306_I2C_Init+0x24>)
 8001c0c:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c0e:	e002      	b.n	8001c16 <ssd1306_I2C_Init+0x12>
		p--;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d1f9      	bne.n	8001c10 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr
 8001c28:	0003d090 	.word	0x0003d090

08001c2c <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8001c2c:	b590      	push	{r4, r7, lr}
 8001c2e:	b0c7      	sub	sp, #284	@ 0x11c
 8001c30:	af02      	add	r7, sp, #8
 8001c32:	4604      	mov	r4, r0
 8001c34:	4608      	mov	r0, r1
 8001c36:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 8001c3a:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 8001c3e:	600a      	str	r2, [r1, #0]
 8001c40:	4619      	mov	r1, r3
 8001c42:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c46:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001c4a:	4622      	mov	r2, r4
 8001c4c:	701a      	strb	r2, [r3, #0]
 8001c4e:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c52:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 8001c56:	4602      	mov	r2, r0
 8001c58:	701a      	strb	r2, [r3, #0]
 8001c5a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c5e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001c62:	460a      	mov	r2, r1
 8001c64:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8001c66:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001c6a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001c6e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c72:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 8001c76:	7812      	ldrb	r2, [r2, #0]
 8001c78:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001c80:	e015      	b.n	8001cae <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 8001c82:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c86:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c8a:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	441a      	add	r2, r3
 8001c92:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001c96:	3301      	adds	r3, #1
 8001c98:	7811      	ldrb	r1, [r2, #0]
 8001c9a:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001c9e:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 8001ca2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 8001ca4:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001ca8:	3301      	adds	r3, #1
 8001caa:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001cae:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001cb2:	b29b      	uxth	r3, r3
 8001cb4:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001cb8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001cbc:	8812      	ldrh	r2, [r2, #0]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	d8df      	bhi.n	8001c82 <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 8001cc2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cc6:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	b299      	uxth	r1, r3
 8001cce:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8001cd2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001cd6:	881b      	ldrh	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	b29b      	uxth	r3, r3
 8001cdc:	f107 020c 	add.w	r2, r7, #12
 8001ce0:	200a      	movs	r0, #10
 8001ce2:	9000      	str	r0, [sp, #0]
 8001ce4:	4803      	ldr	r0, [pc, #12]	@ (8001cf4 <ssd1306_I2C_WriteMulti+0xc8>)
 8001ce6:	f000 fd8b 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8001cea:	bf00      	nop
 8001cec:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001cf0:	46bd      	mov	sp, r7
 8001cf2:	bd90      	pop	{r4, r7, pc}
 8001cf4:	20000084 	.word	0x20000084

08001cf8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
 8001cfe:	4603      	mov	r3, r0
 8001d00:	71fb      	strb	r3, [r7, #7]
 8001d02:	460b      	mov	r3, r1
 8001d04:	71bb      	strb	r3, [r7, #6]
 8001d06:	4613      	mov	r3, r2
 8001d08:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001d0a:	79bb      	ldrb	r3, [r7, #6]
 8001d0c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001d0e:	797b      	ldrb	r3, [r7, #5]
 8001d10:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8001d12:	79fb      	ldrb	r3, [r7, #7]
 8001d14:	b299      	uxth	r1, r3
 8001d16:	f107 020c 	add.w	r2, r7, #12
 8001d1a:	230a      	movs	r3, #10
 8001d1c:	9300      	str	r3, [sp, #0]
 8001d1e:	2302      	movs	r3, #2
 8001d20:	4803      	ldr	r0, [pc, #12]	@ (8001d30 <ssd1306_I2C_Write+0x38>)
 8001d22:	f000 fd6d 	bl	8002800 <HAL_I2C_Master_Transmit>
}
 8001d26:	bf00      	nop
 8001d28:	3710      	adds	r7, #16
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bd80      	pop	{r7, pc}
 8001d2e:	bf00      	nop
 8001d30:	20000084 	.word	0x20000084

08001d34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b084      	sub	sp, #16
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001d3a:	4b18      	ldr	r3, [pc, #96]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d3c:	699b      	ldr	r3, [r3, #24]
 8001d3e:	4a17      	ldr	r2, [pc, #92]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	6193      	str	r3, [r2, #24]
 8001d46:	4b15      	ldr	r3, [pc, #84]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	f003 0301 	and.w	r3, r3, #1
 8001d4e:	60bb      	str	r3, [r7, #8]
 8001d50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d52:	4b12      	ldr	r3, [pc, #72]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d54:	69db      	ldr	r3, [r3, #28]
 8001d56:	4a11      	ldr	r2, [pc, #68]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d5c:	61d3      	str	r3, [r2, #28]
 8001d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <HAL_MspInit+0x68>)
 8001d60:	69db      	ldr	r3, [r3, #28]
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d66:	607b      	str	r3, [r7, #4]
 8001d68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	210f      	movs	r1, #15
 8001d6e:	f06f 0001 	mvn.w	r0, #1
 8001d72:	f000 fa0a 	bl	800218a <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d76:	4b0a      	ldr	r3, [pc, #40]	@ (8001da0 <HAL_MspInit+0x6c>)
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001d82:	60fb      	str	r3, [r7, #12]
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001d8a:	60fb      	str	r3, [r7, #12]
 8001d8c:	4a04      	ldr	r2, [pc, #16]	@ (8001da0 <HAL_MspInit+0x6c>)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d92:	bf00      	nop
 8001d94:	3710      	adds	r7, #16
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	40021000 	.word	0x40021000
 8001da0:	40010000 	.word	0x40010000

08001da4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dac:	f107 0310 	add.w	r3, r7, #16
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
 8001db4:	605a      	str	r2, [r3, #4]
 8001db6:	609a      	str	r2, [r3, #8]
 8001db8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a15      	ldr	r2, [pc, #84]	@ (8001e14 <HAL_I2C_MspInit+0x70>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d123      	bne.n	8001e0c <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b14      	ldr	r3, [pc, #80]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a13      	ldr	r2, [pc, #76]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b11      	ldr	r3, [pc, #68]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60fb      	str	r3, [r7, #12]
 8001dda:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001ddc:	23c0      	movs	r3, #192	@ 0xc0
 8001dde:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001de0:	2312      	movs	r3, #18
 8001de2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de4:	2303      	movs	r3, #3
 8001de6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001de8:	f107 0310 	add.w	r3, r7, #16
 8001dec:	4619      	mov	r1, r3
 8001dee:	480b      	ldr	r0, [pc, #44]	@ (8001e1c <HAL_I2C_MspInit+0x78>)
 8001df0:	f000 f9f6 	bl	80021e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001df4:	4b08      	ldr	r3, [pc, #32]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001df6:	69db      	ldr	r3, [r3, #28]
 8001df8:	4a07      	ldr	r2, [pc, #28]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001dfa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001dfe:	61d3      	str	r3, [r2, #28]
 8001e00:	4b05      	ldr	r3, [pc, #20]	@ (8001e18 <HAL_I2C_MspInit+0x74>)
 8001e02:	69db      	ldr	r3, [r3, #28]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e08:	60bb      	str	r3, [r7, #8]
 8001e0a:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001e0c:	bf00      	nop
 8001e0e:	3720      	adds	r7, #32
 8001e10:	46bd      	mov	sp, r7
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40005400 	.word	0x40005400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	40010c00 	.word	0x40010c00

08001e20 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08e      	sub	sp, #56	@ 0x38
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001e36:	4b34      	ldr	r3, [pc, #208]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e38:	69db      	ldr	r3, [r3, #28]
 8001e3a:	4a33      	ldr	r2, [pc, #204]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e3c:	f043 0304 	orr.w	r3, r3, #4
 8001e40:	61d3      	str	r3, [r2, #28]
 8001e42:	4b31      	ldr	r3, [pc, #196]	@ (8001f08 <HAL_InitTick+0xe8>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e4e:	f107 0210 	add.w	r2, r7, #16
 8001e52:	f107 0314 	add.w	r3, r7, #20
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f001 fd35 	bl	80038c8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001e5e:	6a3b      	ldr	r3, [r7, #32]
 8001e60:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001e62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d103      	bne.n	8001e70 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e68:	f001 fd1a 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	6378      	str	r0, [r7, #52]	@ 0x34
 8001e6e:	e004      	b.n	8001e7a <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001e70:	f001 fd16 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 8001e74:	4603      	mov	r3, r0
 8001e76:	005b      	lsls	r3, r3, #1
 8001e78:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001e7c:	4a23      	ldr	r2, [pc, #140]	@ (8001f0c <HAL_InitTick+0xec>)
 8001e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8001e82:	0c9b      	lsrs	r3, r3, #18
 8001e84:	3b01      	subs	r3, #1
 8001e86:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001e88:	4b21      	ldr	r3, [pc, #132]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e8a:	4a22      	ldr	r2, [pc, #136]	@ (8001f14 <HAL_InitTick+0xf4>)
 8001e8c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001e8e:	4b20      	ldr	r3, [pc, #128]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e90:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001e94:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001e96:	4a1e      	ldr	r2, [pc, #120]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e9a:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ea8:	4b19      	ldr	r3, [pc, #100]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001eae:	4818      	ldr	r0, [pc, #96]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001eb0:	f001 fd58 	bl	8003964 <HAL_TIM_Base_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001eba:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d11b      	bne.n	8001efa <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001ec2:	4813      	ldr	r0, [pc, #76]	@ (8001f10 <HAL_InitTick+0xf0>)
 8001ec4:	f001 fda6 	bl	8003a14 <HAL_TIM_Base_Start_IT>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001ece:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d111      	bne.n	8001efa <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ed6:	201e      	movs	r0, #30
 8001ed8:	f000 f973 	bl	80021c2 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	2b0f      	cmp	r3, #15
 8001ee0:	d808      	bhi.n	8001ef4 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	6879      	ldr	r1, [r7, #4]
 8001ee6:	201e      	movs	r0, #30
 8001ee8:	f000 f94f 	bl	800218a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001eec:	4a0a      	ldr	r2, [pc, #40]	@ (8001f18 <HAL_InitTick+0xf8>)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e002      	b.n	8001efa <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001efa:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3738      	adds	r7, #56	@ 0x38
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}
 8001f06:	bf00      	nop
 8001f08:	40021000 	.word	0x40021000
 8001f0c:	431bde83 	.word	0x431bde83
 8001f10:	200004f0 	.word	0x200004f0
 8001f14:	40000800 	.word	0x40000800
 8001f18:	2000000c 	.word	0x2000000c

08001f1c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f20:	bf00      	nop
 8001f22:	e7fd      	b.n	8001f20 <NMI_Handler+0x4>

08001f24 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f24:	b480      	push	{r7}
 8001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f28:	bf00      	nop
 8001f2a:	e7fd      	b.n	8001f28 <HardFault_Handler+0x4>

08001f2c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f30:	bf00      	nop
 8001f32:	e7fd      	b.n	8001f30 <MemManage_Handler+0x4>

08001f34 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f38:	bf00      	nop
 8001f3a:	e7fd      	b.n	8001f38 <BusFault_Handler+0x4>

08001f3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f40:	bf00      	nop
 8001f42:	e7fd      	b.n	8001f40 <UsageFault_Handler+0x4>

08001f44 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f44:	b480      	push	{r7}
 8001f46:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f48:	bf00      	nop
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bc80      	pop	{r7}
 8001f4e:	4770      	bx	lr

08001f50 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001f54:	4802      	ldr	r0, [pc, #8]	@ (8001f60 <TIM4_IRQHandler+0x10>)
 8001f56:	f001 fdaf 	bl	8003ab8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	200004f0 	.word	0x200004f0

08001f64 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f64:	b480      	push	{r7}
 8001f66:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001f68:	bf00      	nop
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bc80      	pop	{r7}
 8001f6e:	4770      	bx	lr

08001f70 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001f70:	f7ff fff8 	bl	8001f64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f74:	480b      	ldr	r0, [pc, #44]	@ (8001fa4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001f76:	490c      	ldr	r1, [pc, #48]	@ (8001fa8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001f78:	4a0c      	ldr	r2, [pc, #48]	@ (8001fac <LoopFillZerobss+0x16>)
  movs r3, #0
 8001f7a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f7c:	e002      	b.n	8001f84 <LoopCopyDataInit>

08001f7e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f7e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f80:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f82:	3304      	adds	r3, #4

08001f84 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f84:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f86:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f88:	d3f9      	bcc.n	8001f7e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f8a:	4a09      	ldr	r2, [pc, #36]	@ (8001fb0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001f8c:	4c09      	ldr	r4, [pc, #36]	@ (8001fb4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f8e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f90:	e001      	b.n	8001f96 <LoopFillZerobss>

08001f92 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f92:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f94:	3204      	adds	r2, #4

08001f96 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f96:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f98:	d3fb      	bcc.n	8001f92 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001f9a:	f004 fd0b 	bl	80069b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f9e:	f7fe fe41 	bl	8000c24 <main>
  bx lr
 8001fa2:	4770      	bx	lr
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001fac:	08008b50 	.word	0x08008b50
  ldr r2, =_sbss
 8001fb0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001fb4:	20002064 	.word	0x20002064

08001fb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC1_2_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fc0:	4b08      	ldr	r3, [pc, #32]	@ (8001fe4 <HAL_Init+0x28>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a07      	ldr	r2, [pc, #28]	@ (8001fe4 <HAL_Init+0x28>)
 8001fc6:	f043 0310 	orr.w	r3, r3, #16
 8001fca:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fcc:	2003      	movs	r0, #3
 8001fce:	f000 f8d1 	bl	8002174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fd2:	200f      	movs	r0, #15
 8001fd4:	f7ff ff24 	bl	8001e20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001fd8:	f7ff feac 	bl	8001d34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40022000 	.word	0x40022000

08001fe8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001fec:	4b05      	ldr	r3, [pc, #20]	@ (8002004 <HAL_IncTick+0x1c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_IncTick+0x20>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	4a03      	ldr	r2, [pc, #12]	@ (8002008 <HAL_IncTick+0x20>)
 8001ffa:	6013      	str	r3, [r2, #0]
}
 8001ffc:	bf00      	nop
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bc80      	pop	{r7}
 8002002:	4770      	bx	lr
 8002004:	20000010 	.word	0x20000010
 8002008:	20000538 	.word	0x20000538

0800200c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800200c:	b480      	push	{r7}
 800200e:	af00      	add	r7, sp, #0
  return uwTick;
 8002010:	4b02      	ldr	r3, [pc, #8]	@ (800201c <HAL_GetTick+0x10>)
 8002012:	681b      	ldr	r3, [r3, #0]
}
 8002014:	4618      	mov	r0, r3
 8002016:	46bd      	mov	sp, r7
 8002018:	bc80      	pop	{r7}
 800201a:	4770      	bx	lr
 800201c:	20000538 	.word	0x20000538

08002020 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002020:	b480      	push	{r7}
 8002022:	b085      	sub	sp, #20
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	f003 0307 	and.w	r3, r3, #7
 800202e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002030:	4b0c      	ldr	r3, [pc, #48]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002032:	68db      	ldr	r3, [r3, #12]
 8002034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002036:	68ba      	ldr	r2, [r7, #8]
 8002038:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800203c:	4013      	ands	r3, r2
 800203e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002044:	68bb      	ldr	r3, [r7, #8]
 8002046:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002048:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800204c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002050:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002052:	4a04      	ldr	r2, [pc, #16]	@ (8002064 <__NVIC_SetPriorityGrouping+0x44>)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	60d3      	str	r3, [r2, #12]
}
 8002058:	bf00      	nop
 800205a:	3714      	adds	r7, #20
 800205c:	46bd      	mov	sp, r7
 800205e:	bc80      	pop	{r7}
 8002060:	4770      	bx	lr
 8002062:	bf00      	nop
 8002064:	e000ed00 	.word	0xe000ed00

08002068 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800206c:	4b04      	ldr	r3, [pc, #16]	@ (8002080 <__NVIC_GetPriorityGrouping+0x18>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	0a1b      	lsrs	r3, r3, #8
 8002072:	f003 0307 	and.w	r3, r3, #7
}
 8002076:	4618      	mov	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	bc80      	pop	{r7}
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	e000ed00 	.word	0xe000ed00

08002084 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002084:	b480      	push	{r7}
 8002086:	b083      	sub	sp, #12
 8002088:	af00      	add	r7, sp, #0
 800208a:	4603      	mov	r3, r0
 800208c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800208e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002092:	2b00      	cmp	r3, #0
 8002094:	db0b      	blt.n	80020ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002096:	79fb      	ldrb	r3, [r7, #7]
 8002098:	f003 021f 	and.w	r2, r3, #31
 800209c:	4906      	ldr	r1, [pc, #24]	@ (80020b8 <__NVIC_EnableIRQ+0x34>)
 800209e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a2:	095b      	lsrs	r3, r3, #5
 80020a4:	2001      	movs	r0, #1
 80020a6:	fa00 f202 	lsl.w	r2, r0, r2
 80020aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80020ae:	bf00      	nop
 80020b0:	370c      	adds	r7, #12
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bc80      	pop	{r7}
 80020b6:	4770      	bx	lr
 80020b8:	e000e100 	.word	0xe000e100

080020bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	4603      	mov	r3, r0
 80020c4:	6039      	str	r1, [r7, #0]
 80020c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	db0a      	blt.n	80020e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	490c      	ldr	r1, [pc, #48]	@ (8002108 <__NVIC_SetPriority+0x4c>)
 80020d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020da:	0112      	lsls	r2, r2, #4
 80020dc:	b2d2      	uxtb	r2, r2
 80020de:	440b      	add	r3, r1
 80020e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020e4:	e00a      	b.n	80020fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	b2da      	uxtb	r2, r3
 80020ea:	4908      	ldr	r1, [pc, #32]	@ (800210c <__NVIC_SetPriority+0x50>)
 80020ec:	79fb      	ldrb	r3, [r7, #7]
 80020ee:	f003 030f 	and.w	r3, r3, #15
 80020f2:	3b04      	subs	r3, #4
 80020f4:	0112      	lsls	r2, r2, #4
 80020f6:	b2d2      	uxtb	r2, r2
 80020f8:	440b      	add	r3, r1
 80020fa:	761a      	strb	r2, [r3, #24]
}
 80020fc:	bf00      	nop
 80020fe:	370c      	adds	r7, #12
 8002100:	46bd      	mov	sp, r7
 8002102:	bc80      	pop	{r7}
 8002104:	4770      	bx	lr
 8002106:	bf00      	nop
 8002108:	e000e100 	.word	0xe000e100
 800210c:	e000ed00 	.word	0xe000ed00

08002110 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002110:	b480      	push	{r7}
 8002112:	b089      	sub	sp, #36	@ 0x24
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	f1c3 0307 	rsb	r3, r3, #7
 800212a:	2b04      	cmp	r3, #4
 800212c:	bf28      	it	cs
 800212e:	2304      	movcs	r3, #4
 8002130:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002132:	69fb      	ldr	r3, [r7, #28]
 8002134:	3304      	adds	r3, #4
 8002136:	2b06      	cmp	r3, #6
 8002138:	d902      	bls.n	8002140 <NVIC_EncodePriority+0x30>
 800213a:	69fb      	ldr	r3, [r7, #28]
 800213c:	3b03      	subs	r3, #3
 800213e:	e000      	b.n	8002142 <NVIC_EncodePriority+0x32>
 8002140:	2300      	movs	r3, #0
 8002142:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	69bb      	ldr	r3, [r7, #24]
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	401a      	ands	r2, r3
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002158:	f04f 31ff 	mov.w	r1, #4294967295
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	fa01 f303 	lsl.w	r3, r1, r3
 8002162:	43d9      	mvns	r1, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002168:	4313      	orrs	r3, r2
         );
}
 800216a:	4618      	mov	r0, r3
 800216c:	3724      	adds	r7, #36	@ 0x24
 800216e:	46bd      	mov	sp, r7
 8002170:	bc80      	pop	{r7}
 8002172:	4770      	bx	lr

08002174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b082      	sub	sp, #8
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f7ff ff4f 	bl	8002020 <__NVIC_SetPriorityGrouping>
}
 8002182:	bf00      	nop
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800218a:	b580      	push	{r7, lr}
 800218c:	b086      	sub	sp, #24
 800218e:	af00      	add	r7, sp, #0
 8002190:	4603      	mov	r3, r0
 8002192:	60b9      	str	r1, [r7, #8]
 8002194:	607a      	str	r2, [r7, #4]
 8002196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002198:	2300      	movs	r3, #0
 800219a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800219c:	f7ff ff64 	bl	8002068 <__NVIC_GetPriorityGrouping>
 80021a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	68b9      	ldr	r1, [r7, #8]
 80021a6:	6978      	ldr	r0, [r7, #20]
 80021a8:	f7ff ffb2 	bl	8002110 <NVIC_EncodePriority>
 80021ac:	4602      	mov	r2, r0
 80021ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021b2:	4611      	mov	r1, r2
 80021b4:	4618      	mov	r0, r3
 80021b6:	f7ff ff81 	bl	80020bc <__NVIC_SetPriority>
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b082      	sub	sp, #8
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d0:	4618      	mov	r0, r3
 80021d2:	f7ff ff57 	bl	8002084 <__NVIC_EnableIRQ>
}
 80021d6:	bf00      	nop
 80021d8:	3708      	adds	r7, #8
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}
	...

080021e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b08b      	sub	sp, #44	@ 0x2c
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80021ea:	2300      	movs	r3, #0
 80021ec:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021f2:	e169      	b.n	80024c8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80021f4:	2201      	movs	r2, #1
 80021f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f8:	fa02 f303 	lsl.w	r3, r2, r3
 80021fc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	69fa      	ldr	r2, [r7, #28]
 8002204:	4013      	ands	r3, r2
 8002206:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	69fb      	ldr	r3, [r7, #28]
 800220c:	429a      	cmp	r2, r3
 800220e:	f040 8158 	bne.w	80024c2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	4a9a      	ldr	r2, [pc, #616]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d05e      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800221c:	4a98      	ldr	r2, [pc, #608]	@ (8002480 <HAL_GPIO_Init+0x2a0>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d875      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002222:	4a98      	ldr	r2, [pc, #608]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 8002224:	4293      	cmp	r3, r2
 8002226:	d058      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002228:	4a96      	ldr	r2, [pc, #600]	@ (8002484 <HAL_GPIO_Init+0x2a4>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d86f      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800222e:	4a96      	ldr	r2, [pc, #600]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002230:	4293      	cmp	r3, r2
 8002232:	d052      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002234:	4a94      	ldr	r2, [pc, #592]	@ (8002488 <HAL_GPIO_Init+0x2a8>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d869      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800223a:	4a94      	ldr	r2, [pc, #592]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 800223c:	4293      	cmp	r3, r2
 800223e:	d04c      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 8002240:	4a92      	ldr	r2, [pc, #584]	@ (800248c <HAL_GPIO_Init+0x2ac>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d863      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002246:	4a92      	ldr	r2, [pc, #584]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d046      	beq.n	80022da <HAL_GPIO_Init+0xfa>
 800224c:	4a90      	ldr	r2, [pc, #576]	@ (8002490 <HAL_GPIO_Init+0x2b0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d85d      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 8002252:	2b12      	cmp	r3, #18
 8002254:	d82a      	bhi.n	80022ac <HAL_GPIO_Init+0xcc>
 8002256:	2b12      	cmp	r3, #18
 8002258:	d859      	bhi.n	800230e <HAL_GPIO_Init+0x12e>
 800225a:	a201      	add	r2, pc, #4	@ (adr r2, 8002260 <HAL_GPIO_Init+0x80>)
 800225c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002260:	080022db 	.word	0x080022db
 8002264:	080022b5 	.word	0x080022b5
 8002268:	080022c7 	.word	0x080022c7
 800226c:	08002309 	.word	0x08002309
 8002270:	0800230f 	.word	0x0800230f
 8002274:	0800230f 	.word	0x0800230f
 8002278:	0800230f 	.word	0x0800230f
 800227c:	0800230f 	.word	0x0800230f
 8002280:	0800230f 	.word	0x0800230f
 8002284:	0800230f 	.word	0x0800230f
 8002288:	0800230f 	.word	0x0800230f
 800228c:	0800230f 	.word	0x0800230f
 8002290:	0800230f 	.word	0x0800230f
 8002294:	0800230f 	.word	0x0800230f
 8002298:	0800230f 	.word	0x0800230f
 800229c:	0800230f 	.word	0x0800230f
 80022a0:	0800230f 	.word	0x0800230f
 80022a4:	080022bd 	.word	0x080022bd
 80022a8:	080022d1 	.word	0x080022d1
 80022ac:	4a79      	ldr	r2, [pc, #484]	@ (8002494 <HAL_GPIO_Init+0x2b4>)
 80022ae:	4293      	cmp	r3, r2
 80022b0:	d013      	beq.n	80022da <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80022b2:	e02c      	b.n	800230e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	623b      	str	r3, [r7, #32]
          break;
 80022ba:	e029      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68db      	ldr	r3, [r3, #12]
 80022c0:	3304      	adds	r3, #4
 80022c2:	623b      	str	r3, [r7, #32]
          break;
 80022c4:	e024      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	68db      	ldr	r3, [r3, #12]
 80022ca:	3308      	adds	r3, #8
 80022cc:	623b      	str	r3, [r7, #32]
          break;
 80022ce:	e01f      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	330c      	adds	r3, #12
 80022d6:	623b      	str	r3, [r7, #32]
          break;
 80022d8:	e01a      	b.n	8002310 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d102      	bne.n	80022e8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80022e2:	2304      	movs	r3, #4
 80022e4:	623b      	str	r3, [r7, #32]
          break;
 80022e6:	e013      	b.n	8002310 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	689b      	ldr	r3, [r3, #8]
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d105      	bne.n	80022fc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022f0:	2308      	movs	r3, #8
 80022f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	69fa      	ldr	r2, [r7, #28]
 80022f8:	611a      	str	r2, [r3, #16]
          break;
 80022fa:	e009      	b.n	8002310 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80022fc:	2308      	movs	r3, #8
 80022fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69fa      	ldr	r2, [r7, #28]
 8002304:	615a      	str	r2, [r3, #20]
          break;
 8002306:	e003      	b.n	8002310 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002308:	2300      	movs	r3, #0
 800230a:	623b      	str	r3, [r7, #32]
          break;
 800230c:	e000      	b.n	8002310 <HAL_GPIO_Init+0x130>
          break;
 800230e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002310:	69bb      	ldr	r3, [r7, #24]
 8002312:	2bff      	cmp	r3, #255	@ 0xff
 8002314:	d801      	bhi.n	800231a <HAL_GPIO_Init+0x13a>
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	e001      	b.n	800231e <HAL_GPIO_Init+0x13e>
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	3304      	adds	r3, #4
 800231e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2bff      	cmp	r3, #255	@ 0xff
 8002324:	d802      	bhi.n	800232c <HAL_GPIO_Init+0x14c>
 8002326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	e002      	b.n	8002332 <HAL_GPIO_Init+0x152>
 800232c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800232e:	3b08      	subs	r3, #8
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	210f      	movs	r1, #15
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	fa01 f303 	lsl.w	r3, r1, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	401a      	ands	r2, r3
 8002344:	6a39      	ldr	r1, [r7, #32]
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	fa01 f303 	lsl.w	r3, r1, r3
 800234c:	431a      	orrs	r2, r3
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800235a:	2b00      	cmp	r3, #0
 800235c:	f000 80b1 	beq.w	80024c2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002360:	4b4d      	ldr	r3, [pc, #308]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002362:	699b      	ldr	r3, [r3, #24]
 8002364:	4a4c      	ldr	r2, [pc, #304]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 8002366:	f043 0301 	orr.w	r3, r3, #1
 800236a:	6193      	str	r3, [r2, #24]
 800236c:	4b4a      	ldr	r3, [pc, #296]	@ (8002498 <HAL_GPIO_Init+0x2b8>)
 800236e:	699b      	ldr	r3, [r3, #24]
 8002370:	f003 0301 	and.w	r3, r3, #1
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002378:	4a48      	ldr	r2, [pc, #288]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 800237a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800237c:	089b      	lsrs	r3, r3, #2
 800237e:	3302      	adds	r3, #2
 8002380:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002384:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002388:	f003 0303 	and.w	r3, r3, #3
 800238c:	009b      	lsls	r3, r3, #2
 800238e:	220f      	movs	r2, #15
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	43db      	mvns	r3, r3
 8002396:	68fa      	ldr	r2, [r7, #12]
 8002398:	4013      	ands	r3, r2
 800239a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	4a40      	ldr	r2, [pc, #256]	@ (80024a0 <HAL_GPIO_Init+0x2c0>)
 80023a0:	4293      	cmp	r3, r2
 80023a2:	d013      	beq.n	80023cc <HAL_GPIO_Init+0x1ec>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a3f      	ldr	r2, [pc, #252]	@ (80024a4 <HAL_GPIO_Init+0x2c4>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d00d      	beq.n	80023c8 <HAL_GPIO_Init+0x1e8>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	4a3e      	ldr	r2, [pc, #248]	@ (80024a8 <HAL_GPIO_Init+0x2c8>)
 80023b0:	4293      	cmp	r3, r2
 80023b2:	d007      	beq.n	80023c4 <HAL_GPIO_Init+0x1e4>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	4a3d      	ldr	r2, [pc, #244]	@ (80024ac <HAL_GPIO_Init+0x2cc>)
 80023b8:	4293      	cmp	r3, r2
 80023ba:	d101      	bne.n	80023c0 <HAL_GPIO_Init+0x1e0>
 80023bc:	2303      	movs	r3, #3
 80023be:	e006      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c0:	2304      	movs	r3, #4
 80023c2:	e004      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c4:	2302      	movs	r3, #2
 80023c6:	e002      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <HAL_GPIO_Init+0x1ee>
 80023cc:	2300      	movs	r3, #0
 80023ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80023d0:	f002 0203 	and.w	r2, r2, #3
 80023d4:	0092      	lsls	r2, r2, #2
 80023d6:	4093      	lsls	r3, r2
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80023de:	492f      	ldr	r1, [pc, #188]	@ (800249c <HAL_GPIO_Init+0x2bc>)
 80023e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023e2:	089b      	lsrs	r3, r3, #2
 80023e4:	3302      	adds	r3, #2
 80023e6:	68fa      	ldr	r2, [r7, #12]
 80023e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d006      	beq.n	8002406 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80023f8:	4b2d      	ldr	r3, [pc, #180]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fa:	689a      	ldr	r2, [r3, #8]
 80023fc:	492c      	ldr	r1, [pc, #176]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 80023fe:	69bb      	ldr	r3, [r7, #24]
 8002400:	4313      	orrs	r3, r2
 8002402:	608b      	str	r3, [r1, #8]
 8002404:	e006      	b.n	8002414 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002406:	4b2a      	ldr	r3, [pc, #168]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002408:	689a      	ldr	r2, [r3, #8]
 800240a:	69bb      	ldr	r3, [r7, #24]
 800240c:	43db      	mvns	r3, r3
 800240e:	4928      	ldr	r1, [pc, #160]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002410:	4013      	ands	r3, r2
 8002412:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	685b      	ldr	r3, [r3, #4]
 8002418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002420:	4b23      	ldr	r3, [pc, #140]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002422:	68da      	ldr	r2, [r3, #12]
 8002424:	4922      	ldr	r1, [pc, #136]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002426:	69bb      	ldr	r3, [r7, #24]
 8002428:	4313      	orrs	r3, r2
 800242a:	60cb      	str	r3, [r1, #12]
 800242c:	e006      	b.n	800243c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69bb      	ldr	r3, [r7, #24]
 8002434:	43db      	mvns	r3, r3
 8002436:	491e      	ldr	r1, [pc, #120]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002438:	4013      	ands	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d006      	beq.n	8002456 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002448:	4b19      	ldr	r3, [pc, #100]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244a:	685a      	ldr	r2, [r3, #4]
 800244c:	4918      	ldr	r1, [pc, #96]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	4313      	orrs	r3, r2
 8002452:	604b      	str	r3, [r1, #4]
 8002454:	e006      	b.n	8002464 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002456:	4b16      	ldr	r3, [pc, #88]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	69bb      	ldr	r3, [r7, #24]
 800245c:	43db      	mvns	r3, r3
 800245e:	4914      	ldr	r1, [pc, #80]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002460:	4013      	ands	r3, r2
 8002462:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800246c:	2b00      	cmp	r3, #0
 800246e:	d021      	beq.n	80024b4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002470:	4b0f      	ldr	r3, [pc, #60]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002472:	681a      	ldr	r2, [r3, #0]
 8002474:	490e      	ldr	r1, [pc, #56]	@ (80024b0 <HAL_GPIO_Init+0x2d0>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	4313      	orrs	r3, r2
 800247a:	600b      	str	r3, [r1, #0]
 800247c:	e021      	b.n	80024c2 <HAL_GPIO_Init+0x2e2>
 800247e:	bf00      	nop
 8002480:	10320000 	.word	0x10320000
 8002484:	10310000 	.word	0x10310000
 8002488:	10220000 	.word	0x10220000
 800248c:	10210000 	.word	0x10210000
 8002490:	10120000 	.word	0x10120000
 8002494:	10110000 	.word	0x10110000
 8002498:	40021000 	.word	0x40021000
 800249c:	40010000 	.word	0x40010000
 80024a0:	40010800 	.word	0x40010800
 80024a4:	40010c00 	.word	0x40010c00
 80024a8:	40011000 	.word	0x40011000
 80024ac:	40011400 	.word	0x40011400
 80024b0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	4909      	ldr	r1, [pc, #36]	@ (80024e4 <HAL_GPIO_Init+0x304>)
 80024be:	4013      	ands	r3, r2
 80024c0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80024c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024c4:	3301      	adds	r3, #1
 80024c6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024ce:	fa22 f303 	lsr.w	r3, r2, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	f47f ae8e 	bne.w	80021f4 <HAL_GPIO_Init+0x14>
  }
}
 80024d8:	bf00      	nop
 80024da:	bf00      	nop
 80024dc:	372c      	adds	r7, #44	@ 0x2c
 80024de:	46bd      	mov	sp, r7
 80024e0:	bc80      	pop	{r7}
 80024e2:	4770      	bx	lr
 80024e4:	40010400 	.word	0x40010400

080024e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
 80024f0:	460b      	mov	r3, r1
 80024f2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689a      	ldr	r2, [r3, #8]
 80024f8:	887b      	ldrh	r3, [r7, #2]
 80024fa:	4013      	ands	r3, r2
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d002      	beq.n	8002506 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
 8002504:	e001      	b.n	800250a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002506:	2300      	movs	r3, #0
 8002508:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800250a:	7bfb      	ldrb	r3, [r7, #15]
}
 800250c:	4618      	mov	r0, r3
 800250e:	3714      	adds	r7, #20
 8002510:	46bd      	mov	sp, r7
 8002512:	bc80      	pop	{r7}
 8002514:	4770      	bx	lr

08002516 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002516:	b480      	push	{r7}
 8002518:	b083      	sub	sp, #12
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	807b      	strh	r3, [r7, #2]
 8002522:	4613      	mov	r3, r2
 8002524:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002526:	787b      	ldrb	r3, [r7, #1]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800252c:	887a      	ldrh	r2, [r7, #2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002532:	e003      	b.n	800253c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002534:	887b      	ldrh	r3, [r7, #2]
 8002536:	041a      	lsls	r2, r3, #16
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	611a      	str	r2, [r3, #16]
}
 800253c:	bf00      	nop
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	bc80      	pop	{r7}
 8002544:	4770      	bx	lr

08002546 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002546:	b480      	push	{r7}
 8002548:	b085      	sub	sp, #20
 800254a:	af00      	add	r7, sp, #0
 800254c:	6078      	str	r0, [r7, #4]
 800254e:	460b      	mov	r3, r1
 8002550:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002558:	887a      	ldrh	r2, [r7, #2]
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	4013      	ands	r3, r2
 800255e:	041a      	lsls	r2, r3, #16
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	43d9      	mvns	r1, r3
 8002564:	887b      	ldrh	r3, [r7, #2]
 8002566:	400b      	ands	r3, r1
 8002568:	431a      	orrs	r2, r3
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	611a      	str	r2, [r3, #16]
}
 800256e:	bf00      	nop
 8002570:	3714      	adds	r7, #20
 8002572:	46bd      	mov	sp, r7
 8002574:	bc80      	pop	{r7}
 8002576:	4770      	bx	lr

08002578 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	b084      	sub	sp, #16
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2b00      	cmp	r3, #0
 8002584:	d101      	bne.n	800258a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e12b      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002590:	b2db      	uxtb	r3, r3
 8002592:	2b00      	cmp	r3, #0
 8002594:	d106      	bne.n	80025a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f7ff fc00 	bl	8001da4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2224      	movs	r2, #36	@ 0x24
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	681a      	ldr	r2, [r3, #0]
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 0201 	bic.w	r2, r2, #1
 80025ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	681a      	ldr	r2, [r3, #0]
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80025ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80025da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80025dc:	f001 f960 	bl	80038a0 <HAL_RCC_GetPCLK1Freq>
 80025e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	685b      	ldr	r3, [r3, #4]
 80025e6:	4a81      	ldr	r2, [pc, #516]	@ (80027ec <HAL_I2C_Init+0x274>)
 80025e8:	4293      	cmp	r3, r2
 80025ea:	d807      	bhi.n	80025fc <HAL_I2C_Init+0x84>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	4a80      	ldr	r2, [pc, #512]	@ (80027f0 <HAL_I2C_Init+0x278>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	bf94      	ite	ls
 80025f4:	2301      	movls	r3, #1
 80025f6:	2300      	movhi	r3, #0
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	e006      	b.n	800260a <HAL_I2C_Init+0x92>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	4a7d      	ldr	r2, [pc, #500]	@ (80027f4 <HAL_I2C_Init+0x27c>)
 8002600:	4293      	cmp	r3, r2
 8002602:	bf94      	ite	ls
 8002604:	2301      	movls	r3, #1
 8002606:	2300      	movhi	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	2b00      	cmp	r3, #0
 800260c:	d001      	beq.n	8002612 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800260e:	2301      	movs	r3, #1
 8002610:	e0e7      	b.n	80027e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4a78      	ldr	r2, [pc, #480]	@ (80027f8 <HAL_I2C_Init+0x280>)
 8002616:	fba2 2303 	umull	r2, r3, r2, r3
 800261a:	0c9b      	lsrs	r3, r3, #18
 800261c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68ba      	ldr	r2, [r7, #8]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	6a1b      	ldr	r3, [r3, #32]
 8002638:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	4a6a      	ldr	r2, [pc, #424]	@ (80027ec <HAL_I2C_Init+0x274>)
 8002642:	4293      	cmp	r3, r2
 8002644:	d802      	bhi.n	800264c <HAL_I2C_Init+0xd4>
 8002646:	68bb      	ldr	r3, [r7, #8]
 8002648:	3301      	adds	r3, #1
 800264a:	e009      	b.n	8002660 <HAL_I2C_Init+0xe8>
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002652:	fb02 f303 	mul.w	r3, r2, r3
 8002656:	4a69      	ldr	r2, [pc, #420]	@ (80027fc <HAL_I2C_Init+0x284>)
 8002658:	fba2 2303 	umull	r2, r3, r2, r3
 800265c:	099b      	lsrs	r3, r3, #6
 800265e:	3301      	adds	r3, #1
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	6812      	ldr	r2, [r2, #0]
 8002664:	430b      	orrs	r3, r1
 8002666:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	69db      	ldr	r3, [r3, #28]
 800266e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002672:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	495c      	ldr	r1, [pc, #368]	@ (80027ec <HAL_I2C_Init+0x274>)
 800267c:	428b      	cmp	r3, r1
 800267e:	d819      	bhi.n	80026b4 <HAL_I2C_Init+0x13c>
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	1e59      	subs	r1, r3, #1
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	685b      	ldr	r3, [r3, #4]
 8002688:	005b      	lsls	r3, r3, #1
 800268a:	fbb1 f3f3 	udiv	r3, r1, r3
 800268e:	1c59      	adds	r1, r3, #1
 8002690:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002694:	400b      	ands	r3, r1
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_I2C_Init+0x138>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	1e59      	subs	r1, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	005b      	lsls	r3, r3, #1
 80026a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a8:	3301      	adds	r3, #1
 80026aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026ae:	e051      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b0:	2304      	movs	r3, #4
 80026b2:	e04f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	689b      	ldr	r3, [r3, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d111      	bne.n	80026e0 <HAL_I2C_Init+0x168>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1e58      	subs	r0, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	6859      	ldr	r1, [r3, #4]
 80026c4:	460b      	mov	r3, r1
 80026c6:	005b      	lsls	r3, r3, #1
 80026c8:	440b      	add	r3, r1
 80026ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80026ce:	3301      	adds	r3, #1
 80026d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	bf0c      	ite	eq
 80026d8:	2301      	moveq	r3, #1
 80026da:	2300      	movne	r3, #0
 80026dc:	b2db      	uxtb	r3, r3
 80026de:	e012      	b.n	8002706 <HAL_I2C_Init+0x18e>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	1e58      	subs	r0, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6859      	ldr	r1, [r3, #4]
 80026e8:	460b      	mov	r3, r1
 80026ea:	009b      	lsls	r3, r3, #2
 80026ec:	440b      	add	r3, r1
 80026ee:	0099      	lsls	r1, r3, #2
 80026f0:	440b      	add	r3, r1
 80026f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80026f6:	3301      	adds	r3, #1
 80026f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	bf0c      	ite	eq
 8002700:	2301      	moveq	r3, #1
 8002702:	2300      	movne	r3, #0
 8002704:	b2db      	uxtb	r3, r3
 8002706:	2b00      	cmp	r3, #0
 8002708:	d001      	beq.n	800270e <HAL_I2C_Init+0x196>
 800270a:	2301      	movs	r3, #1
 800270c:	e022      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10e      	bne.n	8002734 <HAL_I2C_Init+0x1bc>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e58      	subs	r0, r3, #1
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6859      	ldr	r1, [r3, #4]
 800271e:	460b      	mov	r3, r1
 8002720:	005b      	lsls	r3, r3, #1
 8002722:	440b      	add	r3, r1
 8002724:	fbb0 f3f3 	udiv	r3, r0, r3
 8002728:	3301      	adds	r3, #1
 800272a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800272e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002732:	e00f      	b.n	8002754 <HAL_I2C_Init+0x1dc>
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	1e58      	subs	r0, r3, #1
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6859      	ldr	r1, [r3, #4]
 800273c:	460b      	mov	r3, r1
 800273e:	009b      	lsls	r3, r3, #2
 8002740:	440b      	add	r3, r1
 8002742:	0099      	lsls	r1, r3, #2
 8002744:	440b      	add	r3, r1
 8002746:	fbb0 f3f3 	udiv	r3, r0, r3
 800274a:	3301      	adds	r3, #1
 800274c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002750:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002754:	6879      	ldr	r1, [r7, #4]
 8002756:	6809      	ldr	r1, [r1, #0]
 8002758:	4313      	orrs	r3, r2
 800275a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	69da      	ldr	r2, [r3, #28]
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6a1b      	ldr	r3, [r3, #32]
 800276e:	431a      	orrs	r2, r3
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	430a      	orrs	r2, r1
 8002776:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	689b      	ldr	r3, [r3, #8]
 800277e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002782:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	6911      	ldr	r1, [r2, #16]
 800278a:	687a      	ldr	r2, [r7, #4]
 800278c:	68d2      	ldr	r2, [r2, #12]
 800278e:	4311      	orrs	r1, r2
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	6812      	ldr	r2, [r2, #0]
 8002794:	430b      	orrs	r3, r1
 8002796:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	695a      	ldr	r2, [r3, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	430a      	orrs	r2, r1
 80027b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f042 0201 	orr.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2220      	movs	r2, #32
 80027ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	2200      	movs	r2, #0
 80027d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	000186a0 	.word	0x000186a0
 80027f0:	001e847f 	.word	0x001e847f
 80027f4:	003d08ff 	.word	0x003d08ff
 80027f8:	431bde83 	.word	0x431bde83
 80027fc:	10624dd3 	.word	0x10624dd3

08002800 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002800:	b580      	push	{r7, lr}
 8002802:	b088      	sub	sp, #32
 8002804:	af02      	add	r7, sp, #8
 8002806:	60f8      	str	r0, [r7, #12]
 8002808:	607a      	str	r2, [r7, #4]
 800280a:	461a      	mov	r2, r3
 800280c:	460b      	mov	r3, r1
 800280e:	817b      	strh	r3, [r7, #10]
 8002810:	4613      	mov	r3, r2
 8002812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002814:	f7ff fbfa 	bl	800200c <HAL_GetTick>
 8002818:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002820:	b2db      	uxtb	r3, r3
 8002822:	2b20      	cmp	r3, #32
 8002824:	f040 80e0 	bne.w	80029e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002828:	697b      	ldr	r3, [r7, #20]
 800282a:	9300      	str	r3, [sp, #0]
 800282c:	2319      	movs	r3, #25
 800282e:	2201      	movs	r2, #1
 8002830:	4970      	ldr	r1, [pc, #448]	@ (80029f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002832:	68f8      	ldr	r0, [r7, #12]
 8002834:	f000 fa92 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002838:	4603      	mov	r3, r0
 800283a:	2b00      	cmp	r3, #0
 800283c:	d001      	beq.n	8002842 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800283e:	2302      	movs	r3, #2
 8002840:	e0d3      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002848:	2b01      	cmp	r3, #1
 800284a:	d101      	bne.n	8002850 <HAL_I2C_Master_Transmit+0x50>
 800284c:	2302      	movs	r3, #2
 800284e:	e0cc      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0301 	and.w	r3, r3, #1
 8002862:	2b01      	cmp	r3, #1
 8002864:	d007      	beq.n	8002876 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f042 0201 	orr.w	r2, r2, #1
 8002874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	2221      	movs	r2, #33	@ 0x21
 800288a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	2210      	movs	r2, #16
 8002892:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	2200      	movs	r2, #0
 800289a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	893a      	ldrh	r2, [r7, #8]
 80028a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028ac:	b29a      	uxth	r2, r3
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	4a50      	ldr	r2, [pc, #320]	@ (80029f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80028b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80028b8:	8979      	ldrh	r1, [r7, #10]
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	6a3a      	ldr	r2, [r7, #32]
 80028be:	68f8      	ldr	r0, [r7, #12]
 80028c0:	f000 f9ca 	bl	8002c58 <I2C_MasterRequestWrite>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80028ca:	2301      	movs	r3, #1
 80028cc:	e08d      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028ce:	2300      	movs	r3, #0
 80028d0:	613b      	str	r3, [r7, #16]
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	695b      	ldr	r3, [r3, #20]
 80028d8:	613b      	str	r3, [r7, #16]
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	699b      	ldr	r3, [r3, #24]
 80028e0:	613b      	str	r3, [r7, #16]
 80028e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80028e4:	e066      	b.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028e6:	697a      	ldr	r2, [r7, #20]
 80028e8:	6a39      	ldr	r1, [r7, #32]
 80028ea:	68f8      	ldr	r0, [r7, #12]
 80028ec:	f000 fb50 	bl	8002f90 <I2C_WaitOnTXEFlagUntilTimeout>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d00d      	beq.n	8002912 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028fa:	2b04      	cmp	r3, #4
 80028fc:	d107      	bne.n	800290e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800290c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
 8002910:	e06b      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002916:	781a      	ldrb	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002922:	1c5a      	adds	r2, r3, #1
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800292c:	b29b      	uxth	r3, r3
 800292e:	3b01      	subs	r3, #1
 8002930:	b29a      	uxth	r2, r3
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800293a:	3b01      	subs	r3, #1
 800293c:	b29a      	uxth	r2, r3
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	695b      	ldr	r3, [r3, #20]
 8002948:	f003 0304 	and.w	r3, r3, #4
 800294c:	2b04      	cmp	r3, #4
 800294e:	d11b      	bne.n	8002988 <HAL_I2C_Master_Transmit+0x188>
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002954:	2b00      	cmp	r3, #0
 8002956:	d017      	beq.n	8002988 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800295c:	781a      	ldrb	r2, [r3, #0]
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002972:	b29b      	uxth	r3, r3
 8002974:	3b01      	subs	r3, #1
 8002976:	b29a      	uxth	r2, r3
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002980:	3b01      	subs	r3, #1
 8002982:	b29a      	uxth	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002988:	697a      	ldr	r2, [r7, #20]
 800298a:	6a39      	ldr	r1, [r7, #32]
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f000 fb47 	bl	8003020 <I2C_WaitOnBTFFlagUntilTimeout>
 8002992:	4603      	mov	r3, r0
 8002994:	2b00      	cmp	r3, #0
 8002996:	d00d      	beq.n	80029b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299c:	2b04      	cmp	r3, #4
 800299e:	d107      	bne.n	80029b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	681a      	ldr	r2, [r3, #0]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e01a      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d194      	bne.n	80028e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	681a      	ldr	r2, [r3, #0]
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80029ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	2220      	movs	r2, #32
 80029d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2200      	movs	r2, #0
 80029e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e000      	b.n	80029ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80029e8:	2302      	movs	r3, #2
  }
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3718      	adds	r7, #24
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	00100002 	.word	0x00100002
 80029f8:	ffff0000 	.word	0xffff0000

080029fc <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b08a      	sub	sp, #40	@ 0x28
 8002a00:	af02      	add	r7, sp, #8
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	607a      	str	r2, [r7, #4]
 8002a06:	603b      	str	r3, [r7, #0]
 8002a08:	460b      	mov	r3, r1
 8002a0a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002a0c:	f7ff fafe 	bl	800200c <HAL_GetTick>
 8002a10:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002a12:	2300      	movs	r3, #0
 8002a14:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b20      	cmp	r3, #32
 8002a20:	f040 8111 	bne.w	8002c46 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	9300      	str	r3, [sp, #0]
 8002a28:	2319      	movs	r3, #25
 8002a2a:	2201      	movs	r2, #1
 8002a2c:	4988      	ldr	r1, [pc, #544]	@ (8002c50 <HAL_I2C_IsDeviceReady+0x254>)
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 f994 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002a3a:	2302      	movs	r3, #2
 8002a3c:	e104      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d101      	bne.n	8002a4c <HAL_I2C_IsDeviceReady+0x50>
 8002a48:	2302      	movs	r3, #2
 8002a4a:	e0fd      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 0301 	and.w	r3, r3, #1
 8002a5e:	2b01      	cmp	r3, #1
 8002a60:	d007      	beq.n	8002a72 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	681a      	ldr	r2, [r3, #0]
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0201 	orr.w	r2, r2, #1
 8002a70:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681a      	ldr	r2, [r3, #0]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a80:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	2224      	movs	r2, #36	@ 0x24
 8002a86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	4a70      	ldr	r2, [pc, #448]	@ (8002c54 <HAL_I2C_IsDeviceReady+0x258>)
 8002a94:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	9300      	str	r3, [sp, #0]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	2200      	movs	r2, #0
 8002aae:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002ab2:	68f8      	ldr	r0, [r7, #12]
 8002ab4:	f000 f952 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d00d      	beq.n	8002ada <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ac8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002acc:	d103      	bne.n	8002ad6 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ad4:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002ad6:	2303      	movs	r3, #3
 8002ad8:	e0b6      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ada:	897b      	ldrh	r3, [r7, #10]
 8002adc:	b2db      	uxtb	r3, r3
 8002ade:	461a      	mov	r2, r3
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002ae8:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002aea:	f7ff fa8f 	bl	800200c <HAL_GetTick>
 8002aee:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	695b      	ldr	r3, [r3, #20]
 8002af6:	f003 0302 	and.w	r3, r3, #2
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	bf0c      	ite	eq
 8002afe:	2301      	moveq	r3, #1
 8002b00:	2300      	movne	r3, #0
 8002b02:	b2db      	uxtb	r3, r3
 8002b04:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	695b      	ldr	r3, [r3, #20]
 8002b0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b14:	bf0c      	ite	eq
 8002b16:	2301      	moveq	r3, #1
 8002b18:	2300      	movne	r3, #0
 8002b1a:	b2db      	uxtb	r3, r3
 8002b1c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b1e:	e025      	b.n	8002b6c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002b20:	f7ff fa74 	bl	800200c <HAL_GetTick>
 8002b24:	4602      	mov	r2, r0
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	1ad3      	subs	r3, r2, r3
 8002b2a:	683a      	ldr	r2, [r7, #0]
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d302      	bcc.n	8002b36 <HAL_I2C_IsDeviceReady+0x13a>
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d103      	bne.n	8002b3e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	22a0      	movs	r2, #160	@ 0xa0
 8002b3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	695b      	ldr	r3, [r3, #20]
 8002b44:	f003 0302 	and.w	r3, r3, #2
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	bf0c      	ite	eq
 8002b4c:	2301      	moveq	r3, #1
 8002b4e:	2300      	movne	r3, #0
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b5e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b62:	bf0c      	ite	eq
 8002b64:	2301      	moveq	r3, #1
 8002b66:	2300      	movne	r3, #0
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b72:	b2db      	uxtb	r3, r3
 8002b74:	2ba0      	cmp	r3, #160	@ 0xa0
 8002b76:	d005      	beq.n	8002b84 <HAL_I2C_IsDeviceReady+0x188>
 8002b78:	7dfb      	ldrb	r3, [r7, #23]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d102      	bne.n	8002b84 <HAL_I2C_IsDeviceReady+0x188>
 8002b7e:	7dbb      	ldrb	r3, [r7, #22]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d0cd      	beq.n	8002b20 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2220      	movs	r2, #32
 8002b88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	695b      	ldr	r3, [r3, #20]
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	2b02      	cmp	r3, #2
 8002b98:	d129      	bne.n	8002bee <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	681a      	ldr	r2, [r3, #0]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002baa:	2300      	movs	r3, #0
 8002bac:	613b      	str	r3, [r7, #16]
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	695b      	ldr	r3, [r3, #20]
 8002bb4:	613b      	str	r3, [r7, #16]
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	699b      	ldr	r3, [r3, #24]
 8002bbc:	613b      	str	r3, [r7, #16]
 8002bbe:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002bc0:	69fb      	ldr	r3, [r7, #28]
 8002bc2:	9300      	str	r3, [sp, #0]
 8002bc4:	2319      	movs	r3, #25
 8002bc6:	2201      	movs	r2, #1
 8002bc8:	4921      	ldr	r1, [pc, #132]	@ (8002c50 <HAL_I2C_IsDeviceReady+0x254>)
 8002bca:	68f8      	ldr	r0, [r7, #12]
 8002bcc:	f000 f8c6 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d001      	beq.n	8002bda <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e036      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2220      	movs	r2, #32
 8002bde:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	2200      	movs	r2, #0
 8002be6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002bea:	2300      	movs	r3, #0
 8002bec:	e02c      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bfc:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c06:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	9300      	str	r3, [sp, #0]
 8002c0c:	2319      	movs	r3, #25
 8002c0e:	2201      	movs	r2, #1
 8002c10:	490f      	ldr	r1, [pc, #60]	@ (8002c50 <HAL_I2C_IsDeviceReady+0x254>)
 8002c12:	68f8      	ldr	r0, [r7, #12]
 8002c14:	f000 f8a2 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d001      	beq.n	8002c22 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e012      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002c22:	69bb      	ldr	r3, [r7, #24]
 8002c24:	3301      	adds	r3, #1
 8002c26:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002c28:	69ba      	ldr	r2, [r7, #24]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	429a      	cmp	r2, r3
 8002c2e:	f4ff af32 	bcc.w	8002a96 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	2220      	movs	r2, #32
 8002c36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e000      	b.n	8002c48 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002c46:	2302      	movs	r3, #2
  }
}
 8002c48:	4618      	mov	r0, r3
 8002c4a:	3720      	adds	r7, #32
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}
 8002c50:	00100002 	.word	0x00100002
 8002c54:	ffff0000 	.word	0xffff0000

08002c58 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af02      	add	r7, sp, #8
 8002c5e:	60f8      	str	r0, [r7, #12]
 8002c60:	607a      	str	r2, [r7, #4]
 8002c62:	603b      	str	r3, [r7, #0]
 8002c64:	460b      	mov	r3, r1
 8002c66:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	2b08      	cmp	r3, #8
 8002c72:	d006      	beq.n	8002c82 <I2C_MasterRequestWrite+0x2a>
 8002c74:	697b      	ldr	r3, [r7, #20]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d003      	beq.n	8002c82 <I2C_MasterRequestWrite+0x2a>
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002c80:	d108      	bne.n	8002c94 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	681a      	ldr	r2, [r3, #0]
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	e00b      	b.n	8002cac <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c98:	2b12      	cmp	r3, #18
 8002c9a:	d107      	bne.n	8002cac <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002caa:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	9300      	str	r3, [sp, #0]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002cb8:	68f8      	ldr	r0, [r7, #12]
 8002cba:	f000 f84f 	bl	8002d5c <I2C_WaitOnFlagUntilTimeout>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00d      	beq.n	8002ce0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cce:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002cd2:	d103      	bne.n	8002cdc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002cda:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e035      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002ce8:	d108      	bne.n	8002cfc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002cea:	897b      	ldrh	r3, [r7, #10]
 8002cec:	b2db      	uxtb	r3, r3
 8002cee:	461a      	mov	r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002cf8:	611a      	str	r2, [r3, #16]
 8002cfa:	e01b      	b.n	8002d34 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002cfc:	897b      	ldrh	r3, [r7, #10]
 8002cfe:	11db      	asrs	r3, r3, #7
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	f003 0306 	and.w	r3, r3, #6
 8002d06:	b2db      	uxtb	r3, r3
 8002d08:	f063 030f 	orn	r3, r3, #15
 8002d0c:	b2da      	uxtb	r2, r3
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	687a      	ldr	r2, [r7, #4]
 8002d18:	490e      	ldr	r1, [pc, #56]	@ (8002d54 <I2C_MasterRequestWrite+0xfc>)
 8002d1a:	68f8      	ldr	r0, [r7, #12]
 8002d1c:	f000 f898 	bl	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e010      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002d2a:	897b      	ldrh	r3, [r7, #10]
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	4907      	ldr	r1, [pc, #28]	@ (8002d58 <I2C_MasterRequestWrite+0x100>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 f888 	bl	8002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3718      	adds	r7, #24
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bd80      	pop	{r7, pc}
 8002d54:	00010008 	.word	0x00010008
 8002d58:	00010002 	.word	0x00010002

08002d5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	4613      	mov	r3, r2
 8002d6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002d6c:	e048      	b.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d044      	beq.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d76:	f7ff f949 	bl	800200c <HAL_GetTick>
 8002d7a:	4602      	mov	r2, r0
 8002d7c:	69bb      	ldr	r3, [r7, #24]
 8002d7e:	1ad3      	subs	r3, r2, r3
 8002d80:	683a      	ldr	r2, [r7, #0]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	d302      	bcc.n	8002d8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d139      	bne.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	0c1b      	lsrs	r3, r3, #16
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	d10d      	bne.n	8002db2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	695b      	ldr	r3, [r3, #20]
 8002d9c:	43da      	mvns	r2, r3
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	4013      	ands	r3, r2
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	461a      	mov	r2, r3
 8002db0:	e00c      	b.n	8002dcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	699b      	ldr	r3, [r3, #24]
 8002db8:	43da      	mvns	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	b29b      	uxth	r3, r3
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	bf0c      	ite	eq
 8002dc4:	2301      	moveq	r3, #1
 8002dc6:	2300      	movne	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	461a      	mov	r2, r3
 8002dcc:	79fb      	ldrb	r3, [r7, #7]
 8002dce:	429a      	cmp	r2, r3
 8002dd0:	d116      	bne.n	8002e00 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	2220      	movs	r2, #32
 8002ddc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002dec:	f043 0220 	orr.w	r2, r3, #32
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e023      	b.n	8002e48 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	0c1b      	lsrs	r3, r3, #16
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d10d      	bne.n	8002e26 <I2C_WaitOnFlagUntilTimeout+0xca>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	695b      	ldr	r3, [r3, #20]
 8002e10:	43da      	mvns	r2, r3
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29b      	uxth	r3, r3
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	bf0c      	ite	eq
 8002e1c:	2301      	moveq	r3, #1
 8002e1e:	2300      	movne	r3, #0
 8002e20:	b2db      	uxtb	r3, r3
 8002e22:	461a      	mov	r2, r3
 8002e24:	e00c      	b.n	8002e40 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	699b      	ldr	r3, [r3, #24]
 8002e2c:	43da      	mvns	r2, r3
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	4013      	ands	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	bf0c      	ite	eq
 8002e38:	2301      	moveq	r3, #1
 8002e3a:	2300      	movne	r3, #0
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	461a      	mov	r2, r3
 8002e40:	79fb      	ldrb	r3, [r7, #7]
 8002e42:	429a      	cmp	r2, r3
 8002e44:	d093      	beq.n	8002d6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e46:	2300      	movs	r3, #0
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b084      	sub	sp, #16
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
 8002e5c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002e5e:	e071      	b.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6e:	d123      	bne.n	8002eb8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681a      	ldr	r2, [r3, #0]
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002e88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea4:	f043 0204 	orr.w	r2, r3, #4
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e067      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ebe:	d041      	beq.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ec0:	f7ff f8a4 	bl	800200c <HAL_GetTick>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	1ad3      	subs	r3, r2, r3
 8002eca:	687a      	ldr	r2, [r7, #4]
 8002ecc:	429a      	cmp	r2, r3
 8002ece:	d302      	bcc.n	8002ed6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d136      	bne.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	0c1b      	lsrs	r3, r3, #16
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d10c      	bne.n	8002efa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	695b      	ldr	r3, [r3, #20]
 8002ee6:	43da      	mvns	r2, r3
 8002ee8:	68bb      	ldr	r3, [r7, #8]
 8002eea:	4013      	ands	r3, r2
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bf14      	ite	ne
 8002ef2:	2301      	movne	r3, #1
 8002ef4:	2300      	moveq	r3, #0
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	e00b      	b.n	8002f12 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	43da      	mvns	r2, r3
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	4013      	ands	r3, r2
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	bf14      	ite	ne
 8002f0c:	2301      	movne	r3, #1
 8002f0e:	2300      	moveq	r3, #0
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d016      	beq.n	8002f44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f30:	f043 0220 	orr.w	r2, r3, #32
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2200      	movs	r2, #0
 8002f3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e021      	b.n	8002f88 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	0c1b      	lsrs	r3, r3, #16
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d10c      	bne.n	8002f68 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	695b      	ldr	r3, [r3, #20]
 8002f54:	43da      	mvns	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	b29b      	uxth	r3, r3
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	bf14      	ite	ne
 8002f60:	2301      	movne	r3, #1
 8002f62:	2300      	moveq	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	e00b      	b.n	8002f80 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	43da      	mvns	r2, r3
 8002f70:	68bb      	ldr	r3, [r7, #8]
 8002f72:	4013      	ands	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	bf14      	ite	ne
 8002f7a:	2301      	movne	r3, #1
 8002f7c:	2300      	moveq	r3, #0
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	f47f af6d 	bne.w	8002e60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8002f86:	2300      	movs	r3, #0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3710      	adds	r7, #16
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b084      	sub	sp, #16
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002f9c:	e034      	b.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002f9e:	68f8      	ldr	r0, [r7, #12]
 8002fa0:	f000 f886 	bl	80030b0 <I2C_IsAcknowledgeFailed>
 8002fa4:	4603      	mov	r3, r0
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d001      	beq.n	8002fae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002faa:	2301      	movs	r3, #1
 8002fac:	e034      	b.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fb4:	d028      	beq.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fb6:	f7ff f829 	bl	800200c <HAL_GetTick>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	1ad3      	subs	r3, r2, r3
 8002fc0:	68ba      	ldr	r2, [r7, #8]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d302      	bcc.n	8002fcc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d11d      	bne.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b80      	cmp	r3, #128	@ 0x80
 8002fd8:	d016      	beq.n	8003008 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	2200      	movs	r2, #0
 8002fde:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2220      	movs	r2, #32
 8002fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f043 0220 	orr.w	r2, r3, #32
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	2200      	movs	r2, #0
 8003000:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003004:	2301      	movs	r3, #1
 8003006:	e007      	b.n	8003018 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003012:	2b80      	cmp	r3, #128	@ 0x80
 8003014:	d1c3      	bne.n	8002f9e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003016:	2300      	movs	r3, #0
}
 8003018:	4618      	mov	r0, r3
 800301a:	3710      	adds	r7, #16
 800301c:	46bd      	mov	sp, r7
 800301e:	bd80      	pop	{r7, pc}

08003020 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b084      	sub	sp, #16
 8003024:	af00      	add	r7, sp, #0
 8003026:	60f8      	str	r0, [r7, #12]
 8003028:	60b9      	str	r1, [r7, #8]
 800302a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800302c:	e034      	b.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800302e:	68f8      	ldr	r0, [r7, #12]
 8003030:	f000 f83e 	bl	80030b0 <I2C_IsAcknowledgeFailed>
 8003034:	4603      	mov	r3, r0
 8003036:	2b00      	cmp	r3, #0
 8003038:	d001      	beq.n	800303e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800303a:	2301      	movs	r3, #1
 800303c:	e034      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003044:	d028      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003046:	f7fe ffe1 	bl	800200c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	68ba      	ldr	r2, [r7, #8]
 8003052:	429a      	cmp	r2, r3
 8003054:	d302      	bcc.n	800305c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	2b00      	cmp	r3, #0
 800305a:	d11d      	bne.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b04      	cmp	r3, #4
 8003068:	d016      	beq.n	8003098 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	2200      	movs	r2, #0
 800306e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	2220      	movs	r2, #32
 8003074:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2200      	movs	r2, #0
 800307c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2200      	movs	r2, #0
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003094:	2301      	movs	r3, #1
 8003096:	e007      	b.n	80030a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	695b      	ldr	r3, [r3, #20]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d1c3      	bne.n	800302e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80030a6:	2300      	movs	r3, #0
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80030b0:	b480      	push	{r7}
 80030b2:	b083      	sub	sp, #12
 80030b4:	af00      	add	r7, sp, #0
 80030b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	695b      	ldr	r3, [r3, #20]
 80030be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d11b      	bne.n	8003100 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80030d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2220      	movs	r2, #32
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ec:	f043 0204 	orr.w	r2, r3, #4
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030fc:	2301      	movs	r3, #1
 80030fe:	e000      	b.n	8003102 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003100:	2300      	movs	r3, #0
}
 8003102:	4618      	mov	r0, r3
 8003104:	370c      	adds	r7, #12
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr

0800310c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e272      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	f000 8087 	beq.w	800323a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800312c:	4b92      	ldr	r3, [pc, #584]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f003 030c 	and.w	r3, r3, #12
 8003134:	2b04      	cmp	r3, #4
 8003136:	d00c      	beq.n	8003152 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003138:	4b8f      	ldr	r3, [pc, #572]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 030c 	and.w	r3, r3, #12
 8003140:	2b08      	cmp	r3, #8
 8003142:	d112      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
 8003144:	4b8c      	ldr	r3, [pc, #560]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800314c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003150:	d10b      	bne.n	800316a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003152:	4b89      	ldr	r3, [pc, #548]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d06c      	beq.n	8003238 <HAL_RCC_OscConfig+0x12c>
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d168      	bne.n	8003238 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	e24c      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003172:	d106      	bne.n	8003182 <HAL_RCC_OscConfig+0x76>
 8003174:	4b80      	ldr	r3, [pc, #512]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a7f      	ldr	r2, [pc, #508]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800317a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800317e:	6013      	str	r3, [r2, #0]
 8003180:	e02e      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b7b      	ldr	r3, [pc, #492]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a7a      	ldr	r2, [pc, #488]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003190:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b78      	ldr	r3, [pc, #480]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a77      	ldr	r2, [pc, #476]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800319c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e01d      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80031ac:	d10c      	bne.n	80031c8 <HAL_RCC_OscConfig+0xbc>
 80031ae:	4b72      	ldr	r3, [pc, #456]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a71      	ldr	r2, [pc, #452]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80031b8:	6013      	str	r3, [r2, #0]
 80031ba:	4b6f      	ldr	r3, [pc, #444]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a6e      	ldr	r2, [pc, #440]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031c4:	6013      	str	r3, [r2, #0]
 80031c6:	e00b      	b.n	80031e0 <HAL_RCC_OscConfig+0xd4>
 80031c8:	4b6b      	ldr	r3, [pc, #428]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80031d2:	6013      	str	r3, [r2, #0]
 80031d4:	4b68      	ldr	r3, [pc, #416]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a67      	ldr	r2, [pc, #412]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80031da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80031de:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d013      	beq.n	8003210 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031e8:	f7fe ff10 	bl	800200c <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80031f0:	f7fe ff0c 	bl	800200c <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b64      	cmp	r3, #100	@ 0x64
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e200      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003202:	4b5d      	ldr	r3, [pc, #372]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0xe4>
 800320e:	e014      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe fefc 	bl	800200c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003218:	f7fe fef8 	bl	800200c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b64      	cmp	r3, #100	@ 0x64
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e1ec      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800322a:	4b53      	ldr	r3, [pc, #332]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x10c>
 8003236:	e000      	b.n	800323a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003238:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f003 0302 	and.w	r3, r3, #2
 8003242:	2b00      	cmp	r3, #0
 8003244:	d063      	beq.n	800330e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003246:	4b4c      	ldr	r3, [pc, #304]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	f003 030c 	and.w	r3, r3, #12
 800324e:	2b00      	cmp	r3, #0
 8003250:	d00b      	beq.n	800326a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003252:	4b49      	ldr	r3, [pc, #292]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	f003 030c 	and.w	r3, r3, #12
 800325a:	2b08      	cmp	r3, #8
 800325c:	d11c      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
 800325e:	4b46      	ldr	r3, [pc, #280]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003266:	2b00      	cmp	r3, #0
 8003268:	d116      	bne.n	8003298 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800326a:	4b43      	ldr	r3, [pc, #268]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d005      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	691b      	ldr	r3, [r3, #16]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d001      	beq.n	8003282 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e1c0      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003282:	4b3d      	ldr	r3, [pc, #244]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4939      	ldr	r1, [pc, #228]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003292:	4313      	orrs	r3, r2
 8003294:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003296:	e03a      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	691b      	ldr	r3, [r3, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d020      	beq.n	80032e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80032a0:	4b36      	ldr	r3, [pc, #216]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032a2:	2201      	movs	r2, #1
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7fe feb1 	bl	800200c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032ae:	f7fe fead 	bl	800200c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e1a1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032c0:	4b2d      	ldr	r3, [pc, #180]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0302 	and.w	r3, r3, #2
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d0f0      	beq.n	80032ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032cc:	4b2a      	ldr	r3, [pc, #168]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	4927      	ldr	r1, [pc, #156]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 80032dc:	4313      	orrs	r3, r2
 80032de:	600b      	str	r3, [r1, #0]
 80032e0:	e015      	b.n	800330e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032e2:	4b26      	ldr	r3, [pc, #152]	@ (800337c <HAL_RCC_OscConfig+0x270>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e8:	f7fe fe90 	bl	800200c <HAL_GetTick>
 80032ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ee:	e008      	b.n	8003302 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80032f0:	f7fe fe8c 	bl	800200c <HAL_GetTick>
 80032f4:	4602      	mov	r2, r0
 80032f6:	693b      	ldr	r3, [r7, #16]
 80032f8:	1ad3      	subs	r3, r2, r3
 80032fa:	2b02      	cmp	r3, #2
 80032fc:	d901      	bls.n	8003302 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e180      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003302:	4b1d      	ldr	r3, [pc, #116]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f003 0302 	and.w	r3, r3, #2
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1f0      	bne.n	80032f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0308 	and.w	r3, r3, #8
 8003316:	2b00      	cmp	r3, #0
 8003318:	d03a      	beq.n	8003390 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	2b00      	cmp	r3, #0
 8003320:	d019      	beq.n	8003356 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003322:	4b17      	ldr	r3, [pc, #92]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003324:	2201      	movs	r2, #1
 8003326:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003328:	f7fe fe70 	bl	800200c <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003330:	f7fe fe6c 	bl	800200c <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e160      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003342:	4b0d      	ldr	r3, [pc, #52]	@ (8003378 <HAL_RCC_OscConfig+0x26c>)
 8003344:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d0f0      	beq.n	8003330 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800334e:	2001      	movs	r0, #1
 8003350:	f000 faea 	bl	8003928 <RCC_Delay>
 8003354:	e01c      	b.n	8003390 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003356:	4b0a      	ldr	r3, [pc, #40]	@ (8003380 <HAL_RCC_OscConfig+0x274>)
 8003358:	2200      	movs	r2, #0
 800335a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800335c:	f7fe fe56 	bl	800200c <HAL_GetTick>
 8003360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003362:	e00f      	b.n	8003384 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003364:	f7fe fe52 	bl	800200c <HAL_GetTick>
 8003368:	4602      	mov	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d908      	bls.n	8003384 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e146      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 8003376:	bf00      	nop
 8003378:	40021000 	.word	0x40021000
 800337c:	42420000 	.word	0x42420000
 8003380:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003384:	4b92      	ldr	r3, [pc, #584]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003386:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e9      	bne.n	8003364 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f003 0304 	and.w	r3, r3, #4
 8003398:	2b00      	cmp	r3, #0
 800339a:	f000 80a6 	beq.w	80034ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800339e:	2300      	movs	r3, #0
 80033a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80033a2:	4b8b      	ldr	r3, [pc, #556]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033a4:	69db      	ldr	r3, [r3, #28]
 80033a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10d      	bne.n	80033ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80033ae:	4b88      	ldr	r3, [pc, #544]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	4a87      	ldr	r2, [pc, #540]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80033b8:	61d3      	str	r3, [r2, #28]
 80033ba:	4b85      	ldr	r3, [pc, #532]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80033bc:	69db      	ldr	r3, [r3, #28]
 80033be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80033c2:	60bb      	str	r3, [r7, #8]
 80033c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80033c6:	2301      	movs	r3, #1
 80033c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033ca:	4b82      	ldr	r3, [pc, #520]	@ (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d118      	bne.n	8003408 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033d6:	4b7f      	ldr	r3, [pc, #508]	@ (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4a7e      	ldr	r2, [pc, #504]	@ (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80033e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033e2:	f7fe fe13 	bl	800200c <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033e8:	e008      	b.n	80033fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033ea:	f7fe fe0f 	bl	800200c <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b64      	cmp	r3, #100	@ 0x64
 80033f6:	d901      	bls.n	80033fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e103      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033fc:	4b75      	ldr	r3, [pc, #468]	@ (80035d4 <HAL_RCC_OscConfig+0x4c8>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003404:	2b00      	cmp	r3, #0
 8003406:	d0f0      	beq.n	80033ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	2b01      	cmp	r3, #1
 800340e:	d106      	bne.n	800341e <HAL_RCC_OscConfig+0x312>
 8003410:	4b6f      	ldr	r3, [pc, #444]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003412:	6a1b      	ldr	r3, [r3, #32]
 8003414:	4a6e      	ldr	r2, [pc, #440]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003416:	f043 0301 	orr.w	r3, r3, #1
 800341a:	6213      	str	r3, [r2, #32]
 800341c:	e02d      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	68db      	ldr	r3, [r3, #12]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10c      	bne.n	8003440 <HAL_RCC_OscConfig+0x334>
 8003426:	4b6a      	ldr	r3, [pc, #424]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a69      	ldr	r2, [pc, #420]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800342c:	f023 0301 	bic.w	r3, r3, #1
 8003430:	6213      	str	r3, [r2, #32]
 8003432:	4b67      	ldr	r3, [pc, #412]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	4a66      	ldr	r2, [pc, #408]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003438:	f023 0304 	bic.w	r3, r3, #4
 800343c:	6213      	str	r3, [r2, #32]
 800343e:	e01c      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	2b05      	cmp	r3, #5
 8003446:	d10c      	bne.n	8003462 <HAL_RCC_OscConfig+0x356>
 8003448:	4b61      	ldr	r3, [pc, #388]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344a:	6a1b      	ldr	r3, [r3, #32]
 800344c:	4a60      	ldr	r2, [pc, #384]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800344e:	f043 0304 	orr.w	r3, r3, #4
 8003452:	6213      	str	r3, [r2, #32]
 8003454:	4b5e      	ldr	r3, [pc, #376]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003456:	6a1b      	ldr	r3, [r3, #32]
 8003458:	4a5d      	ldr	r2, [pc, #372]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800345a:	f043 0301 	orr.w	r3, r3, #1
 800345e:	6213      	str	r3, [r2, #32]
 8003460:	e00b      	b.n	800347a <HAL_RCC_OscConfig+0x36e>
 8003462:	4b5b      	ldr	r3, [pc, #364]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003464:	6a1b      	ldr	r3, [r3, #32]
 8003466:	4a5a      	ldr	r2, [pc, #360]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003468:	f023 0301 	bic.w	r3, r3, #1
 800346c:	6213      	str	r3, [r2, #32]
 800346e:	4b58      	ldr	r3, [pc, #352]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	4a57      	ldr	r2, [pc, #348]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003474:	f023 0304 	bic.w	r3, r3, #4
 8003478:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d015      	beq.n	80034ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003482:	f7fe fdc3 	bl	800200c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003488:	e00a      	b.n	80034a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800348a:	f7fe fdbf 	bl	800200c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003498:	4293      	cmp	r3, r2
 800349a:	d901      	bls.n	80034a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800349c:	2303      	movs	r3, #3
 800349e:	e0b1      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034a0:	4b4b      	ldr	r3, [pc, #300]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034a2:	6a1b      	ldr	r3, [r3, #32]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d0ee      	beq.n	800348a <HAL_RCC_OscConfig+0x37e>
 80034ac:	e014      	b.n	80034d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ae:	f7fe fdad 	bl	800200c <HAL_GetTick>
 80034b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034b4:	e00a      	b.n	80034cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034b6:	f7fe fda9 	bl	800200c <HAL_GetTick>
 80034ba:	4602      	mov	r2, r0
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	1ad3      	subs	r3, r2, r3
 80034c0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e09b      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80034cc:	4b40      	ldr	r3, [pc, #256]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1ee      	bne.n	80034b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80034d8:	7dfb      	ldrb	r3, [r7, #23]
 80034da:	2b01      	cmp	r3, #1
 80034dc:	d105      	bne.n	80034ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80034de:	4b3c      	ldr	r3, [pc, #240]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e0:	69db      	ldr	r3, [r3, #28]
 80034e2:	4a3b      	ldr	r2, [pc, #236]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80034e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	f000 8087 	beq.w	8003602 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80034f4:	4b36      	ldr	r3, [pc, #216]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d061      	beq.n	80035c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	69db      	ldr	r3, [r3, #28]
 8003504:	2b02      	cmp	r3, #2
 8003506:	d146      	bne.n	8003596 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003508:	4b33      	ldr	r3, [pc, #204]	@ (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800350a:	2200      	movs	r2, #0
 800350c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350e:	f7fe fd7d 	bl	800200c <HAL_GetTick>
 8003512:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003514:	e008      	b.n	8003528 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003516:	f7fe fd79 	bl	800200c <HAL_GetTick>
 800351a:	4602      	mov	r2, r0
 800351c:	693b      	ldr	r3, [r7, #16]
 800351e:	1ad3      	subs	r3, r2, r3
 8003520:	2b02      	cmp	r3, #2
 8003522:	d901      	bls.n	8003528 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e06d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003528:	4b29      	ldr	r3, [pc, #164]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d1f0      	bne.n	8003516 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	6a1b      	ldr	r3, [r3, #32]
 8003538:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800353c:	d108      	bne.n	8003550 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800353e:	4b24      	ldr	r3, [pc, #144]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4921      	ldr	r1, [pc, #132]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800354c:	4313      	orrs	r3, r2
 800354e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003550:	4b1f      	ldr	r3, [pc, #124]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	6a19      	ldr	r1, [r3, #32]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003560:	430b      	orrs	r3, r1
 8003562:	491b      	ldr	r1, [pc, #108]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 8003564:	4313      	orrs	r3, r2
 8003566:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003568:	4b1b      	ldr	r3, [pc, #108]	@ (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 800356a:	2201      	movs	r2, #1
 800356c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356e:	f7fe fd4d 	bl	800200c <HAL_GetTick>
 8003572:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003574:	e008      	b.n	8003588 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003576:	f7fe fd49 	bl	800200c <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	2b02      	cmp	r3, #2
 8003582:	d901      	bls.n	8003588 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003584:	2303      	movs	r3, #3
 8003586:	e03d      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003588:	4b11      	ldr	r3, [pc, #68]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003590:	2b00      	cmp	r3, #0
 8003592:	d0f0      	beq.n	8003576 <HAL_RCC_OscConfig+0x46a>
 8003594:	e035      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003596:	4b10      	ldr	r3, [pc, #64]	@ (80035d8 <HAL_RCC_OscConfig+0x4cc>)
 8003598:	2200      	movs	r2, #0
 800359a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800359c:	f7fe fd36 	bl	800200c <HAL_GetTick>
 80035a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035a2:	e008      	b.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035a4:	f7fe fd32 	bl	800200c <HAL_GetTick>
 80035a8:	4602      	mov	r2, r0
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	1ad3      	subs	r3, r2, r3
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d901      	bls.n	80035b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80035b2:	2303      	movs	r3, #3
 80035b4:	e026      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b6:	4b06      	ldr	r3, [pc, #24]	@ (80035d0 <HAL_RCC_OscConfig+0x4c4>)
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d1f0      	bne.n	80035a4 <HAL_RCC_OscConfig+0x498>
 80035c2:	e01e      	b.n	8003602 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	69db      	ldr	r3, [r3, #28]
 80035c8:	2b01      	cmp	r3, #1
 80035ca:	d107      	bne.n	80035dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e019      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
 80035d0:	40021000 	.word	0x40021000
 80035d4:	40007000 	.word	0x40007000
 80035d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_OscConfig+0x500>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6a1b      	ldr	r3, [r3, #32]
 80035ec:	429a      	cmp	r2, r3
 80035ee:	d106      	bne.n	80035fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d001      	beq.n	8003602 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e000      	b.n	8003604 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003602:	2300      	movs	r3, #0
}
 8003604:	4618      	mov	r0, r3
 8003606:	3718      	adds	r7, #24
 8003608:	46bd      	mov	sp, r7
 800360a:	bd80      	pop	{r7, pc}
 800360c:	40021000 	.word	0x40021000

08003610 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b084      	sub	sp, #16
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d101      	bne.n	8003624 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e0d0      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003624:	4b6a      	ldr	r3, [pc, #424]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d910      	bls.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b67      	ldr	r3, [pc, #412]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4965      	ldr	r1, [pc, #404]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b63      	ldr	r3, [pc, #396]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e0b8      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0302 	and.w	r3, r3, #2
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f003 0304 	and.w	r3, r3, #4
 8003668:	2b00      	cmp	r3, #0
 800366a:	d005      	beq.n	8003678 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800366c:	4b59      	ldr	r3, [pc, #356]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	4a58      	ldr	r2, [pc, #352]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003672:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003676:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f003 0308 	and.w	r3, r3, #8
 8003680:	2b00      	cmp	r3, #0
 8003682:	d005      	beq.n	8003690 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003684:	4b53      	ldr	r3, [pc, #332]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a52      	ldr	r2, [pc, #328]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800368a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800368e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003690:	4b50      	ldr	r3, [pc, #320]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	494d      	ldr	r1, [pc, #308]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800369e:	4313      	orrs	r3, r2
 80036a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d040      	beq.n	8003730 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	2b01      	cmp	r3, #1
 80036b4:	d107      	bne.n	80036c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036b6:	4b47      	ldr	r3, [pc, #284]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d115      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c2:	2301      	movs	r3, #1
 80036c4:	e07f      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	685b      	ldr	r3, [r3, #4]
 80036ca:	2b02      	cmp	r3, #2
 80036cc:	d107      	bne.n	80036de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ce:	4b41      	ldr	r3, [pc, #260]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d109      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e073      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036de:	4b3d      	ldr	r3, [pc, #244]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	f003 0302 	and.w	r3, r3, #2
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d101      	bne.n	80036ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e06b      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036ee:	4b39      	ldr	r3, [pc, #228]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036f0:	685b      	ldr	r3, [r3, #4]
 80036f2:	f023 0203 	bic.w	r2, r3, #3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	4936      	ldr	r1, [pc, #216]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80036fc:	4313      	orrs	r3, r2
 80036fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003700:	f7fe fc84 	bl	800200c <HAL_GetTick>
 8003704:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003706:	e00a      	b.n	800371e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003708:	f7fe fc80 	bl	800200c <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e053      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800371e:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	f003 020c 	and.w	r2, r3, #12
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	429a      	cmp	r2, r3
 800372e:	d1eb      	bne.n	8003708 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003730:	4b27      	ldr	r3, [pc, #156]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0307 	and.w	r3, r3, #7
 8003738:	683a      	ldr	r2, [r7, #0]
 800373a:	429a      	cmp	r2, r3
 800373c:	d210      	bcs.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800373e:	4b24      	ldr	r3, [pc, #144]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f023 0207 	bic.w	r2, r3, #7
 8003746:	4922      	ldr	r1, [pc, #136]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	4313      	orrs	r3, r2
 800374c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800374e:	4b20      	ldr	r3, [pc, #128]	@ (80037d0 <HAL_RCC_ClockConfig+0x1c0>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f003 0307 	and.w	r3, r3, #7
 8003756:	683a      	ldr	r2, [r7, #0]
 8003758:	429a      	cmp	r2, r3
 800375a:	d001      	beq.n	8003760 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e032      	b.n	80037c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0304 	and.w	r3, r3, #4
 8003768:	2b00      	cmp	r3, #0
 800376a:	d008      	beq.n	800377e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800376c:	4b19      	ldr	r3, [pc, #100]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	4916      	ldr	r1, [pc, #88]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800377a:	4313      	orrs	r3, r2
 800377c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d009      	beq.n	800379e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800378a:	4b12      	ldr	r3, [pc, #72]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	00db      	lsls	r3, r3, #3
 8003798:	490e      	ldr	r1, [pc, #56]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 800379a:	4313      	orrs	r3, r2
 800379c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800379e:	f000 f821 	bl	80037e4 <HAL_RCC_GetSysClockFreq>
 80037a2:	4602      	mov	r2, r0
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_ClockConfig+0x1c4>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	091b      	lsrs	r3, r3, #4
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	490a      	ldr	r1, [pc, #40]	@ (80037d8 <HAL_RCC_ClockConfig+0x1c8>)
 80037b0:	5ccb      	ldrb	r3, [r1, r3]
 80037b2:	fa22 f303 	lsr.w	r3, r2, r3
 80037b6:	4a09      	ldr	r2, [pc, #36]	@ (80037dc <HAL_RCC_ClockConfig+0x1cc>)
 80037b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80037ba:	4b09      	ldr	r3, [pc, #36]	@ (80037e0 <HAL_RCC_ClockConfig+0x1d0>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fe fb2e 	bl	8001e20 <HAL_InitTick>

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40022000 	.word	0x40022000
 80037d4:	40021000 	.word	0x40021000
 80037d8:	08008944 	.word	0x08008944
 80037dc:	20000008 	.word	0x20000008
 80037e0:	2000000c 	.word	0x2000000c

080037e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b087      	sub	sp, #28
 80037e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	2300      	movs	r3, #0
 80037f0:	60bb      	str	r3, [r7, #8]
 80037f2:	2300      	movs	r3, #0
 80037f4:	617b      	str	r3, [r7, #20]
 80037f6:	2300      	movs	r3, #0
 80037f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80037fe:	4b1e      	ldr	r3, [pc, #120]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x94>)
 8003800:	685b      	ldr	r3, [r3, #4]
 8003802:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f003 030c 	and.w	r3, r3, #12
 800380a:	2b04      	cmp	r3, #4
 800380c:	d002      	beq.n	8003814 <HAL_RCC_GetSysClockFreq+0x30>
 800380e:	2b08      	cmp	r3, #8
 8003810:	d003      	beq.n	800381a <HAL_RCC_GetSysClockFreq+0x36>
 8003812:	e027      	b.n	8003864 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003816:	613b      	str	r3, [r7, #16]
      break;
 8003818:	e027      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	0c9b      	lsrs	r3, r3, #18
 800381e:	f003 030f 	and.w	r3, r3, #15
 8003822:	4a17      	ldr	r2, [pc, #92]	@ (8003880 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003824:	5cd3      	ldrb	r3, [r2, r3]
 8003826:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <HAL_RCC_GetSysClockFreq+0x94>)
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	0c5b      	lsrs	r3, r3, #17
 8003838:	f003 0301 	and.w	r3, r3, #1
 800383c:	4a11      	ldr	r2, [pc, #68]	@ (8003884 <HAL_RCC_GetSysClockFreq+0xa0>)
 800383e:	5cd3      	ldrb	r3, [r2, r3]
 8003840:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	4a0d      	ldr	r2, [pc, #52]	@ (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003846:	fb03 f202 	mul.w	r2, r3, r2
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003850:	617b      	str	r3, [r7, #20]
 8003852:	e004      	b.n	800385e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a0c      	ldr	r2, [pc, #48]	@ (8003888 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003858:	fb02 f303 	mul.w	r3, r2, r3
 800385c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	613b      	str	r3, [r7, #16]
      break;
 8003862:	e002      	b.n	800386a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003864:	4b05      	ldr	r3, [pc, #20]	@ (800387c <HAL_RCC_GetSysClockFreq+0x98>)
 8003866:	613b      	str	r3, [r7, #16]
      break;
 8003868:	bf00      	nop
    }
  }
  return sysclockfreq;
 800386a:	693b      	ldr	r3, [r7, #16]
}
 800386c:	4618      	mov	r0, r3
 800386e:	371c      	adds	r7, #28
 8003870:	46bd      	mov	sp, r7
 8003872:	bc80      	pop	{r7}
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000
 800387c:	007a1200 	.word	0x007a1200
 8003880:	0800895c 	.word	0x0800895c
 8003884:	0800896c 	.word	0x0800896c
 8003888:	003d0900 	.word	0x003d0900

0800388c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003890:	4b02      	ldr	r3, [pc, #8]	@ (800389c <HAL_RCC_GetHCLKFreq+0x10>)
 8003892:	681b      	ldr	r3, [r3, #0]
}
 8003894:	4618      	mov	r0, r3
 8003896:	46bd      	mov	sp, r7
 8003898:	bc80      	pop	{r7}
 800389a:	4770      	bx	lr
 800389c:	20000008 	.word	0x20000008

080038a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80038a4:	f7ff fff2 	bl	800388c <HAL_RCC_GetHCLKFreq>
 80038a8:	4602      	mov	r2, r0
 80038aa:	4b05      	ldr	r3, [pc, #20]	@ (80038c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	0a1b      	lsrs	r3, r3, #8
 80038b0:	f003 0307 	and.w	r3, r3, #7
 80038b4:	4903      	ldr	r1, [pc, #12]	@ (80038c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038b6:	5ccb      	ldrb	r3, [r1, r3]
 80038b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038bc:	4618      	mov	r0, r3
 80038be:	bd80      	pop	{r7, pc}
 80038c0:	40021000 	.word	0x40021000
 80038c4:	08008954 	.word	0x08008954

080038c8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b083      	sub	sp, #12
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	6078      	str	r0, [r7, #4]
 80038d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	220f      	movs	r2, #15
 80038d6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80038d8:	4b11      	ldr	r3, [pc, #68]	@ (8003920 <HAL_RCC_GetClockConfig+0x58>)
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	f003 0203 	and.w	r2, r3, #3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80038e4:	4b0e      	ldr	r3, [pc, #56]	@ (8003920 <HAL_RCC_GetClockConfig+0x58>)
 80038e6:	685b      	ldr	r3, [r3, #4]
 80038e8:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80038f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003920 <HAL_RCC_GetClockConfig+0x58>)
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80038fc:	4b08      	ldr	r3, [pc, #32]	@ (8003920 <HAL_RCC_GetClockConfig+0x58>)
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	08db      	lsrs	r3, r3, #3
 8003902:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800390a:	4b06      	ldr	r3, [pc, #24]	@ (8003924 <HAL_RCC_GetClockConfig+0x5c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f003 0207 	and.w	r2, r3, #7
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003916:	bf00      	nop
 8003918:	370c      	adds	r7, #12
 800391a:	46bd      	mov	sp, r7
 800391c:	bc80      	pop	{r7}
 800391e:	4770      	bx	lr
 8003920:	40021000 	.word	0x40021000
 8003924:	40022000 	.word	0x40022000

08003928 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003930:	4b0a      	ldr	r3, [pc, #40]	@ (800395c <RCC_Delay+0x34>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a0a      	ldr	r2, [pc, #40]	@ (8003960 <RCC_Delay+0x38>)
 8003936:	fba2 2303 	umull	r2, r3, r2, r3
 800393a:	0a5b      	lsrs	r3, r3, #9
 800393c:	687a      	ldr	r2, [r7, #4]
 800393e:	fb02 f303 	mul.w	r3, r2, r3
 8003942:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003944:	bf00      	nop
  }
  while (Delay --);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	1e5a      	subs	r2, r3, #1
 800394a:	60fa      	str	r2, [r7, #12]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d1f9      	bne.n	8003944 <RCC_Delay+0x1c>
}
 8003950:	bf00      	nop
 8003952:	bf00      	nop
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr
 800395c:	20000008 	.word	0x20000008
 8003960:	10624dd3 	.word	0x10624dd3

08003964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b082      	sub	sp, #8
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2b00      	cmp	r3, #0
 8003970:	d101      	bne.n	8003976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003972:	2301      	movs	r3, #1
 8003974:	e041      	b.n	80039fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800397c:	b2db      	uxtb	r3, r3
 800397e:	2b00      	cmp	r3, #0
 8003980:	d106      	bne.n	8003990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f839 	bl	8003a02 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	3304      	adds	r3, #4
 80039a0:	4619      	mov	r1, r3
 80039a2:	4610      	mov	r0, r2
 80039a4:	f000 f99c 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2201      	movs	r2, #1
 80039ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2201      	movs	r2, #1
 80039b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2201      	movs	r2, #1
 80039cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2201      	movs	r2, #1
 80039d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2201      	movs	r2, #1
 80039e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2201      	movs	r2, #1
 80039ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2201      	movs	r2, #1
 80039f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3708      	adds	r7, #8
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a22:	b2db      	uxtb	r3, r3
 8003a24:	2b01      	cmp	r3, #1
 8003a26:	d001      	beq.n	8003a2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	e03a      	b.n	8003aa2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2202      	movs	r2, #2
 8003a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	68da      	ldr	r2, [r3, #12]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f042 0201 	orr.w	r2, r2, #1
 8003a42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a18      	ldr	r2, [pc, #96]	@ (8003aac <HAL_TIM_Base_Start_IT+0x98>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d00e      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x58>
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a56:	d009      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x58>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a14      	ldr	r2, [pc, #80]	@ (8003ab0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d004      	beq.n	8003a6c <HAL_TIM_Base_Start_IT+0x58>
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	4a13      	ldr	r2, [pc, #76]	@ (8003ab4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d111      	bne.n	8003a90 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	689b      	ldr	r3, [r3, #8]
 8003a72:	f003 0307 	and.w	r3, r3, #7
 8003a76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	2b06      	cmp	r3, #6
 8003a7c:	d010      	beq.n	8003aa0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	681a      	ldr	r2, [r3, #0]
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f042 0201 	orr.w	r2, r2, #1
 8003a8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a8e:	e007      	b.n	8003aa0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	681a      	ldr	r2, [r3, #0]
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f042 0201 	orr.w	r2, r2, #1
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003aa0:	2300      	movs	r3, #0
}
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	3714      	adds	r7, #20
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	40012c00 	.word	0x40012c00
 8003ab0:	40000400 	.word	0x40000400
 8003ab4:	40000800 	.word	0x40000800

08003ab8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68db      	ldr	r3, [r3, #12]
 8003ac6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d020      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d01b      	beq.n	8003b1c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f06f 0202 	mvn.w	r2, #2
 8003aec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2201      	movs	r2, #1
 8003af2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	f003 0303 	and.w	r3, r3, #3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d003      	beq.n	8003b0a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b02:	6878      	ldr	r0, [r7, #4]
 8003b04:	f000 f8d1 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003b08:	e005      	b.n	8003b16 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 f8c4 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b10:	6878      	ldr	r0, [r7, #4]
 8003b12:	f000 f8d3 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003b1c:	68bb      	ldr	r3, [r7, #8]
 8003b1e:	f003 0304 	and.w	r3, r3, #4
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d020      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	f003 0304 	and.w	r3, r3, #4
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d01b      	beq.n	8003b68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f06f 0204 	mvn.w	r2, #4
 8003b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2202      	movs	r2, #2
 8003b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	699b      	ldr	r3, [r3, #24]
 8003b46:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d003      	beq.n	8003b56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b4e:	6878      	ldr	r0, [r7, #4]
 8003b50:	f000 f8ab 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003b54:	e005      	b.n	8003b62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 f89e 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 f8ad 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2200      	movs	r2, #0
 8003b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	f003 0308 	and.w	r3, r3, #8
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d020      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f003 0308 	and.w	r3, r3, #8
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d01b      	beq.n	8003bb4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f06f 0208 	mvn.w	r2, #8
 8003b84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2204      	movs	r2, #4
 8003b8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	f003 0303 	and.w	r3, r3, #3
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b9a:	6878      	ldr	r0, [r7, #4]
 8003b9c:	f000 f885 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003ba0:	e005      	b.n	8003bae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 f878 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f887 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	f003 0310 	and.w	r3, r3, #16
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d020      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f003 0310 	and.w	r3, r3, #16
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d01b      	beq.n	8003c00 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f06f 0210 	mvn.w	r2, #16
 8003bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2208      	movs	r2, #8
 8003bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	69db      	ldr	r3, [r3, #28]
 8003bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d003      	beq.n	8003bee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f85f 	bl	8003caa <HAL_TIM_IC_CaptureCallback>
 8003bec:	e005      	b.n	8003bfa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bee:	6878      	ldr	r0, [r7, #4]
 8003bf0:	f000 f852 	bl	8003c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f861 	bl	8003cbc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003c00:	68bb      	ldr	r3, [r7, #8]
 8003c02:	f003 0301 	and.w	r3, r3, #1
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d00c      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d007      	beq.n	8003c24 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0201 	mvn.w	r2, #1
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7fd fbbc 	bl	800139c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	d00c      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d007      	beq.n	8003c48 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f000 f8c3 	bl	8003dce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d00c      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d007      	beq.n	8003c6c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f831 	bl	8003cce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003c6c:	68bb      	ldr	r3, [r7, #8]
 8003c6e:	f003 0320 	and.w	r3, r3, #32
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d00c      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f003 0320 	and.w	r3, r3, #32
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d007      	beq.n	8003c90 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	f06f 0220 	mvn.w	r2, #32
 8003c88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f896 	bl	8003dbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003c90:	bf00      	nop
 8003c92:	3710      	adds	r7, #16
 8003c94:	46bd      	mov	sp, r7
 8003c96:	bd80      	pop	{r7, pc}

08003c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b083      	sub	sp, #12
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ca0:	bf00      	nop
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bc80      	pop	{r7}
 8003ca8:	4770      	bx	lr

08003caa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003caa:	b480      	push	{r7}
 8003cac:	b083      	sub	sp, #12
 8003cae:	af00      	add	r7, sp, #0
 8003cb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003cb2:	bf00      	nop
 8003cb4:	370c      	adds	r7, #12
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bc80      	pop	{r7}
 8003cba:	4770      	bx	lr

08003cbc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bc80      	pop	{r7}
 8003ccc:	4770      	bx	lr

08003cce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003cce:	b480      	push	{r7}
 8003cd0:	b083      	sub	sp, #12
 8003cd2:	af00      	add	r7, sp, #0
 8003cd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003cd6:	bf00      	nop
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a2f      	ldr	r2, [pc, #188]	@ (8003db0 <TIM_Base_SetConfig+0xd0>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00b      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cfe:	d007      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a2c      	ldr	r2, [pc, #176]	@ (8003db4 <TIM_Base_SetConfig+0xd4>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d003      	beq.n	8003d10 <TIM_Base_SetConfig+0x30>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003db8 <TIM_Base_SetConfig+0xd8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d108      	bne.n	8003d22 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	685b      	ldr	r3, [r3, #4]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a22      	ldr	r2, [pc, #136]	@ (8003db0 <TIM_Base_SetConfig+0xd0>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d00b      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d30:	d007      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a1f      	ldr	r2, [pc, #124]	@ (8003db4 <TIM_Base_SetConfig+0xd4>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d003      	beq.n	8003d42 <TIM_Base_SetConfig+0x62>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a1e      	ldr	r2, [pc, #120]	@ (8003db8 <TIM_Base_SetConfig+0xd8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d108      	bne.n	8003d54 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	68db      	ldr	r3, [r3, #12]
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	4313      	orrs	r3, r2
 8003d52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	68fa      	ldr	r2, [r7, #12]
 8003d66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	689a      	ldr	r2, [r3, #8]
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d70:	683b      	ldr	r3, [r7, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	4a0d      	ldr	r2, [pc, #52]	@ (8003db0 <TIM_Base_SetConfig+0xd0>)
 8003d7c:	4293      	cmp	r3, r2
 8003d7e:	d103      	bne.n	8003d88 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	f003 0301 	and.w	r3, r3, #1
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d005      	beq.n	8003da6 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	691b      	ldr	r3, [r3, #16]
 8003d9e:	f023 0201 	bic.w	r2, r3, #1
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	611a      	str	r2, [r3, #16]
  }
}
 8003da6:	bf00      	nop
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bc80      	pop	{r7}
 8003dae:	4770      	bx	lr
 8003db0:	40012c00 	.word	0x40012c00
 8003db4:	40000400 	.word	0x40000400
 8003db8:	40000800 	.word	0x40000800

08003dbc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dc4:	bf00      	nop
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bc80      	pop	{r7}
 8003dcc:	4770      	bx	lr

08003dce <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dce:	b480      	push	{r7}
 8003dd0:	b083      	sub	sp, #12
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dd6:	bf00      	nop
 8003dd8:	370c      	adds	r7, #12
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bc80      	pop	{r7}
 8003dde:	4770      	bx	lr

08003de0 <__NVIC_SetPriority>:
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	4603      	mov	r3, r0
 8003de8:	6039      	str	r1, [r7, #0]
 8003dea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	db0a      	blt.n	8003e0a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	b2da      	uxtb	r2, r3
 8003df8:	490c      	ldr	r1, [pc, #48]	@ (8003e2c <__NVIC_SetPriority+0x4c>)
 8003dfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dfe:	0112      	lsls	r2, r2, #4
 8003e00:	b2d2      	uxtb	r2, r2
 8003e02:	440b      	add	r3, r1
 8003e04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003e08:	e00a      	b.n	8003e20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	b2da      	uxtb	r2, r3
 8003e0e:	4908      	ldr	r1, [pc, #32]	@ (8003e30 <__NVIC_SetPriority+0x50>)
 8003e10:	79fb      	ldrb	r3, [r7, #7]
 8003e12:	f003 030f 	and.w	r3, r3, #15
 8003e16:	3b04      	subs	r3, #4
 8003e18:	0112      	lsls	r2, r2, #4
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	761a      	strb	r2, [r3, #24]
}
 8003e20:	bf00      	nop
 8003e22:	370c      	adds	r7, #12
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bc80      	pop	{r7}
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	e000e100 	.word	0xe000e100
 8003e30:	e000ed00 	.word	0xe000ed00

08003e34 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003e34:	b580      	push	{r7, lr}
 8003e36:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003e38:	4b05      	ldr	r3, [pc, #20]	@ (8003e50 <SysTick_Handler+0x1c>)
 8003e3a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003e3c:	f001 fd38 	bl	80058b0 <xTaskGetSchedulerState>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d001      	beq.n	8003e4a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003e46:	f002 fadf 	bl	8006408 <xPortSysTickHandler>
  }
}
 8003e4a:	bf00      	nop
 8003e4c:	bd80      	pop	{r7, pc}
 8003e4e:	bf00      	nop
 8003e50:	e000e010 	.word	0xe000e010

08003e54 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003e54:	b580      	push	{r7, lr}
 8003e56:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003e58:	2100      	movs	r1, #0
 8003e5a:	f06f 0004 	mvn.w	r0, #4
 8003e5e:	f7ff ffbf 	bl	8003de0 <__NVIC_SetPriority>
#endif
}
 8003e62:	bf00      	nop
 8003e64:	bd80      	pop	{r7, pc}
	...

08003e68 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003e6e:	f3ef 8305 	mrs	r3, IPSR
 8003e72:	603b      	str	r3, [r7, #0]
  return(result);
 8003e74:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d003      	beq.n	8003e82 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003e7a:	f06f 0305 	mvn.w	r3, #5
 8003e7e:	607b      	str	r3, [r7, #4]
 8003e80:	e00c      	b.n	8003e9c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003e82:	4b09      	ldr	r3, [pc, #36]	@ (8003ea8 <osKernelInitialize+0x40>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d105      	bne.n	8003e96 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003e8a:	4b07      	ldr	r3, [pc, #28]	@ (8003ea8 <osKernelInitialize+0x40>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003e90:	2300      	movs	r3, #0
 8003e92:	607b      	str	r3, [r7, #4]
 8003e94:	e002      	b.n	8003e9c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003e96:	f04f 33ff 	mov.w	r3, #4294967295
 8003e9a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003e9c:	687b      	ldr	r3, [r7, #4]
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr
 8003ea8:	2000053c 	.word	0x2000053c

08003eac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b082      	sub	sp, #8
 8003eb0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003eb2:	f3ef 8305 	mrs	r3, IPSR
 8003eb6:	603b      	str	r3, [r7, #0]
  return(result);
 8003eb8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003ebe:	f06f 0305 	mvn.w	r3, #5
 8003ec2:	607b      	str	r3, [r7, #4]
 8003ec4:	e010      	b.n	8003ee8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003ec6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ef4 <osKernelStart+0x48>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d109      	bne.n	8003ee2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003ece:	f7ff ffc1 	bl	8003e54 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003ed2:	4b08      	ldr	r3, [pc, #32]	@ (8003ef4 <osKernelStart+0x48>)
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003ed8:	f001 f88a 	bl	8004ff0 <vTaskStartScheduler>
      stat = osOK;
 8003edc:	2300      	movs	r3, #0
 8003ede:	607b      	str	r3, [r7, #4]
 8003ee0:	e002      	b.n	8003ee8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003ee8:	687b      	ldr	r3, [r7, #4]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3708      	adds	r7, #8
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
 8003ef2:	bf00      	nop
 8003ef4:	2000053c 	.word	0x2000053c

08003ef8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003ef8:	b580      	push	{r7, lr}
 8003efa:	b08e      	sub	sp, #56	@ 0x38
 8003efc:	af04      	add	r7, sp, #16
 8003efe:	60f8      	str	r0, [r7, #12]
 8003f00:	60b9      	str	r1, [r7, #8]
 8003f02:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f08:	f3ef 8305 	mrs	r3, IPSR
 8003f0c:	617b      	str	r3, [r7, #20]
  return(result);
 8003f0e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d17e      	bne.n	8004012 <osThreadNew+0x11a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d07b      	beq.n	8004012 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003f1a:	2380      	movs	r3, #128	@ 0x80
 8003f1c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003f1e:	2318      	movs	r3, #24
 8003f20:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8003f26:	f04f 33ff 	mov.w	r3, #4294967295
 8003f2a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d045      	beq.n	8003fbe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d002      	beq.n	8003f40 <osThreadNew+0x48>
        name = attr->name;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d002      	beq.n	8003f4e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	699b      	ldr	r3, [r3, #24]
 8003f4c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003f4e:	69fb      	ldr	r3, [r7, #28]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d008      	beq.n	8003f66 <osThreadNew+0x6e>
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	2b38      	cmp	r3, #56	@ 0x38
 8003f58:	d805      	bhi.n	8003f66 <osThreadNew+0x6e>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d001      	beq.n	8003f6a <osThreadNew+0x72>
        return (NULL);
 8003f66:	2300      	movs	r3, #0
 8003f68:	e054      	b.n	8004014 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	695b      	ldr	r3, [r3, #20]
 8003f76:	089b      	lsrs	r3, r3, #2
 8003f78:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00e      	beq.n	8003fa0 <osThreadNew+0xa8>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	68db      	ldr	r3, [r3, #12]
 8003f86:	2ba7      	cmp	r3, #167	@ 0xa7
 8003f88:	d90a      	bls.n	8003fa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d006      	beq.n	8003fa0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	695b      	ldr	r3, [r3, #20]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d002      	beq.n	8003fa0 <osThreadNew+0xa8>
        mem = 1;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	61bb      	str	r3, [r7, #24]
 8003f9e:	e010      	b.n	8003fc2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	689b      	ldr	r3, [r3, #8]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d10c      	bne.n	8003fc2 <osThreadNew+0xca>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d108      	bne.n	8003fc2 <osThreadNew+0xca>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	691b      	ldr	r3, [r3, #16]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d104      	bne.n	8003fc2 <osThreadNew+0xca>
          mem = 0;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	61bb      	str	r3, [r7, #24]
 8003fbc:	e001      	b.n	8003fc2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003fbe:	2300      	movs	r3, #0
 8003fc0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d110      	bne.n	8003fea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003fcc:	687a      	ldr	r2, [r7, #4]
 8003fce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003fd0:	9202      	str	r2, [sp, #8]
 8003fd2:	9301      	str	r3, [sp, #4]
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	9300      	str	r3, [sp, #0]
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	6a3a      	ldr	r2, [r7, #32]
 8003fdc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	f000 fe12 	bl	8004c08 <xTaskCreateStatic>
 8003fe4:	4603      	mov	r3, r0
 8003fe6:	613b      	str	r3, [r7, #16]
 8003fe8:	e013      	b.n	8004012 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003fea:	69bb      	ldr	r3, [r7, #24]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d110      	bne.n	8004012 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	b29a      	uxth	r2, r3
 8003ff4:	f107 0310 	add.w	r3, r7, #16
 8003ff8:	9301      	str	r3, [sp, #4]
 8003ffa:	69fb      	ldr	r3, [r7, #28]
 8003ffc:	9300      	str	r3, [sp, #0]
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004002:	68f8      	ldr	r0, [r7, #12]
 8004004:	f000 fe60 	bl	8004cc8 <xTaskCreate>
 8004008:	4603      	mov	r3, r0
 800400a:	2b01      	cmp	r3, #1
 800400c:	d001      	beq.n	8004012 <osThreadNew+0x11a>
            hTask = NULL;
 800400e:	2300      	movs	r3, #0
 8004010:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004012:	693b      	ldr	r3, [r7, #16]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3728      	adds	r7, #40	@ 0x28
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}

0800401c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004024:	f3ef 8305 	mrs	r3, IPSR
 8004028:	60bb      	str	r3, [r7, #8]
  return(result);
 800402a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800402c:	2b00      	cmp	r3, #0
 800402e:	d003      	beq.n	8004038 <osDelay+0x1c>
    stat = osErrorISR;
 8004030:	f06f 0305 	mvn.w	r3, #5
 8004034:	60fb      	str	r3, [r7, #12]
 8004036:	e007      	b.n	8004048 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	f000 ff9e 	bl	8004f84 <vTaskDelay>
    }
  }

  return (stat);
 8004048:	68fb      	ldr	r3, [r7, #12]
}
 800404a:	4618      	mov	r0, r3
 800404c:	3710      	adds	r7, #16
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004054:	b480      	push	{r7}
 8004056:	b085      	sub	sp, #20
 8004058:	af00      	add	r7, sp, #0
 800405a:	60f8      	str	r0, [r7, #12]
 800405c:	60b9      	str	r1, [r7, #8]
 800405e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	4a06      	ldr	r2, [pc, #24]	@ (800407c <vApplicationGetIdleTaskMemory+0x28>)
 8004064:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004066:	68bb      	ldr	r3, [r7, #8]
 8004068:	4a05      	ldr	r2, [pc, #20]	@ (8004080 <vApplicationGetIdleTaskMemory+0x2c>)
 800406a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2280      	movs	r2, #128	@ 0x80
 8004070:	601a      	str	r2, [r3, #0]
}
 8004072:	bf00      	nop
 8004074:	3714      	adds	r7, #20
 8004076:	46bd      	mov	sp, r7
 8004078:	bc80      	pop	{r7}
 800407a:	4770      	bx	lr
 800407c:	20000540 	.word	0x20000540
 8004080:	200005e8 	.word	0x200005e8

08004084 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0
 800408a:	60f8      	str	r0, [r7, #12]
 800408c:	60b9      	str	r1, [r7, #8]
 800408e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	4a07      	ldr	r2, [pc, #28]	@ (80040b0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004094:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004096:	68bb      	ldr	r3, [r7, #8]
 8004098:	4a06      	ldr	r2, [pc, #24]	@ (80040b4 <vApplicationGetTimerTaskMemory+0x30>)
 800409a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80040a2:	601a      	str	r2, [r3, #0]
}
 80040a4:	bf00      	nop
 80040a6:	3714      	adds	r7, #20
 80040a8:	46bd      	mov	sp, r7
 80040aa:	bc80      	pop	{r7}
 80040ac:	4770      	bx	lr
 80040ae:	bf00      	nop
 80040b0:	200007e8 	.word	0x200007e8
 80040b4:	20000890 	.word	0x20000890

080040b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	f103 0208 	add.w	r2, r3, #8
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	f04f 32ff 	mov.w	r2, #4294967295
 80040d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	f103 0208 	add.w	r2, r3, #8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f103 0208 	add.w	r2, r3, #8
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80040ec:	bf00      	nop
 80040ee:	370c      	adds	r7, #12
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bc80      	pop	{r7}
 80040f4:	4770      	bx	lr

080040f6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80040f6:	b480      	push	{r7}
 80040f8:	b083      	sub	sp, #12
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2200      	movs	r2, #0
 8004102:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004104:	bf00      	nop
 8004106:	370c      	adds	r7, #12
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr

0800410e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800410e:	b480      	push	{r7}
 8004110:	b085      	sub	sp, #20
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
 8004116:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	683a      	ldr	r2, [r7, #0]
 8004132:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	683a      	ldr	r2, [r7, #0]
 8004138:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800413a:	683b      	ldr	r3, [r7, #0]
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	1c5a      	adds	r2, r3, #1
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	601a      	str	r2, [r3, #0]
}
 800414a:	bf00      	nop
 800414c:	3714      	adds	r7, #20
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004154:	b480      	push	{r7}
 8004156:	b085      	sub	sp, #20
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
 800415c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416a:	d103      	bne.n	8004174 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	691b      	ldr	r3, [r3, #16]
 8004170:	60fb      	str	r3, [r7, #12]
 8004172:	e00c      	b.n	800418e <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	3308      	adds	r3, #8
 8004178:	60fb      	str	r3, [r7, #12]
 800417a:	e002      	b.n	8004182 <vListInsert+0x2e>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	60fb      	str	r3, [r7, #12]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	685b      	ldr	r3, [r3, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d2f6      	bcs.n	800417c <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	685b      	ldr	r3, [r3, #4]
 800419a:	683a      	ldr	r2, [r7, #0]
 800419c:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	68fa      	ldr	r2, [r7, #12]
 80041a2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	bc80      	pop	{r7}
 80041c2:	4770      	bx	lr

080041c4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6892      	ldr	r2, [r2, #8]
 80041da:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	689b      	ldr	r3, [r3, #8]
 80041e0:	687a      	ldr	r2, [r7, #4]
 80041e2:	6852      	ldr	r2, [r2, #4]
 80041e4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	687a      	ldr	r2, [r7, #4]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d103      	bne.n	80041f8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	2200      	movs	r2, #0
 80041fc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	1e5a      	subs	r2, r3, #1
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
}
 800420c:	4618      	mov	r0, r3
 800420e:	3714      	adds	r7, #20
 8004210:	46bd      	mov	sp, r7
 8004212:	bc80      	pop	{r7}
 8004214:	4770      	bx	lr
	...

08004218 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d10b      	bne.n	8004244 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800422c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004230:	f383 8811 	msr	BASEPRI, r3
 8004234:	f3bf 8f6f 	isb	sy
 8004238:	f3bf 8f4f 	dsb	sy
 800423c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800423e:	bf00      	nop
 8004240:	bf00      	nop
 8004242:	e7fd      	b.n	8004240 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004244:	f002 f862 	bl	800630c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004250:	68f9      	ldr	r1, [r7, #12]
 8004252:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	441a      	add	r2, r3
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2200      	movs	r2, #0
 8004262:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681a      	ldr	r2, [r3, #0]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	3b01      	subs	r3, #1
 8004276:	68f9      	ldr	r1, [r7, #12]
 8004278:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800427a:	fb01 f303 	mul.w	r3, r1, r3
 800427e:	441a      	add	r2, r3
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	22ff      	movs	r2, #255	@ 0xff
 8004288:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	22ff      	movs	r2, #255	@ 0xff
 8004290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d114      	bne.n	80042c4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	691b      	ldr	r3, [r3, #16]
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01a      	beq.n	80042d8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	3310      	adds	r3, #16
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 f93c 	bl	8005524 <xTaskRemoveFromEventList>
 80042ac:	4603      	mov	r3, r0
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d012      	beq.n	80042d8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80042b2:	4b0d      	ldr	r3, [pc, #52]	@ (80042e8 <xQueueGenericReset+0xd0>)
 80042b4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	f3bf 8f4f 	dsb	sy
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	e009      	b.n	80042d8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	3310      	adds	r3, #16
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff fef5 	bl	80040b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	3324      	adds	r3, #36	@ 0x24
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7ff fef0 	bl	80040b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80042d8:	f002 f848 	bl	800636c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80042dc:	2301      	movs	r3, #1
}
 80042de:	4618      	mov	r0, r3
 80042e0:	3710      	adds	r7, #16
 80042e2:	46bd      	mov	sp, r7
 80042e4:	bd80      	pop	{r7, pc}
 80042e6:	bf00      	nop
 80042e8:	e000ed04 	.word	0xe000ed04

080042ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b08e      	sub	sp, #56	@ 0x38
 80042f0:	af02      	add	r7, sp, #8
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
 80042f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d10b      	bne.n	8004318 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004300:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004304:	f383 8811 	msr	BASEPRI, r3
 8004308:	f3bf 8f6f 	isb	sy
 800430c:	f3bf 8f4f 	dsb	sy
 8004310:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004312:	bf00      	nop
 8004314:	bf00      	nop
 8004316:	e7fd      	b.n	8004314 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d10b      	bne.n	8004336 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004330:	bf00      	nop
 8004332:	bf00      	nop
 8004334:	e7fd      	b.n	8004332 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d002      	beq.n	8004342 <xQueueGenericCreateStatic+0x56>
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <xQueueGenericCreateStatic+0x5a>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <xQueueGenericCreateStatic+0x5c>
 8004346:	2300      	movs	r3, #0
 8004348:	2b00      	cmp	r3, #0
 800434a:	d10b      	bne.n	8004364 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800434c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004350:	f383 8811 	msr	BASEPRI, r3
 8004354:	f3bf 8f6f 	isb	sy
 8004358:	f3bf 8f4f 	dsb	sy
 800435c:	623b      	str	r3, [r7, #32]
}
 800435e:	bf00      	nop
 8004360:	bf00      	nop
 8004362:	e7fd      	b.n	8004360 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d102      	bne.n	8004370 <xQueueGenericCreateStatic+0x84>
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d101      	bne.n	8004374 <xQueueGenericCreateStatic+0x88>
 8004370:	2301      	movs	r3, #1
 8004372:	e000      	b.n	8004376 <xQueueGenericCreateStatic+0x8a>
 8004374:	2300      	movs	r3, #0
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10b      	bne.n	8004392 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800437a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800437e:	f383 8811 	msr	BASEPRI, r3
 8004382:	f3bf 8f6f 	isb	sy
 8004386:	f3bf 8f4f 	dsb	sy
 800438a:	61fb      	str	r3, [r7, #28]
}
 800438c:	bf00      	nop
 800438e:	bf00      	nop
 8004390:	e7fd      	b.n	800438e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004392:	2350      	movs	r3, #80	@ 0x50
 8004394:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	2b50      	cmp	r3, #80	@ 0x50
 800439a:	d00b      	beq.n	80043b4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800439c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80043a0:	f383 8811 	msr	BASEPRI, r3
 80043a4:	f3bf 8f6f 	isb	sy
 80043a8:	f3bf 8f4f 	dsb	sy
 80043ac:	61bb      	str	r3, [r7, #24]
}
 80043ae:	bf00      	nop
 80043b0:	bf00      	nop
 80043b2:	e7fd      	b.n	80043b0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80043b4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80043b6:	683b      	ldr	r3, [r7, #0]
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80043ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80043c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80043c8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80043cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80043ce:	9300      	str	r3, [sp, #0]
 80043d0:	4613      	mov	r3, r2
 80043d2:	687a      	ldr	r2, [r7, #4]
 80043d4:	68b9      	ldr	r1, [r7, #8]
 80043d6:	68f8      	ldr	r0, [r7, #12]
 80043d8:	f000 f805 	bl	80043e6 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80043dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80043de:	4618      	mov	r0, r3
 80043e0:	3730      	adds	r7, #48	@ 0x30
 80043e2:	46bd      	mov	sp, r7
 80043e4:	bd80      	pop	{r7, pc}

080043e6 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	60f8      	str	r0, [r7, #12]
 80043ee:	60b9      	str	r1, [r7, #8]
 80043f0:	607a      	str	r2, [r7, #4]
 80043f2:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80043f4:	68bb      	ldr	r3, [r7, #8]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d103      	bne.n	8004402 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	69ba      	ldr	r2, [r7, #24]
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	e002      	b.n	8004408 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004402:	69bb      	ldr	r3, [r7, #24]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004408:	69bb      	ldr	r3, [r7, #24]
 800440a:	68fa      	ldr	r2, [r7, #12]
 800440c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004414:	2101      	movs	r1, #1
 8004416:	69b8      	ldr	r0, [r7, #24]
 8004418:	f7ff fefe 	bl	8004218 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800441c:	69bb      	ldr	r3, [r7, #24]
 800441e:	78fa      	ldrb	r2, [r7, #3]
 8004420:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004424:	bf00      	nop
 8004426:	3710      	adds	r7, #16
 8004428:	46bd      	mov	sp, r7
 800442a:	bd80      	pop	{r7, pc}

0800442c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b08e      	sub	sp, #56	@ 0x38
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <xQueueGenericSend+0x34>
	__asm volatile
 8004448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800444c:	f383 8811 	msr	BASEPRI, r3
 8004450:	f3bf 8f6f 	isb	sy
 8004454:	f3bf 8f4f 	dsb	sy
 8004458:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800445a:	bf00      	nop
 800445c:	bf00      	nop
 800445e:	e7fd      	b.n	800445c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d103      	bne.n	800446e <xQueueGenericSend+0x42>
 8004466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800446a:	2b00      	cmp	r3, #0
 800446c:	d101      	bne.n	8004472 <xQueueGenericSend+0x46>
 800446e:	2301      	movs	r3, #1
 8004470:	e000      	b.n	8004474 <xQueueGenericSend+0x48>
 8004472:	2300      	movs	r3, #0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10b      	bne.n	8004490 <xQueueGenericSend+0x64>
	__asm volatile
 8004478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800447c:	f383 8811 	msr	BASEPRI, r3
 8004480:	f3bf 8f6f 	isb	sy
 8004484:	f3bf 8f4f 	dsb	sy
 8004488:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800448a:	bf00      	nop
 800448c:	bf00      	nop
 800448e:	e7fd      	b.n	800448c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b02      	cmp	r3, #2
 8004494:	d103      	bne.n	800449e <xQueueGenericSend+0x72>
 8004496:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <xQueueGenericSend+0x76>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <xQueueGenericSend+0x78>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10b      	bne.n	80044c0 <xQueueGenericSend+0x94>
	__asm volatile
 80044a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	623b      	str	r3, [r7, #32]
}
 80044ba:	bf00      	nop
 80044bc:	bf00      	nop
 80044be:	e7fd      	b.n	80044bc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80044c0:	f001 f9f6 	bl	80058b0 <xTaskGetSchedulerState>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <xQueueGenericSend+0xa4>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d101      	bne.n	80044d4 <xQueueGenericSend+0xa8>
 80044d0:	2301      	movs	r3, #1
 80044d2:	e000      	b.n	80044d6 <xQueueGenericSend+0xaa>
 80044d4:	2300      	movs	r3, #0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10b      	bne.n	80044f2 <xQueueGenericSend+0xc6>
	__asm volatile
 80044da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80044de:	f383 8811 	msr	BASEPRI, r3
 80044e2:	f3bf 8f6f 	isb	sy
 80044e6:	f3bf 8f4f 	dsb	sy
 80044ea:	61fb      	str	r3, [r7, #28]
}
 80044ec:	bf00      	nop
 80044ee:	bf00      	nop
 80044f0:	e7fd      	b.n	80044ee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80044f2:	f001 ff0b 	bl	800630c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80044f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044f8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80044fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80044fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fe:	429a      	cmp	r2, r3
 8004500:	d302      	bcc.n	8004508 <xQueueGenericSend+0xdc>
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	2b02      	cmp	r3, #2
 8004506:	d129      	bne.n	800455c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004508:	683a      	ldr	r2, [r7, #0]
 800450a:	68b9      	ldr	r1, [r7, #8]
 800450c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800450e:	f000 fa0f 	bl	8004930 <prvCopyDataToQueue>
 8004512:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004514:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004518:	2b00      	cmp	r3, #0
 800451a:	d010      	beq.n	800453e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800451c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800451e:	3324      	adds	r3, #36	@ 0x24
 8004520:	4618      	mov	r0, r3
 8004522:	f000 ffff 	bl	8005524 <xTaskRemoveFromEventList>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d013      	beq.n	8004554 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800452c:	4b3f      	ldr	r3, [pc, #252]	@ (800462c <xQueueGenericSend+0x200>)
 800452e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004532:	601a      	str	r2, [r3, #0]
 8004534:	f3bf 8f4f 	dsb	sy
 8004538:	f3bf 8f6f 	isb	sy
 800453c:	e00a      	b.n	8004554 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800453e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004544:	4b39      	ldr	r3, [pc, #228]	@ (800462c <xQueueGenericSend+0x200>)
 8004546:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800454a:	601a      	str	r2, [r3, #0]
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004554:	f001 ff0a 	bl	800636c <vPortExitCritical>
				return pdPASS;
 8004558:	2301      	movs	r3, #1
 800455a:	e063      	b.n	8004624 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d103      	bne.n	800456a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004562:	f001 ff03 	bl	800636c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004566:	2300      	movs	r3, #0
 8004568:	e05c      	b.n	8004624 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800456a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800456c:	2b00      	cmp	r3, #0
 800456e:	d106      	bne.n	800457e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004570:	f107 0314 	add.w	r3, r7, #20
 8004574:	4618      	mov	r0, r3
 8004576:	f001 f839 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800457a:	2301      	movs	r3, #1
 800457c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800457e:	f001 fef5 	bl	800636c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004582:	f000 fda5 	bl	80050d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004586:	f001 fec1 	bl	800630c <vPortEnterCritical>
 800458a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800458c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004590:	b25b      	sxtb	r3, r3
 8004592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004596:	d103      	bne.n	80045a0 <xQueueGenericSend+0x174>
 8004598:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800459a:	2200      	movs	r2, #0
 800459c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80045a6:	b25b      	sxtb	r3, r3
 80045a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ac:	d103      	bne.n	80045b6 <xQueueGenericSend+0x18a>
 80045ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045b0:	2200      	movs	r2, #0
 80045b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80045b6:	f001 fed9 	bl	800636c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80045ba:	1d3a      	adds	r2, r7, #4
 80045bc:	f107 0314 	add.w	r3, r7, #20
 80045c0:	4611      	mov	r1, r2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f001 f828 	bl	8005618 <xTaskCheckForTimeOut>
 80045c8:	4603      	mov	r3, r0
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d124      	bne.n	8004618 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80045ce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045d0:	f000 faa6 	bl	8004b20 <prvIsQueueFull>
 80045d4:	4603      	mov	r3, r0
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d018      	beq.n	800460c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80045da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045dc:	3310      	adds	r3, #16
 80045de:	687a      	ldr	r2, [r7, #4]
 80045e0:	4611      	mov	r1, r2
 80045e2:	4618      	mov	r0, r3
 80045e4:	f000 ff4c 	bl	8005480 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80045e8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80045ea:	f000 fa31 	bl	8004a50 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80045ee:	f000 fd7d 	bl	80050ec <xTaskResumeAll>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	f47f af7c 	bne.w	80044f2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 80045fa:	4b0c      	ldr	r3, [pc, #48]	@ (800462c <xQueueGenericSend+0x200>)
 80045fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004600:	601a      	str	r2, [r3, #0]
 8004602:	f3bf 8f4f 	dsb	sy
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	e772      	b.n	80044f2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800460c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800460e:	f000 fa1f 	bl	8004a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004612:	f000 fd6b 	bl	80050ec <xTaskResumeAll>
 8004616:	e76c      	b.n	80044f2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004618:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800461a:	f000 fa19 	bl	8004a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800461e:	f000 fd65 	bl	80050ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004622:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004624:	4618      	mov	r0, r3
 8004626:	3738      	adds	r7, #56	@ 0x38
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	e000ed04 	.word	0xe000ed04

08004630 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b090      	sub	sp, #64	@ 0x40
 8004634:	af00      	add	r7, sp, #0
 8004636:	60f8      	str	r0, [r7, #12]
 8004638:	60b9      	str	r1, [r7, #8]
 800463a:	607a      	str	r2, [r7, #4]
 800463c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004642:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10b      	bne.n	8004660 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800464c:	f383 8811 	msr	BASEPRI, r3
 8004650:	f3bf 8f6f 	isb	sy
 8004654:	f3bf 8f4f 	dsb	sy
 8004658:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800465a:	bf00      	nop
 800465c:	bf00      	nop
 800465e:	e7fd      	b.n	800465c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	2b00      	cmp	r3, #0
 8004664:	d103      	bne.n	800466e <xQueueGenericSendFromISR+0x3e>
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800466a:	2b00      	cmp	r3, #0
 800466c:	d101      	bne.n	8004672 <xQueueGenericSendFromISR+0x42>
 800466e:	2301      	movs	r3, #1
 8004670:	e000      	b.n	8004674 <xQueueGenericSendFromISR+0x44>
 8004672:	2300      	movs	r3, #0
 8004674:	2b00      	cmp	r3, #0
 8004676:	d10b      	bne.n	8004690 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004678:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800467c:	f383 8811 	msr	BASEPRI, r3
 8004680:	f3bf 8f6f 	isb	sy
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800468a:	bf00      	nop
 800468c:	bf00      	nop
 800468e:	e7fd      	b.n	800468c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b02      	cmp	r3, #2
 8004694:	d103      	bne.n	800469e <xQueueGenericSendFromISR+0x6e>
 8004696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004698:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800469a:	2b01      	cmp	r3, #1
 800469c:	d101      	bne.n	80046a2 <xQueueGenericSendFromISR+0x72>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <xQueueGenericSendFromISR+0x74>
 80046a2:	2300      	movs	r3, #0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d10b      	bne.n	80046c0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80046a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046ac:	f383 8811 	msr	BASEPRI, r3
 80046b0:	f3bf 8f6f 	isb	sy
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	623b      	str	r3, [r7, #32]
}
 80046ba:	bf00      	nop
 80046bc:	bf00      	nop
 80046be:	e7fd      	b.n	80046bc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80046c0:	f001 fee6 	bl	8006490 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80046c4:	f3ef 8211 	mrs	r2, BASEPRI
 80046c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046cc:	f383 8811 	msr	BASEPRI, r3
 80046d0:	f3bf 8f6f 	isb	sy
 80046d4:	f3bf 8f4f 	dsb	sy
 80046d8:	61fa      	str	r2, [r7, #28]
 80046da:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80046dc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80046de:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80046e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d302      	bcc.n	80046f2 <xQueueGenericSendFromISR+0xc2>
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d12f      	bne.n	8004752 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80046f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80046f8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80046fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004700:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	68b9      	ldr	r1, [r7, #8]
 8004706:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004708:	f000 f912 	bl	8004930 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800470c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004710:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004714:	d112      	bne.n	800473c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004718:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800471a:	2b00      	cmp	r3, #0
 800471c:	d016      	beq.n	800474c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800471e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004720:	3324      	adds	r3, #36	@ 0x24
 8004722:	4618      	mov	r0, r3
 8004724:	f000 fefe 	bl	8005524 <xTaskRemoveFromEventList>
 8004728:	4603      	mov	r3, r0
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d00b      	beq.n	800474c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e007      	b.n	800474c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800473c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004740:	3301      	adds	r3, #1
 8004742:	b2db      	uxtb	r3, r3
 8004744:	b25a      	sxtb	r2, r3
 8004746:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004748:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800474c:	2301      	movs	r3, #1
 800474e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004750:	e001      	b.n	8004756 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004752:	2300      	movs	r3, #0
 8004754:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004756:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004758:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004760:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004762:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004764:	4618      	mov	r0, r3
 8004766:	3740      	adds	r7, #64	@ 0x40
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800476c:	b580      	push	{r7, lr}
 800476e:	b08c      	sub	sp, #48	@ 0x30
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004778:	2300      	movs	r3, #0
 800477a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004782:	2b00      	cmp	r3, #0
 8004784:	d10b      	bne.n	800479e <xQueueReceive+0x32>
	__asm volatile
 8004786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800478a:	f383 8811 	msr	BASEPRI, r3
 800478e:	f3bf 8f6f 	isb	sy
 8004792:	f3bf 8f4f 	dsb	sy
 8004796:	623b      	str	r3, [r7, #32]
}
 8004798:	bf00      	nop
 800479a:	bf00      	nop
 800479c:	e7fd      	b.n	800479a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800479e:	68bb      	ldr	r3, [r7, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d103      	bne.n	80047ac <xQueueReceive+0x40>
 80047a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d101      	bne.n	80047b0 <xQueueReceive+0x44>
 80047ac:	2301      	movs	r3, #1
 80047ae:	e000      	b.n	80047b2 <xQueueReceive+0x46>
 80047b0:	2300      	movs	r3, #0
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d10b      	bne.n	80047ce <xQueueReceive+0x62>
	__asm volatile
 80047b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ba:	f383 8811 	msr	BASEPRI, r3
 80047be:	f3bf 8f6f 	isb	sy
 80047c2:	f3bf 8f4f 	dsb	sy
 80047c6:	61fb      	str	r3, [r7, #28]
}
 80047c8:	bf00      	nop
 80047ca:	bf00      	nop
 80047cc:	e7fd      	b.n	80047ca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80047ce:	f001 f86f 	bl	80058b0 <xTaskGetSchedulerState>
 80047d2:	4603      	mov	r3, r0
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d102      	bne.n	80047de <xQueueReceive+0x72>
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d101      	bne.n	80047e2 <xQueueReceive+0x76>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <xQueueReceive+0x78>
 80047e2:	2300      	movs	r3, #0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d10b      	bne.n	8004800 <xQueueReceive+0x94>
	__asm volatile
 80047e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047ec:	f383 8811 	msr	BASEPRI, r3
 80047f0:	f3bf 8f6f 	isb	sy
 80047f4:	f3bf 8f4f 	dsb	sy
 80047f8:	61bb      	str	r3, [r7, #24]
}
 80047fa:	bf00      	nop
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004800:	f001 fd84 	bl	800630c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004804:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004806:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004808:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800480a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800480c:	2b00      	cmp	r3, #0
 800480e:	d01f      	beq.n	8004850 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004810:	68b9      	ldr	r1, [r7, #8]
 8004812:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004814:	f000 f8f6 	bl	8004a04 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004818:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800481a:	1e5a      	subs	r2, r3, #1
 800481c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800481e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004822:	691b      	ldr	r3, [r3, #16]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d00f      	beq.n	8004848 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004828:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800482a:	3310      	adds	r3, #16
 800482c:	4618      	mov	r0, r3
 800482e:	f000 fe79 	bl	8005524 <xTaskRemoveFromEventList>
 8004832:	4603      	mov	r3, r0
 8004834:	2b00      	cmp	r3, #0
 8004836:	d007      	beq.n	8004848 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004838:	4b3c      	ldr	r3, [pc, #240]	@ (800492c <xQueueReceive+0x1c0>)
 800483a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	f3bf 8f4f 	dsb	sy
 8004844:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004848:	f001 fd90 	bl	800636c <vPortExitCritical>
				return pdPASS;
 800484c:	2301      	movs	r3, #1
 800484e:	e069      	b.n	8004924 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d103      	bne.n	800485e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004856:	f001 fd89 	bl	800636c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800485a:	2300      	movs	r3, #0
 800485c:	e062      	b.n	8004924 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800485e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004860:	2b00      	cmp	r3, #0
 8004862:	d106      	bne.n	8004872 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004864:	f107 0310 	add.w	r3, r7, #16
 8004868:	4618      	mov	r0, r3
 800486a:	f000 febf 	bl	80055ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800486e:	2301      	movs	r3, #1
 8004870:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004872:	f001 fd7b 	bl	800636c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004876:	f000 fc2b 	bl	80050d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800487a:	f001 fd47 	bl	800630c <vPortEnterCritical>
 800487e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004880:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004884:	b25b      	sxtb	r3, r3
 8004886:	f1b3 3fff 	cmp.w	r3, #4294967295
 800488a:	d103      	bne.n	8004894 <xQueueReceive+0x128>
 800488c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800488e:	2200      	movs	r2, #0
 8004890:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004894:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004896:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800489a:	b25b      	sxtb	r3, r3
 800489c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048a0:	d103      	bne.n	80048aa <xQueueReceive+0x13e>
 80048a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80048aa:	f001 fd5f 	bl	800636c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80048ae:	1d3a      	adds	r2, r7, #4
 80048b0:	f107 0310 	add.w	r3, r7, #16
 80048b4:	4611      	mov	r1, r2
 80048b6:	4618      	mov	r0, r3
 80048b8:	f000 feae 	bl	8005618 <xTaskCheckForTimeOut>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d123      	bne.n	800490a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048c4:	f000 f916 	bl	8004af4 <prvIsQueueEmpty>
 80048c8:	4603      	mov	r3, r0
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d017      	beq.n	80048fe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80048ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048d0:	3324      	adds	r3, #36	@ 0x24
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	4611      	mov	r1, r2
 80048d6:	4618      	mov	r0, r3
 80048d8:	f000 fdd2 	bl	8005480 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048dc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80048de:	f000 f8b7 	bl	8004a50 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048e2:	f000 fc03 	bl	80050ec <xTaskResumeAll>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d189      	bne.n	8004800 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80048ec:	4b0f      	ldr	r3, [pc, #60]	@ (800492c <xQueueReceive+0x1c0>)
 80048ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048f2:	601a      	str	r2, [r3, #0]
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	f3bf 8f6f 	isb	sy
 80048fc:	e780      	b.n	8004800 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80048fe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004900:	f000 f8a6 	bl	8004a50 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004904:	f000 fbf2 	bl	80050ec <xTaskResumeAll>
 8004908:	e77a      	b.n	8004800 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800490a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800490c:	f000 f8a0 	bl	8004a50 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004910:	f000 fbec 	bl	80050ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004916:	f000 f8ed 	bl	8004af4 <prvIsQueueEmpty>
 800491a:	4603      	mov	r3, r0
 800491c:	2b00      	cmp	r3, #0
 800491e:	f43f af6f 	beq.w	8004800 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004922:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004924:	4618      	mov	r0, r3
 8004926:	3730      	adds	r7, #48	@ 0x30
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	e000ed04 	.word	0xe000ed04

08004930 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b086      	sub	sp, #24
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800493c:	2300      	movs	r3, #0
 800493e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004944:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10d      	bne.n	800496a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d14d      	bne.n	80049f2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	4618      	mov	r0, r3
 800495c:	f000 ffc6 	bl	80058ec <xTaskPriorityDisinherit>
 8004960:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	2200      	movs	r2, #0
 8004966:	609a      	str	r2, [r3, #8]
 8004968:	e043      	b.n	80049f2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d119      	bne.n	80049a4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6858      	ldr	r0, [r3, #4]
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004978:	461a      	mov	r2, r3
 800497a:	68b9      	ldr	r1, [r7, #8]
 800497c:	f002 f840 	bl	8006a00 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	685a      	ldr	r2, [r3, #4]
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004988:	441a      	add	r2, r3
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	685a      	ldr	r2, [r3, #4]
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	429a      	cmp	r2, r3
 8004998:	d32b      	bcc.n	80049f2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	605a      	str	r2, [r3, #4]
 80049a2:	e026      	b.n	80049f2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	68d8      	ldr	r0, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ac:	461a      	mov	r2, r3
 80049ae:	68b9      	ldr	r1, [r7, #8]
 80049b0:	f002 f826 	bl	8006a00 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	68da      	ldr	r2, [r3, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049bc:	425b      	negs	r3, r3
 80049be:	441a      	add	r2, r3
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	68da      	ldr	r2, [r3, #12]
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	429a      	cmp	r2, r3
 80049ce:	d207      	bcs.n	80049e0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049d8:	425b      	negs	r3, r3
 80049da:	441a      	add	r2, r3
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b02      	cmp	r3, #2
 80049e4:	d105      	bne.n	80049f2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d002      	beq.n	80049f2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80049fa:	697b      	ldr	r3, [r7, #20]
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3718      	adds	r7, #24
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}

08004a04 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
 8004a0c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d018      	beq.n	8004a48 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a1e:	441a      	add	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	68da      	ldr	r2, [r3, #12]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	429a      	cmp	r2, r3
 8004a2e:	d303      	bcc.n	8004a38 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68d9      	ldr	r1, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a40:	461a      	mov	r2, r3
 8004a42:	6838      	ldr	r0, [r7, #0]
 8004a44:	f001 ffdc 	bl	8006a00 <memcpy>
	}
}
 8004a48:	bf00      	nop
 8004a4a:	3708      	adds	r7, #8
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	bd80      	pop	{r7, pc}

08004a50 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b084      	sub	sp, #16
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004a58:	f001 fc58 	bl	800630c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a62:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a64:	e011      	b.n	8004a8a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d012      	beq.n	8004a94 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3324      	adds	r3, #36	@ 0x24
 8004a72:	4618      	mov	r0, r3
 8004a74:	f000 fd56 	bl	8005524 <xTaskRemoveFromEventList>
 8004a78:	4603      	mov	r3, r0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d001      	beq.n	8004a82 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a7e:	f000 fe2f 	bl	80056e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a82:	7bfb      	ldrb	r3, [r7, #15]
 8004a84:	3b01      	subs	r3, #1
 8004a86:	b2db      	uxtb	r3, r3
 8004a88:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dce9      	bgt.n	8004a66 <prvUnlockQueue+0x16>
 8004a92:	e000      	b.n	8004a96 <prvUnlockQueue+0x46>
					break;
 8004a94:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	22ff      	movs	r2, #255	@ 0xff
 8004a9a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004a9e:	f001 fc65 	bl	800636c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004aa2:	f001 fc33 	bl	800630c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004aac:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004aae:	e011      	b.n	8004ad4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d012      	beq.n	8004ade <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3310      	adds	r3, #16
 8004abc:	4618      	mov	r0, r3
 8004abe:	f000 fd31 	bl	8005524 <xTaskRemoveFromEventList>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d001      	beq.n	8004acc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ac8:	f000 fe0a 	bl	80056e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004acc:	7bbb      	ldrb	r3, [r7, #14]
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b2db      	uxtb	r3, r3
 8004ad2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004ad4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	dce9      	bgt.n	8004ab0 <prvUnlockQueue+0x60>
 8004adc:	e000      	b.n	8004ae0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ade:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	22ff      	movs	r2, #255	@ 0xff
 8004ae4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004ae8:	f001 fc40 	bl	800636c <vPortExitCritical>
}
 8004aec:	bf00      	nop
 8004aee:	3710      	adds	r7, #16
 8004af0:	46bd      	mov	sp, r7
 8004af2:	bd80      	pop	{r7, pc}

08004af4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b084      	sub	sp, #16
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004afc:	f001 fc06 	bl	800630c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d102      	bne.n	8004b0e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004b08:	2301      	movs	r3, #1
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e001      	b.n	8004b12 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004b0e:	2300      	movs	r3, #0
 8004b10:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b12:	f001 fc2b 	bl	800636c <vPortExitCritical>

	return xReturn;
 8004b16:	68fb      	ldr	r3, [r7, #12]
}
 8004b18:	4618      	mov	r0, r3
 8004b1a:	3710      	adds	r7, #16
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	bd80      	pop	{r7, pc}

08004b20 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004b28:	f001 fbf0 	bl	800630c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d102      	bne.n	8004b3e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e001      	b.n	8004b42 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004b3e:	2300      	movs	r3, #0
 8004b40:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004b42:	f001 fc13 	bl	800636c <vPortExitCritical>

	return xReturn;
 8004b46:	68fb      	ldr	r3, [r7, #12]
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	60fb      	str	r3, [r7, #12]
 8004b5e:	e014      	b.n	8004b8a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004b60:	4a0e      	ldr	r2, [pc, #56]	@ (8004b9c <vQueueAddToRegistry+0x4c>)
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10b      	bne.n	8004b84 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004b6c:	490b      	ldr	r1, [pc, #44]	@ (8004b9c <vQueueAddToRegistry+0x4c>)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	683a      	ldr	r2, [r7, #0]
 8004b72:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b76:	4a09      	ldr	r2, [pc, #36]	@ (8004b9c <vQueueAddToRegistry+0x4c>)
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	00db      	lsls	r3, r3, #3
 8004b7c:	4413      	add	r3, r2
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b82:	e006      	b.n	8004b92 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	3301      	adds	r3, #1
 8004b88:	60fb      	str	r3, [r7, #12]
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	2b07      	cmp	r3, #7
 8004b8e:	d9e7      	bls.n	8004b60 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b90:	bf00      	nop
 8004b92:	bf00      	nop
 8004b94:	3714      	adds	r7, #20
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bc80      	pop	{r7}
 8004b9a:	4770      	bx	lr
 8004b9c:	20000c90 	.word	0x20000c90

08004ba0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b086      	sub	sp, #24
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	60f8      	str	r0, [r7, #12]
 8004ba8:	60b9      	str	r1, [r7, #8]
 8004baa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004bb0:	f001 fbac 	bl	800630c <vPortEnterCritical>
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004bba:	b25b      	sxtb	r3, r3
 8004bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bc0:	d103      	bne.n	8004bca <vQueueWaitForMessageRestricted+0x2a>
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bca:	697b      	ldr	r3, [r7, #20]
 8004bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bd0:	b25b      	sxtb	r3, r3
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d103      	bne.n	8004be0 <vQueueWaitForMessageRestricted+0x40>
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004be0:	f001 fbc4 	bl	800636c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004be4:	697b      	ldr	r3, [r7, #20]
 8004be6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d106      	bne.n	8004bfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bec:	697b      	ldr	r3, [r7, #20]
 8004bee:	3324      	adds	r3, #36	@ 0x24
 8004bf0:	687a      	ldr	r2, [r7, #4]
 8004bf2:	68b9      	ldr	r1, [r7, #8]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f000 fc69 	bl	80054cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004bfa:	6978      	ldr	r0, [r7, #20]
 8004bfc:	f7ff ff28 	bl	8004a50 <prvUnlockQueue>
	}
 8004c00:	bf00      	nop
 8004c02:	3718      	adds	r7, #24
 8004c04:	46bd      	mov	sp, r7
 8004c06:	bd80      	pop	{r7, pc}

08004c08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b08e      	sub	sp, #56	@ 0x38
 8004c0c:	af04      	add	r7, sp, #16
 8004c0e:	60f8      	str	r0, [r7, #12]
 8004c10:	60b9      	str	r1, [r7, #8]
 8004c12:	607a      	str	r2, [r7, #4]
 8004c14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d10b      	bne.n	8004c34 <xTaskCreateStatic+0x2c>
	__asm volatile
 8004c1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c20:	f383 8811 	msr	BASEPRI, r3
 8004c24:	f3bf 8f6f 	isb	sy
 8004c28:	f3bf 8f4f 	dsb	sy
 8004c2c:	623b      	str	r3, [r7, #32]
}
 8004c2e:	bf00      	nop
 8004c30:	bf00      	nop
 8004c32:	e7fd      	b.n	8004c30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d10b      	bne.n	8004c52 <xTaskCreateStatic+0x4a>
	__asm volatile
 8004c3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c3e:	f383 8811 	msr	BASEPRI, r3
 8004c42:	f3bf 8f6f 	isb	sy
 8004c46:	f3bf 8f4f 	dsb	sy
 8004c4a:	61fb      	str	r3, [r7, #28]
}
 8004c4c:	bf00      	nop
 8004c4e:	bf00      	nop
 8004c50:	e7fd      	b.n	8004c4e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c52:	23a8      	movs	r3, #168	@ 0xa8
 8004c54:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	2ba8      	cmp	r3, #168	@ 0xa8
 8004c5a:	d00b      	beq.n	8004c74 <xTaskCreateStatic+0x6c>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	61bb      	str	r3, [r7, #24]
}
 8004c6e:	bf00      	nop
 8004c70:	bf00      	nop
 8004c72:	e7fd      	b.n	8004c70 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c74:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d01e      	beq.n	8004cba <xTaskCreateStatic+0xb2>
 8004c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d01b      	beq.n	8004cba <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c84:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c88:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c8a:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c8e:	2202      	movs	r2, #2
 8004c90:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c94:	2300      	movs	r3, #0
 8004c96:	9303      	str	r3, [sp, #12]
 8004c98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c9a:	9302      	str	r3, [sp, #8]
 8004c9c:	f107 0314 	add.w	r3, r7, #20
 8004ca0:	9301      	str	r3, [sp, #4]
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	9300      	str	r3, [sp, #0]
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	687a      	ldr	r2, [r7, #4]
 8004caa:	68b9      	ldr	r1, [r7, #8]
 8004cac:	68f8      	ldr	r0, [r7, #12]
 8004cae:	f000 f851 	bl	8004d54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004cb2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8004cb4:	f000 f8f6 	bl	8004ea4 <prvAddNewTaskToReadyList>
 8004cb8:	e001      	b.n	8004cbe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004cbe:	697b      	ldr	r3, [r7, #20]
	}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3728      	adds	r7, #40	@ 0x28
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b08c      	sub	sp, #48	@ 0x30
 8004ccc:	af04      	add	r7, sp, #16
 8004cce:	60f8      	str	r0, [r7, #12]
 8004cd0:	60b9      	str	r1, [r7, #8]
 8004cd2:	603b      	str	r3, [r7, #0]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cd8:	88fb      	ldrh	r3, [r7, #6]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fc17 	bl	8006510 <pvPortMalloc>
 8004ce2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d00e      	beq.n	8004d08 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004cea:	20a8      	movs	r0, #168	@ 0xa8
 8004cec:	f001 fc10 	bl	8006510 <pvPortMalloc>
 8004cf0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d003      	beq.n	8004d00 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cf8:	69fb      	ldr	r3, [r7, #28]
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	631a      	str	r2, [r3, #48]	@ 0x30
 8004cfe:	e005      	b.n	8004d0c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004d00:	6978      	ldr	r0, [r7, #20]
 8004d02:	f001 fcd3 	bl	80066ac <vPortFree>
 8004d06:	e001      	b.n	8004d0c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004d08:	2300      	movs	r3, #0
 8004d0a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004d0c:	69fb      	ldr	r3, [r7, #28]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d017      	beq.n	8004d42 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2200      	movs	r2, #0
 8004d16:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004d1a:	88fa      	ldrh	r2, [r7, #6]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	9303      	str	r3, [sp, #12]
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	9302      	str	r3, [sp, #8]
 8004d24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d26:	9301      	str	r3, [sp, #4]
 8004d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d2a:	9300      	str	r3, [sp, #0]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	68b9      	ldr	r1, [r7, #8]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f80f 	bl	8004d54 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d36:	69f8      	ldr	r0, [r7, #28]
 8004d38:	f000 f8b4 	bl	8004ea4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	61bb      	str	r3, [r7, #24]
 8004d40:	e002      	b.n	8004d48 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d42:	f04f 33ff 	mov.w	r3, #4294967295
 8004d46:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d48:	69bb      	ldr	r3, [r7, #24]
	}
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	3720      	adds	r7, #32
 8004d4e:	46bd      	mov	sp, r7
 8004d50:	bd80      	pop	{r7, pc}
	...

08004d54 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b088      	sub	sp, #32
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	60f8      	str	r0, [r7, #12]
 8004d5c:	60b9      	str	r1, [r7, #8]
 8004d5e:	607a      	str	r2, [r7, #4]
 8004d60:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d64:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	009b      	lsls	r3, r3, #2
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	21a5      	movs	r1, #165	@ 0xa5
 8004d6e:	f001 fdbb 	bl	80068e8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d74:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8004d7c:	3b01      	subs	r3, #1
 8004d7e:	009b      	lsls	r3, r3, #2
 8004d80:	4413      	add	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d84:	69bb      	ldr	r3, [r7, #24]
 8004d86:	f023 0307 	bic.w	r3, r3, #7
 8004d8a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	f003 0307 	and.w	r3, r3, #7
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d00b      	beq.n	8004dae <prvInitialiseNewTask+0x5a>
	__asm volatile
 8004d96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d9a:	f383 8811 	msr	BASEPRI, r3
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	f3bf 8f4f 	dsb	sy
 8004da6:	617b      	str	r3, [r7, #20]
}
 8004da8:	bf00      	nop
 8004daa:	bf00      	nop
 8004dac:	e7fd      	b.n	8004daa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d01f      	beq.n	8004df4 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db4:	2300      	movs	r3, #0
 8004db6:	61fb      	str	r3, [r7, #28]
 8004db8:	e012      	b.n	8004de0 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004dba:	68ba      	ldr	r2, [r7, #8]
 8004dbc:	69fb      	ldr	r3, [r7, #28]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	7819      	ldrb	r1, [r3, #0]
 8004dc2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004dc4:	69fb      	ldr	r3, [r7, #28]
 8004dc6:	4413      	add	r3, r2
 8004dc8:	3334      	adds	r3, #52	@ 0x34
 8004dca:	460a      	mov	r2, r1
 8004dcc:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dce:	68ba      	ldr	r2, [r7, #8]
 8004dd0:	69fb      	ldr	r3, [r7, #28]
 8004dd2:	4413      	add	r3, r2
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d006      	beq.n	8004de8 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004dda:	69fb      	ldr	r3, [r7, #28]
 8004ddc:	3301      	adds	r3, #1
 8004dde:	61fb      	str	r3, [r7, #28]
 8004de0:	69fb      	ldr	r3, [r7, #28]
 8004de2:	2b0f      	cmp	r3, #15
 8004de4:	d9e9      	bls.n	8004dba <prvInitialiseNewTask+0x66>
 8004de6:	e000      	b.n	8004dea <prvInitialiseNewTask+0x96>
			{
				break;
 8004de8:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004dec:	2200      	movs	r2, #0
 8004dee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004df2:	e003      	b.n	8004dfc <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dfc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004dfe:	2b37      	cmp	r3, #55	@ 0x37
 8004e00:	d901      	bls.n	8004e06 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004e02:	2337      	movs	r3, #55	@ 0x37
 8004e04:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004e06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e0a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004e0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004e10:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004e12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e14:	2200      	movs	r2, #0
 8004e16:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004e18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4618      	mov	r0, r3
 8004e1e:	f7ff f96a 	bl	80040f6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e24:	3318      	adds	r3, #24
 8004e26:	4618      	mov	r0, r3
 8004e28:	f7ff f965 	bl	80040f6 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e2e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e30:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e34:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8004e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e3e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e40:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e54:	3354      	adds	r3, #84	@ 0x54
 8004e56:	224c      	movs	r2, #76	@ 0x4c
 8004e58:	2100      	movs	r1, #0
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f001 fd44 	bl	80068e8 <memset>
 8004e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e62:	4a0d      	ldr	r2, [pc, #52]	@ (8004e98 <prvInitialiseNewTask+0x144>)
 8004e64:	659a      	str	r2, [r3, #88]	@ 0x58
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	4a0c      	ldr	r2, [pc, #48]	@ (8004e9c <prvInitialiseNewTask+0x148>)
 8004e6a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8004e6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e6e:	4a0c      	ldr	r2, [pc, #48]	@ (8004ea0 <prvInitialiseNewTask+0x14c>)
 8004e70:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e72:	683a      	ldr	r2, [r7, #0]
 8004e74:	68f9      	ldr	r1, [r7, #12]
 8004e76:	69b8      	ldr	r0, [r7, #24]
 8004e78:	f001 f954 	bl	8006124 <pxPortInitialiseStack>
 8004e7c:	4602      	mov	r2, r0
 8004e7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e80:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e8a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e8e:	bf00      	nop
 8004e90:	3720      	adds	r7, #32
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	20001f24 	.word	0x20001f24
 8004e9c:	20001f8c 	.word	0x20001f8c
 8004ea0:	20001ff4 	.word	0x20001ff4

08004ea4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b082      	sub	sp, #8
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004eac:	f001 fa2e 	bl	800630c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8004f68 <prvAddNewTaskToReadyList+0xc4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	3301      	adds	r3, #1
 8004eb6:	4a2c      	ldr	r2, [pc, #176]	@ (8004f68 <prvAddNewTaskToReadyList+0xc4>)
 8004eb8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004eba:	4b2c      	ldr	r3, [pc, #176]	@ (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d109      	bne.n	8004ed6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004ec2:	4a2a      	ldr	r2, [pc, #168]	@ (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ec8:	4b27      	ldr	r3, [pc, #156]	@ (8004f68 <prvAddNewTaskToReadyList+0xc4>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d110      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004ed0:	f000 fc2a 	bl	8005728 <prvInitialiseTaskLists>
 8004ed4:	e00d      	b.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004ed6:	4b26      	ldr	r3, [pc, #152]	@ (8004f70 <prvAddNewTaskToReadyList+0xcc>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d109      	bne.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004ede:	4b23      	ldr	r3, [pc, #140]	@ (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d802      	bhi.n	8004ef2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004eec:	4a1f      	ldr	r2, [pc, #124]	@ (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ef2:	4b20      	ldr	r3, [pc, #128]	@ (8004f74 <prvAddNewTaskToReadyList+0xd0>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3301      	adds	r3, #1
 8004ef8:	4a1e      	ldr	r2, [pc, #120]	@ (8004f74 <prvAddNewTaskToReadyList+0xd0>)
 8004efa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004efc:	4b1d      	ldr	r3, [pc, #116]	@ (8004f74 <prvAddNewTaskToReadyList+0xd0>)
 8004efe:	681a      	ldr	r2, [r3, #0]
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f08:	4b1b      	ldr	r3, [pc, #108]	@ (8004f78 <prvAddNewTaskToReadyList+0xd4>)
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	429a      	cmp	r2, r3
 8004f0e:	d903      	bls.n	8004f18 <prvAddNewTaskToReadyList+0x74>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f14:	4a18      	ldr	r2, [pc, #96]	@ (8004f78 <prvAddNewTaskToReadyList+0xd4>)
 8004f16:	6013      	str	r3, [r2, #0]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	4a15      	ldr	r2, [pc, #84]	@ (8004f7c <prvAddNewTaskToReadyList+0xd8>)
 8004f26:	441a      	add	r2, r3
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3304      	adds	r3, #4
 8004f2c:	4619      	mov	r1, r3
 8004f2e:	4610      	mov	r0, r2
 8004f30:	f7ff f8ed 	bl	800410e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f34:	f001 fa1a 	bl	800636c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f38:	4b0d      	ldr	r3, [pc, #52]	@ (8004f70 <prvAddNewTaskToReadyList+0xcc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00e      	beq.n	8004f5e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f40:	4b0a      	ldr	r3, [pc, #40]	@ (8004f6c <prvAddNewTaskToReadyList+0xc8>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d207      	bcs.n	8004f5e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f4e:	4b0c      	ldr	r3, [pc, #48]	@ (8004f80 <prvAddNewTaskToReadyList+0xdc>)
 8004f50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f54:	601a      	str	r2, [r3, #0]
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f5e:	bf00      	nop
 8004f60:	3708      	adds	r7, #8
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	200011a4 	.word	0x200011a4
 8004f6c:	20000cd0 	.word	0x20000cd0
 8004f70:	200011b0 	.word	0x200011b0
 8004f74:	200011c0 	.word	0x200011c0
 8004f78:	200011ac 	.word	0x200011ac
 8004f7c:	20000cd4 	.word	0x20000cd4
 8004f80:	e000ed04 	.word	0xe000ed04

08004f84 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d018      	beq.n	8004fc8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004f96:	4b14      	ldr	r3, [pc, #80]	@ (8004fe8 <vTaskDelay+0x64>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00b      	beq.n	8004fb6 <vTaskDelay+0x32>
	__asm volatile
 8004f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fa2:	f383 8811 	msr	BASEPRI, r3
 8004fa6:	f3bf 8f6f 	isb	sy
 8004faa:	f3bf 8f4f 	dsb	sy
 8004fae:	60bb      	str	r3, [r7, #8]
}
 8004fb0:	bf00      	nop
 8004fb2:	bf00      	nop
 8004fb4:	e7fd      	b.n	8004fb2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004fb6:	f000 f88b 	bl	80050d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004fba:	2100      	movs	r1, #0
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 fd05 	bl	80059cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004fc2:	f000 f893 	bl	80050ec <xTaskResumeAll>
 8004fc6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d107      	bne.n	8004fde <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8004fce:	4b07      	ldr	r3, [pc, #28]	@ (8004fec <vTaskDelay+0x68>)
 8004fd0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004fd4:	601a      	str	r2, [r3, #0]
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004fde:	bf00      	nop
 8004fe0:	3710      	adds	r7, #16
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
 8004fe6:	bf00      	nop
 8004fe8:	200011cc 	.word	0x200011cc
 8004fec:	e000ed04 	.word	0xe000ed04

08004ff0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b08a      	sub	sp, #40	@ 0x28
 8004ff4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ffe:	463a      	mov	r2, r7
 8005000:	1d39      	adds	r1, r7, #4
 8005002:	f107 0308 	add.w	r3, r7, #8
 8005006:	4618      	mov	r0, r3
 8005008:	f7ff f824 	bl	8004054 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800500c:	6839      	ldr	r1, [r7, #0]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	68ba      	ldr	r2, [r7, #8]
 8005012:	9202      	str	r2, [sp, #8]
 8005014:	9301      	str	r3, [sp, #4]
 8005016:	2300      	movs	r3, #0
 8005018:	9300      	str	r3, [sp, #0]
 800501a:	2300      	movs	r3, #0
 800501c:	460a      	mov	r2, r1
 800501e:	4924      	ldr	r1, [pc, #144]	@ (80050b0 <vTaskStartScheduler+0xc0>)
 8005020:	4824      	ldr	r0, [pc, #144]	@ (80050b4 <vTaskStartScheduler+0xc4>)
 8005022:	f7ff fdf1 	bl	8004c08 <xTaskCreateStatic>
 8005026:	4603      	mov	r3, r0
 8005028:	4a23      	ldr	r2, [pc, #140]	@ (80050b8 <vTaskStartScheduler+0xc8>)
 800502a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800502c:	4b22      	ldr	r3, [pc, #136]	@ (80050b8 <vTaskStartScheduler+0xc8>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d002      	beq.n	800503a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005034:	2301      	movs	r3, #1
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	e001      	b.n	800503e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800503a:	2300      	movs	r3, #0
 800503c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800503e:	697b      	ldr	r3, [r7, #20]
 8005040:	2b01      	cmp	r3, #1
 8005042:	d102      	bne.n	800504a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005044:	f000 fd16 	bl	8005a74 <xTimerCreateTimerTask>
 8005048:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d11b      	bne.n	8005088 <vTaskStartScheduler+0x98>
	__asm volatile
 8005050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005054:	f383 8811 	msr	BASEPRI, r3
 8005058:	f3bf 8f6f 	isb	sy
 800505c:	f3bf 8f4f 	dsb	sy
 8005060:	613b      	str	r3, [r7, #16]
}
 8005062:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005064:	4b15      	ldr	r3, [pc, #84]	@ (80050bc <vTaskStartScheduler+0xcc>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3354      	adds	r3, #84	@ 0x54
 800506a:	4a15      	ldr	r2, [pc, #84]	@ (80050c0 <vTaskStartScheduler+0xd0>)
 800506c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800506e:	4b15      	ldr	r3, [pc, #84]	@ (80050c4 <vTaskStartScheduler+0xd4>)
 8005070:	f04f 32ff 	mov.w	r2, #4294967295
 8005074:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005076:	4b14      	ldr	r3, [pc, #80]	@ (80050c8 <vTaskStartScheduler+0xd8>)
 8005078:	2201      	movs	r2, #1
 800507a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800507c:	4b13      	ldr	r3, [pc, #76]	@ (80050cc <vTaskStartScheduler+0xdc>)
 800507e:	2200      	movs	r2, #0
 8005080:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005082:	f001 f8d1 	bl	8006228 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005086:	e00f      	b.n	80050a8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005088:	697b      	ldr	r3, [r7, #20]
 800508a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800508e:	d10b      	bne.n	80050a8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	60fb      	str	r3, [r7, #12]
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <vTaskStartScheduler+0xb4>
}
 80050a8:	bf00      	nop
 80050aa:	3718      	adds	r7, #24
 80050ac:	46bd      	mov	sp, r7
 80050ae:	bd80      	pop	{r7, pc}
 80050b0:	08007b4c 	.word	0x08007b4c
 80050b4:	080056f9 	.word	0x080056f9
 80050b8:	200011c8 	.word	0x200011c8
 80050bc:	20000cd0 	.word	0x20000cd0
 80050c0:	20000018 	.word	0x20000018
 80050c4:	200011c4 	.word	0x200011c4
 80050c8:	200011b0 	.word	0x200011b0
 80050cc:	200011a8 	.word	0x200011a8

080050d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80050d0:	b480      	push	{r7}
 80050d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80050d4:	4b04      	ldr	r3, [pc, #16]	@ (80050e8 <vTaskSuspendAll+0x18>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	3301      	adds	r3, #1
 80050da:	4a03      	ldr	r2, [pc, #12]	@ (80050e8 <vTaskSuspendAll+0x18>)
 80050dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80050de:	bf00      	nop
 80050e0:	46bd      	mov	sp, r7
 80050e2:	bc80      	pop	{r7}
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	200011cc 	.word	0x200011cc

080050ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80050f2:	2300      	movs	r3, #0
 80050f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80050f6:	2300      	movs	r3, #0
 80050f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80050fa:	4b42      	ldr	r3, [pc, #264]	@ (8005204 <xTaskResumeAll+0x118>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d10b      	bne.n	800511a <xTaskResumeAll+0x2e>
	__asm volatile
 8005102:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	603b      	str	r3, [r7, #0]
}
 8005114:	bf00      	nop
 8005116:	bf00      	nop
 8005118:	e7fd      	b.n	8005116 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800511a:	f001 f8f7 	bl	800630c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800511e:	4b39      	ldr	r3, [pc, #228]	@ (8005204 <xTaskResumeAll+0x118>)
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	3b01      	subs	r3, #1
 8005124:	4a37      	ldr	r2, [pc, #220]	@ (8005204 <xTaskResumeAll+0x118>)
 8005126:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005128:	4b36      	ldr	r3, [pc, #216]	@ (8005204 <xTaskResumeAll+0x118>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d162      	bne.n	80051f6 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005130:	4b35      	ldr	r3, [pc, #212]	@ (8005208 <xTaskResumeAll+0x11c>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d05e      	beq.n	80051f6 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005138:	e02f      	b.n	800519a <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800513a:	4b34      	ldr	r3, [pc, #208]	@ (800520c <xTaskResumeAll+0x120>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	3318      	adds	r3, #24
 8005146:	4618      	mov	r0, r3
 8005148:	f7ff f83c 	bl	80041c4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	3304      	adds	r3, #4
 8005150:	4618      	mov	r0, r3
 8005152:	f7ff f837 	bl	80041c4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800515a:	4b2d      	ldr	r3, [pc, #180]	@ (8005210 <xTaskResumeAll+0x124>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	429a      	cmp	r2, r3
 8005160:	d903      	bls.n	800516a <xTaskResumeAll+0x7e>
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005166:	4a2a      	ldr	r2, [pc, #168]	@ (8005210 <xTaskResumeAll+0x124>)
 8005168:	6013      	str	r3, [r2, #0]
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800516e:	4613      	mov	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	4413      	add	r3, r2
 8005174:	009b      	lsls	r3, r3, #2
 8005176:	4a27      	ldr	r2, [pc, #156]	@ (8005214 <xTaskResumeAll+0x128>)
 8005178:	441a      	add	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	3304      	adds	r3, #4
 800517e:	4619      	mov	r1, r3
 8005180:	4610      	mov	r0, r2
 8005182:	f7fe ffc4 	bl	800410e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800518a:	4b23      	ldr	r3, [pc, #140]	@ (8005218 <xTaskResumeAll+0x12c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005190:	429a      	cmp	r2, r3
 8005192:	d302      	bcc.n	800519a <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005194:	4b21      	ldr	r3, [pc, #132]	@ (800521c <xTaskResumeAll+0x130>)
 8005196:	2201      	movs	r2, #1
 8005198:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800519a:	4b1c      	ldr	r3, [pc, #112]	@ (800520c <xTaskResumeAll+0x120>)
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1cb      	bne.n	800513a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d001      	beq.n	80051ac <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051a8:	f000 fb62 	bl	8005870 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005220 <xTaskResumeAll+0x134>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d010      	beq.n	80051da <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80051b8:	f000 f844 	bl	8005244 <xTaskIncrementTick>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d002      	beq.n	80051c8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80051c2:	4b16      	ldr	r3, [pc, #88]	@ (800521c <xTaskResumeAll+0x130>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	3b01      	subs	r3, #1
 80051cc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1f1      	bne.n	80051b8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80051d4:	4b12      	ldr	r3, [pc, #72]	@ (8005220 <xTaskResumeAll+0x134>)
 80051d6:	2200      	movs	r2, #0
 80051d8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <xTaskResumeAll+0x130>)
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d009      	beq.n	80051f6 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80051e2:	2301      	movs	r3, #1
 80051e4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80051e6:	4b0f      	ldr	r3, [pc, #60]	@ (8005224 <xTaskResumeAll+0x138>)
 80051e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051ec:	601a      	str	r2, [r3, #0]
 80051ee:	f3bf 8f4f 	dsb	sy
 80051f2:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80051f6:	f001 f8b9 	bl	800636c <vPortExitCritical>

	return xAlreadyYielded;
 80051fa:	68bb      	ldr	r3, [r7, #8]
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3710      	adds	r7, #16
 8005200:	46bd      	mov	sp, r7
 8005202:	bd80      	pop	{r7, pc}
 8005204:	200011cc 	.word	0x200011cc
 8005208:	200011a4 	.word	0x200011a4
 800520c:	20001164 	.word	0x20001164
 8005210:	200011ac 	.word	0x200011ac
 8005214:	20000cd4 	.word	0x20000cd4
 8005218:	20000cd0 	.word	0x20000cd0
 800521c:	200011b8 	.word	0x200011b8
 8005220:	200011b4 	.word	0x200011b4
 8005224:	e000ed04 	.word	0xe000ed04

08005228 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005228:	b480      	push	{r7}
 800522a:	b083      	sub	sp, #12
 800522c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800522e:	4b04      	ldr	r3, [pc, #16]	@ (8005240 <xTaskGetTickCount+0x18>)
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005234:	687b      	ldr	r3, [r7, #4]
}
 8005236:	4618      	mov	r0, r3
 8005238:	370c      	adds	r7, #12
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	200011a8 	.word	0x200011a8

08005244 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b086      	sub	sp, #24
 8005248:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800524a:	2300      	movs	r3, #0
 800524c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800524e:	4b4f      	ldr	r3, [pc, #316]	@ (800538c <xTaskIncrementTick+0x148>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	2b00      	cmp	r3, #0
 8005254:	f040 8090 	bne.w	8005378 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005258:	4b4d      	ldr	r3, [pc, #308]	@ (8005390 <xTaskIncrementTick+0x14c>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3301      	adds	r3, #1
 800525e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005260:	4a4b      	ldr	r2, [pc, #300]	@ (8005390 <xTaskIncrementTick+0x14c>)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	2b00      	cmp	r3, #0
 800526a:	d121      	bne.n	80052b0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800526c:	4b49      	ldr	r3, [pc, #292]	@ (8005394 <xTaskIncrementTick+0x150>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <xTaskIncrementTick+0x4a>
	__asm volatile
 8005276:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800527a:	f383 8811 	msr	BASEPRI, r3
 800527e:	f3bf 8f6f 	isb	sy
 8005282:	f3bf 8f4f 	dsb	sy
 8005286:	603b      	str	r3, [r7, #0]
}
 8005288:	bf00      	nop
 800528a:	bf00      	nop
 800528c:	e7fd      	b.n	800528a <xTaskIncrementTick+0x46>
 800528e:	4b41      	ldr	r3, [pc, #260]	@ (8005394 <xTaskIncrementTick+0x150>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	60fb      	str	r3, [r7, #12]
 8005294:	4b40      	ldr	r3, [pc, #256]	@ (8005398 <xTaskIncrementTick+0x154>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a3e      	ldr	r2, [pc, #248]	@ (8005394 <xTaskIncrementTick+0x150>)
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	4a3e      	ldr	r2, [pc, #248]	@ (8005398 <xTaskIncrementTick+0x154>)
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	6013      	str	r3, [r2, #0]
 80052a2:	4b3e      	ldr	r3, [pc, #248]	@ (800539c <xTaskIncrementTick+0x158>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	3301      	adds	r3, #1
 80052a8:	4a3c      	ldr	r2, [pc, #240]	@ (800539c <xTaskIncrementTick+0x158>)
 80052aa:	6013      	str	r3, [r2, #0]
 80052ac:	f000 fae0 	bl	8005870 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80052b0:	4b3b      	ldr	r3, [pc, #236]	@ (80053a0 <xTaskIncrementTick+0x15c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	693a      	ldr	r2, [r7, #16]
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d349      	bcc.n	800534e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80052ba:	4b36      	ldr	r3, [pc, #216]	@ (8005394 <xTaskIncrementTick+0x150>)
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052c4:	4b36      	ldr	r3, [pc, #216]	@ (80053a0 <xTaskIncrementTick+0x15c>)
 80052c6:	f04f 32ff 	mov.w	r2, #4294967295
 80052ca:	601a      	str	r2, [r3, #0]
					break;
 80052cc:	e03f      	b.n	800534e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052ce:	4b31      	ldr	r3, [pc, #196]	@ (8005394 <xTaskIncrementTick+0x150>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	68db      	ldr	r3, [r3, #12]
 80052d6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80052de:	693a      	ldr	r2, [r7, #16]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d203      	bcs.n	80052ee <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80052e6:	4a2e      	ldr	r2, [pc, #184]	@ (80053a0 <xTaskIncrementTick+0x15c>)
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80052ec:	e02f      	b.n	800534e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe ff66 	bl	80041c4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80052f8:	68bb      	ldr	r3, [r7, #8]
 80052fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d004      	beq.n	800530a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	3318      	adds	r3, #24
 8005304:	4618      	mov	r0, r3
 8005306:	f7fe ff5d 	bl	80041c4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800530e:	4b25      	ldr	r3, [pc, #148]	@ (80053a4 <xTaskIncrementTick+0x160>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	429a      	cmp	r2, r3
 8005314:	d903      	bls.n	800531e <xTaskIncrementTick+0xda>
 8005316:	68bb      	ldr	r3, [r7, #8]
 8005318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800531a:	4a22      	ldr	r2, [pc, #136]	@ (80053a4 <xTaskIncrementTick+0x160>)
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005322:	4613      	mov	r3, r2
 8005324:	009b      	lsls	r3, r3, #2
 8005326:	4413      	add	r3, r2
 8005328:	009b      	lsls	r3, r3, #2
 800532a:	4a1f      	ldr	r2, [pc, #124]	@ (80053a8 <xTaskIncrementTick+0x164>)
 800532c:	441a      	add	r2, r3
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	3304      	adds	r3, #4
 8005332:	4619      	mov	r1, r3
 8005334:	4610      	mov	r0, r2
 8005336:	f7fe feea 	bl	800410e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800533e:	4b1b      	ldr	r3, [pc, #108]	@ (80053ac <xTaskIncrementTick+0x168>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005344:	429a      	cmp	r2, r3
 8005346:	d3b8      	bcc.n	80052ba <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005348:	2301      	movs	r3, #1
 800534a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800534c:	e7b5      	b.n	80052ba <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800534e:	4b17      	ldr	r3, [pc, #92]	@ (80053ac <xTaskIncrementTick+0x168>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005354:	4914      	ldr	r1, [pc, #80]	@ (80053a8 <xTaskIncrementTick+0x164>)
 8005356:	4613      	mov	r3, r2
 8005358:	009b      	lsls	r3, r3, #2
 800535a:	4413      	add	r3, r2
 800535c:	009b      	lsls	r3, r3, #2
 800535e:	440b      	add	r3, r1
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	2b01      	cmp	r3, #1
 8005364:	d901      	bls.n	800536a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005366:	2301      	movs	r3, #1
 8005368:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800536a:	4b11      	ldr	r3, [pc, #68]	@ (80053b0 <xTaskIncrementTick+0x16c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d007      	beq.n	8005382 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005372:	2301      	movs	r3, #1
 8005374:	617b      	str	r3, [r7, #20]
 8005376:	e004      	b.n	8005382 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005378:	4b0e      	ldr	r3, [pc, #56]	@ (80053b4 <xTaskIncrementTick+0x170>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	3301      	adds	r3, #1
 800537e:	4a0d      	ldr	r2, [pc, #52]	@ (80053b4 <xTaskIncrementTick+0x170>)
 8005380:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005382:	697b      	ldr	r3, [r7, #20]
}
 8005384:	4618      	mov	r0, r3
 8005386:	3718      	adds	r7, #24
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	200011cc 	.word	0x200011cc
 8005390:	200011a8 	.word	0x200011a8
 8005394:	2000115c 	.word	0x2000115c
 8005398:	20001160 	.word	0x20001160
 800539c:	200011bc 	.word	0x200011bc
 80053a0:	200011c4 	.word	0x200011c4
 80053a4:	200011ac 	.word	0x200011ac
 80053a8:	20000cd4 	.word	0x20000cd4
 80053ac:	20000cd0 	.word	0x20000cd0
 80053b0:	200011b8 	.word	0x200011b8
 80053b4:	200011b4 	.word	0x200011b4

080053b8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80053b8:	b480      	push	{r7}
 80053ba:	b085      	sub	sp, #20
 80053bc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80053be:	4b2a      	ldr	r3, [pc, #168]	@ (8005468 <vTaskSwitchContext+0xb0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d003      	beq.n	80053ce <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80053c6:	4b29      	ldr	r3, [pc, #164]	@ (800546c <vTaskSwitchContext+0xb4>)
 80053c8:	2201      	movs	r2, #1
 80053ca:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80053cc:	e047      	b.n	800545e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 80053ce:	4b27      	ldr	r3, [pc, #156]	@ (800546c <vTaskSwitchContext+0xb4>)
 80053d0:	2200      	movs	r2, #0
 80053d2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80053d4:	4b26      	ldr	r3, [pc, #152]	@ (8005470 <vTaskSwitchContext+0xb8>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	e011      	b.n	8005400 <vTaskSwitchContext+0x48>
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d10b      	bne.n	80053fa <vTaskSwitchContext+0x42>
	__asm volatile
 80053e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053e6:	f383 8811 	msr	BASEPRI, r3
 80053ea:	f3bf 8f6f 	isb	sy
 80053ee:	f3bf 8f4f 	dsb	sy
 80053f2:	607b      	str	r3, [r7, #4]
}
 80053f4:	bf00      	nop
 80053f6:	bf00      	nop
 80053f8:	e7fd      	b.n	80053f6 <vTaskSwitchContext+0x3e>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	3b01      	subs	r3, #1
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	491c      	ldr	r1, [pc, #112]	@ (8005474 <vTaskSwitchContext+0xbc>)
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4613      	mov	r3, r2
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4413      	add	r3, r2
 800540a:	009b      	lsls	r3, r3, #2
 800540c:	440b      	add	r3, r1
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d0e3      	beq.n	80053dc <vTaskSwitchContext+0x24>
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	4613      	mov	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	4413      	add	r3, r2
 800541c:	009b      	lsls	r3, r3, #2
 800541e:	4a15      	ldr	r2, [pc, #84]	@ (8005474 <vTaskSwitchContext+0xbc>)
 8005420:	4413      	add	r3, r2
 8005422:	60bb      	str	r3, [r7, #8]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685b      	ldr	r3, [r3, #4]
 8005428:	685a      	ldr	r2, [r3, #4]
 800542a:	68bb      	ldr	r3, [r7, #8]
 800542c:	605a      	str	r2, [r3, #4]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	685a      	ldr	r2, [r3, #4]
 8005432:	68bb      	ldr	r3, [r7, #8]
 8005434:	3308      	adds	r3, #8
 8005436:	429a      	cmp	r2, r3
 8005438:	d104      	bne.n	8005444 <vTaskSwitchContext+0x8c>
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	605a      	str	r2, [r3, #4]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	685b      	ldr	r3, [r3, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	4a0b      	ldr	r2, [pc, #44]	@ (8005478 <vTaskSwitchContext+0xc0>)
 800544c:	6013      	str	r3, [r2, #0]
 800544e:	4a08      	ldr	r2, [pc, #32]	@ (8005470 <vTaskSwitchContext+0xb8>)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005454:	4b08      	ldr	r3, [pc, #32]	@ (8005478 <vTaskSwitchContext+0xc0>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	3354      	adds	r3, #84	@ 0x54
 800545a:	4a08      	ldr	r2, [pc, #32]	@ (800547c <vTaskSwitchContext+0xc4>)
 800545c:	6013      	str	r3, [r2, #0]
}
 800545e:	bf00      	nop
 8005460:	3714      	adds	r7, #20
 8005462:	46bd      	mov	sp, r7
 8005464:	bc80      	pop	{r7}
 8005466:	4770      	bx	lr
 8005468:	200011cc 	.word	0x200011cc
 800546c:	200011b8 	.word	0x200011b8
 8005470:	200011ac 	.word	0x200011ac
 8005474:	20000cd4 	.word	0x20000cd4
 8005478:	20000cd0 	.word	0x20000cd0
 800547c:	20000018 	.word	0x20000018

08005480 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b084      	sub	sp, #16
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
 8005488:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d10b      	bne.n	80054a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005490:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005494:	f383 8811 	msr	BASEPRI, r3
 8005498:	f3bf 8f6f 	isb	sy
 800549c:	f3bf 8f4f 	dsb	sy
 80054a0:	60fb      	str	r3, [r7, #12]
}
 80054a2:	bf00      	nop
 80054a4:	bf00      	nop
 80054a6:	e7fd      	b.n	80054a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054a8:	4b07      	ldr	r3, [pc, #28]	@ (80054c8 <vTaskPlaceOnEventList+0x48>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	3318      	adds	r3, #24
 80054ae:	4619      	mov	r1, r3
 80054b0:	6878      	ldr	r0, [r7, #4]
 80054b2:	f7fe fe4f 	bl	8004154 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80054b6:	2101      	movs	r1, #1
 80054b8:	6838      	ldr	r0, [r7, #0]
 80054ba:	f000 fa87 	bl	80059cc <prvAddCurrentTaskToDelayedList>
}
 80054be:	bf00      	nop
 80054c0:	3710      	adds	r7, #16
 80054c2:	46bd      	mov	sp, r7
 80054c4:	bd80      	pop	{r7, pc}
 80054c6:	bf00      	nop
 80054c8:	20000cd0 	.word	0x20000cd0

080054cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80054cc:	b580      	push	{r7, lr}
 80054ce:	b086      	sub	sp, #24
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	60f8      	str	r0, [r7, #12]
 80054d4:	60b9      	str	r1, [r7, #8]
 80054d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d10b      	bne.n	80054f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80054de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054e2:	f383 8811 	msr	BASEPRI, r3
 80054e6:	f3bf 8f6f 	isb	sy
 80054ea:	f3bf 8f4f 	dsb	sy
 80054ee:	617b      	str	r3, [r7, #20]
}
 80054f0:	bf00      	nop
 80054f2:	bf00      	nop
 80054f4:	e7fd      	b.n	80054f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054f6:	4b0a      	ldr	r3, [pc, #40]	@ (8005520 <vTaskPlaceOnEventListRestricted+0x54>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3318      	adds	r3, #24
 80054fc:	4619      	mov	r1, r3
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	f7fe fe05 	bl	800410e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2b00      	cmp	r3, #0
 8005508:	d002      	beq.n	8005510 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800550a:	f04f 33ff 	mov.w	r3, #4294967295
 800550e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005510:	6879      	ldr	r1, [r7, #4]
 8005512:	68b8      	ldr	r0, [r7, #8]
 8005514:	f000 fa5a 	bl	80059cc <prvAddCurrentTaskToDelayedList>
	}
 8005518:	bf00      	nop
 800551a:	3718      	adds	r7, #24
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}
 8005520:	20000cd0 	.word	0x20000cd0

08005524 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005524:	b580      	push	{r7, lr}
 8005526:	b086      	sub	sp, #24
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	68db      	ldr	r3, [r3, #12]
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d10b      	bne.n	8005552 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800553a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800553e:	f383 8811 	msr	BASEPRI, r3
 8005542:	f3bf 8f6f 	isb	sy
 8005546:	f3bf 8f4f 	dsb	sy
 800554a:	60fb      	str	r3, [r7, #12]
}
 800554c:	bf00      	nop
 800554e:	bf00      	nop
 8005550:	e7fd      	b.n	800554e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	3318      	adds	r3, #24
 8005556:	4618      	mov	r0, r3
 8005558:	f7fe fe34 	bl	80041c4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800555c:	4b1d      	ldr	r3, [pc, #116]	@ (80055d4 <xTaskRemoveFromEventList+0xb0>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d11d      	bne.n	80055a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005564:	693b      	ldr	r3, [r7, #16]
 8005566:	3304      	adds	r3, #4
 8005568:	4618      	mov	r0, r3
 800556a:	f7fe fe2b 	bl	80041c4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800556e:	693b      	ldr	r3, [r7, #16]
 8005570:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005572:	4b19      	ldr	r3, [pc, #100]	@ (80055d8 <xTaskRemoveFromEventList+0xb4>)
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	429a      	cmp	r2, r3
 8005578:	d903      	bls.n	8005582 <xTaskRemoveFromEventList+0x5e>
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800557e:	4a16      	ldr	r2, [pc, #88]	@ (80055d8 <xTaskRemoveFromEventList+0xb4>)
 8005580:	6013      	str	r3, [r2, #0]
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005586:	4613      	mov	r3, r2
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	4a13      	ldr	r2, [pc, #76]	@ (80055dc <xTaskRemoveFromEventList+0xb8>)
 8005590:	441a      	add	r2, r3
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	3304      	adds	r3, #4
 8005596:	4619      	mov	r1, r3
 8005598:	4610      	mov	r0, r2
 800559a:	f7fe fdb8 	bl	800410e <vListInsertEnd>
 800559e:	e005      	b.n	80055ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055a0:	693b      	ldr	r3, [r7, #16]
 80055a2:	3318      	adds	r3, #24
 80055a4:	4619      	mov	r1, r3
 80055a6:	480e      	ldr	r0, [pc, #56]	@ (80055e0 <xTaskRemoveFromEventList+0xbc>)
 80055a8:	f7fe fdb1 	bl	800410e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055ac:	693b      	ldr	r3, [r7, #16]
 80055ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80055b0:	4b0c      	ldr	r3, [pc, #48]	@ (80055e4 <xTaskRemoveFromEventList+0xc0>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d905      	bls.n	80055c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80055ba:	2301      	movs	r3, #1
 80055bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80055be:	4b0a      	ldr	r3, [pc, #40]	@ (80055e8 <xTaskRemoveFromEventList+0xc4>)
 80055c0:	2201      	movs	r2, #1
 80055c2:	601a      	str	r2, [r3, #0]
 80055c4:	e001      	b.n	80055ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80055c6:	2300      	movs	r3, #0
 80055c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80055ca:	697b      	ldr	r3, [r7, #20]
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3718      	adds	r7, #24
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	200011cc 	.word	0x200011cc
 80055d8:	200011ac 	.word	0x200011ac
 80055dc:	20000cd4 	.word	0x20000cd4
 80055e0:	20001164 	.word	0x20001164
 80055e4:	20000cd0 	.word	0x20000cd0
 80055e8:	200011b8 	.word	0x200011b8

080055ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80055ec:	b480      	push	{r7}
 80055ee:	b083      	sub	sp, #12
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80055f4:	4b06      	ldr	r3, [pc, #24]	@ (8005610 <vTaskInternalSetTimeOutState+0x24>)
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80055fc:	4b05      	ldr	r3, [pc, #20]	@ (8005614 <vTaskInternalSetTimeOutState+0x28>)
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	605a      	str	r2, [r3, #4]
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	bc80      	pop	{r7}
 800560c:	4770      	bx	lr
 800560e:	bf00      	nop
 8005610:	200011bc 	.word	0x200011bc
 8005614:	200011a8 	.word	0x200011a8

08005618 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b088      	sub	sp, #32
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
 8005620:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	613b      	str	r3, [r7, #16]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10b      	bne.n	800565e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564a:	f383 8811 	msr	BASEPRI, r3
 800564e:	f3bf 8f6f 	isb	sy
 8005652:	f3bf 8f4f 	dsb	sy
 8005656:	60fb      	str	r3, [r7, #12]
}
 8005658:	bf00      	nop
 800565a:	bf00      	nop
 800565c:	e7fd      	b.n	800565a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800565e:	f000 fe55 	bl	800630c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005662:	4b1d      	ldr	r3, [pc, #116]	@ (80056d8 <xTaskCheckForTimeOut+0xc0>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	69ba      	ldr	r2, [r7, #24]
 800566e:	1ad3      	subs	r3, r2, r3
 8005670:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005672:	683b      	ldr	r3, [r7, #0]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800567a:	d102      	bne.n	8005682 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800567c:	2300      	movs	r3, #0
 800567e:	61fb      	str	r3, [r7, #28]
 8005680:	e023      	b.n	80056ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681a      	ldr	r2, [r3, #0]
 8005686:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <xTaskCheckForTimeOut+0xc4>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	429a      	cmp	r2, r3
 800568c:	d007      	beq.n	800569e <xTaskCheckForTimeOut+0x86>
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	685b      	ldr	r3, [r3, #4]
 8005692:	69ba      	ldr	r2, [r7, #24]
 8005694:	429a      	cmp	r2, r3
 8005696:	d302      	bcc.n	800569e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	61fb      	str	r3, [r7, #28]
 800569c:	e015      	b.n	80056ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d20b      	bcs.n	80056c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	1ad2      	subs	r2, r2, r3
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80056b4:	6878      	ldr	r0, [r7, #4]
 80056b6:	f7ff ff99 	bl	80055ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80056ba:	2300      	movs	r3, #0
 80056bc:	61fb      	str	r3, [r7, #28]
 80056be:	e004      	b.n	80056ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80056c0:	683b      	ldr	r3, [r7, #0]
 80056c2:	2200      	movs	r2, #0
 80056c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80056c6:	2301      	movs	r3, #1
 80056c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80056ca:	f000 fe4f 	bl	800636c <vPortExitCritical>

	return xReturn;
 80056ce:	69fb      	ldr	r3, [r7, #28]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3720      	adds	r7, #32
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	200011a8 	.word	0x200011a8
 80056dc:	200011bc 	.word	0x200011bc

080056e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80056e0:	b480      	push	{r7}
 80056e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80056e4:	4b03      	ldr	r3, [pc, #12]	@ (80056f4 <vTaskMissedYield+0x14>)
 80056e6:	2201      	movs	r2, #1
 80056e8:	601a      	str	r2, [r3, #0]
}
 80056ea:	bf00      	nop
 80056ec:	46bd      	mov	sp, r7
 80056ee:	bc80      	pop	{r7}
 80056f0:	4770      	bx	lr
 80056f2:	bf00      	nop
 80056f4:	200011b8 	.word	0x200011b8

080056f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b082      	sub	sp, #8
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005700:	f000 f852 	bl	80057a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005704:	4b06      	ldr	r3, [pc, #24]	@ (8005720 <prvIdleTask+0x28>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	2b01      	cmp	r3, #1
 800570a:	d9f9      	bls.n	8005700 <prvIdleTask+0x8>
			{
				taskYIELD();
 800570c:	4b05      	ldr	r3, [pc, #20]	@ (8005724 <prvIdleTask+0x2c>)
 800570e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	f3bf 8f4f 	dsb	sy
 8005718:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800571c:	e7f0      	b.n	8005700 <prvIdleTask+0x8>
 800571e:	bf00      	nop
 8005720:	20000cd4 	.word	0x20000cd4
 8005724:	e000ed04 	.word	0xe000ed04

08005728 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800572e:	2300      	movs	r3, #0
 8005730:	607b      	str	r3, [r7, #4]
 8005732:	e00c      	b.n	800574e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005734:	687a      	ldr	r2, [r7, #4]
 8005736:	4613      	mov	r3, r2
 8005738:	009b      	lsls	r3, r3, #2
 800573a:	4413      	add	r3, r2
 800573c:	009b      	lsls	r3, r3, #2
 800573e:	4a12      	ldr	r2, [pc, #72]	@ (8005788 <prvInitialiseTaskLists+0x60>)
 8005740:	4413      	add	r3, r2
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe fcb8 	bl	80040b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	3301      	adds	r3, #1
 800574c:	607b      	str	r3, [r7, #4]
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2b37      	cmp	r3, #55	@ 0x37
 8005752:	d9ef      	bls.n	8005734 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005754:	480d      	ldr	r0, [pc, #52]	@ (800578c <prvInitialiseTaskLists+0x64>)
 8005756:	f7fe fcaf 	bl	80040b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800575a:	480d      	ldr	r0, [pc, #52]	@ (8005790 <prvInitialiseTaskLists+0x68>)
 800575c:	f7fe fcac 	bl	80040b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005760:	480c      	ldr	r0, [pc, #48]	@ (8005794 <prvInitialiseTaskLists+0x6c>)
 8005762:	f7fe fca9 	bl	80040b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005766:	480c      	ldr	r0, [pc, #48]	@ (8005798 <prvInitialiseTaskLists+0x70>)
 8005768:	f7fe fca6 	bl	80040b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800576c:	480b      	ldr	r0, [pc, #44]	@ (800579c <prvInitialiseTaskLists+0x74>)
 800576e:	f7fe fca3 	bl	80040b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005772:	4b0b      	ldr	r3, [pc, #44]	@ (80057a0 <prvInitialiseTaskLists+0x78>)
 8005774:	4a05      	ldr	r2, [pc, #20]	@ (800578c <prvInitialiseTaskLists+0x64>)
 8005776:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005778:	4b0a      	ldr	r3, [pc, #40]	@ (80057a4 <prvInitialiseTaskLists+0x7c>)
 800577a:	4a05      	ldr	r2, [pc, #20]	@ (8005790 <prvInitialiseTaskLists+0x68>)
 800577c:	601a      	str	r2, [r3, #0]
}
 800577e:	bf00      	nop
 8005780:	3708      	adds	r7, #8
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}
 8005786:	bf00      	nop
 8005788:	20000cd4 	.word	0x20000cd4
 800578c:	20001134 	.word	0x20001134
 8005790:	20001148 	.word	0x20001148
 8005794:	20001164 	.word	0x20001164
 8005798:	20001178 	.word	0x20001178
 800579c:	20001190 	.word	0x20001190
 80057a0:	2000115c 	.word	0x2000115c
 80057a4:	20001160 	.word	0x20001160

080057a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057ae:	e019      	b.n	80057e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80057b0:	f000 fdac 	bl	800630c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b4:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <prvCheckTasksWaitingTermination+0x50>)
 80057b6:	68db      	ldr	r3, [r3, #12]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	3304      	adds	r3, #4
 80057c0:	4618      	mov	r0, r3
 80057c2:	f7fe fcff 	bl	80041c4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80057c6:	4b0d      	ldr	r3, [pc, #52]	@ (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	3b01      	subs	r3, #1
 80057cc:	4a0b      	ldr	r2, [pc, #44]	@ (80057fc <prvCheckTasksWaitingTermination+0x54>)
 80057ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	4a0a      	ldr	r2, [pc, #40]	@ (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80057da:	f000 fdc7 	bl	800636c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80057de:	6878      	ldr	r0, [r7, #4]
 80057e0:	f000 f810 	bl	8005804 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057e4:	4b06      	ldr	r3, [pc, #24]	@ (8005800 <prvCheckTasksWaitingTermination+0x58>)
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d1e1      	bne.n	80057b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80057ec:	bf00      	nop
 80057ee:	bf00      	nop
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
 80057f6:	bf00      	nop
 80057f8:	20001178 	.word	0x20001178
 80057fc:	200011a4 	.word	0x200011a4
 8005800:	2000118c 	.word	0x2000118c

08005804 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005804:	b580      	push	{r7, lr}
 8005806:	b084      	sub	sp, #16
 8005808:	af00      	add	r7, sp, #0
 800580a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3354      	adds	r3, #84	@ 0x54
 8005810:	4618      	mov	r0, r3
 8005812:	f001 f871 	bl	80068f8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800581c:	2b00      	cmp	r3, #0
 800581e:	d108      	bne.n	8005832 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005824:	4618      	mov	r0, r3
 8005826:	f000 ff41 	bl	80066ac <vPortFree>
				vPortFree( pxTCB );
 800582a:	6878      	ldr	r0, [r7, #4]
 800582c:	f000 ff3e 	bl	80066ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005830:	e019      	b.n	8005866 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8005838:	2b01      	cmp	r3, #1
 800583a:	d103      	bne.n	8005844 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800583c:	6878      	ldr	r0, [r7, #4]
 800583e:	f000 ff35 	bl	80066ac <vPortFree>
	}
 8005842:	e010      	b.n	8005866 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800584a:	2b02      	cmp	r3, #2
 800584c:	d00b      	beq.n	8005866 <prvDeleteTCB+0x62>
	__asm volatile
 800584e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005852:	f383 8811 	msr	BASEPRI, r3
 8005856:	f3bf 8f6f 	isb	sy
 800585a:	f3bf 8f4f 	dsb	sy
 800585e:	60fb      	str	r3, [r7, #12]
}
 8005860:	bf00      	nop
 8005862:	bf00      	nop
 8005864:	e7fd      	b.n	8005862 <prvDeleteTCB+0x5e>
	}
 8005866:	bf00      	nop
 8005868:	3710      	adds	r7, #16
 800586a:	46bd      	mov	sp, r7
 800586c:	bd80      	pop	{r7, pc}
	...

08005870 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005870:	b480      	push	{r7}
 8005872:	b083      	sub	sp, #12
 8005874:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005876:	4b0c      	ldr	r3, [pc, #48]	@ (80058a8 <prvResetNextTaskUnblockTime+0x38>)
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d104      	bne.n	800588a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005880:	4b0a      	ldr	r3, [pc, #40]	@ (80058ac <prvResetNextTaskUnblockTime+0x3c>)
 8005882:	f04f 32ff 	mov.w	r2, #4294967295
 8005886:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005888:	e008      	b.n	800589c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800588a:	4b07      	ldr	r3, [pc, #28]	@ (80058a8 <prvResetNextTaskUnblockTime+0x38>)
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	68db      	ldr	r3, [r3, #12]
 8005892:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	4a04      	ldr	r2, [pc, #16]	@ (80058ac <prvResetNextTaskUnblockTime+0x3c>)
 800589a:	6013      	str	r3, [r2, #0]
}
 800589c:	bf00      	nop
 800589e:	370c      	adds	r7, #12
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bc80      	pop	{r7}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	2000115c 	.word	0x2000115c
 80058ac:	200011c4 	.word	0x200011c4

080058b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80058b6:	4b0b      	ldr	r3, [pc, #44]	@ (80058e4 <xTaskGetSchedulerState+0x34>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d102      	bne.n	80058c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80058be:	2301      	movs	r3, #1
 80058c0:	607b      	str	r3, [r7, #4]
 80058c2:	e008      	b.n	80058d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80058c4:	4b08      	ldr	r3, [pc, #32]	@ (80058e8 <xTaskGetSchedulerState+0x38>)
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d102      	bne.n	80058d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80058cc:	2302      	movs	r3, #2
 80058ce:	607b      	str	r3, [r7, #4]
 80058d0:	e001      	b.n	80058d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80058d2:	2300      	movs	r3, #0
 80058d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80058d6:	687b      	ldr	r3, [r7, #4]
	}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	200011b0 	.word	0x200011b0
 80058e8:	200011cc 	.word	0x200011cc

080058ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b086      	sub	sp, #24
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80058f8:	2300      	movs	r3, #0
 80058fa:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d058      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005902:	4b2f      	ldr	r3, [pc, #188]	@ (80059c0 <xTaskPriorityDisinherit+0xd4>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	693a      	ldr	r2, [r7, #16]
 8005908:	429a      	cmp	r2, r3
 800590a:	d00b      	beq.n	8005924 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800590c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005910:	f383 8811 	msr	BASEPRI, r3
 8005914:	f3bf 8f6f 	isb	sy
 8005918:	f3bf 8f4f 	dsb	sy
 800591c:	60fb      	str	r3, [r7, #12]
}
 800591e:	bf00      	nop
 8005920:	bf00      	nop
 8005922:	e7fd      	b.n	8005920 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005928:	2b00      	cmp	r3, #0
 800592a:	d10b      	bne.n	8005944 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800592c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005930:	f383 8811 	msr	BASEPRI, r3
 8005934:	f3bf 8f6f 	isb	sy
 8005938:	f3bf 8f4f 	dsb	sy
 800593c:	60bb      	str	r3, [r7, #8]
}
 800593e:	bf00      	nop
 8005940:	bf00      	nop
 8005942:	e7fd      	b.n	8005940 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005948:	1e5a      	subs	r2, r3, #1
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005956:	429a      	cmp	r2, r3
 8005958:	d02c      	beq.n	80059b4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d128      	bne.n	80059b4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005962:	693b      	ldr	r3, [r7, #16]
 8005964:	3304      	adds	r3, #4
 8005966:	4618      	mov	r0, r3
 8005968:	f7fe fc2c 	bl	80041c4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005974:	693b      	ldr	r3, [r7, #16]
 8005976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005978:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800597c:	693b      	ldr	r3, [r7, #16]
 800597e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005980:	693b      	ldr	r3, [r7, #16]
 8005982:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005984:	4b0f      	ldr	r3, [pc, #60]	@ (80059c4 <xTaskPriorityDisinherit+0xd8>)
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	429a      	cmp	r2, r3
 800598a:	d903      	bls.n	8005994 <xTaskPriorityDisinherit+0xa8>
 800598c:	693b      	ldr	r3, [r7, #16]
 800598e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005990:	4a0c      	ldr	r2, [pc, #48]	@ (80059c4 <xTaskPriorityDisinherit+0xd8>)
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009b      	lsls	r3, r3, #2
 80059a0:	4a09      	ldr	r2, [pc, #36]	@ (80059c8 <xTaskPriorityDisinherit+0xdc>)
 80059a2:	441a      	add	r2, r3
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3304      	adds	r3, #4
 80059a8:	4619      	mov	r1, r3
 80059aa:	4610      	mov	r0, r2
 80059ac:	f7fe fbaf 	bl	800410e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80059b0:	2301      	movs	r3, #1
 80059b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059b4:	697b      	ldr	r3, [r7, #20]
	}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3718      	adds	r7, #24
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	20000cd0 	.word	0x20000cd0
 80059c4:	200011ac 	.word	0x200011ac
 80059c8:	20000cd4 	.word	0x20000cd4

080059cc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b084      	sub	sp, #16
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80059d6:	4b21      	ldr	r3, [pc, #132]	@ (8005a5c <prvAddCurrentTaskToDelayedList+0x90>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059dc:	4b20      	ldr	r3, [pc, #128]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fe fbee 	bl	80041c4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ee:	d10a      	bne.n	8005a06 <prvAddCurrentTaskToDelayedList+0x3a>
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d007      	beq.n	8005a06 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80059f6:	4b1a      	ldr	r3, [pc, #104]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x94>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	3304      	adds	r3, #4
 80059fc:	4619      	mov	r1, r3
 80059fe:	4819      	ldr	r0, [pc, #100]	@ (8005a64 <prvAddCurrentTaskToDelayedList+0x98>)
 8005a00:	f7fe fb85 	bl	800410e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005a04:	e026      	b.n	8005a54 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005a0e:	4b14      	ldr	r3, [pc, #80]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	68ba      	ldr	r2, [r7, #8]
 8005a14:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d209      	bcs.n	8005a32 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a1e:	4b12      	ldr	r3, [pc, #72]	@ (8005a68 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	4b0f      	ldr	r3, [pc, #60]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	3304      	adds	r3, #4
 8005a28:	4619      	mov	r1, r3
 8005a2a:	4610      	mov	r0, r2
 8005a2c:	f7fe fb92 	bl	8004154 <vListInsert>
}
 8005a30:	e010      	b.n	8005a54 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005a32:	4b0e      	ldr	r3, [pc, #56]	@ (8005a6c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	4b0a      	ldr	r3, [pc, #40]	@ (8005a60 <prvAddCurrentTaskToDelayedList+0x94>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	3304      	adds	r3, #4
 8005a3c:	4619      	mov	r1, r3
 8005a3e:	4610      	mov	r0, r2
 8005a40:	f7fe fb88 	bl	8004154 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005a44:	4b0a      	ldr	r3, [pc, #40]	@ (8005a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	68ba      	ldr	r2, [r7, #8]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d202      	bcs.n	8005a54 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005a4e:	4a08      	ldr	r2, [pc, #32]	@ (8005a70 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6013      	str	r3, [r2, #0]
}
 8005a54:	bf00      	nop
 8005a56:	3710      	adds	r7, #16
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	200011a8 	.word	0x200011a8
 8005a60:	20000cd0 	.word	0x20000cd0
 8005a64:	20001190 	.word	0x20001190
 8005a68:	20001160 	.word	0x20001160
 8005a6c:	2000115c 	.word	0x2000115c
 8005a70:	200011c4 	.word	0x200011c4

08005a74 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005a74:	b580      	push	{r7, lr}
 8005a76:	b08a      	sub	sp, #40	@ 0x28
 8005a78:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005a7a:	2300      	movs	r3, #0
 8005a7c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005a7e:	f000 fb11 	bl	80060a4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005a82:	4b1d      	ldr	r3, [pc, #116]	@ (8005af8 <xTimerCreateTimerTask+0x84>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d021      	beq.n	8005ace <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005a92:	1d3a      	adds	r2, r7, #4
 8005a94:	f107 0108 	add.w	r1, r7, #8
 8005a98:	f107 030c 	add.w	r3, r7, #12
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7fe faf1 	bl	8004084 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005aa2:	6879      	ldr	r1, [r7, #4]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	68fa      	ldr	r2, [r7, #12]
 8005aa8:	9202      	str	r2, [sp, #8]
 8005aaa:	9301      	str	r3, [sp, #4]
 8005aac:	2302      	movs	r3, #2
 8005aae:	9300      	str	r3, [sp, #0]
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	460a      	mov	r2, r1
 8005ab4:	4911      	ldr	r1, [pc, #68]	@ (8005afc <xTimerCreateTimerTask+0x88>)
 8005ab6:	4812      	ldr	r0, [pc, #72]	@ (8005b00 <xTimerCreateTimerTask+0x8c>)
 8005ab8:	f7ff f8a6 	bl	8004c08 <xTaskCreateStatic>
 8005abc:	4603      	mov	r3, r0
 8005abe:	4a11      	ldr	r2, [pc, #68]	@ (8005b04 <xTimerCreateTimerTask+0x90>)
 8005ac0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005ac2:	4b10      	ldr	r3, [pc, #64]	@ (8005b04 <xTimerCreateTimerTask+0x90>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d001      	beq.n	8005ace <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005aca:	2301      	movs	r3, #1
 8005acc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005ace:	697b      	ldr	r3, [r7, #20]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d10b      	bne.n	8005aec <xTimerCreateTimerTask+0x78>
	__asm volatile
 8005ad4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ad8:	f383 8811 	msr	BASEPRI, r3
 8005adc:	f3bf 8f6f 	isb	sy
 8005ae0:	f3bf 8f4f 	dsb	sy
 8005ae4:	613b      	str	r3, [r7, #16]
}
 8005ae6:	bf00      	nop
 8005ae8:	bf00      	nop
 8005aea:	e7fd      	b.n	8005ae8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005aec:	697b      	ldr	r3, [r7, #20]
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	3718      	adds	r7, #24
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}
 8005af6:	bf00      	nop
 8005af8:	20001200 	.word	0x20001200
 8005afc:	08007b54 	.word	0x08007b54
 8005b00:	08005c41 	.word	0x08005c41
 8005b04:	20001204 	.word	0x20001204

08005b08 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b08a      	sub	sp, #40	@ 0x28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]
 8005b14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005b16:	2300      	movs	r3, #0
 8005b18:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xTimerGenericCommand+0x30>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	623b      	str	r3, [r7, #32]
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005b38:	4b19      	ldr	r3, [pc, #100]	@ (8005ba0 <xTimerGenericCommand+0x98>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d02a      	beq.n	8005b96 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005b4c:	68bb      	ldr	r3, [r7, #8]
 8005b4e:	2b05      	cmp	r3, #5
 8005b50:	dc18      	bgt.n	8005b84 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005b52:	f7ff fead 	bl	80058b0 <xTaskGetSchedulerState>
 8005b56:	4603      	mov	r3, r0
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d109      	bne.n	8005b70 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005b5c:	4b10      	ldr	r3, [pc, #64]	@ (8005ba0 <xTimerGenericCommand+0x98>)
 8005b5e:	6818      	ldr	r0, [r3, #0]
 8005b60:	f107 0110 	add.w	r1, r7, #16
 8005b64:	2300      	movs	r3, #0
 8005b66:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b68:	f7fe fc60 	bl	800442c <xQueueGenericSend>
 8005b6c:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b6e:	e012      	b.n	8005b96 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005b70:	4b0b      	ldr	r3, [pc, #44]	@ (8005ba0 <xTimerGenericCommand+0x98>)
 8005b72:	6818      	ldr	r0, [r3, #0]
 8005b74:	f107 0110 	add.w	r1, r7, #16
 8005b78:	2300      	movs	r3, #0
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f7fe fc56 	bl	800442c <xQueueGenericSend>
 8005b80:	6278      	str	r0, [r7, #36]	@ 0x24
 8005b82:	e008      	b.n	8005b96 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005b84:	4b06      	ldr	r3, [pc, #24]	@ (8005ba0 <xTimerGenericCommand+0x98>)
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	f107 0110 	add.w	r1, r7, #16
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	f7fe fd4e 	bl	8004630 <xQueueGenericSendFromISR>
 8005b94:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3728      	adds	r7, #40	@ 0x28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}
 8005ba0:	20001200 	.word	0x20001200

08005ba4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b088      	sub	sp, #32
 8005ba8:	af02      	add	r7, sp, #8
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005bae:	4b23      	ldr	r3, [pc, #140]	@ (8005c3c <prvProcessExpiredTimer+0x98>)
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	68db      	ldr	r3, [r3, #12]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	3304      	adds	r3, #4
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	f7fe fb01 	bl	80041c4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005bc8:	f003 0304 	and.w	r3, r3, #4
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d023      	beq.n	8005c18 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005bd0:	697b      	ldr	r3, [r7, #20]
 8005bd2:	699a      	ldr	r2, [r3, #24]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	18d1      	adds	r1, r2, r3
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	683a      	ldr	r2, [r7, #0]
 8005bdc:	6978      	ldr	r0, [r7, #20]
 8005bde:	f000 f8d3 	bl	8005d88 <prvInsertTimerInActiveList>
 8005be2:	4603      	mov	r3, r0
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d020      	beq.n	8005c2a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005be8:	2300      	movs	r3, #0
 8005bea:	9300      	str	r3, [sp, #0]
 8005bec:	2300      	movs	r3, #0
 8005bee:	687a      	ldr	r2, [r7, #4]
 8005bf0:	2100      	movs	r1, #0
 8005bf2:	6978      	ldr	r0, [r7, #20]
 8005bf4:	f7ff ff88 	bl	8005b08 <xTimerGenericCommand>
 8005bf8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d114      	bne.n	8005c2a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8005c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c04:	f383 8811 	msr	BASEPRI, r3
 8005c08:	f3bf 8f6f 	isb	sy
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	60fb      	str	r3, [r7, #12]
}
 8005c12:	bf00      	nop
 8005c14:	bf00      	nop
 8005c16:	e7fd      	b.n	8005c14 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005c1e:	f023 0301 	bic.w	r3, r3, #1
 8005c22:	b2da      	uxtb	r2, r3
 8005c24:	697b      	ldr	r3, [r7, #20]
 8005c26:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	6978      	ldr	r0, [r7, #20]
 8005c30:	4798      	blx	r3
}
 8005c32:	bf00      	nop
 8005c34:	3718      	adds	r7, #24
 8005c36:	46bd      	mov	sp, r7
 8005c38:	bd80      	pop	{r7, pc}
 8005c3a:	bf00      	nop
 8005c3c:	200011f8 	.word	0x200011f8

08005c40 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c48:	f107 0308 	add.w	r3, r7, #8
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f000 f859 	bl	8005d04 <prvGetNextExpireTime>
 8005c52:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005c54:	68bb      	ldr	r3, [r7, #8]
 8005c56:	4619      	mov	r1, r3
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	f000 f805 	bl	8005c68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005c5e:	f000 f8d5 	bl	8005e0c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005c62:	bf00      	nop
 8005c64:	e7f0      	b.n	8005c48 <prvTimerTask+0x8>
	...

08005c68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b084      	sub	sp, #16
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
 8005c70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005c72:	f7ff fa2d 	bl	80050d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005c76:	f107 0308 	add.w	r3, r7, #8
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f000 f864 	bl	8005d48 <prvSampleTimeNow>
 8005c80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005c82:	68bb      	ldr	r3, [r7, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d130      	bne.n	8005cea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d10a      	bne.n	8005ca4 <prvProcessTimerOrBlockTask+0x3c>
 8005c8e:	687a      	ldr	r2, [r7, #4]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	429a      	cmp	r2, r3
 8005c94:	d806      	bhi.n	8005ca4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005c96:	f7ff fa29 	bl	80050ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005c9a:	68f9      	ldr	r1, [r7, #12]
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f7ff ff81 	bl	8005ba4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005ca2:	e024      	b.n	8005cee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d008      	beq.n	8005cbc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005caa:	4b13      	ldr	r3, [pc, #76]	@ (8005cf8 <prvProcessTimerOrBlockTask+0x90>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d101      	bne.n	8005cb8 <prvProcessTimerOrBlockTask+0x50>
 8005cb4:	2301      	movs	r3, #1
 8005cb6:	e000      	b.n	8005cba <prvProcessTimerOrBlockTask+0x52>
 8005cb8:	2300      	movs	r3, #0
 8005cba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005cbc:	4b0f      	ldr	r3, [pc, #60]	@ (8005cfc <prvProcessTimerOrBlockTask+0x94>)
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	687a      	ldr	r2, [r7, #4]
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	1ad3      	subs	r3, r2, r3
 8005cc6:	683a      	ldr	r2, [r7, #0]
 8005cc8:	4619      	mov	r1, r3
 8005cca:	f7fe ff69 	bl	8004ba0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005cce:	f7ff fa0d 	bl	80050ec <xTaskResumeAll>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d10a      	bne.n	8005cee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005cd8:	4b09      	ldr	r3, [pc, #36]	@ (8005d00 <prvProcessTimerOrBlockTask+0x98>)
 8005cda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cde:	601a      	str	r2, [r3, #0]
 8005ce0:	f3bf 8f4f 	dsb	sy
 8005ce4:	f3bf 8f6f 	isb	sy
}
 8005ce8:	e001      	b.n	8005cee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005cea:	f7ff f9ff 	bl	80050ec <xTaskResumeAll>
}
 8005cee:	bf00      	nop
 8005cf0:	3710      	adds	r7, #16
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	bd80      	pop	{r7, pc}
 8005cf6:	bf00      	nop
 8005cf8:	200011fc 	.word	0x200011fc
 8005cfc:	20001200 	.word	0x20001200
 8005d00:	e000ed04 	.word	0xe000ed04

08005d04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005d04:	b480      	push	{r7}
 8005d06:	b085      	sub	sp, #20
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005d0c:	4b0d      	ldr	r3, [pc, #52]	@ (8005d44 <prvGetNextExpireTime+0x40>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d101      	bne.n	8005d1a <prvGetNextExpireTime+0x16>
 8005d16:	2201      	movs	r2, #1
 8005d18:	e000      	b.n	8005d1c <prvGetNextExpireTime+0x18>
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d105      	bne.n	8005d34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005d28:	4b06      	ldr	r3, [pc, #24]	@ (8005d44 <prvGetNextExpireTime+0x40>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	68db      	ldr	r3, [r3, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e001      	b.n	8005d38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005d34:	2300      	movs	r3, #0
 8005d36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005d38:	68fb      	ldr	r3, [r7, #12]
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3714      	adds	r7, #20
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bc80      	pop	{r7}
 8005d42:	4770      	bx	lr
 8005d44:	200011f8 	.word	0x200011f8

08005d48 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b084      	sub	sp, #16
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005d50:	f7ff fa6a 	bl	8005228 <xTaskGetTickCount>
 8005d54:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005d56:	4b0b      	ldr	r3, [pc, #44]	@ (8005d84 <prvSampleTimeNow+0x3c>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d205      	bcs.n	8005d6c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005d60:	f000 f93a 	bl	8005fd8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2201      	movs	r2, #1
 8005d68:	601a      	str	r2, [r3, #0]
 8005d6a:	e002      	b.n	8005d72 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005d72:	4a04      	ldr	r2, [pc, #16]	@ (8005d84 <prvSampleTimeNow+0x3c>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005d78:	68fb      	ldr	r3, [r7, #12]
}
 8005d7a:	4618      	mov	r0, r3
 8005d7c:	3710      	adds	r7, #16
 8005d7e:	46bd      	mov	sp, r7
 8005d80:	bd80      	pop	{r7, pc}
 8005d82:	bf00      	nop
 8005d84:	20001208 	.word	0x20001208

08005d88 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b086      	sub	sp, #24
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	60f8      	str	r0, [r7, #12]
 8005d90:	60b9      	str	r1, [r7, #8]
 8005d92:	607a      	str	r2, [r7, #4]
 8005d94:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	68ba      	ldr	r2, [r7, #8]
 8005d9e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	68fa      	ldr	r2, [r7, #12]
 8005da4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005da6:	68ba      	ldr	r2, [r7, #8]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d812      	bhi.n	8005dd4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	1ad2      	subs	r2, r2, r3
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	699b      	ldr	r3, [r3, #24]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d302      	bcc.n	8005dc2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	617b      	str	r3, [r7, #20]
 8005dc0:	e01b      	b.n	8005dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005dc2:	4b10      	ldr	r3, [pc, #64]	@ (8005e04 <prvInsertTimerInActiveList+0x7c>)
 8005dc4:	681a      	ldr	r2, [r3, #0]
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	3304      	adds	r3, #4
 8005dca:	4619      	mov	r1, r3
 8005dcc:	4610      	mov	r0, r2
 8005dce:	f7fe f9c1 	bl	8004154 <vListInsert>
 8005dd2:	e012      	b.n	8005dfa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005dd4:	687a      	ldr	r2, [r7, #4]
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d206      	bcs.n	8005dea <prvInsertTimerInActiveList+0x62>
 8005ddc:	68ba      	ldr	r2, [r7, #8]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	d302      	bcc.n	8005dea <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005de4:	2301      	movs	r3, #1
 8005de6:	617b      	str	r3, [r7, #20]
 8005de8:	e007      	b.n	8005dfa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005dea:	4b07      	ldr	r3, [pc, #28]	@ (8005e08 <prvInsertTimerInActiveList+0x80>)
 8005dec:	681a      	ldr	r2, [r3, #0]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4619      	mov	r1, r3
 8005df4:	4610      	mov	r0, r2
 8005df6:	f7fe f9ad 	bl	8004154 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005dfa:	697b      	ldr	r3, [r7, #20]
}
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	3718      	adds	r7, #24
 8005e00:	46bd      	mov	sp, r7
 8005e02:	bd80      	pop	{r7, pc}
 8005e04:	200011fc 	.word	0x200011fc
 8005e08:	200011f8 	.word	0x200011f8

08005e0c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b08e      	sub	sp, #56	@ 0x38
 8005e10:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005e12:	e0ce      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	da19      	bge.n	8005e4e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005e1a:	1d3b      	adds	r3, r7, #4
 8005e1c:	3304      	adds	r3, #4
 8005e1e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005e20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d10b      	bne.n	8005e3e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8005e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2a:	f383 8811 	msr	BASEPRI, r3
 8005e2e:	f3bf 8f6f 	isb	sy
 8005e32:	f3bf 8f4f 	dsb	sy
 8005e36:	61fb      	str	r3, [r7, #28]
}
 8005e38:	bf00      	nop
 8005e3a:	bf00      	nop
 8005e3c:	e7fd      	b.n	8005e3a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005e3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e44:	6850      	ldr	r0, [r2, #4]
 8005e46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005e48:	6892      	ldr	r2, [r2, #8]
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	f2c0 80ae 	blt.w	8005fb2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5c:	695b      	ldr	r3, [r3, #20]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d004      	beq.n	8005e6c <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e64:	3304      	adds	r3, #4
 8005e66:	4618      	mov	r0, r3
 8005e68:	f7fe f9ac 	bl	80041c4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005e6c:	463b      	mov	r3, r7
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f7ff ff6a 	bl	8005d48 <prvSampleTimeNow>
 8005e74:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2b09      	cmp	r3, #9
 8005e7a:	f200 8097 	bhi.w	8005fac <prvProcessReceivedCommands+0x1a0>
 8005e7e:	a201      	add	r2, pc, #4	@ (adr r2, 8005e84 <prvProcessReceivedCommands+0x78>)
 8005e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e84:	08005ead 	.word	0x08005ead
 8005e88:	08005ead 	.word	0x08005ead
 8005e8c:	08005ead 	.word	0x08005ead
 8005e90:	08005f23 	.word	0x08005f23
 8005e94:	08005f37 	.word	0x08005f37
 8005e98:	08005f83 	.word	0x08005f83
 8005e9c:	08005ead 	.word	0x08005ead
 8005ea0:	08005ead 	.word	0x08005ead
 8005ea4:	08005f23 	.word	0x08005f23
 8005ea8:	08005f37 	.word	0x08005f37
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005eb2:	f043 0301 	orr.w	r3, r3, #1
 8005eb6:	b2da      	uxtb	r2, r3
 8005eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005eba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005ebe:	68ba      	ldr	r2, [r7, #8]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	699b      	ldr	r3, [r3, #24]
 8005ec4:	18d1      	adds	r1, r2, r3
 8005ec6:	68bb      	ldr	r3, [r7, #8]
 8005ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005eca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ecc:	f7ff ff5c 	bl	8005d88 <prvInsertTimerInActiveList>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d06c      	beq.n	8005fb0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
 8005eda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005edc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005ee4:	f003 0304 	and.w	r3, r3, #4
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d061      	beq.n	8005fb0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef0:	699b      	ldr	r3, [r3, #24]
 8005ef2:	441a      	add	r2, r3
 8005ef4:	2300      	movs	r3, #0
 8005ef6:	9300      	str	r3, [sp, #0]
 8005ef8:	2300      	movs	r3, #0
 8005efa:	2100      	movs	r1, #0
 8005efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005efe:	f7ff fe03 	bl	8005b08 <xTimerGenericCommand>
 8005f02:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005f04:	6a3b      	ldr	r3, [r7, #32]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d152      	bne.n	8005fb0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8005f0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f0e:	f383 8811 	msr	BASEPRI, r3
 8005f12:	f3bf 8f6f 	isb	sy
 8005f16:	f3bf 8f4f 	dsb	sy
 8005f1a:	61bb      	str	r3, [r7, #24]
}
 8005f1c:	bf00      	nop
 8005f1e:	bf00      	nop
 8005f20:	e7fd      	b.n	8005f1e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f24:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f28:	f023 0301 	bic.w	r3, r3, #1
 8005f2c:	b2da      	uxtb	r2, r3
 8005f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f30:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005f34:	e03d      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f38:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f3c:	f043 0301 	orr.w	r3, r3, #1
 8005f40:	b2da      	uxtb	r2, r3
 8005f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f44:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f4c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005f4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d10b      	bne.n	8005f6e <prvProcessReceivedCommands+0x162>
	__asm volatile
 8005f56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f5a:	f383 8811 	msr	BASEPRI, r3
 8005f5e:	f3bf 8f6f 	isb	sy
 8005f62:	f3bf 8f4f 	dsb	sy
 8005f66:	617b      	str	r3, [r7, #20]
}
 8005f68:	bf00      	nop
 8005f6a:	bf00      	nop
 8005f6c:	e7fd      	b.n	8005f6a <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f70:	699a      	ldr	r2, [r3, #24]
 8005f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f74:	18d1      	adds	r1, r2, r3
 8005f76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005f7a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f7c:	f7ff ff04 	bl	8005d88 <prvInsertTimerInActiveList>
					break;
 8005f80:	e017      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f84:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d103      	bne.n	8005f98 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8005f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f92:	f000 fb8b 	bl	80066ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005f96:	e00c      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005f98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f9a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8005f9e:	f023 0301 	bic.w	r3, r3, #1
 8005fa2:	b2da      	uxtb	r2, r3
 8005fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8005faa:	e002      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8005fac:	bf00      	nop
 8005fae:	e000      	b.n	8005fb2 <prvProcessReceivedCommands+0x1a6>
					break;
 8005fb0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005fb2:	4b08      	ldr	r3, [pc, #32]	@ (8005fd4 <prvProcessReceivedCommands+0x1c8>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	1d39      	adds	r1, r7, #4
 8005fb8:	2200      	movs	r2, #0
 8005fba:	4618      	mov	r0, r3
 8005fbc:	f7fe fbd6 	bl	800476c <xQueueReceive>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	f47f af26 	bne.w	8005e14 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8005fc8:	bf00      	nop
 8005fca:	bf00      	nop
 8005fcc:	3730      	adds	r7, #48	@ 0x30
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
 8005fd2:	bf00      	nop
 8005fd4:	20001200 	.word	0x20001200

08005fd8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005fd8:	b580      	push	{r7, lr}
 8005fda:	b088      	sub	sp, #32
 8005fdc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005fde:	e049      	b.n	8006074 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005fe0:	4b2e      	ldr	r3, [pc, #184]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68db      	ldr	r3, [r3, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fea:	4b2c      	ldr	r3, [pc, #176]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	68db      	ldr	r3, [r3, #12]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	3304      	adds	r3, #4
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fe f8e3 	bl	80041c4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	6a1b      	ldr	r3, [r3, #32]
 8006002:	68f8      	ldr	r0, [r7, #12]
 8006004:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800600c:	f003 0304 	and.w	r3, r3, #4
 8006010:	2b00      	cmp	r3, #0
 8006012:	d02f      	beq.n	8006074 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4413      	add	r3, r2
 800601c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	429a      	cmp	r2, r3
 8006024:	d90e      	bls.n	8006044 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	68fa      	ldr	r2, [r7, #12]
 8006030:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006032:	4b1a      	ldr	r3, [pc, #104]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006034:	681a      	ldr	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	3304      	adds	r3, #4
 800603a:	4619      	mov	r1, r3
 800603c:	4610      	mov	r0, r2
 800603e:	f7fe f889 	bl	8004154 <vListInsert>
 8006042:	e017      	b.n	8006074 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006044:	2300      	movs	r3, #0
 8006046:	9300      	str	r3, [sp, #0]
 8006048:	2300      	movs	r3, #0
 800604a:	693a      	ldr	r2, [r7, #16]
 800604c:	2100      	movs	r1, #0
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f7ff fd5a 	bl	8005b08 <xTimerGenericCommand>
 8006054:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	2b00      	cmp	r3, #0
 800605a:	d10b      	bne.n	8006074 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800605c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006060:	f383 8811 	msr	BASEPRI, r3
 8006064:	f3bf 8f6f 	isb	sy
 8006068:	f3bf 8f4f 	dsb	sy
 800606c:	603b      	str	r3, [r7, #0]
}
 800606e:	bf00      	nop
 8006070:	bf00      	nop
 8006072:	e7fd      	b.n	8006070 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006074:	4b09      	ldr	r3, [pc, #36]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d1b0      	bne.n	8005fe0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800607e:	4b07      	ldr	r3, [pc, #28]	@ (800609c <prvSwitchTimerLists+0xc4>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006084:	4b06      	ldr	r3, [pc, #24]	@ (80060a0 <prvSwitchTimerLists+0xc8>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a04      	ldr	r2, [pc, #16]	@ (800609c <prvSwitchTimerLists+0xc4>)
 800608a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800608c:	4a04      	ldr	r2, [pc, #16]	@ (80060a0 <prvSwitchTimerLists+0xc8>)
 800608e:	697b      	ldr	r3, [r7, #20]
 8006090:	6013      	str	r3, [r2, #0]
}
 8006092:	bf00      	nop
 8006094:	3718      	adds	r7, #24
 8006096:	46bd      	mov	sp, r7
 8006098:	bd80      	pop	{r7, pc}
 800609a:	bf00      	nop
 800609c:	200011f8 	.word	0x200011f8
 80060a0:	200011fc 	.word	0x200011fc

080060a4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80060a4:	b580      	push	{r7, lr}
 80060a6:	b082      	sub	sp, #8
 80060a8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80060aa:	f000 f92f 	bl	800630c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80060ae:	4b15      	ldr	r3, [pc, #84]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d120      	bne.n	80060f8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80060b6:	4814      	ldr	r0, [pc, #80]	@ (8006108 <prvCheckForValidListAndQueue+0x64>)
 80060b8:	f7fd fffe 	bl	80040b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80060bc:	4813      	ldr	r0, [pc, #76]	@ (800610c <prvCheckForValidListAndQueue+0x68>)
 80060be:	f7fd fffb 	bl	80040b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80060c2:	4b13      	ldr	r3, [pc, #76]	@ (8006110 <prvCheckForValidListAndQueue+0x6c>)
 80060c4:	4a10      	ldr	r2, [pc, #64]	@ (8006108 <prvCheckForValidListAndQueue+0x64>)
 80060c6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80060c8:	4b12      	ldr	r3, [pc, #72]	@ (8006114 <prvCheckForValidListAndQueue+0x70>)
 80060ca:	4a10      	ldr	r2, [pc, #64]	@ (800610c <prvCheckForValidListAndQueue+0x68>)
 80060cc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80060ce:	2300      	movs	r3, #0
 80060d0:	9300      	str	r3, [sp, #0]
 80060d2:	4b11      	ldr	r3, [pc, #68]	@ (8006118 <prvCheckForValidListAndQueue+0x74>)
 80060d4:	4a11      	ldr	r2, [pc, #68]	@ (800611c <prvCheckForValidListAndQueue+0x78>)
 80060d6:	2110      	movs	r1, #16
 80060d8:	200a      	movs	r0, #10
 80060da:	f7fe f907 	bl	80042ec <xQueueGenericCreateStatic>
 80060de:	4603      	mov	r3, r0
 80060e0:	4a08      	ldr	r2, [pc, #32]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060e2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80060e4:	4b07      	ldr	r3, [pc, #28]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80060ec:	4b05      	ldr	r3, [pc, #20]	@ (8006104 <prvCheckForValidListAndQueue+0x60>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	490b      	ldr	r1, [pc, #44]	@ (8006120 <prvCheckForValidListAndQueue+0x7c>)
 80060f2:	4618      	mov	r0, r3
 80060f4:	f7fe fd2c 	bl	8004b50 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060f8:	f000 f938 	bl	800636c <vPortExitCritical>
}
 80060fc:	bf00      	nop
 80060fe:	46bd      	mov	sp, r7
 8006100:	bd80      	pop	{r7, pc}
 8006102:	bf00      	nop
 8006104:	20001200 	.word	0x20001200
 8006108:	200011d0 	.word	0x200011d0
 800610c:	200011e4 	.word	0x200011e4
 8006110:	200011f8 	.word	0x200011f8
 8006114:	200011fc 	.word	0x200011fc
 8006118:	200012ac 	.word	0x200012ac
 800611c:	2000120c 	.word	0x2000120c
 8006120:	08007b5c 	.word	0x08007b5c

08006124 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006124:	b480      	push	{r7}
 8006126:	b085      	sub	sp, #20
 8006128:	af00      	add	r7, sp, #0
 800612a:	60f8      	str	r0, [r7, #12]
 800612c:	60b9      	str	r1, [r7, #8]
 800612e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3b04      	subs	r3, #4
 8006134:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800613c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	3b04      	subs	r3, #4
 8006142:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006144:	68bb      	ldr	r3, [r7, #8]
 8006146:	f023 0201 	bic.w	r2, r3, #1
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b04      	subs	r3, #4
 8006152:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006154:	4a08      	ldr	r2, [pc, #32]	@ (8006178 <pxPortInitialiseStack+0x54>)
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	3b14      	subs	r3, #20
 800615e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	3b20      	subs	r3, #32
 800616a:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800616c:	68fb      	ldr	r3, [r7, #12]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3714      	adds	r7, #20
 8006172:	46bd      	mov	sp, r7
 8006174:	bc80      	pop	{r7}
 8006176:	4770      	bx	lr
 8006178:	0800617d 	.word	0x0800617d

0800617c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006182:	2300      	movs	r3, #0
 8006184:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006186:	4b12      	ldr	r3, [pc, #72]	@ (80061d0 <prvTaskExitError+0x54>)
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800618e:	d00b      	beq.n	80061a8 <prvTaskExitError+0x2c>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <prvTaskExitError+0x28>
	__asm volatile
 80061a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ac:	f383 8811 	msr	BASEPRI, r3
 80061b0:	f3bf 8f6f 	isb	sy
 80061b4:	f3bf 8f4f 	dsb	sy
 80061b8:	60bb      	str	r3, [r7, #8]
}
 80061ba:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80061bc:	bf00      	nop
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d0fc      	beq.n	80061be <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80061c4:	bf00      	nop
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bc80      	pop	{r7}
 80061ce:	4770      	bx	lr
 80061d0:	20000014 	.word	0x20000014
	...

080061e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80061e0:	4b07      	ldr	r3, [pc, #28]	@ (8006200 <pxCurrentTCBConst2>)
 80061e2:	6819      	ldr	r1, [r3, #0]
 80061e4:	6808      	ldr	r0, [r1, #0]
 80061e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80061ea:	f380 8809 	msr	PSP, r0
 80061ee:	f3bf 8f6f 	isb	sy
 80061f2:	f04f 0000 	mov.w	r0, #0
 80061f6:	f380 8811 	msr	BASEPRI, r0
 80061fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80061fe:	4770      	bx	lr

08006200 <pxCurrentTCBConst2>:
 8006200:	20000cd0 	.word	0x20000cd0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006204:	bf00      	nop
 8006206:	bf00      	nop

08006208 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006208:	4806      	ldr	r0, [pc, #24]	@ (8006224 <prvPortStartFirstTask+0x1c>)
 800620a:	6800      	ldr	r0, [r0, #0]
 800620c:	6800      	ldr	r0, [r0, #0]
 800620e:	f380 8808 	msr	MSP, r0
 8006212:	b662      	cpsie	i
 8006214:	b661      	cpsie	f
 8006216:	f3bf 8f4f 	dsb	sy
 800621a:	f3bf 8f6f 	isb	sy
 800621e:	df00      	svc	0
 8006220:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006222:	bf00      	nop
 8006224:	e000ed08 	.word	0xe000ed08

08006228 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800622e:	4b32      	ldr	r3, [pc, #200]	@ (80062f8 <xPortStartScheduler+0xd0>)
 8006230:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	781b      	ldrb	r3, [r3, #0]
 8006236:	b2db      	uxtb	r3, r3
 8006238:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	22ff      	movs	r2, #255	@ 0xff
 800623e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	781b      	ldrb	r3, [r3, #0]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006248:	78fb      	ldrb	r3, [r7, #3]
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006250:	b2da      	uxtb	r2, r3
 8006252:	4b2a      	ldr	r3, [pc, #168]	@ (80062fc <xPortStartScheduler+0xd4>)
 8006254:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006256:	4b2a      	ldr	r3, [pc, #168]	@ (8006300 <xPortStartScheduler+0xd8>)
 8006258:	2207      	movs	r2, #7
 800625a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800625c:	e009      	b.n	8006272 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800625e:	4b28      	ldr	r3, [pc, #160]	@ (8006300 <xPortStartScheduler+0xd8>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	3b01      	subs	r3, #1
 8006264:	4a26      	ldr	r2, [pc, #152]	@ (8006300 <xPortStartScheduler+0xd8>)
 8006266:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006268:	78fb      	ldrb	r3, [r7, #3]
 800626a:	b2db      	uxtb	r3, r3
 800626c:	005b      	lsls	r3, r3, #1
 800626e:	b2db      	uxtb	r3, r3
 8006270:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006272:	78fb      	ldrb	r3, [r7, #3]
 8006274:	b2db      	uxtb	r3, r3
 8006276:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800627a:	2b80      	cmp	r3, #128	@ 0x80
 800627c:	d0ef      	beq.n	800625e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800627e:	4b20      	ldr	r3, [pc, #128]	@ (8006300 <xPortStartScheduler+0xd8>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f1c3 0307 	rsb	r3, r3, #7
 8006286:	2b04      	cmp	r3, #4
 8006288:	d00b      	beq.n	80062a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800628a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628e:	f383 8811 	msr	BASEPRI, r3
 8006292:	f3bf 8f6f 	isb	sy
 8006296:	f3bf 8f4f 	dsb	sy
 800629a:	60bb      	str	r3, [r7, #8]
}
 800629c:	bf00      	nop
 800629e:	bf00      	nop
 80062a0:	e7fd      	b.n	800629e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80062a2:	4b17      	ldr	r3, [pc, #92]	@ (8006300 <xPortStartScheduler+0xd8>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	021b      	lsls	r3, r3, #8
 80062a8:	4a15      	ldr	r2, [pc, #84]	@ (8006300 <xPortStartScheduler+0xd8>)
 80062aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80062ac:	4b14      	ldr	r3, [pc, #80]	@ (8006300 <xPortStartScheduler+0xd8>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80062b4:	4a12      	ldr	r2, [pc, #72]	@ (8006300 <xPortStartScheduler+0xd8>)
 80062b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	b2da      	uxtb	r2, r3
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80062c0:	4b10      	ldr	r3, [pc, #64]	@ (8006304 <xPortStartScheduler+0xdc>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006304 <xPortStartScheduler+0xdc>)
 80062c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80062ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80062cc:	4b0d      	ldr	r3, [pc, #52]	@ (8006304 <xPortStartScheduler+0xdc>)
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006304 <xPortStartScheduler+0xdc>)
 80062d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80062d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80062d8:	f000 f8b8 	bl	800644c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80062dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006308 <xPortStartScheduler+0xe0>)
 80062de:	2200      	movs	r2, #0
 80062e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80062e2:	f7ff ff91 	bl	8006208 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80062e6:	f7ff f867 	bl	80053b8 <vTaskSwitchContext>
	prvTaskExitError();
 80062ea:	f7ff ff47 	bl	800617c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80062ee:	2300      	movs	r3, #0
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}
 80062f8:	e000e400 	.word	0xe000e400
 80062fc:	200012fc 	.word	0x200012fc
 8006300:	20001300 	.word	0x20001300
 8006304:	e000ed20 	.word	0xe000ed20
 8006308:	20000014 	.word	0x20000014

0800630c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800630c:	b480      	push	{r7}
 800630e:	b083      	sub	sp, #12
 8006310:	af00      	add	r7, sp, #0
	__asm volatile
 8006312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006316:	f383 8811 	msr	BASEPRI, r3
 800631a:	f3bf 8f6f 	isb	sy
 800631e:	f3bf 8f4f 	dsb	sy
 8006322:	607b      	str	r3, [r7, #4]
}
 8006324:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8006326:	4b0f      	ldr	r3, [pc, #60]	@ (8006364 <vPortEnterCritical+0x58>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	3301      	adds	r3, #1
 800632c:	4a0d      	ldr	r2, [pc, #52]	@ (8006364 <vPortEnterCritical+0x58>)
 800632e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006330:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <vPortEnterCritical+0x58>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	2b01      	cmp	r3, #1
 8006336:	d110      	bne.n	800635a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006338:	4b0b      	ldr	r3, [pc, #44]	@ (8006368 <vPortEnterCritical+0x5c>)
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	b2db      	uxtb	r3, r3
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00b      	beq.n	800635a <vPortEnterCritical+0x4e>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	603b      	str	r3, [r7, #0]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <vPortEnterCritical+0x4a>
	}
}
 800635a:	bf00      	nop
 800635c:	370c      	adds	r7, #12
 800635e:	46bd      	mov	sp, r7
 8006360:	bc80      	pop	{r7}
 8006362:	4770      	bx	lr
 8006364:	20000014 	.word	0x20000014
 8006368:	e000ed04 	.word	0xe000ed04

0800636c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800636c:	b480      	push	{r7}
 800636e:	b083      	sub	sp, #12
 8006370:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006372:	4b12      	ldr	r3, [pc, #72]	@ (80063bc <vPortExitCritical+0x50>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d10b      	bne.n	8006392 <vPortExitCritical+0x26>
	__asm volatile
 800637a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800637e:	f383 8811 	msr	BASEPRI, r3
 8006382:	f3bf 8f6f 	isb	sy
 8006386:	f3bf 8f4f 	dsb	sy
 800638a:	607b      	str	r3, [r7, #4]
}
 800638c:	bf00      	nop
 800638e:	bf00      	nop
 8006390:	e7fd      	b.n	800638e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006392:	4b0a      	ldr	r3, [pc, #40]	@ (80063bc <vPortExitCritical+0x50>)
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	3b01      	subs	r3, #1
 8006398:	4a08      	ldr	r2, [pc, #32]	@ (80063bc <vPortExitCritical+0x50>)
 800639a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800639c:	4b07      	ldr	r3, [pc, #28]	@ (80063bc <vPortExitCritical+0x50>)
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d105      	bne.n	80063b0 <vPortExitCritical+0x44>
 80063a4:	2300      	movs	r3, #0
 80063a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	f383 8811 	msr	BASEPRI, r3
}
 80063ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80063b0:	bf00      	nop
 80063b2:	370c      	adds	r7, #12
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bc80      	pop	{r7}
 80063b8:	4770      	bx	lr
 80063ba:	bf00      	nop
 80063bc:	20000014 	.word	0x20000014

080063c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80063c0:	f3ef 8009 	mrs	r0, PSP
 80063c4:	f3bf 8f6f 	isb	sy
 80063c8:	4b0d      	ldr	r3, [pc, #52]	@ (8006400 <pxCurrentTCBConst>)
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063d0:	6010      	str	r0, [r2, #0]
 80063d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80063d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80063da:	f380 8811 	msr	BASEPRI, r0
 80063de:	f7fe ffeb 	bl	80053b8 <vTaskSwitchContext>
 80063e2:	f04f 0000 	mov.w	r0, #0
 80063e6:	f380 8811 	msr	BASEPRI, r0
 80063ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80063ee:	6819      	ldr	r1, [r3, #0]
 80063f0:	6808      	ldr	r0, [r1, #0]
 80063f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80063f6:	f380 8809 	msr	PSP, r0
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	4770      	bx	lr

08006400 <pxCurrentTCBConst>:
 8006400:	20000cd0 	.word	0x20000cd0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop

08006408 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
	__asm volatile
 800640e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006412:	f383 8811 	msr	BASEPRI, r3
 8006416:	f3bf 8f6f 	isb	sy
 800641a:	f3bf 8f4f 	dsb	sy
 800641e:	607b      	str	r3, [r7, #4]
}
 8006420:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006422:	f7fe ff0f 	bl	8005244 <xTaskIncrementTick>
 8006426:	4603      	mov	r3, r0
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800642c:	4b06      	ldr	r3, [pc, #24]	@ (8006448 <xPortSysTickHandler+0x40>)
 800642e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006432:	601a      	str	r2, [r3, #0]
 8006434:	2300      	movs	r3, #0
 8006436:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006438:	683b      	ldr	r3, [r7, #0]
 800643a:	f383 8811 	msr	BASEPRI, r3
}
 800643e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006440:	bf00      	nop
 8006442:	3708      	adds	r7, #8
 8006444:	46bd      	mov	sp, r7
 8006446:	bd80      	pop	{r7, pc}
 8006448:	e000ed04 	.word	0xe000ed04

0800644c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800644c:	b480      	push	{r7}
 800644e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006450:	4b0a      	ldr	r3, [pc, #40]	@ (800647c <vPortSetupTimerInterrupt+0x30>)
 8006452:	2200      	movs	r2, #0
 8006454:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006456:	4b0a      	ldr	r3, [pc, #40]	@ (8006480 <vPortSetupTimerInterrupt+0x34>)
 8006458:	2200      	movs	r2, #0
 800645a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800645c:	4b09      	ldr	r3, [pc, #36]	@ (8006484 <vPortSetupTimerInterrupt+0x38>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a09      	ldr	r2, [pc, #36]	@ (8006488 <vPortSetupTimerInterrupt+0x3c>)
 8006462:	fba2 2303 	umull	r2, r3, r2, r3
 8006466:	099b      	lsrs	r3, r3, #6
 8006468:	4a08      	ldr	r2, [pc, #32]	@ (800648c <vPortSetupTimerInterrupt+0x40>)
 800646a:	3b01      	subs	r3, #1
 800646c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800646e:	4b03      	ldr	r3, [pc, #12]	@ (800647c <vPortSetupTimerInterrupt+0x30>)
 8006470:	2207      	movs	r2, #7
 8006472:	601a      	str	r2, [r3, #0]
}
 8006474:	bf00      	nop
 8006476:	46bd      	mov	sp, r7
 8006478:	bc80      	pop	{r7}
 800647a:	4770      	bx	lr
 800647c:	e000e010 	.word	0xe000e010
 8006480:	e000e018 	.word	0xe000e018
 8006484:	20000008 	.word	0x20000008
 8006488:	10624dd3 	.word	0x10624dd3
 800648c:	e000e014 	.word	0xe000e014

08006490 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006490:	b480      	push	{r7}
 8006492:	b085      	sub	sp, #20
 8006494:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006496:	f3ef 8305 	mrs	r3, IPSR
 800649a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	2b0f      	cmp	r3, #15
 80064a0:	d915      	bls.n	80064ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80064a2:	4a17      	ldr	r2, [pc, #92]	@ (8006500 <vPortValidateInterruptPriority+0x70>)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	4413      	add	r3, r2
 80064a8:	781b      	ldrb	r3, [r3, #0]
 80064aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80064ac:	4b15      	ldr	r3, [pc, #84]	@ (8006504 <vPortValidateInterruptPriority+0x74>)
 80064ae:	781b      	ldrb	r3, [r3, #0]
 80064b0:	7afa      	ldrb	r2, [r7, #11]
 80064b2:	429a      	cmp	r2, r3
 80064b4:	d20b      	bcs.n	80064ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80064b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064ba:	f383 8811 	msr	BASEPRI, r3
 80064be:	f3bf 8f6f 	isb	sy
 80064c2:	f3bf 8f4f 	dsb	sy
 80064c6:	607b      	str	r3, [r7, #4]
}
 80064c8:	bf00      	nop
 80064ca:	bf00      	nop
 80064cc:	e7fd      	b.n	80064ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80064ce:	4b0e      	ldr	r3, [pc, #56]	@ (8006508 <vPortValidateInterruptPriority+0x78>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80064d6:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <vPortValidateInterruptPriority+0x7c>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	429a      	cmp	r2, r3
 80064dc:	d90b      	bls.n	80064f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80064de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e2:	f383 8811 	msr	BASEPRI, r3
 80064e6:	f3bf 8f6f 	isb	sy
 80064ea:	f3bf 8f4f 	dsb	sy
 80064ee:	603b      	str	r3, [r7, #0]
}
 80064f0:	bf00      	nop
 80064f2:	bf00      	nop
 80064f4:	e7fd      	b.n	80064f2 <vPortValidateInterruptPriority+0x62>
	}
 80064f6:	bf00      	nop
 80064f8:	3714      	adds	r7, #20
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bc80      	pop	{r7}
 80064fe:	4770      	bx	lr
 8006500:	e000e3f0 	.word	0xe000e3f0
 8006504:	200012fc 	.word	0x200012fc
 8006508:	e000ed0c 	.word	0xe000ed0c
 800650c:	20001300 	.word	0x20001300

08006510 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b08a      	sub	sp, #40	@ 0x28
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006518:	2300      	movs	r3, #0
 800651a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800651c:	f7fe fdd8 	bl	80050d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006520:	4b5c      	ldr	r3, [pc, #368]	@ (8006694 <pvPortMalloc+0x184>)
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d101      	bne.n	800652c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006528:	f000 f924 	bl	8006774 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800652c:	4b5a      	ldr	r3, [pc, #360]	@ (8006698 <pvPortMalloc+0x188>)
 800652e:	681a      	ldr	r2, [r3, #0]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4013      	ands	r3, r2
 8006534:	2b00      	cmp	r3, #0
 8006536:	f040 8095 	bne.w	8006664 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d01e      	beq.n	800657e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8006540:	2208      	movs	r2, #8
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4413      	add	r3, r2
 8006546:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f003 0307 	and.w	r3, r3, #7
 800654e:	2b00      	cmp	r3, #0
 8006550:	d015      	beq.n	800657e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f023 0307 	bic.w	r3, r3, #7
 8006558:	3308      	adds	r3, #8
 800655a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	f003 0307 	and.w	r3, r3, #7
 8006562:	2b00      	cmp	r3, #0
 8006564:	d00b      	beq.n	800657e <pvPortMalloc+0x6e>
	__asm volatile
 8006566:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656a:	f383 8811 	msr	BASEPRI, r3
 800656e:	f3bf 8f6f 	isb	sy
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	617b      	str	r3, [r7, #20]
}
 8006578:	bf00      	nop
 800657a:	bf00      	nop
 800657c:	e7fd      	b.n	800657a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d06f      	beq.n	8006664 <pvPortMalloc+0x154>
 8006584:	4b45      	ldr	r3, [pc, #276]	@ (800669c <pvPortMalloc+0x18c>)
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	429a      	cmp	r2, r3
 800658c:	d86a      	bhi.n	8006664 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800658e:	4b44      	ldr	r3, [pc, #272]	@ (80066a0 <pvPortMalloc+0x190>)
 8006590:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006592:	4b43      	ldr	r3, [pc, #268]	@ (80066a0 <pvPortMalloc+0x190>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006598:	e004      	b.n	80065a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800659a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800659c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800659e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80065a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065a6:	685b      	ldr	r3, [r3, #4]
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	429a      	cmp	r2, r3
 80065ac:	d903      	bls.n	80065b6 <pvPortMalloc+0xa6>
 80065ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d1f1      	bne.n	800659a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80065b6:	4b37      	ldr	r3, [pc, #220]	@ (8006694 <pvPortMalloc+0x184>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065bc:	429a      	cmp	r2, r3
 80065be:	d051      	beq.n	8006664 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	2208      	movs	r2, #8
 80065c6:	4413      	add	r3, r2
 80065c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80065ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	6a3b      	ldr	r3, [r7, #32]
 80065d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80065d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065d4:	685a      	ldr	r2, [r3, #4]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	1ad2      	subs	r2, r2, r3
 80065da:	2308      	movs	r3, #8
 80065dc:	005b      	lsls	r3, r3, #1
 80065de:	429a      	cmp	r2, r3
 80065e0:	d920      	bls.n	8006624 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80065e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	4413      	add	r3, r2
 80065e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80065ea:	69bb      	ldr	r3, [r7, #24]
 80065ec:	f003 0307 	and.w	r3, r3, #7
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <pvPortMalloc+0xfc>
	__asm volatile
 80065f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f8:	f383 8811 	msr	BASEPRI, r3
 80065fc:	f3bf 8f6f 	isb	sy
 8006600:	f3bf 8f4f 	dsb	sy
 8006604:	613b      	str	r3, [r7, #16]
}
 8006606:	bf00      	nop
 8006608:	bf00      	nop
 800660a:	e7fd      	b.n	8006608 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800660c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800660e:	685a      	ldr	r2, [r3, #4]
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	1ad2      	subs	r2, r2, r3
 8006614:	69bb      	ldr	r3, [r7, #24]
 8006616:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800661e:	69b8      	ldr	r0, [r7, #24]
 8006620:	f000 f90a 	bl	8006838 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006624:	4b1d      	ldr	r3, [pc, #116]	@ (800669c <pvPortMalloc+0x18c>)
 8006626:	681a      	ldr	r2, [r3, #0]
 8006628:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800662a:	685b      	ldr	r3, [r3, #4]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	4a1b      	ldr	r2, [pc, #108]	@ (800669c <pvPortMalloc+0x18c>)
 8006630:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006632:	4b1a      	ldr	r3, [pc, #104]	@ (800669c <pvPortMalloc+0x18c>)
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	4b1b      	ldr	r3, [pc, #108]	@ (80066a4 <pvPortMalloc+0x194>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	429a      	cmp	r2, r3
 800663c:	d203      	bcs.n	8006646 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800663e:	4b17      	ldr	r3, [pc, #92]	@ (800669c <pvPortMalloc+0x18c>)
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a18      	ldr	r2, [pc, #96]	@ (80066a4 <pvPortMalloc+0x194>)
 8006644:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	4b13      	ldr	r3, [pc, #76]	@ (8006698 <pvPortMalloc+0x188>)
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	431a      	orrs	r2, r3
 8006650:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006652:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006654:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006656:	2200      	movs	r2, #0
 8006658:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800665a:	4b13      	ldr	r3, [pc, #76]	@ (80066a8 <pvPortMalloc+0x198>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	3301      	adds	r3, #1
 8006660:	4a11      	ldr	r2, [pc, #68]	@ (80066a8 <pvPortMalloc+0x198>)
 8006662:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006664:	f7fe fd42 	bl	80050ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	f003 0307 	and.w	r3, r3, #7
 800666e:	2b00      	cmp	r3, #0
 8006670:	d00b      	beq.n	800668a <pvPortMalloc+0x17a>
	__asm volatile
 8006672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006676:	f383 8811 	msr	BASEPRI, r3
 800667a:	f3bf 8f6f 	isb	sy
 800667e:	f3bf 8f4f 	dsb	sy
 8006682:	60fb      	str	r3, [r7, #12]
}
 8006684:	bf00      	nop
 8006686:	bf00      	nop
 8006688:	e7fd      	b.n	8006686 <pvPortMalloc+0x176>
	return pvReturn;
 800668a:	69fb      	ldr	r3, [r7, #28]
}
 800668c:	4618      	mov	r0, r3
 800668e:	3728      	adds	r7, #40	@ 0x28
 8006690:	46bd      	mov	sp, r7
 8006692:	bd80      	pop	{r7, pc}
 8006694:	20001f0c 	.word	0x20001f0c
 8006698:	20001f20 	.word	0x20001f20
 800669c:	20001f10 	.word	0x20001f10
 80066a0:	20001f04 	.word	0x20001f04
 80066a4:	20001f14 	.word	0x20001f14
 80066a8:	20001f18 	.word	0x20001f18

080066ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b086      	sub	sp, #24
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d04f      	beq.n	800675e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80066be:	2308      	movs	r3, #8
 80066c0:	425b      	negs	r3, r3
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	4413      	add	r3, r2
 80066c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	685a      	ldr	r2, [r3, #4]
 80066d0:	4b25      	ldr	r3, [pc, #148]	@ (8006768 <vPortFree+0xbc>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4013      	ands	r3, r2
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d10b      	bne.n	80066f2 <vPortFree+0x46>
	__asm volatile
 80066da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066de:	f383 8811 	msr	BASEPRI, r3
 80066e2:	f3bf 8f6f 	isb	sy
 80066e6:	f3bf 8f4f 	dsb	sy
 80066ea:	60fb      	str	r3, [r7, #12]
}
 80066ec:	bf00      	nop
 80066ee:	bf00      	nop
 80066f0:	e7fd      	b.n	80066ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d00b      	beq.n	8006712 <vPortFree+0x66>
	__asm volatile
 80066fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fe:	f383 8811 	msr	BASEPRI, r3
 8006702:	f3bf 8f6f 	isb	sy
 8006706:	f3bf 8f4f 	dsb	sy
 800670a:	60bb      	str	r3, [r7, #8]
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	e7fd      	b.n	800670e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	685a      	ldr	r2, [r3, #4]
 8006716:	4b14      	ldr	r3, [pc, #80]	@ (8006768 <vPortFree+0xbc>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	4013      	ands	r3, r2
 800671c:	2b00      	cmp	r3, #0
 800671e:	d01e      	beq.n	800675e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	2b00      	cmp	r3, #0
 8006726:	d11a      	bne.n	800675e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	685a      	ldr	r2, [r3, #4]
 800672c:	4b0e      	ldr	r3, [pc, #56]	@ (8006768 <vPortFree+0xbc>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	43db      	mvns	r3, r3
 8006732:	401a      	ands	r2, r3
 8006734:	693b      	ldr	r3, [r7, #16]
 8006736:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006738:	f7fe fcca 	bl	80050d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	685a      	ldr	r2, [r3, #4]
 8006740:	4b0a      	ldr	r3, [pc, #40]	@ (800676c <vPortFree+0xc0>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	4413      	add	r3, r2
 8006746:	4a09      	ldr	r2, [pc, #36]	@ (800676c <vPortFree+0xc0>)
 8006748:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800674a:	6938      	ldr	r0, [r7, #16]
 800674c:	f000 f874 	bl	8006838 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006750:	4b07      	ldr	r3, [pc, #28]	@ (8006770 <vPortFree+0xc4>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	3301      	adds	r3, #1
 8006756:	4a06      	ldr	r2, [pc, #24]	@ (8006770 <vPortFree+0xc4>)
 8006758:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800675a:	f7fe fcc7 	bl	80050ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800675e:	bf00      	nop
 8006760:	3718      	adds	r7, #24
 8006762:	46bd      	mov	sp, r7
 8006764:	bd80      	pop	{r7, pc}
 8006766:	bf00      	nop
 8006768:	20001f20 	.word	0x20001f20
 800676c:	20001f10 	.word	0x20001f10
 8006770:	20001f1c 	.word	0x20001f1c

08006774 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006774:	b480      	push	{r7}
 8006776:	b085      	sub	sp, #20
 8006778:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800677a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800677e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006780:	4b27      	ldr	r3, [pc, #156]	@ (8006820 <prvHeapInit+0xac>)
 8006782:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f003 0307 	and.w	r3, r3, #7
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00c      	beq.n	80067a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	3307      	adds	r3, #7
 8006792:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	f023 0307 	bic.w	r3, r3, #7
 800679a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800679c:	68ba      	ldr	r2, [r7, #8]
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	1ad3      	subs	r3, r2, r3
 80067a2:	4a1f      	ldr	r2, [pc, #124]	@ (8006820 <prvHeapInit+0xac>)
 80067a4:	4413      	add	r3, r2
 80067a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80067ac:	4a1d      	ldr	r2, [pc, #116]	@ (8006824 <prvHeapInit+0xb0>)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80067b2:	4b1c      	ldr	r3, [pc, #112]	@ (8006824 <prvHeapInit+0xb0>)
 80067b4:	2200      	movs	r2, #0
 80067b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	68ba      	ldr	r2, [r7, #8]
 80067bc:	4413      	add	r3, r2
 80067be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80067c0:	2208      	movs	r2, #8
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	1a9b      	subs	r3, r3, r2
 80067c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	f023 0307 	bic.w	r3, r3, #7
 80067ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	4a15      	ldr	r2, [pc, #84]	@ (8006828 <prvHeapInit+0xb4>)
 80067d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80067d6:	4b14      	ldr	r3, [pc, #80]	@ (8006828 <prvHeapInit+0xb4>)
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	2200      	movs	r2, #0
 80067dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80067de:	4b12      	ldr	r3, [pc, #72]	@ (8006828 <prvHeapInit+0xb4>)
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	2200      	movs	r2, #0
 80067e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	1ad2      	subs	r2, r2, r3
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80067f4:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <prvHeapInit+0xb4>)
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	683b      	ldr	r3, [r7, #0]
 80067fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80067fc:	683b      	ldr	r3, [r7, #0]
 80067fe:	685b      	ldr	r3, [r3, #4]
 8006800:	4a0a      	ldr	r2, [pc, #40]	@ (800682c <prvHeapInit+0xb8>)
 8006802:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	4a09      	ldr	r2, [pc, #36]	@ (8006830 <prvHeapInit+0xbc>)
 800680a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800680c:	4b09      	ldr	r3, [pc, #36]	@ (8006834 <prvHeapInit+0xc0>)
 800680e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8006812:	601a      	str	r2, [r3, #0]
}
 8006814:	bf00      	nop
 8006816:	3714      	adds	r7, #20
 8006818:	46bd      	mov	sp, r7
 800681a:	bc80      	pop	{r7}
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	20001304 	.word	0x20001304
 8006824:	20001f04 	.word	0x20001f04
 8006828:	20001f0c 	.word	0x20001f0c
 800682c:	20001f14 	.word	0x20001f14
 8006830:	20001f10 	.word	0x20001f10
 8006834:	20001f20 	.word	0x20001f20

08006838 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006838:	b480      	push	{r7}
 800683a:	b085      	sub	sp, #20
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006840:	4b27      	ldr	r3, [pc, #156]	@ (80068e0 <prvInsertBlockIntoFreeList+0xa8>)
 8006842:	60fb      	str	r3, [r7, #12]
 8006844:	e002      	b.n	800684c <prvInsertBlockIntoFreeList+0x14>
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	60fb      	str	r3, [r7, #12]
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	687a      	ldr	r2, [r7, #4]
 8006852:	429a      	cmp	r2, r3
 8006854:	d8f7      	bhi.n	8006846 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	68ba      	ldr	r2, [r7, #8]
 8006860:	4413      	add	r3, r2
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	429a      	cmp	r2, r3
 8006866:	d108      	bne.n	800687a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	685a      	ldr	r2, [r3, #4]
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	441a      	add	r2, r3
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	685b      	ldr	r3, [r3, #4]
 8006882:	68ba      	ldr	r2, [r7, #8]
 8006884:	441a      	add	r2, r3
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	429a      	cmp	r2, r3
 800688c:	d118      	bne.n	80068c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	4b14      	ldr	r3, [pc, #80]	@ (80068e4 <prvInsertBlockIntoFreeList+0xac>)
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	429a      	cmp	r2, r3
 8006898:	d00d      	beq.n	80068b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685b      	ldr	r3, [r3, #4]
 80068a4:	441a      	add	r2, r3
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	601a      	str	r2, [r3, #0]
 80068b4:	e008      	b.n	80068c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80068b6:	4b0b      	ldr	r3, [pc, #44]	@ (80068e4 <prvInsertBlockIntoFreeList+0xac>)
 80068b8:	681a      	ldr	r2, [r3, #0]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	601a      	str	r2, [r3, #0]
 80068be:	e003      	b.n	80068c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681a      	ldr	r2, [r3, #0]
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80068c8:	68fa      	ldr	r2, [r7, #12]
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	429a      	cmp	r2, r3
 80068ce:	d002      	beq.n	80068d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80068d6:	bf00      	nop
 80068d8:	3714      	adds	r7, #20
 80068da:	46bd      	mov	sp, r7
 80068dc:	bc80      	pop	{r7}
 80068de:	4770      	bx	lr
 80068e0:	20001f04 	.word	0x20001f04
 80068e4:	20001f0c 	.word	0x20001f0c

080068e8 <memset>:
 80068e8:	4603      	mov	r3, r0
 80068ea:	4402      	add	r2, r0
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d100      	bne.n	80068f2 <memset+0xa>
 80068f0:	4770      	bx	lr
 80068f2:	f803 1b01 	strb.w	r1, [r3], #1
 80068f6:	e7f9      	b.n	80068ec <memset+0x4>

080068f8 <_reclaim_reent>:
 80068f8:	4b2d      	ldr	r3, [pc, #180]	@ (80069b0 <_reclaim_reent+0xb8>)
 80068fa:	b570      	push	{r4, r5, r6, lr}
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	4604      	mov	r4, r0
 8006900:	4283      	cmp	r3, r0
 8006902:	d053      	beq.n	80069ac <_reclaim_reent+0xb4>
 8006904:	69c3      	ldr	r3, [r0, #28]
 8006906:	b31b      	cbz	r3, 8006950 <_reclaim_reent+0x58>
 8006908:	68db      	ldr	r3, [r3, #12]
 800690a:	b163      	cbz	r3, 8006926 <_reclaim_reent+0x2e>
 800690c:	2500      	movs	r5, #0
 800690e:	69e3      	ldr	r3, [r4, #28]
 8006910:	68db      	ldr	r3, [r3, #12]
 8006912:	5959      	ldr	r1, [r3, r5]
 8006914:	b9b1      	cbnz	r1, 8006944 <_reclaim_reent+0x4c>
 8006916:	3504      	adds	r5, #4
 8006918:	2d80      	cmp	r5, #128	@ 0x80
 800691a:	d1f8      	bne.n	800690e <_reclaim_reent+0x16>
 800691c:	69e3      	ldr	r3, [r4, #28]
 800691e:	4620      	mov	r0, r4
 8006920:	68d9      	ldr	r1, [r3, #12]
 8006922:	f000 f87b 	bl	8006a1c <_free_r>
 8006926:	69e3      	ldr	r3, [r4, #28]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	b111      	cbz	r1, 8006932 <_reclaim_reent+0x3a>
 800692c:	4620      	mov	r0, r4
 800692e:	f000 f875 	bl	8006a1c <_free_r>
 8006932:	69e3      	ldr	r3, [r4, #28]
 8006934:	689d      	ldr	r5, [r3, #8]
 8006936:	b15d      	cbz	r5, 8006950 <_reclaim_reent+0x58>
 8006938:	4629      	mov	r1, r5
 800693a:	4620      	mov	r0, r4
 800693c:	682d      	ldr	r5, [r5, #0]
 800693e:	f000 f86d 	bl	8006a1c <_free_r>
 8006942:	e7f8      	b.n	8006936 <_reclaim_reent+0x3e>
 8006944:	680e      	ldr	r6, [r1, #0]
 8006946:	4620      	mov	r0, r4
 8006948:	f000 f868 	bl	8006a1c <_free_r>
 800694c:	4631      	mov	r1, r6
 800694e:	e7e1      	b.n	8006914 <_reclaim_reent+0x1c>
 8006950:	6961      	ldr	r1, [r4, #20]
 8006952:	b111      	cbz	r1, 800695a <_reclaim_reent+0x62>
 8006954:	4620      	mov	r0, r4
 8006956:	f000 f861 	bl	8006a1c <_free_r>
 800695a:	69e1      	ldr	r1, [r4, #28]
 800695c:	b111      	cbz	r1, 8006964 <_reclaim_reent+0x6c>
 800695e:	4620      	mov	r0, r4
 8006960:	f000 f85c 	bl	8006a1c <_free_r>
 8006964:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8006966:	b111      	cbz	r1, 800696e <_reclaim_reent+0x76>
 8006968:	4620      	mov	r0, r4
 800696a:	f000 f857 	bl	8006a1c <_free_r>
 800696e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006970:	b111      	cbz	r1, 8006978 <_reclaim_reent+0x80>
 8006972:	4620      	mov	r0, r4
 8006974:	f000 f852 	bl	8006a1c <_free_r>
 8006978:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800697a:	b111      	cbz	r1, 8006982 <_reclaim_reent+0x8a>
 800697c:	4620      	mov	r0, r4
 800697e:	f000 f84d 	bl	8006a1c <_free_r>
 8006982:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8006984:	b111      	cbz	r1, 800698c <_reclaim_reent+0x94>
 8006986:	4620      	mov	r0, r4
 8006988:	f000 f848 	bl	8006a1c <_free_r>
 800698c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800698e:	b111      	cbz	r1, 8006996 <_reclaim_reent+0x9e>
 8006990:	4620      	mov	r0, r4
 8006992:	f000 f843 	bl	8006a1c <_free_r>
 8006996:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8006998:	b111      	cbz	r1, 80069a0 <_reclaim_reent+0xa8>
 800699a:	4620      	mov	r0, r4
 800699c:	f000 f83e 	bl	8006a1c <_free_r>
 80069a0:	6a23      	ldr	r3, [r4, #32]
 80069a2:	b11b      	cbz	r3, 80069ac <_reclaim_reent+0xb4>
 80069a4:	4620      	mov	r0, r4
 80069a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80069aa:	4718      	bx	r3
 80069ac:	bd70      	pop	{r4, r5, r6, pc}
 80069ae:	bf00      	nop
 80069b0:	20000018 	.word	0x20000018

080069b4 <__libc_init_array>:
 80069b4:	b570      	push	{r4, r5, r6, lr}
 80069b6:	2600      	movs	r6, #0
 80069b8:	4d0c      	ldr	r5, [pc, #48]	@ (80069ec <__libc_init_array+0x38>)
 80069ba:	4c0d      	ldr	r4, [pc, #52]	@ (80069f0 <__libc_init_array+0x3c>)
 80069bc:	1b64      	subs	r4, r4, r5
 80069be:	10a4      	asrs	r4, r4, #2
 80069c0:	42a6      	cmp	r6, r4
 80069c2:	d109      	bne.n	80069d8 <__libc_init_array+0x24>
 80069c4:	f001 f894 	bl	8007af0 <_init>
 80069c8:	2600      	movs	r6, #0
 80069ca:	4d0a      	ldr	r5, [pc, #40]	@ (80069f4 <__libc_init_array+0x40>)
 80069cc:	4c0a      	ldr	r4, [pc, #40]	@ (80069f8 <__libc_init_array+0x44>)
 80069ce:	1b64      	subs	r4, r4, r5
 80069d0:	10a4      	asrs	r4, r4, #2
 80069d2:	42a6      	cmp	r6, r4
 80069d4:	d105      	bne.n	80069e2 <__libc_init_array+0x2e>
 80069d6:	bd70      	pop	{r4, r5, r6, pc}
 80069d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80069dc:	4798      	blx	r3
 80069de:	3601      	adds	r6, #1
 80069e0:	e7ee      	b.n	80069c0 <__libc_init_array+0xc>
 80069e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80069e6:	4798      	blx	r3
 80069e8:	3601      	adds	r6, #1
 80069ea:	e7f2      	b.n	80069d2 <__libc_init_array+0x1e>
 80069ec:	08008b48 	.word	0x08008b48
 80069f0:	08008b48 	.word	0x08008b48
 80069f4:	08008b48 	.word	0x08008b48
 80069f8:	08008b4c 	.word	0x08008b4c

080069fc <__retarget_lock_acquire_recursive>:
 80069fc:	4770      	bx	lr

080069fe <__retarget_lock_release_recursive>:
 80069fe:	4770      	bx	lr

08006a00 <memcpy>:
 8006a00:	440a      	add	r2, r1
 8006a02:	4291      	cmp	r1, r2
 8006a04:	f100 33ff 	add.w	r3, r0, #4294967295
 8006a08:	d100      	bne.n	8006a0c <memcpy+0xc>
 8006a0a:	4770      	bx	lr
 8006a0c:	b510      	push	{r4, lr}
 8006a0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006a12:	4291      	cmp	r1, r2
 8006a14:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006a18:	d1f9      	bne.n	8006a0e <memcpy+0xe>
 8006a1a:	bd10      	pop	{r4, pc}

08006a1c <_free_r>:
 8006a1c:	b538      	push	{r3, r4, r5, lr}
 8006a1e:	4605      	mov	r5, r0
 8006a20:	2900      	cmp	r1, #0
 8006a22:	d040      	beq.n	8006aa6 <_free_r+0x8a>
 8006a24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006a28:	1f0c      	subs	r4, r1, #4
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfb8      	it	lt
 8006a2e:	18e4      	addlt	r4, r4, r3
 8006a30:	f000 f83c 	bl	8006aac <__malloc_lock>
 8006a34:	4a1c      	ldr	r2, [pc, #112]	@ (8006aa8 <_free_r+0x8c>)
 8006a36:	6813      	ldr	r3, [r2, #0]
 8006a38:	b933      	cbnz	r3, 8006a48 <_free_r+0x2c>
 8006a3a:	6063      	str	r3, [r4, #4]
 8006a3c:	6014      	str	r4, [r2, #0]
 8006a3e:	4628      	mov	r0, r5
 8006a40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a44:	f000 b838 	b.w	8006ab8 <__malloc_unlock>
 8006a48:	42a3      	cmp	r3, r4
 8006a4a:	d908      	bls.n	8006a5e <_free_r+0x42>
 8006a4c:	6820      	ldr	r0, [r4, #0]
 8006a4e:	1821      	adds	r1, r4, r0
 8006a50:	428b      	cmp	r3, r1
 8006a52:	bf01      	itttt	eq
 8006a54:	6819      	ldreq	r1, [r3, #0]
 8006a56:	685b      	ldreq	r3, [r3, #4]
 8006a58:	1809      	addeq	r1, r1, r0
 8006a5a:	6021      	streq	r1, [r4, #0]
 8006a5c:	e7ed      	b.n	8006a3a <_free_r+0x1e>
 8006a5e:	461a      	mov	r2, r3
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	b10b      	cbz	r3, 8006a68 <_free_r+0x4c>
 8006a64:	42a3      	cmp	r3, r4
 8006a66:	d9fa      	bls.n	8006a5e <_free_r+0x42>
 8006a68:	6811      	ldr	r1, [r2, #0]
 8006a6a:	1850      	adds	r0, r2, r1
 8006a6c:	42a0      	cmp	r0, r4
 8006a6e:	d10b      	bne.n	8006a88 <_free_r+0x6c>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	4401      	add	r1, r0
 8006a74:	1850      	adds	r0, r2, r1
 8006a76:	4283      	cmp	r3, r0
 8006a78:	6011      	str	r1, [r2, #0]
 8006a7a:	d1e0      	bne.n	8006a3e <_free_r+0x22>
 8006a7c:	6818      	ldr	r0, [r3, #0]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	4408      	add	r0, r1
 8006a82:	6010      	str	r0, [r2, #0]
 8006a84:	6053      	str	r3, [r2, #4]
 8006a86:	e7da      	b.n	8006a3e <_free_r+0x22>
 8006a88:	d902      	bls.n	8006a90 <_free_r+0x74>
 8006a8a:	230c      	movs	r3, #12
 8006a8c:	602b      	str	r3, [r5, #0]
 8006a8e:	e7d6      	b.n	8006a3e <_free_r+0x22>
 8006a90:	6820      	ldr	r0, [r4, #0]
 8006a92:	1821      	adds	r1, r4, r0
 8006a94:	428b      	cmp	r3, r1
 8006a96:	bf01      	itttt	eq
 8006a98:	6819      	ldreq	r1, [r3, #0]
 8006a9a:	685b      	ldreq	r3, [r3, #4]
 8006a9c:	1809      	addeq	r1, r1, r0
 8006a9e:	6021      	streq	r1, [r4, #0]
 8006aa0:	6063      	str	r3, [r4, #4]
 8006aa2:	6054      	str	r4, [r2, #4]
 8006aa4:	e7cb      	b.n	8006a3e <_free_r+0x22>
 8006aa6:	bd38      	pop	{r3, r4, r5, pc}
 8006aa8:	20002060 	.word	0x20002060

08006aac <__malloc_lock>:
 8006aac:	4801      	ldr	r0, [pc, #4]	@ (8006ab4 <__malloc_lock+0x8>)
 8006aae:	f7ff bfa5 	b.w	80069fc <__retarget_lock_acquire_recursive>
 8006ab2:	bf00      	nop
 8006ab4:	2000205c 	.word	0x2000205c

08006ab8 <__malloc_unlock>:
 8006ab8:	4801      	ldr	r0, [pc, #4]	@ (8006ac0 <__malloc_unlock+0x8>)
 8006aba:	f7ff bfa0 	b.w	80069fe <__retarget_lock_release_recursive>
 8006abe:	bf00      	nop
 8006ac0:	2000205c 	.word	0x2000205c

08006ac4 <cos>:
 8006ac4:	b530      	push	{r4, r5, lr}
 8006ac6:	4d20      	ldr	r5, [pc, #128]	@ (8006b48 <cos+0x84>)
 8006ac8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8006acc:	42ac      	cmp	r4, r5
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	b087      	sub	sp, #28
 8006ad4:	d806      	bhi.n	8006ae4 <cos+0x20>
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	2300      	movs	r3, #0
 8006ada:	b007      	add	sp, #28
 8006adc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ae0:	f000 b87e 	b.w	8006be0 <__kernel_cos>
 8006ae4:	4d19      	ldr	r5, [pc, #100]	@ (8006b4c <cos+0x88>)
 8006ae6:	42ac      	cmp	r4, r5
 8006ae8:	d903      	bls.n	8006af2 <cos+0x2e>
 8006aea:	f7f9 fc5f 	bl	80003ac <__aeabi_dsub>
 8006aee:	b007      	add	sp, #28
 8006af0:	bd30      	pop	{r4, r5, pc}
 8006af2:	aa02      	add	r2, sp, #8
 8006af4:	f000 f9ec 	bl	8006ed0 <__ieee754_rem_pio2>
 8006af8:	f000 0003 	and.w	r0, r0, #3
 8006afc:	2801      	cmp	r0, #1
 8006afe:	d009      	beq.n	8006b14 <cos+0x50>
 8006b00:	2802      	cmp	r0, #2
 8006b02:	d011      	beq.n	8006b28 <cos+0x64>
 8006b04:	b9b8      	cbnz	r0, 8006b36 <cos+0x72>
 8006b06:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b0e:	f000 f867 	bl	8006be0 <__kernel_cos>
 8006b12:	e7ec      	b.n	8006aee <cos+0x2a>
 8006b14:	9000      	str	r0, [sp, #0]
 8006b16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b1e:	f000 f91f 	bl	8006d60 <__kernel_sin>
 8006b22:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8006b26:	e7e2      	b.n	8006aee <cos+0x2a>
 8006b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b30:	f000 f856 	bl	8006be0 <__kernel_cos>
 8006b34:	e7f5      	b.n	8006b22 <cos+0x5e>
 8006b36:	2301      	movs	r3, #1
 8006b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b3c:	9300      	str	r3, [sp, #0]
 8006b3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b42:	f000 f90d 	bl	8006d60 <__kernel_sin>
 8006b46:	e7d2      	b.n	8006aee <cos+0x2a>
 8006b48:	3fe921fb 	.word	0x3fe921fb
 8006b4c:	7fefffff 	.word	0x7fefffff

08006b50 <sin>:
 8006b50:	b530      	push	{r4, r5, lr}
 8006b52:	4d20      	ldr	r5, [pc, #128]	@ (8006bd4 <sin+0x84>)
 8006b54:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8006b58:	42ac      	cmp	r4, r5
 8006b5a:	4602      	mov	r2, r0
 8006b5c:	460b      	mov	r3, r1
 8006b5e:	b087      	sub	sp, #28
 8006b60:	d806      	bhi.n	8006b70 <sin+0x20>
 8006b62:	2300      	movs	r3, #0
 8006b64:	2200      	movs	r2, #0
 8006b66:	9300      	str	r3, [sp, #0]
 8006b68:	2300      	movs	r3, #0
 8006b6a:	f000 f8f9 	bl	8006d60 <__kernel_sin>
 8006b6e:	e004      	b.n	8006b7a <sin+0x2a>
 8006b70:	4d19      	ldr	r5, [pc, #100]	@ (8006bd8 <sin+0x88>)
 8006b72:	42ac      	cmp	r4, r5
 8006b74:	d903      	bls.n	8006b7e <sin+0x2e>
 8006b76:	f7f9 fc19 	bl	80003ac <__aeabi_dsub>
 8006b7a:	b007      	add	sp, #28
 8006b7c:	bd30      	pop	{r4, r5, pc}
 8006b7e:	aa02      	add	r2, sp, #8
 8006b80:	f000 f9a6 	bl	8006ed0 <__ieee754_rem_pio2>
 8006b84:	f000 0003 	and.w	r0, r0, #3
 8006b88:	2801      	cmp	r0, #1
 8006b8a:	d009      	beq.n	8006ba0 <sin+0x50>
 8006b8c:	2802      	cmp	r0, #2
 8006b8e:	d00e      	beq.n	8006bae <sin+0x5e>
 8006b90:	b9c0      	cbnz	r0, 8006bc4 <sin+0x74>
 8006b92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b96:	2301      	movs	r3, #1
 8006b98:	9300      	str	r3, [sp, #0]
 8006b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b9e:	e7e4      	b.n	8006b6a <sin+0x1a>
 8006ba0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ba4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006ba8:	f000 f81a 	bl	8006be0 <__kernel_cos>
 8006bac:	e7e5      	b.n	8006b7a <sin+0x2a>
 8006bae:	2301      	movs	r3, #1
 8006bb0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bb4:	9300      	str	r3, [sp, #0]
 8006bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bba:	f000 f8d1 	bl	8006d60 <__kernel_sin>
 8006bbe:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8006bc2:	e7da      	b.n	8006b7a <sin+0x2a>
 8006bc4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bc8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bcc:	f000 f808 	bl	8006be0 <__kernel_cos>
 8006bd0:	e7f5      	b.n	8006bbe <sin+0x6e>
 8006bd2:	bf00      	nop
 8006bd4:	3fe921fb 	.word	0x3fe921fb
 8006bd8:	7fefffff 	.word	0x7fefffff
 8006bdc:	00000000 	.word	0x00000000

08006be0 <__kernel_cos>:
 8006be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006be4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8006be8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8006bec:	4680      	mov	r8, r0
 8006bee:	4689      	mov	r9, r1
 8006bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8006bf4:	d204      	bcs.n	8006c00 <__kernel_cos+0x20>
 8006bf6:	f7f9 fe19 	bl	800082c <__aeabi_d2iz>
 8006bfa:	2800      	cmp	r0, #0
 8006bfc:	f000 8086 	beq.w	8006d0c <__kernel_cos+0x12c>
 8006c00:	4642      	mov	r2, r8
 8006c02:	464b      	mov	r3, r9
 8006c04:	4640      	mov	r0, r8
 8006c06:	4649      	mov	r1, r9
 8006c08:	f7f9 faa2 	bl	8000150 <__aeabi_dmul>
 8006c0c:	2200      	movs	r2, #0
 8006c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8006d48 <__kernel_cos+0x168>)
 8006c10:	4604      	mov	r4, r0
 8006c12:	460d      	mov	r5, r1
 8006c14:	f7f9 fa9c 	bl	8000150 <__aeabi_dmul>
 8006c18:	a33f      	add	r3, pc, #252	@ (adr r3, 8006d18 <__kernel_cos+0x138>)
 8006c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c1e:	4682      	mov	sl, r0
 8006c20:	468b      	mov	fp, r1
 8006c22:	4620      	mov	r0, r4
 8006c24:	4629      	mov	r1, r5
 8006c26:	f7f9 fa93 	bl	8000150 <__aeabi_dmul>
 8006c2a:	a33d      	add	r3, pc, #244	@ (adr r3, 8006d20 <__kernel_cos+0x140>)
 8006c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c30:	f7f9 fbbe 	bl	80003b0 <__adddf3>
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	f7f9 fa8a 	bl	8000150 <__aeabi_dmul>
 8006c3c:	a33a      	add	r3, pc, #232	@ (adr r3, 8006d28 <__kernel_cos+0x148>)
 8006c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c42:	f7f9 fbb3 	bl	80003ac <__aeabi_dsub>
 8006c46:	4622      	mov	r2, r4
 8006c48:	462b      	mov	r3, r5
 8006c4a:	f7f9 fa81 	bl	8000150 <__aeabi_dmul>
 8006c4e:	a338      	add	r3, pc, #224	@ (adr r3, 8006d30 <__kernel_cos+0x150>)
 8006c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c54:	f7f9 fbac 	bl	80003b0 <__adddf3>
 8006c58:	4622      	mov	r2, r4
 8006c5a:	462b      	mov	r3, r5
 8006c5c:	f7f9 fa78 	bl	8000150 <__aeabi_dmul>
 8006c60:	a335      	add	r3, pc, #212	@ (adr r3, 8006d38 <__kernel_cos+0x158>)
 8006c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c66:	f7f9 fba1 	bl	80003ac <__aeabi_dsub>
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	462b      	mov	r3, r5
 8006c6e:	f7f9 fa6f 	bl	8000150 <__aeabi_dmul>
 8006c72:	a333      	add	r3, pc, #204	@ (adr r3, 8006d40 <__kernel_cos+0x160>)
 8006c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c78:	f7f9 fb9a 	bl	80003b0 <__adddf3>
 8006c7c:	4622      	mov	r2, r4
 8006c7e:	462b      	mov	r3, r5
 8006c80:	f7f9 fa66 	bl	8000150 <__aeabi_dmul>
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	f7f9 fa62 	bl	8000150 <__aeabi_dmul>
 8006c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006c90:	4604      	mov	r4, r0
 8006c92:	460d      	mov	r5, r1
 8006c94:	4640      	mov	r0, r8
 8006c96:	4649      	mov	r1, r9
 8006c98:	f7f9 fa5a 	bl	8000150 <__aeabi_dmul>
 8006c9c:	460b      	mov	r3, r1
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	4629      	mov	r1, r5
 8006ca2:	4620      	mov	r0, r4
 8006ca4:	f7f9 fb82 	bl	80003ac <__aeabi_dsub>
 8006ca8:	4b28      	ldr	r3, [pc, #160]	@ (8006d4c <__kernel_cos+0x16c>)
 8006caa:	4680      	mov	r8, r0
 8006cac:	429e      	cmp	r6, r3
 8006cae:	4689      	mov	r9, r1
 8006cb0:	d80e      	bhi.n	8006cd0 <__kernel_cos+0xf0>
 8006cb2:	4602      	mov	r2, r0
 8006cb4:	460b      	mov	r3, r1
 8006cb6:	4650      	mov	r0, sl
 8006cb8:	4659      	mov	r1, fp
 8006cba:	f7f9 fb77 	bl	80003ac <__aeabi_dsub>
 8006cbe:	4602      	mov	r2, r0
 8006cc0:	2000      	movs	r0, #0
 8006cc2:	460b      	mov	r3, r1
 8006cc4:	4922      	ldr	r1, [pc, #136]	@ (8006d50 <__kernel_cos+0x170>)
 8006cc6:	f7f9 fb71 	bl	80003ac <__aeabi_dsub>
 8006cca:	b003      	add	sp, #12
 8006ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cd0:	2400      	movs	r4, #0
 8006cd2:	4b20      	ldr	r3, [pc, #128]	@ (8006d54 <__kernel_cos+0x174>)
 8006cd4:	4622      	mov	r2, r4
 8006cd6:	429e      	cmp	r6, r3
 8006cd8:	bf8c      	ite	hi
 8006cda:	4d1f      	ldrhi	r5, [pc, #124]	@ (8006d58 <__kernel_cos+0x178>)
 8006cdc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8006ce0:	462b      	mov	r3, r5
 8006ce2:	2000      	movs	r0, #0
 8006ce4:	491a      	ldr	r1, [pc, #104]	@ (8006d50 <__kernel_cos+0x170>)
 8006ce6:	f7f9 fb61 	bl	80003ac <__aeabi_dsub>
 8006cea:	4622      	mov	r2, r4
 8006cec:	4606      	mov	r6, r0
 8006cee:	460f      	mov	r7, r1
 8006cf0:	462b      	mov	r3, r5
 8006cf2:	4650      	mov	r0, sl
 8006cf4:	4659      	mov	r1, fp
 8006cf6:	f7f9 fb59 	bl	80003ac <__aeabi_dsub>
 8006cfa:	4642      	mov	r2, r8
 8006cfc:	464b      	mov	r3, r9
 8006cfe:	f7f9 fb55 	bl	80003ac <__aeabi_dsub>
 8006d02:	4602      	mov	r2, r0
 8006d04:	460b      	mov	r3, r1
 8006d06:	4630      	mov	r0, r6
 8006d08:	4639      	mov	r1, r7
 8006d0a:	e7dc      	b.n	8006cc6 <__kernel_cos+0xe6>
 8006d0c:	2000      	movs	r0, #0
 8006d0e:	4910      	ldr	r1, [pc, #64]	@ (8006d50 <__kernel_cos+0x170>)
 8006d10:	e7db      	b.n	8006cca <__kernel_cos+0xea>
 8006d12:	bf00      	nop
 8006d14:	f3af 8000 	nop.w
 8006d18:	be8838d4 	.word	0xbe8838d4
 8006d1c:	bda8fae9 	.word	0xbda8fae9
 8006d20:	bdb4b1c4 	.word	0xbdb4b1c4
 8006d24:	3e21ee9e 	.word	0x3e21ee9e
 8006d28:	809c52ad 	.word	0x809c52ad
 8006d2c:	3e927e4f 	.word	0x3e927e4f
 8006d30:	19cb1590 	.word	0x19cb1590
 8006d34:	3efa01a0 	.word	0x3efa01a0
 8006d38:	16c15177 	.word	0x16c15177
 8006d3c:	3f56c16c 	.word	0x3f56c16c
 8006d40:	5555554c 	.word	0x5555554c
 8006d44:	3fa55555 	.word	0x3fa55555
 8006d48:	3fe00000 	.word	0x3fe00000
 8006d4c:	3fd33332 	.word	0x3fd33332
 8006d50:	3ff00000 	.word	0x3ff00000
 8006d54:	3fe90000 	.word	0x3fe90000
 8006d58:	3fd20000 	.word	0x3fd20000
 8006d5c:	00000000 	.word	0x00000000

08006d60 <__kernel_sin>:
 8006d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d64:	461f      	mov	r7, r3
 8006d66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8006d6a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8006d6e:	4604      	mov	r4, r0
 8006d70:	460d      	mov	r5, r1
 8006d72:	4616      	mov	r6, r2
 8006d74:	b085      	sub	sp, #20
 8006d76:	d203      	bcs.n	8006d80 <__kernel_sin+0x20>
 8006d78:	f7f9 fd58 	bl	800082c <__aeabi_d2iz>
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d051      	beq.n	8006e24 <__kernel_sin+0xc4>
 8006d80:	4622      	mov	r2, r4
 8006d82:	462b      	mov	r3, r5
 8006d84:	4620      	mov	r0, r4
 8006d86:	4629      	mov	r1, r5
 8006d88:	f7f9 f9e2 	bl	8000150 <__aeabi_dmul>
 8006d8c:	4682      	mov	sl, r0
 8006d8e:	468b      	mov	fp, r1
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4620      	mov	r0, r4
 8006d96:	4629      	mov	r1, r5
 8006d98:	f7f9 f9da 	bl	8000150 <__aeabi_dmul>
 8006d9c:	a33e      	add	r3, pc, #248	@ (adr r3, 8006e98 <__kernel_sin+0x138>)
 8006d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da2:	4680      	mov	r8, r0
 8006da4:	4689      	mov	r9, r1
 8006da6:	4650      	mov	r0, sl
 8006da8:	4659      	mov	r1, fp
 8006daa:	f7f9 f9d1 	bl	8000150 <__aeabi_dmul>
 8006dae:	a33c      	add	r3, pc, #240	@ (adr r3, 8006ea0 <__kernel_sin+0x140>)
 8006db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006db4:	f7f9 fafa 	bl	80003ac <__aeabi_dsub>
 8006db8:	4652      	mov	r2, sl
 8006dba:	465b      	mov	r3, fp
 8006dbc:	f7f9 f9c8 	bl	8000150 <__aeabi_dmul>
 8006dc0:	a339      	add	r3, pc, #228	@ (adr r3, 8006ea8 <__kernel_sin+0x148>)
 8006dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dc6:	f7f9 faf3 	bl	80003b0 <__adddf3>
 8006dca:	4652      	mov	r2, sl
 8006dcc:	465b      	mov	r3, fp
 8006dce:	f7f9 f9bf 	bl	8000150 <__aeabi_dmul>
 8006dd2:	a337      	add	r3, pc, #220	@ (adr r3, 8006eb0 <__kernel_sin+0x150>)
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f7f9 fae8 	bl	80003ac <__aeabi_dsub>
 8006ddc:	4652      	mov	r2, sl
 8006dde:	465b      	mov	r3, fp
 8006de0:	f7f9 f9b6 	bl	8000150 <__aeabi_dmul>
 8006de4:	a334      	add	r3, pc, #208	@ (adr r3, 8006eb8 <__kernel_sin+0x158>)
 8006de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dea:	f7f9 fae1 	bl	80003b0 <__adddf3>
 8006dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006df0:	e9cd 0100 	strd	r0, r1, [sp]
 8006df4:	b9db      	cbnz	r3, 8006e2e <__kernel_sin+0xce>
 8006df6:	4602      	mov	r2, r0
 8006df8:	460b      	mov	r3, r1
 8006dfa:	4650      	mov	r0, sl
 8006dfc:	4659      	mov	r1, fp
 8006dfe:	f7f9 f9a7 	bl	8000150 <__aeabi_dmul>
 8006e02:	a32f      	add	r3, pc, #188	@ (adr r3, 8006ec0 <__kernel_sin+0x160>)
 8006e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e08:	f7f9 fad0 	bl	80003ac <__aeabi_dsub>
 8006e0c:	4642      	mov	r2, r8
 8006e0e:	464b      	mov	r3, r9
 8006e10:	f7f9 f99e 	bl	8000150 <__aeabi_dmul>
 8006e14:	4602      	mov	r2, r0
 8006e16:	460b      	mov	r3, r1
 8006e18:	4620      	mov	r0, r4
 8006e1a:	4629      	mov	r1, r5
 8006e1c:	f7f9 fac8 	bl	80003b0 <__adddf3>
 8006e20:	4604      	mov	r4, r0
 8006e22:	460d      	mov	r5, r1
 8006e24:	4620      	mov	r0, r4
 8006e26:	4629      	mov	r1, r5
 8006e28:	b005      	add	sp, #20
 8006e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e2e:	2200      	movs	r2, #0
 8006e30:	4630      	mov	r0, r6
 8006e32:	4639      	mov	r1, r7
 8006e34:	4b24      	ldr	r3, [pc, #144]	@ (8006ec8 <__kernel_sin+0x168>)
 8006e36:	f7f9 f98b 	bl	8000150 <__aeabi_dmul>
 8006e3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006e42:	4640      	mov	r0, r8
 8006e44:	4649      	mov	r1, r9
 8006e46:	f7f9 f983 	bl	8000150 <__aeabi_dmul>
 8006e4a:	4602      	mov	r2, r0
 8006e4c:	460b      	mov	r3, r1
 8006e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006e52:	f7f9 faab 	bl	80003ac <__aeabi_dsub>
 8006e56:	4652      	mov	r2, sl
 8006e58:	465b      	mov	r3, fp
 8006e5a:	f7f9 f979 	bl	8000150 <__aeabi_dmul>
 8006e5e:	4632      	mov	r2, r6
 8006e60:	463b      	mov	r3, r7
 8006e62:	f7f9 faa3 	bl	80003ac <__aeabi_dsub>
 8006e66:	a316      	add	r3, pc, #88	@ (adr r3, 8006ec0 <__kernel_sin+0x160>)
 8006e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e6c:	4606      	mov	r6, r0
 8006e6e:	460f      	mov	r7, r1
 8006e70:	4640      	mov	r0, r8
 8006e72:	4649      	mov	r1, r9
 8006e74:	f7f9 f96c 	bl	8000150 <__aeabi_dmul>
 8006e78:	4602      	mov	r2, r0
 8006e7a:	460b      	mov	r3, r1
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	4639      	mov	r1, r7
 8006e80:	f7f9 fa96 	bl	80003b0 <__adddf3>
 8006e84:	4602      	mov	r2, r0
 8006e86:	460b      	mov	r3, r1
 8006e88:	4620      	mov	r0, r4
 8006e8a:	4629      	mov	r1, r5
 8006e8c:	f7f9 fa8e 	bl	80003ac <__aeabi_dsub>
 8006e90:	e7c6      	b.n	8006e20 <__kernel_sin+0xc0>
 8006e92:	bf00      	nop
 8006e94:	f3af 8000 	nop.w
 8006e98:	5acfd57c 	.word	0x5acfd57c
 8006e9c:	3de5d93a 	.word	0x3de5d93a
 8006ea0:	8a2b9ceb 	.word	0x8a2b9ceb
 8006ea4:	3e5ae5e6 	.word	0x3e5ae5e6
 8006ea8:	57b1fe7d 	.word	0x57b1fe7d
 8006eac:	3ec71de3 	.word	0x3ec71de3
 8006eb0:	19c161d5 	.word	0x19c161d5
 8006eb4:	3f2a01a0 	.word	0x3f2a01a0
 8006eb8:	1110f8a6 	.word	0x1110f8a6
 8006ebc:	3f811111 	.word	0x3f811111
 8006ec0:	55555549 	.word	0x55555549
 8006ec4:	3fc55555 	.word	0x3fc55555
 8006ec8:	3fe00000 	.word	0x3fe00000
 8006ecc:	00000000 	.word	0x00000000

08006ed0 <__ieee754_rem_pio2>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	4bc4      	ldr	r3, [pc, #784]	@ (80071e8 <__ieee754_rem_pio2+0x318>)
 8006ed6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8006eda:	b08d      	sub	sp, #52	@ 0x34
 8006edc:	4598      	cmp	r8, r3
 8006ede:	4606      	mov	r6, r0
 8006ee0:	460f      	mov	r7, r1
 8006ee2:	4614      	mov	r4, r2
 8006ee4:	9104      	str	r1, [sp, #16]
 8006ee6:	d807      	bhi.n	8006ef8 <__ieee754_rem_pio2+0x28>
 8006ee8:	e9c2 6700 	strd	r6, r7, [r2]
 8006eec:	2300      	movs	r3, #0
 8006eee:	2200      	movs	r2, #0
 8006ef0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8006ef4:	2500      	movs	r5, #0
 8006ef6:	e026      	b.n	8006f46 <__ieee754_rem_pio2+0x76>
 8006ef8:	4bbc      	ldr	r3, [pc, #752]	@ (80071ec <__ieee754_rem_pio2+0x31c>)
 8006efa:	4598      	cmp	r8, r3
 8006efc:	d876      	bhi.n	8006fec <__ieee754_rem_pio2+0x11c>
 8006efe:	9b04      	ldr	r3, [sp, #16]
 8006f00:	4dbb      	ldr	r5, [pc, #748]	@ (80071f0 <__ieee754_rem_pio2+0x320>)
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	a3aa      	add	r3, pc, #680	@ (adr r3, 80071b0 <__ieee754_rem_pio2+0x2e0>)
 8006f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f0a:	dd38      	ble.n	8006f7e <__ieee754_rem_pio2+0xae>
 8006f0c:	f7f9 fa4e 	bl	80003ac <__aeabi_dsub>
 8006f10:	45a8      	cmp	r8, r5
 8006f12:	4606      	mov	r6, r0
 8006f14:	460f      	mov	r7, r1
 8006f16:	d01a      	beq.n	8006f4e <__ieee754_rem_pio2+0x7e>
 8006f18:	a3a7      	add	r3, pc, #668	@ (adr r3, 80071b8 <__ieee754_rem_pio2+0x2e8>)
 8006f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f1e:	f7f9 fa45 	bl	80003ac <__aeabi_dsub>
 8006f22:	4602      	mov	r2, r0
 8006f24:	460b      	mov	r3, r1
 8006f26:	4680      	mov	r8, r0
 8006f28:	4689      	mov	r9, r1
 8006f2a:	4630      	mov	r0, r6
 8006f2c:	4639      	mov	r1, r7
 8006f2e:	f7f9 fa3d 	bl	80003ac <__aeabi_dsub>
 8006f32:	a3a1      	add	r3, pc, #644	@ (adr r3, 80071b8 <__ieee754_rem_pio2+0x2e8>)
 8006f34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f38:	f7f9 fa38 	bl	80003ac <__aeabi_dsub>
 8006f3c:	2501      	movs	r5, #1
 8006f3e:	e9c4 8900 	strd	r8, r9, [r4]
 8006f42:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006f46:	4628      	mov	r0, r5
 8006f48:	b00d      	add	sp, #52	@ 0x34
 8006f4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4e:	a39c      	add	r3, pc, #624	@ (adr r3, 80071c0 <__ieee754_rem_pio2+0x2f0>)
 8006f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f54:	f7f9 fa2a 	bl	80003ac <__aeabi_dsub>
 8006f58:	a39b      	add	r3, pc, #620	@ (adr r3, 80071c8 <__ieee754_rem_pio2+0x2f8>)
 8006f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f5e:	4606      	mov	r6, r0
 8006f60:	460f      	mov	r7, r1
 8006f62:	f7f9 fa23 	bl	80003ac <__aeabi_dsub>
 8006f66:	4602      	mov	r2, r0
 8006f68:	460b      	mov	r3, r1
 8006f6a:	4680      	mov	r8, r0
 8006f6c:	4689      	mov	r9, r1
 8006f6e:	4630      	mov	r0, r6
 8006f70:	4639      	mov	r1, r7
 8006f72:	f7f9 fa1b 	bl	80003ac <__aeabi_dsub>
 8006f76:	a394      	add	r3, pc, #592	@ (adr r3, 80071c8 <__ieee754_rem_pio2+0x2f8>)
 8006f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f7c:	e7dc      	b.n	8006f38 <__ieee754_rem_pio2+0x68>
 8006f7e:	f7f9 fa17 	bl	80003b0 <__adddf3>
 8006f82:	45a8      	cmp	r8, r5
 8006f84:	4606      	mov	r6, r0
 8006f86:	460f      	mov	r7, r1
 8006f88:	d018      	beq.n	8006fbc <__ieee754_rem_pio2+0xec>
 8006f8a:	a38b      	add	r3, pc, #556	@ (adr r3, 80071b8 <__ieee754_rem_pio2+0x2e8>)
 8006f8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f90:	f7f9 fa0e 	bl	80003b0 <__adddf3>
 8006f94:	4602      	mov	r2, r0
 8006f96:	460b      	mov	r3, r1
 8006f98:	4680      	mov	r8, r0
 8006f9a:	4689      	mov	r9, r1
 8006f9c:	4630      	mov	r0, r6
 8006f9e:	4639      	mov	r1, r7
 8006fa0:	f7f9 fa04 	bl	80003ac <__aeabi_dsub>
 8006fa4:	a384      	add	r3, pc, #528	@ (adr r3, 80071b8 <__ieee754_rem_pio2+0x2e8>)
 8006fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006faa:	f7f9 fa01 	bl	80003b0 <__adddf3>
 8006fae:	f04f 35ff 	mov.w	r5, #4294967295
 8006fb2:	e9c4 8900 	strd	r8, r9, [r4]
 8006fb6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8006fba:	e7c4      	b.n	8006f46 <__ieee754_rem_pio2+0x76>
 8006fbc:	a380      	add	r3, pc, #512	@ (adr r3, 80071c0 <__ieee754_rem_pio2+0x2f0>)
 8006fbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fc2:	f7f9 f9f5 	bl	80003b0 <__adddf3>
 8006fc6:	a380      	add	r3, pc, #512	@ (adr r3, 80071c8 <__ieee754_rem_pio2+0x2f8>)
 8006fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fcc:	4606      	mov	r6, r0
 8006fce:	460f      	mov	r7, r1
 8006fd0:	f7f9 f9ee 	bl	80003b0 <__adddf3>
 8006fd4:	4602      	mov	r2, r0
 8006fd6:	460b      	mov	r3, r1
 8006fd8:	4680      	mov	r8, r0
 8006fda:	4689      	mov	r9, r1
 8006fdc:	4630      	mov	r0, r6
 8006fde:	4639      	mov	r1, r7
 8006fe0:	f7f9 f9e4 	bl	80003ac <__aeabi_dsub>
 8006fe4:	a378      	add	r3, pc, #480	@ (adr r3, 80071c8 <__ieee754_rem_pio2+0x2f8>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	e7de      	b.n	8006faa <__ieee754_rem_pio2+0xda>
 8006fec:	4b81      	ldr	r3, [pc, #516]	@ (80071f4 <__ieee754_rem_pio2+0x324>)
 8006fee:	4598      	cmp	r8, r3
 8006ff0:	f200 80cf 	bhi.w	8007192 <__ieee754_rem_pio2+0x2c2>
 8006ff4:	f000 f962 	bl	80072bc <fabs>
 8006ff8:	a375      	add	r3, pc, #468	@ (adr r3, 80071d0 <__ieee754_rem_pio2+0x300>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	4606      	mov	r6, r0
 8007000:	460f      	mov	r7, r1
 8007002:	f7f9 f8a5 	bl	8000150 <__aeabi_dmul>
 8007006:	2200      	movs	r2, #0
 8007008:	4b7b      	ldr	r3, [pc, #492]	@ (80071f8 <__ieee754_rem_pio2+0x328>)
 800700a:	f7f9 f9d1 	bl	80003b0 <__adddf3>
 800700e:	f7f9 fc0d 	bl	800082c <__aeabi_d2iz>
 8007012:	4605      	mov	r5, r0
 8007014:	f7f9 fb18 	bl	8000648 <__aeabi_i2d>
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007020:	a363      	add	r3, pc, #396	@ (adr r3, 80071b0 <__ieee754_rem_pio2+0x2e0>)
 8007022:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007026:	f7f9 f893 	bl	8000150 <__aeabi_dmul>
 800702a:	4602      	mov	r2, r0
 800702c:	460b      	mov	r3, r1
 800702e:	4630      	mov	r0, r6
 8007030:	4639      	mov	r1, r7
 8007032:	f7f9 f9bb 	bl	80003ac <__aeabi_dsub>
 8007036:	a360      	add	r3, pc, #384	@ (adr r3, 80071b8 <__ieee754_rem_pio2+0x2e8>)
 8007038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703c:	4682      	mov	sl, r0
 800703e:	468b      	mov	fp, r1
 8007040:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007044:	f7f9 f884 	bl	8000150 <__aeabi_dmul>
 8007048:	2d1f      	cmp	r5, #31
 800704a:	4606      	mov	r6, r0
 800704c:	460f      	mov	r7, r1
 800704e:	dc0c      	bgt.n	800706a <__ieee754_rem_pio2+0x19a>
 8007050:	4b6a      	ldr	r3, [pc, #424]	@ (80071fc <__ieee754_rem_pio2+0x32c>)
 8007052:	1e6a      	subs	r2, r5, #1
 8007054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007058:	4543      	cmp	r3, r8
 800705a:	d006      	beq.n	800706a <__ieee754_rem_pio2+0x19a>
 800705c:	4632      	mov	r2, r6
 800705e:	463b      	mov	r3, r7
 8007060:	4650      	mov	r0, sl
 8007062:	4659      	mov	r1, fp
 8007064:	f7f9 f9a2 	bl	80003ac <__aeabi_dsub>
 8007068:	e00e      	b.n	8007088 <__ieee754_rem_pio2+0x1b8>
 800706a:	463b      	mov	r3, r7
 800706c:	4632      	mov	r2, r6
 800706e:	4650      	mov	r0, sl
 8007070:	4659      	mov	r1, fp
 8007072:	f7f9 f99b 	bl	80003ac <__aeabi_dsub>
 8007076:	ea4f 5328 	mov.w	r3, r8, asr #20
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8007080:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8007084:	2b10      	cmp	r3, #16
 8007086:	dc02      	bgt.n	800708e <__ieee754_rem_pio2+0x1be>
 8007088:	e9c4 0100 	strd	r0, r1, [r4]
 800708c:	e039      	b.n	8007102 <__ieee754_rem_pio2+0x232>
 800708e:	a34c      	add	r3, pc, #304	@ (adr r3, 80071c0 <__ieee754_rem_pio2+0x2f0>)
 8007090:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007094:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007098:	f7f9 f85a 	bl	8000150 <__aeabi_dmul>
 800709c:	4606      	mov	r6, r0
 800709e:	460f      	mov	r7, r1
 80070a0:	4602      	mov	r2, r0
 80070a2:	460b      	mov	r3, r1
 80070a4:	4650      	mov	r0, sl
 80070a6:	4659      	mov	r1, fp
 80070a8:	f7f9 f980 	bl	80003ac <__aeabi_dsub>
 80070ac:	4602      	mov	r2, r0
 80070ae:	460b      	mov	r3, r1
 80070b0:	4680      	mov	r8, r0
 80070b2:	4689      	mov	r9, r1
 80070b4:	4650      	mov	r0, sl
 80070b6:	4659      	mov	r1, fp
 80070b8:	f7f9 f978 	bl	80003ac <__aeabi_dsub>
 80070bc:	4632      	mov	r2, r6
 80070be:	463b      	mov	r3, r7
 80070c0:	f7f9 f974 	bl	80003ac <__aeabi_dsub>
 80070c4:	a340      	add	r3, pc, #256	@ (adr r3, 80071c8 <__ieee754_rem_pio2+0x2f8>)
 80070c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070ca:	4606      	mov	r6, r0
 80070cc:	460f      	mov	r7, r1
 80070ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80070d2:	f7f9 f83d 	bl	8000150 <__aeabi_dmul>
 80070d6:	4632      	mov	r2, r6
 80070d8:	463b      	mov	r3, r7
 80070da:	f7f9 f967 	bl	80003ac <__aeabi_dsub>
 80070de:	4602      	mov	r2, r0
 80070e0:	460b      	mov	r3, r1
 80070e2:	4606      	mov	r6, r0
 80070e4:	460f      	mov	r7, r1
 80070e6:	4640      	mov	r0, r8
 80070e8:	4649      	mov	r1, r9
 80070ea:	f7f9 f95f 	bl	80003ac <__aeabi_dsub>
 80070ee:	9a05      	ldr	r2, [sp, #20]
 80070f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	2b31      	cmp	r3, #49	@ 0x31
 80070f8:	dc20      	bgt.n	800713c <__ieee754_rem_pio2+0x26c>
 80070fa:	46c2      	mov	sl, r8
 80070fc:	46cb      	mov	fp, r9
 80070fe:	e9c4 0100 	strd	r0, r1, [r4]
 8007102:	e9d4 8900 	ldrd	r8, r9, [r4]
 8007106:	4650      	mov	r0, sl
 8007108:	4642      	mov	r2, r8
 800710a:	464b      	mov	r3, r9
 800710c:	4659      	mov	r1, fp
 800710e:	f7f9 f94d 	bl	80003ac <__aeabi_dsub>
 8007112:	463b      	mov	r3, r7
 8007114:	4632      	mov	r2, r6
 8007116:	f7f9 f949 	bl	80003ac <__aeabi_dsub>
 800711a:	9b04      	ldr	r3, [sp, #16]
 800711c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8007120:	2b00      	cmp	r3, #0
 8007122:	f6bf af10 	bge.w	8006f46 <__ieee754_rem_pio2+0x76>
 8007126:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800712a:	6063      	str	r3, [r4, #4]
 800712c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007130:	f8c4 8000 	str.w	r8, [r4]
 8007134:	60a0      	str	r0, [r4, #8]
 8007136:	60e3      	str	r3, [r4, #12]
 8007138:	426d      	negs	r5, r5
 800713a:	e704      	b.n	8006f46 <__ieee754_rem_pio2+0x76>
 800713c:	a326      	add	r3, pc, #152	@ (adr r3, 80071d8 <__ieee754_rem_pio2+0x308>)
 800713e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007142:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007146:	f7f9 f803 	bl	8000150 <__aeabi_dmul>
 800714a:	4606      	mov	r6, r0
 800714c:	460f      	mov	r7, r1
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4640      	mov	r0, r8
 8007154:	4649      	mov	r1, r9
 8007156:	f7f9 f929 	bl	80003ac <__aeabi_dsub>
 800715a:	4602      	mov	r2, r0
 800715c:	460b      	mov	r3, r1
 800715e:	4682      	mov	sl, r0
 8007160:	468b      	mov	fp, r1
 8007162:	4640      	mov	r0, r8
 8007164:	4649      	mov	r1, r9
 8007166:	f7f9 f921 	bl	80003ac <__aeabi_dsub>
 800716a:	4632      	mov	r2, r6
 800716c:	463b      	mov	r3, r7
 800716e:	f7f9 f91d 	bl	80003ac <__aeabi_dsub>
 8007172:	a31b      	add	r3, pc, #108	@ (adr r3, 80071e0 <__ieee754_rem_pio2+0x310>)
 8007174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007178:	4606      	mov	r6, r0
 800717a:	460f      	mov	r7, r1
 800717c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007180:	f7f8 ffe6 	bl	8000150 <__aeabi_dmul>
 8007184:	4632      	mov	r2, r6
 8007186:	463b      	mov	r3, r7
 8007188:	f7f9 f910 	bl	80003ac <__aeabi_dsub>
 800718c:	4606      	mov	r6, r0
 800718e:	460f      	mov	r7, r1
 8007190:	e764      	b.n	800705c <__ieee754_rem_pio2+0x18c>
 8007192:	4b1b      	ldr	r3, [pc, #108]	@ (8007200 <__ieee754_rem_pio2+0x330>)
 8007194:	4598      	cmp	r8, r3
 8007196:	d935      	bls.n	8007204 <__ieee754_rem_pio2+0x334>
 8007198:	4602      	mov	r2, r0
 800719a:	460b      	mov	r3, r1
 800719c:	f7f9 f906 	bl	80003ac <__aeabi_dsub>
 80071a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80071a4:	e9c4 0100 	strd	r0, r1, [r4]
 80071a8:	e6a4      	b.n	8006ef4 <__ieee754_rem_pio2+0x24>
 80071aa:	bf00      	nop
 80071ac:	f3af 8000 	nop.w
 80071b0:	54400000 	.word	0x54400000
 80071b4:	3ff921fb 	.word	0x3ff921fb
 80071b8:	1a626331 	.word	0x1a626331
 80071bc:	3dd0b461 	.word	0x3dd0b461
 80071c0:	1a600000 	.word	0x1a600000
 80071c4:	3dd0b461 	.word	0x3dd0b461
 80071c8:	2e037073 	.word	0x2e037073
 80071cc:	3ba3198a 	.word	0x3ba3198a
 80071d0:	6dc9c883 	.word	0x6dc9c883
 80071d4:	3fe45f30 	.word	0x3fe45f30
 80071d8:	2e000000 	.word	0x2e000000
 80071dc:	3ba3198a 	.word	0x3ba3198a
 80071e0:	252049c1 	.word	0x252049c1
 80071e4:	397b839a 	.word	0x397b839a
 80071e8:	3fe921fb 	.word	0x3fe921fb
 80071ec:	4002d97b 	.word	0x4002d97b
 80071f0:	3ff921fb 	.word	0x3ff921fb
 80071f4:	413921fb 	.word	0x413921fb
 80071f8:	3fe00000 	.word	0x3fe00000
 80071fc:	08008970 	.word	0x08008970
 8007200:	7fefffff 	.word	0x7fefffff
 8007204:	ea4f 5528 	mov.w	r5, r8, asr #20
 8007208:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800720c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8007210:	460f      	mov	r7, r1
 8007212:	f7f9 fb0b 	bl	800082c <__aeabi_d2iz>
 8007216:	f7f9 fa17 	bl	8000648 <__aeabi_i2d>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	4630      	mov	r0, r6
 8007220:	4639      	mov	r1, r7
 8007222:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8007226:	f7f9 f8c1 	bl	80003ac <__aeabi_dsub>
 800722a:	2200      	movs	r2, #0
 800722c:	4b21      	ldr	r3, [pc, #132]	@ (80072b4 <__ieee754_rem_pio2+0x3e4>)
 800722e:	f7f8 ff8f 	bl	8000150 <__aeabi_dmul>
 8007232:	460f      	mov	r7, r1
 8007234:	4606      	mov	r6, r0
 8007236:	f7f9 faf9 	bl	800082c <__aeabi_d2iz>
 800723a:	f7f9 fa05 	bl	8000648 <__aeabi_i2d>
 800723e:	4602      	mov	r2, r0
 8007240:	460b      	mov	r3, r1
 8007242:	4630      	mov	r0, r6
 8007244:	4639      	mov	r1, r7
 8007246:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800724a:	f7f9 f8af 	bl	80003ac <__aeabi_dsub>
 800724e:	2200      	movs	r2, #0
 8007250:	4b18      	ldr	r3, [pc, #96]	@ (80072b4 <__ieee754_rem_pio2+0x3e4>)
 8007252:	f7f8 ff7d 	bl	8000150 <__aeabi_dmul>
 8007256:	f04f 0803 	mov.w	r8, #3
 800725a:	2600      	movs	r6, #0
 800725c:	2700      	movs	r7, #0
 800725e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8007262:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8007266:	4632      	mov	r2, r6
 8007268:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800726c:	463b      	mov	r3, r7
 800726e:	46c2      	mov	sl, r8
 8007270:	f108 38ff 	add.w	r8, r8, #4294967295
 8007274:	f7f9 faa8 	bl	80007c8 <__aeabi_dcmpeq>
 8007278:	2800      	cmp	r0, #0
 800727a:	d1f4      	bne.n	8007266 <__ieee754_rem_pio2+0x396>
 800727c:	4b0e      	ldr	r3, [pc, #56]	@ (80072b8 <__ieee754_rem_pio2+0x3e8>)
 800727e:	462a      	mov	r2, r5
 8007280:	9301      	str	r3, [sp, #4]
 8007282:	2302      	movs	r3, #2
 8007284:	4621      	mov	r1, r4
 8007286:	9300      	str	r3, [sp, #0]
 8007288:	a806      	add	r0, sp, #24
 800728a:	4653      	mov	r3, sl
 800728c:	f000 f81a 	bl	80072c4 <__kernel_rem_pio2>
 8007290:	9b04      	ldr	r3, [sp, #16]
 8007292:	4605      	mov	r5, r0
 8007294:	2b00      	cmp	r3, #0
 8007296:	f6bf ae56 	bge.w	8006f46 <__ieee754_rem_pio2+0x76>
 800729a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800729e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072a2:	e9c4 2300 	strd	r2, r3, [r4]
 80072a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80072aa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80072ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80072b2:	e741      	b.n	8007138 <__ieee754_rem_pio2+0x268>
 80072b4:	41700000 	.word	0x41700000
 80072b8:	080089f0 	.word	0x080089f0

080072bc <fabs>:
 80072bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80072c0:	4619      	mov	r1, r3
 80072c2:	4770      	bx	lr

080072c4 <__kernel_rem_pio2>:
 80072c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80072cc:	9308      	str	r3, [sp, #32]
 80072ce:	9104      	str	r1, [sp, #16]
 80072d0:	4bba      	ldr	r3, [pc, #744]	@ (80075bc <__kernel_rem_pio2+0x2f8>)
 80072d2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80072d4:	f112 0f14 	cmn.w	r2, #20
 80072d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80072dc:	bfa8      	it	ge
 80072de:	1ed4      	subge	r4, r2, #3
 80072e0:	9302      	str	r3, [sp, #8]
 80072e2:	9b08      	ldr	r3, [sp, #32]
 80072e4:	bfb8      	it	lt
 80072e6:	2400      	movlt	r4, #0
 80072e8:	f103 33ff 	add.w	r3, r3, #4294967295
 80072ec:	9306      	str	r3, [sp, #24]
 80072ee:	bfa4      	itt	ge
 80072f0:	2318      	movge	r3, #24
 80072f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80072f6:	f06f 0317 	mvn.w	r3, #23
 80072fa:	fb04 3303 	mla	r3, r4, r3, r3
 80072fe:	eb03 0a02 	add.w	sl, r3, r2
 8007302:	9a06      	ldr	r2, [sp, #24]
 8007304:	9b02      	ldr	r3, [sp, #8]
 8007306:	1aa7      	subs	r7, r4, r2
 8007308:	eb03 0802 	add.w	r8, r3, r2
 800730c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800730e:	2500      	movs	r5, #0
 8007310:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8007314:	2200      	movs	r2, #0
 8007316:	2300      	movs	r3, #0
 8007318:	9009      	str	r0, [sp, #36]	@ 0x24
 800731a:	ae20      	add	r6, sp, #128	@ 0x80
 800731c:	4545      	cmp	r5, r8
 800731e:	dd13      	ble.n	8007348 <__kernel_rem_pio2+0x84>
 8007320:	2700      	movs	r7, #0
 8007322:	9a08      	ldr	r2, [sp, #32]
 8007324:	ab20      	add	r3, sp, #128	@ 0x80
 8007326:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800732a:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 800732e:	9b02      	ldr	r3, [sp, #8]
 8007330:	429f      	cmp	r7, r3
 8007332:	dc33      	bgt.n	800739c <__kernel_rem_pio2+0xd8>
 8007334:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007336:	2200      	movs	r2, #0
 8007338:	f1a3 0908 	sub.w	r9, r3, #8
 800733c:	2300      	movs	r3, #0
 800733e:	46a8      	mov	r8, r5
 8007340:	2600      	movs	r6, #0
 8007342:	e9cd 2300 	strd	r2, r3, [sp]
 8007346:	e01f      	b.n	8007388 <__kernel_rem_pio2+0xc4>
 8007348:	42ef      	cmn	r7, r5
 800734a:	d40b      	bmi.n	8007364 <__kernel_rem_pio2+0xa0>
 800734c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8007350:	e9cd 2300 	strd	r2, r3, [sp]
 8007354:	f7f9 f978 	bl	8000648 <__aeabi_i2d>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8007360:	3501      	adds	r5, #1
 8007362:	e7db      	b.n	800731c <__kernel_rem_pio2+0x58>
 8007364:	4610      	mov	r0, r2
 8007366:	4619      	mov	r1, r3
 8007368:	e7f8      	b.n	800735c <__kernel_rem_pio2+0x98>
 800736a:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800736e:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8007372:	f7f8 feed 	bl	8000150 <__aeabi_dmul>
 8007376:	4602      	mov	r2, r0
 8007378:	460b      	mov	r3, r1
 800737a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800737e:	f7f9 f817 	bl	80003b0 <__adddf3>
 8007382:	e9cd 0100 	strd	r0, r1, [sp]
 8007386:	3601      	adds	r6, #1
 8007388:	9b06      	ldr	r3, [sp, #24]
 800738a:	429e      	cmp	r6, r3
 800738c:	dded      	ble.n	800736a <__kernel_rem_pio2+0xa6>
 800738e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007392:	3701      	adds	r7, #1
 8007394:	e8eb 2302 	strd	r2, r3, [fp], #8
 8007398:	3508      	adds	r5, #8
 800739a:	e7c8      	b.n	800732e <__kernel_rem_pio2+0x6a>
 800739c:	9b02      	ldr	r3, [sp, #8]
 800739e:	aa0c      	add	r2, sp, #48	@ 0x30
 80073a0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80073a6:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80073a8:	f8dd b008 	ldr.w	fp, [sp, #8]
 80073ac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80073b0:	930a      	str	r3, [sp, #40]	@ 0x28
 80073b2:	ab98      	add	r3, sp, #608	@ 0x260
 80073b4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073b8:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80073bc:	ab70      	add	r3, sp, #448	@ 0x1c0
 80073be:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80073c2:	ae0c      	add	r6, sp, #48	@ 0x30
 80073c4:	4699      	mov	r9, r3
 80073c6:	46b0      	mov	r8, r6
 80073c8:	465f      	mov	r7, fp
 80073ca:	9307      	str	r3, [sp, #28]
 80073cc:	2f00      	cmp	r7, #0
 80073ce:	dc71      	bgt.n	80074b4 <__kernel_rem_pio2+0x1f0>
 80073d0:	4652      	mov	r2, sl
 80073d2:	4620      	mov	r0, r4
 80073d4:	4629      	mov	r1, r5
 80073d6:	f000 fa97 	bl	8007908 <scalbn>
 80073da:	2200      	movs	r2, #0
 80073dc:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80073e0:	4604      	mov	r4, r0
 80073e2:	460d      	mov	r5, r1
 80073e4:	f7f8 feb4 	bl	8000150 <__aeabi_dmul>
 80073e8:	f000 fb02 	bl	80079f0 <floor>
 80073ec:	2200      	movs	r2, #0
 80073ee:	4b74      	ldr	r3, [pc, #464]	@ (80075c0 <__kernel_rem_pio2+0x2fc>)
 80073f0:	f7f8 feae 	bl	8000150 <__aeabi_dmul>
 80073f4:	4602      	mov	r2, r0
 80073f6:	460b      	mov	r3, r1
 80073f8:	4620      	mov	r0, r4
 80073fa:	4629      	mov	r1, r5
 80073fc:	f7f8 ffd6 	bl	80003ac <__aeabi_dsub>
 8007400:	460d      	mov	r5, r1
 8007402:	4604      	mov	r4, r0
 8007404:	f7f9 fa12 	bl	800082c <__aeabi_d2iz>
 8007408:	9005      	str	r0, [sp, #20]
 800740a:	f7f9 f91d 	bl	8000648 <__aeabi_i2d>
 800740e:	4602      	mov	r2, r0
 8007410:	460b      	mov	r3, r1
 8007412:	4620      	mov	r0, r4
 8007414:	4629      	mov	r1, r5
 8007416:	f7f8 ffc9 	bl	80003ac <__aeabi_dsub>
 800741a:	f1ba 0f00 	cmp.w	sl, #0
 800741e:	4680      	mov	r8, r0
 8007420:	4689      	mov	r9, r1
 8007422:	dd6d      	ble.n	8007500 <__kernel_rem_pio2+0x23c>
 8007424:	f10b 31ff 	add.w	r1, fp, #4294967295
 8007428:	ab0c      	add	r3, sp, #48	@ 0x30
 800742a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800742e:	9c05      	ldr	r4, [sp, #20]
 8007430:	f1ca 0018 	rsb	r0, sl, #24
 8007434:	fa43 f200 	asr.w	r2, r3, r0
 8007438:	4414      	add	r4, r2
 800743a:	4082      	lsls	r2, r0
 800743c:	1a9b      	subs	r3, r3, r2
 800743e:	aa0c      	add	r2, sp, #48	@ 0x30
 8007440:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8007444:	f1ca 0217 	rsb	r2, sl, #23
 8007448:	9405      	str	r4, [sp, #20]
 800744a:	4113      	asrs	r3, r2
 800744c:	9300      	str	r3, [sp, #0]
 800744e:	9b00      	ldr	r3, [sp, #0]
 8007450:	2b00      	cmp	r3, #0
 8007452:	dd64      	ble.n	800751e <__kernel_rem_pio2+0x25a>
 8007454:	2200      	movs	r2, #0
 8007456:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800745a:	4614      	mov	r4, r2
 800745c:	9b05      	ldr	r3, [sp, #20]
 800745e:	3301      	adds	r3, #1
 8007460:	9305      	str	r3, [sp, #20]
 8007462:	4593      	cmp	fp, r2
 8007464:	f300 809d 	bgt.w	80075a2 <__kernel_rem_pio2+0x2de>
 8007468:	f1ba 0f00 	cmp.w	sl, #0
 800746c:	dd07      	ble.n	800747e <__kernel_rem_pio2+0x1ba>
 800746e:	f1ba 0f01 	cmp.w	sl, #1
 8007472:	f000 80b3 	beq.w	80075dc <__kernel_rem_pio2+0x318>
 8007476:	f1ba 0f02 	cmp.w	sl, #2
 800747a:	f000 80ba 	beq.w	80075f2 <__kernel_rem_pio2+0x32e>
 800747e:	9b00      	ldr	r3, [sp, #0]
 8007480:	2b02      	cmp	r3, #2
 8007482:	d14c      	bne.n	800751e <__kernel_rem_pio2+0x25a>
 8007484:	4642      	mov	r2, r8
 8007486:	464b      	mov	r3, r9
 8007488:	2000      	movs	r0, #0
 800748a:	494e      	ldr	r1, [pc, #312]	@ (80075c4 <__kernel_rem_pio2+0x300>)
 800748c:	f7f8 ff8e 	bl	80003ac <__aeabi_dsub>
 8007490:	4680      	mov	r8, r0
 8007492:	4689      	mov	r9, r1
 8007494:	2c00      	cmp	r4, #0
 8007496:	d042      	beq.n	800751e <__kernel_rem_pio2+0x25a>
 8007498:	4652      	mov	r2, sl
 800749a:	2000      	movs	r0, #0
 800749c:	4949      	ldr	r1, [pc, #292]	@ (80075c4 <__kernel_rem_pio2+0x300>)
 800749e:	f000 fa33 	bl	8007908 <scalbn>
 80074a2:	4602      	mov	r2, r0
 80074a4:	460b      	mov	r3, r1
 80074a6:	4640      	mov	r0, r8
 80074a8:	4649      	mov	r1, r9
 80074aa:	f7f8 ff7f 	bl	80003ac <__aeabi_dsub>
 80074ae:	4680      	mov	r8, r0
 80074b0:	4689      	mov	r9, r1
 80074b2:	e034      	b.n	800751e <__kernel_rem_pio2+0x25a>
 80074b4:	2200      	movs	r2, #0
 80074b6:	4b44      	ldr	r3, [pc, #272]	@ (80075c8 <__kernel_rem_pio2+0x304>)
 80074b8:	4620      	mov	r0, r4
 80074ba:	4629      	mov	r1, r5
 80074bc:	f7f8 fe48 	bl	8000150 <__aeabi_dmul>
 80074c0:	f7f9 f9b4 	bl	800082c <__aeabi_d2iz>
 80074c4:	f7f9 f8c0 	bl	8000648 <__aeabi_i2d>
 80074c8:	4602      	mov	r2, r0
 80074ca:	460b      	mov	r3, r1
 80074cc:	e9cd 2300 	strd	r2, r3, [sp]
 80074d0:	2200      	movs	r2, #0
 80074d2:	4b3e      	ldr	r3, [pc, #248]	@ (80075cc <__kernel_rem_pio2+0x308>)
 80074d4:	f7f8 fe3c 	bl	8000150 <__aeabi_dmul>
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	4620      	mov	r0, r4
 80074de:	4629      	mov	r1, r5
 80074e0:	f7f8 ff64 	bl	80003ac <__aeabi_dsub>
 80074e4:	f7f9 f9a2 	bl	800082c <__aeabi_d2iz>
 80074e8:	e979 2302 	ldrd	r2, r3, [r9, #-8]!
 80074ec:	f848 0b04 	str.w	r0, [r8], #4
 80074f0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80074f4:	f7f8 ff5c 	bl	80003b0 <__adddf3>
 80074f8:	3f01      	subs	r7, #1
 80074fa:	4604      	mov	r4, r0
 80074fc:	460d      	mov	r5, r1
 80074fe:	e765      	b.n	80073cc <__kernel_rem_pio2+0x108>
 8007500:	d106      	bne.n	8007510 <__kernel_rem_pio2+0x24c>
 8007502:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007506:	aa0c      	add	r2, sp, #48	@ 0x30
 8007508:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800750c:	15db      	asrs	r3, r3, #23
 800750e:	e79d      	b.n	800744c <__kernel_rem_pio2+0x188>
 8007510:	2200      	movs	r2, #0
 8007512:	4b2f      	ldr	r3, [pc, #188]	@ (80075d0 <__kernel_rem_pio2+0x30c>)
 8007514:	f7f9 f976 	bl	8000804 <__aeabi_dcmpge>
 8007518:	2800      	cmp	r0, #0
 800751a:	d13f      	bne.n	800759c <__kernel_rem_pio2+0x2d8>
 800751c:	9000      	str	r0, [sp, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	2300      	movs	r3, #0
 8007522:	4640      	mov	r0, r8
 8007524:	4649      	mov	r1, r9
 8007526:	f7f9 f94f 	bl	80007c8 <__aeabi_dcmpeq>
 800752a:	2800      	cmp	r0, #0
 800752c:	f000 80b0 	beq.w	8007690 <__kernel_rem_pio2+0x3cc>
 8007530:	2200      	movs	r2, #0
 8007532:	f10b 33ff 	add.w	r3, fp, #4294967295
 8007536:	9902      	ldr	r1, [sp, #8]
 8007538:	428b      	cmp	r3, r1
 800753a:	da62      	bge.n	8007602 <__kernel_rem_pio2+0x33e>
 800753c:	2a00      	cmp	r2, #0
 800753e:	d077      	beq.n	8007630 <__kernel_rem_pio2+0x36c>
 8007540:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007544:	ab0c      	add	r3, sp, #48	@ 0x30
 8007546:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800754a:	f1aa 0a18 	sub.w	sl, sl, #24
 800754e:	2b00      	cmp	r3, #0
 8007550:	d0f6      	beq.n	8007540 <__kernel_rem_pio2+0x27c>
 8007552:	4652      	mov	r2, sl
 8007554:	2000      	movs	r0, #0
 8007556:	491b      	ldr	r1, [pc, #108]	@ (80075c4 <__kernel_rem_pio2+0x300>)
 8007558:	f000 f9d6 	bl	8007908 <scalbn>
 800755c:	465d      	mov	r5, fp
 800755e:	4606      	mov	r6, r0
 8007560:	460f      	mov	r7, r1
 8007562:	f04f 0900 	mov.w	r9, #0
 8007566:	ab70      	add	r3, sp, #448	@ 0x1c0
 8007568:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80075c8 <__kernel_rem_pio2+0x304>
 800756c:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8007570:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8007574:	2d00      	cmp	r5, #0
 8007576:	f280 80c1 	bge.w	80076fc <__kernel_rem_pio2+0x438>
 800757a:	465d      	mov	r5, fp
 800757c:	2d00      	cmp	r5, #0
 800757e:	f2c0 80f1 	blt.w	8007764 <__kernel_rem_pio2+0x4a0>
 8007582:	4b14      	ldr	r3, [pc, #80]	@ (80075d4 <__kernel_rem_pio2+0x310>)
 8007584:	f04f 0900 	mov.w	r9, #0
 8007588:	9306      	str	r3, [sp, #24]
 800758a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800758c:	f04f 0a00 	mov.w	sl, #0
 8007590:	2700      	movs	r7, #0
 8007592:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8007596:	ebab 0605 	sub.w	r6, fp, r5
 800759a:	e0d7      	b.n	800774c <__kernel_rem_pio2+0x488>
 800759c:	2302      	movs	r3, #2
 800759e:	9300      	str	r3, [sp, #0]
 80075a0:	e758      	b.n	8007454 <__kernel_rem_pio2+0x190>
 80075a2:	f856 3b04 	ldr.w	r3, [r6], #4
 80075a6:	b9bc      	cbnz	r4, 80075d8 <__kernel_rem_pio2+0x314>
 80075a8:	b123      	cbz	r3, 80075b4 <__kernel_rem_pio2+0x2f0>
 80075aa:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80075ae:	f846 3c04 	str.w	r3, [r6, #-4]
 80075b2:	2301      	movs	r3, #1
 80075b4:	461c      	mov	r4, r3
 80075b6:	3201      	adds	r2, #1
 80075b8:	e753      	b.n	8007462 <__kernel_rem_pio2+0x19e>
 80075ba:	bf00      	nop
 80075bc:	08008b38 	.word	0x08008b38
 80075c0:	40200000 	.word	0x40200000
 80075c4:	3ff00000 	.word	0x3ff00000
 80075c8:	3e700000 	.word	0x3e700000
 80075cc:	41700000 	.word	0x41700000
 80075d0:	3fe00000 	.word	0x3fe00000
 80075d4:	08008af8 	.word	0x08008af8
 80075d8:	1acb      	subs	r3, r1, r3
 80075da:	e7e8      	b.n	80075ae <__kernel_rem_pio2+0x2ea>
 80075dc:	f10b 32ff 	add.w	r2, fp, #4294967295
 80075e0:	ab0c      	add	r3, sp, #48	@ 0x30
 80075e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075e6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80075ea:	a90c      	add	r1, sp, #48	@ 0x30
 80075ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80075f0:	e745      	b.n	800747e <__kernel_rem_pio2+0x1ba>
 80075f2:	f10b 32ff 	add.w	r2, fp, #4294967295
 80075f6:	ab0c      	add	r3, sp, #48	@ 0x30
 80075f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80075fc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8007600:	e7f3      	b.n	80075ea <__kernel_rem_pio2+0x326>
 8007602:	a90c      	add	r1, sp, #48	@ 0x30
 8007604:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8007608:	3b01      	subs	r3, #1
 800760a:	430a      	orrs	r2, r1
 800760c:	e793      	b.n	8007536 <__kernel_rem_pio2+0x272>
 800760e:	3401      	adds	r4, #1
 8007610:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8007614:	2a00      	cmp	r2, #0
 8007616:	d0fa      	beq.n	800760e <__kernel_rem_pio2+0x34a>
 8007618:	9b08      	ldr	r3, [sp, #32]
 800761a:	aa20      	add	r2, sp, #128	@ 0x80
 800761c:	445b      	add	r3, fp
 800761e:	f10b 0801 	add.w	r8, fp, #1
 8007622:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8007626:	445c      	add	r4, fp
 8007628:	4544      	cmp	r4, r8
 800762a:	da04      	bge.n	8007636 <__kernel_rem_pio2+0x372>
 800762c:	46a3      	mov	fp, r4
 800762e:	e6c0      	b.n	80073b2 <__kernel_rem_pio2+0xee>
 8007630:	2401      	movs	r4, #1
 8007632:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007634:	e7ec      	b.n	8007610 <__kernel_rem_pio2+0x34c>
 8007636:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007638:	46ab      	mov	fp, r5
 800763a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800763e:	f7f9 f803 	bl	8000648 <__aeabi_i2d>
 8007642:	f04f 0900 	mov.w	r9, #0
 8007646:	2600      	movs	r6, #0
 8007648:	2700      	movs	r7, #0
 800764a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800764c:	e9c5 0100 	strd	r0, r1, [r5]
 8007650:	3b08      	subs	r3, #8
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	9b06      	ldr	r3, [sp, #24]
 8007656:	4599      	cmp	r9, r3
 8007658:	dd07      	ble.n	800766a <__kernel_rem_pio2+0x3a6>
 800765a:	9b07      	ldr	r3, [sp, #28]
 800765c:	f108 0801 	add.w	r8, r8, #1
 8007660:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8007664:	3508      	adds	r5, #8
 8007666:	9307      	str	r3, [sp, #28]
 8007668:	e7de      	b.n	8007628 <__kernel_rem_pio2+0x364>
 800766a:	9900      	ldr	r1, [sp, #0]
 800766c:	f109 0901 	add.w	r9, r9, #1
 8007670:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8007674:	9100      	str	r1, [sp, #0]
 8007676:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800767a:	f7f8 fd69 	bl	8000150 <__aeabi_dmul>
 800767e:	4602      	mov	r2, r0
 8007680:	460b      	mov	r3, r1
 8007682:	4630      	mov	r0, r6
 8007684:	4639      	mov	r1, r7
 8007686:	f7f8 fe93 	bl	80003b0 <__adddf3>
 800768a:	4606      	mov	r6, r0
 800768c:	460f      	mov	r7, r1
 800768e:	e7e1      	b.n	8007654 <__kernel_rem_pio2+0x390>
 8007690:	f1ca 0200 	rsb	r2, sl, #0
 8007694:	4640      	mov	r0, r8
 8007696:	4649      	mov	r1, r9
 8007698:	f000 f936 	bl	8007908 <scalbn>
 800769c:	2200      	movs	r2, #0
 800769e:	4b97      	ldr	r3, [pc, #604]	@ (80078fc <__kernel_rem_pio2+0x638>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	460d      	mov	r5, r1
 80076a4:	f7f9 f8ae 	bl	8000804 <__aeabi_dcmpge>
 80076a8:	b300      	cbz	r0, 80076ec <__kernel_rem_pio2+0x428>
 80076aa:	2200      	movs	r2, #0
 80076ac:	4b94      	ldr	r3, [pc, #592]	@ (8007900 <__kernel_rem_pio2+0x63c>)
 80076ae:	4620      	mov	r0, r4
 80076b0:	4629      	mov	r1, r5
 80076b2:	f7f8 fd4d 	bl	8000150 <__aeabi_dmul>
 80076b6:	f7f9 f8b9 	bl	800082c <__aeabi_d2iz>
 80076ba:	4606      	mov	r6, r0
 80076bc:	f7f8 ffc4 	bl	8000648 <__aeabi_i2d>
 80076c0:	2200      	movs	r2, #0
 80076c2:	4b8e      	ldr	r3, [pc, #568]	@ (80078fc <__kernel_rem_pio2+0x638>)
 80076c4:	f7f8 fd44 	bl	8000150 <__aeabi_dmul>
 80076c8:	460b      	mov	r3, r1
 80076ca:	4602      	mov	r2, r0
 80076cc:	4629      	mov	r1, r5
 80076ce:	4620      	mov	r0, r4
 80076d0:	f7f8 fe6c 	bl	80003ac <__aeabi_dsub>
 80076d4:	f7f9 f8aa 	bl	800082c <__aeabi_d2iz>
 80076d8:	ab0c      	add	r3, sp, #48	@ 0x30
 80076da:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80076de:	f10b 0b01 	add.w	fp, fp, #1
 80076e2:	f10a 0a18 	add.w	sl, sl, #24
 80076e6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80076ea:	e732      	b.n	8007552 <__kernel_rem_pio2+0x28e>
 80076ec:	4620      	mov	r0, r4
 80076ee:	4629      	mov	r1, r5
 80076f0:	f7f9 f89c 	bl	800082c <__aeabi_d2iz>
 80076f4:	ab0c      	add	r3, sp, #48	@ 0x30
 80076f6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80076fa:	e72a      	b.n	8007552 <__kernel_rem_pio2+0x28e>
 80076fc:	ab0c      	add	r3, sp, #48	@ 0x30
 80076fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007702:	f7f8 ffa1 	bl	8000648 <__aeabi_i2d>
 8007706:	4632      	mov	r2, r6
 8007708:	463b      	mov	r3, r7
 800770a:	f7f8 fd21 	bl	8000150 <__aeabi_dmul>
 800770e:	464a      	mov	r2, r9
 8007710:	e868 0102 	strd	r0, r1, [r8], #-8
 8007714:	4653      	mov	r3, sl
 8007716:	4630      	mov	r0, r6
 8007718:	4639      	mov	r1, r7
 800771a:	f7f8 fd19 	bl	8000150 <__aeabi_dmul>
 800771e:	3d01      	subs	r5, #1
 8007720:	4606      	mov	r6, r0
 8007722:	460f      	mov	r7, r1
 8007724:	e726      	b.n	8007574 <__kernel_rem_pio2+0x2b0>
 8007726:	f8dd c018 	ldr.w	ip, [sp, #24]
 800772a:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800772e:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8007732:	f8cd c018 	str.w	ip, [sp, #24]
 8007736:	f7f8 fd0b 	bl	8000150 <__aeabi_dmul>
 800773a:	4602      	mov	r2, r0
 800773c:	460b      	mov	r3, r1
 800773e:	4648      	mov	r0, r9
 8007740:	4651      	mov	r1, sl
 8007742:	f7f8 fe35 	bl	80003b0 <__adddf3>
 8007746:	4681      	mov	r9, r0
 8007748:	468a      	mov	sl, r1
 800774a:	3701      	adds	r7, #1
 800774c:	9b02      	ldr	r3, [sp, #8]
 800774e:	429f      	cmp	r7, r3
 8007750:	dc01      	bgt.n	8007756 <__kernel_rem_pio2+0x492>
 8007752:	42b7      	cmp	r7, r6
 8007754:	dde7      	ble.n	8007726 <__kernel_rem_pio2+0x462>
 8007756:	ab48      	add	r3, sp, #288	@ 0x120
 8007758:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800775c:	e9c6 9a00 	strd	r9, sl, [r6]
 8007760:	3d01      	subs	r5, #1
 8007762:	e70b      	b.n	800757c <__kernel_rem_pio2+0x2b8>
 8007764:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8007766:	2b02      	cmp	r3, #2
 8007768:	dc09      	bgt.n	800777e <__kernel_rem_pio2+0x4ba>
 800776a:	2b00      	cmp	r3, #0
 800776c:	dc2c      	bgt.n	80077c8 <__kernel_rem_pio2+0x504>
 800776e:	d04e      	beq.n	800780e <__kernel_rem_pio2+0x54a>
 8007770:	9b05      	ldr	r3, [sp, #20]
 8007772:	f003 0007 	and.w	r0, r3, #7
 8007776:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800777a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800777e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8007780:	2b03      	cmp	r3, #3
 8007782:	d1f5      	bne.n	8007770 <__kernel_rem_pio2+0x4ac>
 8007784:	ab48      	add	r3, sp, #288	@ 0x120
 8007786:	441c      	add	r4, r3
 8007788:	4625      	mov	r5, r4
 800778a:	46da      	mov	sl, fp
 800778c:	f1ba 0f00 	cmp.w	sl, #0
 8007790:	dc63      	bgt.n	800785a <__kernel_rem_pio2+0x596>
 8007792:	4625      	mov	r5, r4
 8007794:	46da      	mov	sl, fp
 8007796:	f1ba 0f01 	cmp.w	sl, #1
 800779a:	dc7b      	bgt.n	8007894 <__kernel_rem_pio2+0x5d0>
 800779c:	2000      	movs	r0, #0
 800779e:	2100      	movs	r1, #0
 80077a0:	f1bb 0f01 	cmp.w	fp, #1
 80077a4:	f300 8093 	bgt.w	80078ce <__kernel_rem_pio2+0x60a>
 80077a8:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	@ 0x120
 80077ac:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	@ 0x128
 80077b0:	9b00      	ldr	r3, [sp, #0]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	f040 8092 	bne.w	80078dc <__kernel_rem_pio2+0x618>
 80077b8:	9b04      	ldr	r3, [sp, #16]
 80077ba:	e9c3 5600 	strd	r5, r6, [r3]
 80077be:	e9c3 7802 	strd	r7, r8, [r3, #8]
 80077c2:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80077c6:	e7d3      	b.n	8007770 <__kernel_rem_pio2+0x4ac>
 80077c8:	465d      	mov	r5, fp
 80077ca:	2000      	movs	r0, #0
 80077cc:	2100      	movs	r1, #0
 80077ce:	ab48      	add	r3, sp, #288	@ 0x120
 80077d0:	441c      	add	r4, r3
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	da32      	bge.n	800783c <__kernel_rem_pio2+0x578>
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d035      	beq.n	8007848 <__kernel_rem_pio2+0x584>
 80077dc:	4602      	mov	r2, r0
 80077de:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80077e2:	9c04      	ldr	r4, [sp, #16]
 80077e4:	2501      	movs	r5, #1
 80077e6:	e9c4 2300 	strd	r2, r3, [r4]
 80077ea:	4602      	mov	r2, r0
 80077ec:	460b      	mov	r3, r1
 80077ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80077f2:	f7f8 fddb 	bl	80003ac <__aeabi_dsub>
 80077f6:	ac48      	add	r4, sp, #288	@ 0x120
 80077f8:	45ab      	cmp	fp, r5
 80077fa:	da28      	bge.n	800784e <__kernel_rem_pio2+0x58a>
 80077fc:	9b00      	ldr	r3, [sp, #0]
 80077fe:	b113      	cbz	r3, 8007806 <__kernel_rem_pio2+0x542>
 8007800:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007804:	4619      	mov	r1, r3
 8007806:	9b04      	ldr	r3, [sp, #16]
 8007808:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800780c:	e7b0      	b.n	8007770 <__kernel_rem_pio2+0x4ac>
 800780e:	2000      	movs	r0, #0
 8007810:	2100      	movs	r1, #0
 8007812:	ab48      	add	r3, sp, #288	@ 0x120
 8007814:	441c      	add	r4, r3
 8007816:	f1bb 0f00 	cmp.w	fp, #0
 800781a:	da08      	bge.n	800782e <__kernel_rem_pio2+0x56a>
 800781c:	9b00      	ldr	r3, [sp, #0]
 800781e:	b113      	cbz	r3, 8007826 <__kernel_rem_pio2+0x562>
 8007820:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007824:	4619      	mov	r1, r3
 8007826:	9b04      	ldr	r3, [sp, #16]
 8007828:	e9c3 0100 	strd	r0, r1, [r3]
 800782c:	e7a0      	b.n	8007770 <__kernel_rem_pio2+0x4ac>
 800782e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8007832:	f7f8 fdbd 	bl	80003b0 <__adddf3>
 8007836:	f10b 3bff 	add.w	fp, fp, #4294967295
 800783a:	e7ec      	b.n	8007816 <__kernel_rem_pio2+0x552>
 800783c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8007840:	f7f8 fdb6 	bl	80003b0 <__adddf3>
 8007844:	3d01      	subs	r5, #1
 8007846:	e7c4      	b.n	80077d2 <__kernel_rem_pio2+0x50e>
 8007848:	4602      	mov	r2, r0
 800784a:	460b      	mov	r3, r1
 800784c:	e7c9      	b.n	80077e2 <__kernel_rem_pio2+0x51e>
 800784e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8007852:	f7f8 fdad 	bl	80003b0 <__adddf3>
 8007856:	3501      	adds	r5, #1
 8007858:	e7ce      	b.n	80077f8 <__kernel_rem_pio2+0x534>
 800785a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800785e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8007862:	4640      	mov	r0, r8
 8007864:	4649      	mov	r1, r9
 8007866:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800786a:	f7f8 fda1 	bl	80003b0 <__adddf3>
 800786e:	4602      	mov	r2, r0
 8007870:	460b      	mov	r3, r1
 8007872:	4606      	mov	r6, r0
 8007874:	460f      	mov	r7, r1
 8007876:	4640      	mov	r0, r8
 8007878:	4649      	mov	r1, r9
 800787a:	f7f8 fd97 	bl	80003ac <__aeabi_dsub>
 800787e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007882:	f7f8 fd95 	bl	80003b0 <__adddf3>
 8007886:	e865 0102 	strd	r0, r1, [r5], #-8
 800788a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800788e:	e9c5 6700 	strd	r6, r7, [r5]
 8007892:	e77b      	b.n	800778c <__kernel_rem_pio2+0x4c8>
 8007894:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007898:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800789c:	4640      	mov	r0, r8
 800789e:	4649      	mov	r1, r9
 80078a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80078a4:	f7f8 fd84 	bl	80003b0 <__adddf3>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4606      	mov	r6, r0
 80078ae:	460f      	mov	r7, r1
 80078b0:	4640      	mov	r0, r8
 80078b2:	4649      	mov	r1, r9
 80078b4:	f7f8 fd7a 	bl	80003ac <__aeabi_dsub>
 80078b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80078bc:	f7f8 fd78 	bl	80003b0 <__adddf3>
 80078c0:	e865 0102 	strd	r0, r1, [r5], #-8
 80078c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80078c8:	e9c5 6700 	strd	r6, r7, [r5]
 80078cc:	e763      	b.n	8007796 <__kernel_rem_pio2+0x4d2>
 80078ce:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80078d2:	f7f8 fd6d 	bl	80003b0 <__adddf3>
 80078d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80078da:	e761      	b.n	80077a0 <__kernel_rem_pio2+0x4dc>
 80078dc:	9b04      	ldr	r3, [sp, #16]
 80078de:	9a04      	ldr	r2, [sp, #16]
 80078e0:	f106 4400 	add.w	r4, r6, #2147483648	@ 0x80000000
 80078e4:	601d      	str	r5, [r3, #0]
 80078e6:	605c      	str	r4, [r3, #4]
 80078e8:	609f      	str	r7, [r3, #8]
 80078ea:	f108 4300 	add.w	r3, r8, #2147483648	@ 0x80000000
 80078ee:	60d3      	str	r3, [r2, #12]
 80078f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80078f4:	6110      	str	r0, [r2, #16]
 80078f6:	6153      	str	r3, [r2, #20]
 80078f8:	e73a      	b.n	8007770 <__kernel_rem_pio2+0x4ac>
 80078fa:	bf00      	nop
 80078fc:	41700000 	.word	0x41700000
 8007900:	3e700000 	.word	0x3e700000
 8007904:	00000000 	.word	0x00000000

08007908 <scalbn>:
 8007908:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 800790c:	4616      	mov	r6, r2
 800790e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007912:	4683      	mov	fp, r0
 8007914:	468c      	mov	ip, r1
 8007916:	460b      	mov	r3, r1
 8007918:	b982      	cbnz	r2, 800793c <scalbn+0x34>
 800791a:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800791e:	4303      	orrs	r3, r0
 8007920:	d035      	beq.n	800798e <scalbn+0x86>
 8007922:	4b2d      	ldr	r3, [pc, #180]	@ (80079d8 <scalbn+0xd0>)
 8007924:	2200      	movs	r2, #0
 8007926:	f7f8 fc13 	bl	8000150 <__aeabi_dmul>
 800792a:	4b2c      	ldr	r3, [pc, #176]	@ (80079dc <scalbn+0xd4>)
 800792c:	4683      	mov	fp, r0
 800792e:	429e      	cmp	r6, r3
 8007930:	468c      	mov	ip, r1
 8007932:	da0d      	bge.n	8007950 <scalbn+0x48>
 8007934:	a324      	add	r3, pc, #144	@ (adr r3, 80079c8 <scalbn+0xc0>)
 8007936:	e9d3 2300 	ldrd	r2, r3, [r3]
 800793a:	e019      	b.n	8007970 <scalbn+0x68>
 800793c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8007940:	42ba      	cmp	r2, r7
 8007942:	d109      	bne.n	8007958 <scalbn+0x50>
 8007944:	4602      	mov	r2, r0
 8007946:	f7f8 fd33 	bl	80003b0 <__adddf3>
 800794a:	4683      	mov	fp, r0
 800794c:	468c      	mov	ip, r1
 800794e:	e01e      	b.n	800798e <scalbn+0x86>
 8007950:	460b      	mov	r3, r1
 8007952:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007956:	3a36      	subs	r2, #54	@ 0x36
 8007958:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800795c:	428e      	cmp	r6, r1
 800795e:	dd0a      	ble.n	8007976 <scalbn+0x6e>
 8007960:	a31b      	add	r3, pc, #108	@ (adr r3, 80079d0 <scalbn+0xc8>)
 8007962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007966:	4665      	mov	r5, ip
 8007968:	f363 051e 	bfi	r5, r3, #0, #31
 800796c:	4629      	mov	r1, r5
 800796e:	481c      	ldr	r0, [pc, #112]	@ (80079e0 <scalbn+0xd8>)
 8007970:	f7f8 fbee 	bl	8000150 <__aeabi_dmul>
 8007974:	e7e9      	b.n	800794a <scalbn+0x42>
 8007976:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800797a:	4432      	add	r2, r6
 800797c:	428a      	cmp	r2, r1
 800797e:	dcef      	bgt.n	8007960 <scalbn+0x58>
 8007980:	2a00      	cmp	r2, #0
 8007982:	dd08      	ble.n	8007996 <scalbn+0x8e>
 8007984:	f36f 531e 	bfc	r3, #20, #11
 8007988:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800798c:	46ac      	mov	ip, r5
 800798e:	4658      	mov	r0, fp
 8007990:	4661      	mov	r1, ip
 8007992:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8007996:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800799a:	da09      	bge.n	80079b0 <scalbn+0xa8>
 800799c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80079a0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80079a4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80079a8:	480e      	ldr	r0, [pc, #56]	@ (80079e4 <scalbn+0xdc>)
 80079aa:	f041 011f 	orr.w	r1, r1, #31
 80079ae:	e7c1      	b.n	8007934 <scalbn+0x2c>
 80079b0:	3236      	adds	r2, #54	@ 0x36
 80079b2:	f36f 531e 	bfc	r3, #20, #11
 80079b6:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80079ba:	4658      	mov	r0, fp
 80079bc:	4629      	mov	r1, r5
 80079be:	2200      	movs	r2, #0
 80079c0:	4b09      	ldr	r3, [pc, #36]	@ (80079e8 <scalbn+0xe0>)
 80079c2:	e7d5      	b.n	8007970 <scalbn+0x68>
 80079c4:	f3af 8000 	nop.w
 80079c8:	c2f8f359 	.word	0xc2f8f359
 80079cc:	01a56e1f 	.word	0x01a56e1f
 80079d0:	8800759c 	.word	0x8800759c
 80079d4:	7e37e43c 	.word	0x7e37e43c
 80079d8:	43500000 	.word	0x43500000
 80079dc:	ffff3cb0 	.word	0xffff3cb0
 80079e0:	8800759c 	.word	0x8800759c
 80079e4:	c2f8f359 	.word	0xc2f8f359
 80079e8:	3c900000 	.word	0x3c900000
 80079ec:	00000000 	.word	0x00000000

080079f0 <floor>:
 80079f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079f4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80079f8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80079fc:	2e13      	cmp	r6, #19
 80079fe:	4602      	mov	r2, r0
 8007a00:	460b      	mov	r3, r1
 8007a02:	460c      	mov	r4, r1
 8007a04:	4605      	mov	r5, r0
 8007a06:	4680      	mov	r8, r0
 8007a08:	dc35      	bgt.n	8007a76 <floor+0x86>
 8007a0a:	2e00      	cmp	r6, #0
 8007a0c:	da17      	bge.n	8007a3e <floor+0x4e>
 8007a0e:	a334      	add	r3, pc, #208	@ (adr r3, 8007ae0 <floor+0xf0>)
 8007a10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a14:	f7f8 fccc 	bl	80003b0 <__adddf3>
 8007a18:	2200      	movs	r2, #0
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	f7f8 fefc 	bl	8000818 <__aeabi_dcmpgt>
 8007a20:	b150      	cbz	r0, 8007a38 <floor+0x48>
 8007a22:	2c00      	cmp	r4, #0
 8007a24:	da57      	bge.n	8007ad6 <floor+0xe6>
 8007a26:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8007a2a:	432c      	orrs	r4, r5
 8007a2c:	2500      	movs	r5, #0
 8007a2e:	42ac      	cmp	r4, r5
 8007a30:	4c2d      	ldr	r4, [pc, #180]	@ (8007ae8 <floor+0xf8>)
 8007a32:	bf08      	it	eq
 8007a34:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8007a38:	4623      	mov	r3, r4
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	e024      	b.n	8007a88 <floor+0x98>
 8007a3e:	4f2b      	ldr	r7, [pc, #172]	@ (8007aec <floor+0xfc>)
 8007a40:	4137      	asrs	r7, r6
 8007a42:	ea01 0c07 	and.w	ip, r1, r7
 8007a46:	ea5c 0c00 	orrs.w	ip, ip, r0
 8007a4a:	d01d      	beq.n	8007a88 <floor+0x98>
 8007a4c:	a324      	add	r3, pc, #144	@ (adr r3, 8007ae0 <floor+0xf0>)
 8007a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a52:	f7f8 fcad 	bl	80003b0 <__adddf3>
 8007a56:	2200      	movs	r2, #0
 8007a58:	2300      	movs	r3, #0
 8007a5a:	f7f8 fedd 	bl	8000818 <__aeabi_dcmpgt>
 8007a5e:	2800      	cmp	r0, #0
 8007a60:	d0ea      	beq.n	8007a38 <floor+0x48>
 8007a62:	2c00      	cmp	r4, #0
 8007a64:	bfbe      	ittt	lt
 8007a66:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8007a6a:	4133      	asrlt	r3, r6
 8007a6c:	18e4      	addlt	r4, r4, r3
 8007a6e:	2500      	movs	r5, #0
 8007a70:	ea24 0407 	bic.w	r4, r4, r7
 8007a74:	e7e0      	b.n	8007a38 <floor+0x48>
 8007a76:	2e33      	cmp	r6, #51	@ 0x33
 8007a78:	dd0a      	ble.n	8007a90 <floor+0xa0>
 8007a7a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8007a7e:	d103      	bne.n	8007a88 <floor+0x98>
 8007a80:	f7f8 fc96 	bl	80003b0 <__adddf3>
 8007a84:	4602      	mov	r2, r0
 8007a86:	460b      	mov	r3, r1
 8007a88:	4610      	mov	r0, r2
 8007a8a:	4619      	mov	r1, r3
 8007a8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a90:	f04f 3cff 	mov.w	ip, #4294967295
 8007a94:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8007a98:	fa2c f707 	lsr.w	r7, ip, r7
 8007a9c:	4207      	tst	r7, r0
 8007a9e:	d0f3      	beq.n	8007a88 <floor+0x98>
 8007aa0:	a30f      	add	r3, pc, #60	@ (adr r3, 8007ae0 <floor+0xf0>)
 8007aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007aa6:	f7f8 fc83 	bl	80003b0 <__adddf3>
 8007aaa:	2200      	movs	r2, #0
 8007aac:	2300      	movs	r3, #0
 8007aae:	f7f8 feb3 	bl	8000818 <__aeabi_dcmpgt>
 8007ab2:	2800      	cmp	r0, #0
 8007ab4:	d0c0      	beq.n	8007a38 <floor+0x48>
 8007ab6:	2c00      	cmp	r4, #0
 8007ab8:	da0a      	bge.n	8007ad0 <floor+0xe0>
 8007aba:	2e14      	cmp	r6, #20
 8007abc:	d101      	bne.n	8007ac2 <floor+0xd2>
 8007abe:	3401      	adds	r4, #1
 8007ac0:	e006      	b.n	8007ad0 <floor+0xe0>
 8007ac2:	2301      	movs	r3, #1
 8007ac4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8007ac8:	40b3      	lsls	r3, r6
 8007aca:	441d      	add	r5, r3
 8007acc:	4545      	cmp	r5, r8
 8007ace:	d3f6      	bcc.n	8007abe <floor+0xce>
 8007ad0:	ea25 0507 	bic.w	r5, r5, r7
 8007ad4:	e7b0      	b.n	8007a38 <floor+0x48>
 8007ad6:	2500      	movs	r5, #0
 8007ad8:	462c      	mov	r4, r5
 8007ada:	e7ad      	b.n	8007a38 <floor+0x48>
 8007adc:	f3af 8000 	nop.w
 8007ae0:	8800759c 	.word	0x8800759c
 8007ae4:	7e37e43c 	.word	0x7e37e43c
 8007ae8:	bff00000 	.word	0xbff00000
 8007aec:	000fffff 	.word	0x000fffff

08007af0 <_init>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr

08007afc <_fini>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr
