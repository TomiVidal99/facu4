
practica_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a90c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001d48  0800aa1c  0800aa1c  0000ba1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c764  0800c764  0000e084  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800c764  0800c764  0000e084  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800c764  0800c764  0000e084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c764  0800c764  0000d764  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c768  0800c768  0000d768  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800c76c  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c6c  20000084  0800c7f0  0000e084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002cf0  0800c7f0  0000ecf0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000e084  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d2c9  00000000  00000000  0000e0ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004439  00000000  00000000  0002b376  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001ab8  00000000  00000000  0002f7b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000014cc  00000000  00000000  00031268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aca9  00000000  00000000  00032734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001fbbe  00000000  00000000  0004d3dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009893c  00000000  00000000  0006cf9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001058d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007448  00000000  00000000  0010591c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  0010cd64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000084 	.word	0x20000084
 800012c:	00000000 	.word	0x00000000
 8000130:	0800aa04 	.word	0x0800aa04

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000088 	.word	0x20000088
 800014c:	0800aa04 	.word	0x0800aa04

08000150 <__aeabi_fmul>:
 8000150:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000154:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000158:	bf1e      	ittt	ne
 800015a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800015e:	ea92 0f0c 	teqne	r2, ip
 8000162:	ea93 0f0c 	teqne	r3, ip
 8000166:	d06f      	beq.n	8000248 <__aeabi_fmul+0xf8>
 8000168:	441a      	add	r2, r3
 800016a:	ea80 0c01 	eor.w	ip, r0, r1
 800016e:	0240      	lsls	r0, r0, #9
 8000170:	bf18      	it	ne
 8000172:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000176:	d01e      	beq.n	80001b6 <__aeabi_fmul+0x66>
 8000178:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800017c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000180:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000184:	fba0 3101 	umull	r3, r1, r0, r1
 8000188:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800018c:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000190:	bf3e      	ittt	cc
 8000192:	0049      	lslcc	r1, r1, #1
 8000194:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000198:	005b      	lslcc	r3, r3, #1
 800019a:	ea40 0001 	orr.w	r0, r0, r1
 800019e:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80001a2:	2afd      	cmp	r2, #253	@ 0xfd
 80001a4:	d81d      	bhi.n	80001e2 <__aeabi_fmul+0x92>
 80001a6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80001aa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001ae:	bf08      	it	eq
 80001b0:	f020 0001 	biceq.w	r0, r0, #1
 80001b4:	4770      	bx	lr
 80001b6:	f090 0f00 	teq	r0, #0
 80001ba:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80001be:	bf08      	it	eq
 80001c0:	0249      	lsleq	r1, r1, #9
 80001c2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001c6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001ca:	3a7f      	subs	r2, #127	@ 0x7f
 80001cc:	bfc2      	ittt	gt
 80001ce:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80001d2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001d6:	4770      	bxgt	lr
 80001d8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80001dc:	f04f 0300 	mov.w	r3, #0
 80001e0:	3a01      	subs	r2, #1
 80001e2:	dc5d      	bgt.n	80002a0 <__aeabi_fmul+0x150>
 80001e4:	f112 0f19 	cmn.w	r2, #25
 80001e8:	bfdc      	itt	le
 80001ea:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 80001ee:	4770      	bxle	lr
 80001f0:	f1c2 0200 	rsb	r2, r2, #0
 80001f4:	0041      	lsls	r1, r0, #1
 80001f6:	fa21 f102 	lsr.w	r1, r1, r2
 80001fa:	f1c2 0220 	rsb	r2, r2, #32
 80001fe:	fa00 fc02 	lsl.w	ip, r0, r2
 8000202:	ea5f 0031 	movs.w	r0, r1, rrx
 8000206:	f140 0000 	adc.w	r0, r0, #0
 800020a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800020e:	bf08      	it	eq
 8000210:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000214:	4770      	bx	lr
 8000216:	f092 0f00 	teq	r2, #0
 800021a:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800021e:	bf02      	ittt	eq
 8000220:	0040      	lsleq	r0, r0, #1
 8000222:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000226:	3a01      	subeq	r2, #1
 8000228:	d0f9      	beq.n	800021e <__aeabi_fmul+0xce>
 800022a:	ea40 000c 	orr.w	r0, r0, ip
 800022e:	f093 0f00 	teq	r3, #0
 8000232:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000236:	bf02      	ittt	eq
 8000238:	0049      	lsleq	r1, r1, #1
 800023a:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800023e:	3b01      	subeq	r3, #1
 8000240:	d0f9      	beq.n	8000236 <__aeabi_fmul+0xe6>
 8000242:	ea41 010c 	orr.w	r1, r1, ip
 8000246:	e78f      	b.n	8000168 <__aeabi_fmul+0x18>
 8000248:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800024c:	ea92 0f0c 	teq	r2, ip
 8000250:	bf18      	it	ne
 8000252:	ea93 0f0c 	teqne	r3, ip
 8000256:	d00a      	beq.n	800026e <__aeabi_fmul+0x11e>
 8000258:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 800025c:	bf18      	it	ne
 800025e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000262:	d1d8      	bne.n	8000216 <__aeabi_fmul+0xc6>
 8000264:	ea80 0001 	eor.w	r0, r0, r1
 8000268:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 800026c:	4770      	bx	lr
 800026e:	f090 0f00 	teq	r0, #0
 8000272:	bf17      	itett	ne
 8000274:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000278:	4608      	moveq	r0, r1
 800027a:	f091 0f00 	teqne	r1, #0
 800027e:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000282:	d014      	beq.n	80002ae <__aeabi_fmul+0x15e>
 8000284:	ea92 0f0c 	teq	r2, ip
 8000288:	d101      	bne.n	800028e <__aeabi_fmul+0x13e>
 800028a:	0242      	lsls	r2, r0, #9
 800028c:	d10f      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800028e:	ea93 0f0c 	teq	r3, ip
 8000292:	d103      	bne.n	800029c <__aeabi_fmul+0x14c>
 8000294:	024b      	lsls	r3, r1, #9
 8000296:	bf18      	it	ne
 8000298:	4608      	movne	r0, r1
 800029a:	d108      	bne.n	80002ae <__aeabi_fmul+0x15e>
 800029c:	ea80 0001 	eor.w	r0, r0, r1
 80002a0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80002a4:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002a8:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002ac:	4770      	bx	lr
 80002ae:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80002b2:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80002b6:	4770      	bx	lr

080002b8 <__aeabi_frsub>:
 80002b8:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 80002bc:	e002      	b.n	80002c4 <__addsf3>
 80002be:	bf00      	nop

080002c0 <__aeabi_fsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

080002c4 <__addsf3>:
 80002c4:	0042      	lsls	r2, r0, #1
 80002c6:	bf1f      	itttt	ne
 80002c8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80002cc:	ea92 0f03 	teqne	r2, r3
 80002d0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80002d4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80002d8:	d06a      	beq.n	80003b0 <__addsf3+0xec>
 80002da:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80002de:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80002e2:	bfc1      	itttt	gt
 80002e4:	18d2      	addgt	r2, r2, r3
 80002e6:	4041      	eorgt	r1, r0
 80002e8:	4048      	eorgt	r0, r1
 80002ea:	4041      	eorgt	r1, r0
 80002ec:	bfb8      	it	lt
 80002ee:	425b      	neglt	r3, r3
 80002f0:	2b19      	cmp	r3, #25
 80002f2:	bf88      	it	hi
 80002f4:	4770      	bxhi	lr
 80002f6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80002fa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80002fe:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000302:	bf18      	it	ne
 8000304:	4240      	negne	r0, r0
 8000306:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800030a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 800030e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000312:	bf18      	it	ne
 8000314:	4249      	negne	r1, r1
 8000316:	ea92 0f03 	teq	r2, r3
 800031a:	d03f      	beq.n	800039c <__addsf3+0xd8>
 800031c:	f1a2 0201 	sub.w	r2, r2, #1
 8000320:	fa41 fc03 	asr.w	ip, r1, r3
 8000324:	eb10 000c 	adds.w	r0, r0, ip
 8000328:	f1c3 0320 	rsb	r3, r3, #32
 800032c:	fa01 f103 	lsl.w	r1, r1, r3
 8000330:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000334:	d502      	bpl.n	800033c <__addsf3+0x78>
 8000336:	4249      	negs	r1, r1
 8000338:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 800033c:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000340:	d313      	bcc.n	800036a <__addsf3+0xa6>
 8000342:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000346:	d306      	bcc.n	8000356 <__addsf3+0x92>
 8000348:	0840      	lsrs	r0, r0, #1
 800034a:	ea4f 0131 	mov.w	r1, r1, rrx
 800034e:	f102 0201 	add.w	r2, r2, #1
 8000352:	2afe      	cmp	r2, #254	@ 0xfe
 8000354:	d251      	bcs.n	80003fa <__addsf3+0x136>
 8000356:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 800035a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800035e:	bf08      	it	eq
 8000360:	f020 0001 	biceq.w	r0, r0, #1
 8000364:	ea40 0003 	orr.w	r0, r0, r3
 8000368:	4770      	bx	lr
 800036a:	0049      	lsls	r1, r1, #1
 800036c:	eb40 0000 	adc.w	r0, r0, r0
 8000370:	3a01      	subs	r2, #1
 8000372:	bf28      	it	cs
 8000374:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000378:	d2ed      	bcs.n	8000356 <__addsf3+0x92>
 800037a:	fab0 fc80 	clz	ip, r0
 800037e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000382:	ebb2 020c 	subs.w	r2, r2, ip
 8000386:	fa00 f00c 	lsl.w	r0, r0, ip
 800038a:	bfaa      	itet	ge
 800038c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000390:	4252      	neglt	r2, r2
 8000392:	4318      	orrge	r0, r3
 8000394:	bfbc      	itt	lt
 8000396:	40d0      	lsrlt	r0, r2
 8000398:	4318      	orrlt	r0, r3
 800039a:	4770      	bx	lr
 800039c:	f092 0f00 	teq	r2, #0
 80003a0:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 80003a4:	bf06      	itte	eq
 80003a6:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 80003aa:	3201      	addeq	r2, #1
 80003ac:	3b01      	subne	r3, #1
 80003ae:	e7b5      	b.n	800031c <__addsf3+0x58>
 80003b0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 80003b4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80003b8:	bf18      	it	ne
 80003ba:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80003be:	d021      	beq.n	8000404 <__addsf3+0x140>
 80003c0:	ea92 0f03 	teq	r2, r3
 80003c4:	d004      	beq.n	80003d0 <__addsf3+0x10c>
 80003c6:	f092 0f00 	teq	r2, #0
 80003ca:	bf08      	it	eq
 80003cc:	4608      	moveq	r0, r1
 80003ce:	4770      	bx	lr
 80003d0:	ea90 0f01 	teq	r0, r1
 80003d4:	bf1c      	itt	ne
 80003d6:	2000      	movne	r0, #0
 80003d8:	4770      	bxne	lr
 80003da:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 80003de:	d104      	bne.n	80003ea <__addsf3+0x126>
 80003e0:	0040      	lsls	r0, r0, #1
 80003e2:	bf28      	it	cs
 80003e4:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 80003e8:	4770      	bx	lr
 80003ea:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 80003ee:	bf3c      	itt	cc
 80003f0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80003f4:	4770      	bxcc	lr
 80003f6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80003fa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80003fe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000402:	4770      	bx	lr
 8000404:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000408:	bf16      	itet	ne
 800040a:	4608      	movne	r0, r1
 800040c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000410:	4601      	movne	r1, r0
 8000412:	0242      	lsls	r2, r0, #9
 8000414:	bf06      	itte	eq
 8000416:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 800041a:	ea90 0f01 	teqeq	r0, r1
 800041e:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000422:	4770      	bx	lr

08000424 <__aeabi_ui2f>:
 8000424:	f04f 0300 	mov.w	r3, #0
 8000428:	e004      	b.n	8000434 <__aeabi_i2f+0x8>
 800042a:	bf00      	nop

0800042c <__aeabi_i2f>:
 800042c:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	ea5f 0c00 	movs.w	ip, r0
 8000438:	bf08      	it	eq
 800043a:	4770      	bxeq	lr
 800043c:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000440:	4601      	mov	r1, r0
 8000442:	f04f 0000 	mov.w	r0, #0
 8000446:	e01c      	b.n	8000482 <__aeabi_l2f+0x2a>

08000448 <__aeabi_ul2f>:
 8000448:	ea50 0201 	orrs.w	r2, r0, r1
 800044c:	bf08      	it	eq
 800044e:	4770      	bxeq	lr
 8000450:	f04f 0300 	mov.w	r3, #0
 8000454:	e00a      	b.n	800046c <__aeabi_l2f+0x14>
 8000456:	bf00      	nop

08000458 <__aeabi_l2f>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000464:	d502      	bpl.n	800046c <__aeabi_l2f+0x14>
 8000466:	4240      	negs	r0, r0
 8000468:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800046c:	ea5f 0c01 	movs.w	ip, r1
 8000470:	bf02      	ittt	eq
 8000472:	4684      	moveq	ip, r0
 8000474:	4601      	moveq	r1, r0
 8000476:	2000      	moveq	r0, #0
 8000478:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 800047c:	bf08      	it	eq
 800047e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000482:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000486:	fabc f28c 	clz	r2, ip
 800048a:	3a08      	subs	r2, #8
 800048c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000490:	db10      	blt.n	80004b4 <__aeabi_l2f+0x5c>
 8000492:	fa01 fc02 	lsl.w	ip, r1, r2
 8000496:	4463      	add	r3, ip
 8000498:	fa00 fc02 	lsl.w	ip, r0, r2
 800049c:	f1c2 0220 	rsb	r2, r2, #32
 80004a0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004a4:	fa20 f202 	lsr.w	r2, r0, r2
 80004a8:	eb43 0002 	adc.w	r0, r3, r2
 80004ac:	bf08      	it	eq
 80004ae:	f020 0001 	biceq.w	r0, r0, #1
 80004b2:	4770      	bx	lr
 80004b4:	f102 0220 	add.w	r2, r2, #32
 80004b8:	fa01 fc02 	lsl.w	ip, r1, r2
 80004bc:	f1c2 0220 	rsb	r2, r2, #32
 80004c0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 80004c4:	fa21 f202 	lsr.w	r2, r1, r2
 80004c8:	eb43 0002 	adc.w	r0, r3, r2
 80004cc:	bf08      	it	eq
 80004ce:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_f2iz>:
 80004d4:	ea4f 0240 	mov.w	r2, r0, lsl #1
 80004d8:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 80004dc:	d30f      	bcc.n	80004fe <__aeabi_f2iz+0x2a>
 80004de:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80004e2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80004e6:	d90d      	bls.n	8000504 <__aeabi_f2iz+0x30>
 80004e8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80004ec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80004f0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80004f4:	fa23 f002 	lsr.w	r0, r3, r2
 80004f8:	bf18      	it	ne
 80004fa:	4240      	negne	r0, r0
 80004fc:	4770      	bx	lr
 80004fe:	f04f 0000 	mov.w	r0, #0
 8000502:	4770      	bx	lr
 8000504:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000508:	d101      	bne.n	800050e <__aeabi_f2iz+0x3a>
 800050a:	0242      	lsls	r2, r0, #9
 800050c:	d105      	bne.n	800051a <__aeabi_f2iz+0x46>
 800050e:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000512:	bf08      	it	eq
 8000514:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000518:	4770      	bx	lr
 800051a:	f04f 0000 	mov.w	r0, #0
 800051e:	4770      	bx	lr

08000520 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000524:	f002 f87c 	bl	8002620 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000528:	f000 f868 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800052c:	f000 f984 	bl	8000838 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000530:	f000 f8a8 	bl	8000684 <MX_I2C1_Init>
  MX_FATFS_Init();
 8000534:	f004 ff88 	bl	8005448 <MX_FATFS_Init>
  MX_SPI2_Init();
 8000538:	f000 f8d2 	bl	80006e0 <MX_SPI2_Init>
  MX_TIM2_Init();
 800053c:	f000 f906 	bl	800074c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	// si falla la conexion i2c se hace una hard fault
	if (SSD1306_Init() == 0) {
 8000540:	f000 fd24 	bl	8000f8c <SSD1306_Init>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d101      	bne.n	800054e <main+0x2e>
#ifdef DEBUG_SCREEN
		ACTIVATE_DEBUG_PIN();
#endif
		Error_Handler();
 800054a:	f000 fcfd 	bl	8000f48 <Error_Handler>
	}

	// Comenzar timer para la PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800054e:	2100      	movs	r1, #0
 8000550:	4818      	ldr	r0, [pc, #96]	@ (80005b4 <main+0x94>)
 8000552:	f004 f919 	bl	8004788 <HAL_TIM_PWM_Start>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000556:	f007 fc27 	bl	8007da8 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800055a:	4a17      	ldr	r2, [pc, #92]	@ (80005b8 <main+0x98>)
 800055c:	2100      	movs	r1, #0
 800055e:	4817      	ldr	r0, [pc, #92]	@ (80005bc <main+0x9c>)
 8000560:	f007 fc6a 	bl	8007e38 <osThreadNew>
 8000564:	4603      	mov	r3, r0
 8000566:	4a16      	ldr	r2, [pc, #88]	@ (80005c0 <main+0xa0>)
 8000568:	6013      	str	r3, [r2, #0]

  /* creation of menuTask */
  menuTaskHandle = osThreadNew(menu, (void*) (&displayParams), &menuTask_attributes);
 800056a:	4a16      	ldr	r2, [pc, #88]	@ (80005c4 <main+0xa4>)
 800056c:	4916      	ldr	r1, [pc, #88]	@ (80005c8 <main+0xa8>)
 800056e:	4817      	ldr	r0, [pc, #92]	@ (80005cc <main+0xac>)
 8000570:	f007 fc62 	bl	8007e38 <osThreadNew>
 8000574:	4603      	mov	r3, r0
 8000576:	4a16      	ldr	r2, [pc, #88]	@ (80005d0 <main+0xb0>)
 8000578:	6013      	str	r3, [r2, #0]

  /* creation of acceptButtonTas */
  acceptButtonTasHandle = osThreadNew(handleButtonPress, (void*) (&acceptButtonParams), &acceptButtonTas_attributes);
 800057a:	4a16      	ldr	r2, [pc, #88]	@ (80005d4 <main+0xb4>)
 800057c:	4916      	ldr	r1, [pc, #88]	@ (80005d8 <main+0xb8>)
 800057e:	4817      	ldr	r0, [pc, #92]	@ (80005dc <main+0xbc>)
 8000580:	f007 fc5a 	bl	8007e38 <osThreadNew>
 8000584:	4603      	mov	r3, r0
 8000586:	4a16      	ldr	r2, [pc, #88]	@ (80005e0 <main+0xc0>)
 8000588:	6013      	str	r3, [r2, #0]

  /* creation of cancelButtonTas */
  cancelButtonTasHandle = osThreadNew(handleButtonPress, (void*) (&cancelButtonParams), &cancelButtonTas_attributes);
 800058a:	4a16      	ldr	r2, [pc, #88]	@ (80005e4 <main+0xc4>)
 800058c:	4916      	ldr	r1, [pc, #88]	@ (80005e8 <main+0xc8>)
 800058e:	4813      	ldr	r0, [pc, #76]	@ (80005dc <main+0xbc>)
 8000590:	f007 fc52 	bl	8007e38 <osThreadNew>
 8000594:	4603      	mov	r3, r0
 8000596:	4a15      	ldr	r2, [pc, #84]	@ (80005ec <main+0xcc>)
 8000598:	6013      	str	r3, [r2, #0]

  /* creation of encoderTask */
  encoderTaskHandle = osThreadNew(handleEncoder, NULL, &encoderTask_attributes);
 800059a:	4a15      	ldr	r2, [pc, #84]	@ (80005f0 <main+0xd0>)
 800059c:	2100      	movs	r1, #0
 800059e:	4815      	ldr	r0, [pc, #84]	@ (80005f4 <main+0xd4>)
 80005a0:	f007 fc4a 	bl	8007e38 <osThreadNew>
 80005a4:	4603      	mov	r3, r0
 80005a6:	4a14      	ldr	r2, [pc, #80]	@ (80005f8 <main+0xd8>)
 80005a8:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005aa:	f007 fc1f 	bl	8007dec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80005ae:	bf00      	nop
 80005b0:	e7fd      	b.n	80005ae <main+0x8e>
 80005b2:	bf00      	nop
 80005b4:	2000014c 	.word	0x2000014c
 80005b8:	0800b294 	.word	0x0800b294
 80005bc:	0800094d 	.word	0x0800094d
 80005c0:	20000194 	.word	0x20000194
 80005c4:	0800b2b8 	.word	0x0800b2b8
 80005c8:	200001a8 	.word	0x200001a8
 80005cc:	08000ab9 	.word	0x08000ab9
 80005d0:	20000198 	.word	0x20000198
 80005d4:	0800b2dc 	.word	0x0800b2dc
 80005d8:	0800b348 	.word	0x0800b348
 80005dc:	08000d91 	.word	0x08000d91
 80005e0:	2000019c 	.word	0x2000019c
 80005e4:	0800b300 	.word	0x0800b300
 80005e8:	0800b354 	.word	0x0800b354
 80005ec:	200001a0 	.word	0x200001a0
 80005f0:	0800b324 	.word	0x0800b324
 80005f4:	08000e55 	.word	0x08000e55
 80005f8:	200001a4 	.word	0x200001a4

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b090      	sub	sp, #64	@ 0x40
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0318 	add.w	r3, r7, #24
 8000606:	2228      	movs	r2, #40	@ 0x28
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f00a f90c 	bl	800a828 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	1d3b      	adds	r3, r7, #4
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800061e:	2301      	movs	r3, #1
 8000620:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000622:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000626:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000628:	2300      	movs	r3, #0
 800062a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800062c:	2301      	movs	r3, #1
 800062e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000630:	2302      	movs	r3, #2
 8000632:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000634:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000638:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 800063a:	2300      	movs	r3, #0
 800063c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f003 f894 	bl	8003770 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x56>
  {
    Error_Handler();
 800064e:	f000 fc7b 	bl	8000f48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2302      	movs	r3, #2
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800065a:	2380      	movs	r3, #128	@ 0x80
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800065e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000662:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	1d3b      	adds	r3, r7, #4
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f003 fb01 	bl	8003c74 <HAL_RCC_ClockConfig>
 8000672:	4603      	mov	r3, r0
 8000674:	2b00      	cmp	r3, #0
 8000676:	d001      	beq.n	800067c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000678:	f000 fc66 	bl	8000f48 <Error_Handler>
  }
}
 800067c:	bf00      	nop
 800067e:	3740      	adds	r7, #64	@ 0x40
 8000680:	46bd      	mov	sp, r7
 8000682:	bd80      	pop	{r7, pc}

08000684 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000688:	4b12      	ldr	r3, [pc, #72]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800068a:	4a13      	ldr	r2, [pc, #76]	@ (80006d8 <MX_I2C1_Init+0x54>)
 800068c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800068e:	4b11      	ldr	r3, [pc, #68]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000690:	4a12      	ldr	r2, [pc, #72]	@ (80006dc <MX_I2C1_Init+0x58>)
 8000692:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000694:	4b0f      	ldr	r3, [pc, #60]	@ (80006d4 <MX_I2C1_Init+0x50>)
 8000696:	2200      	movs	r2, #0
 8000698:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800069a:	4b0e      	ldr	r3, [pc, #56]	@ (80006d4 <MX_I2C1_Init+0x50>)
 800069c:	2200      	movs	r2, #0
 800069e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006a0:	4b0c      	ldr	r3, [pc, #48]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80006a6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006a8:	4b0a      	ldr	r3, [pc, #40]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006ae:	4b09      	ldr	r3, [pc, #36]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006b4:	4b07      	ldr	r3, [pc, #28]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006ba:	4b06      	ldr	r3, [pc, #24]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006bc:	2200      	movs	r2, #0
 80006be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006c0:	4804      	ldr	r0, [pc, #16]	@ (80006d4 <MX_I2C1_Init+0x50>)
 80006c2:	f002 fa8b 	bl	8002bdc <HAL_I2C_Init>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80006cc:	f000 fc3c 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006d0:	bf00      	nop
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	200000a0 	.word	0x200000a0
 80006d8:	40005400 	.word	0x40005400
 80006dc:	00061a80 	.word	0x00061a80

080006e0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006e4:	4b17      	ldr	r3, [pc, #92]	@ (8000744 <MX_SPI2_Init+0x64>)
 80006e6:	4a18      	ldr	r2, [pc, #96]	@ (8000748 <MX_SPI2_Init+0x68>)
 80006e8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006ea:	4b16      	ldr	r3, [pc, #88]	@ (8000744 <MX_SPI2_Init+0x64>)
 80006ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80006f0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80006f2:	4b14      	ldr	r3, [pc, #80]	@ (8000744 <MX_SPI2_Init+0x64>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006f8:	4b12      	ldr	r3, [pc, #72]	@ (8000744 <MX_SPI2_Init+0x64>)
 80006fa:	2200      	movs	r2, #0
 80006fc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006fe:	4b11      	ldr	r3, [pc, #68]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000700:	2200      	movs	r2, #0
 8000702:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000704:	4b0f      	ldr	r3, [pc, #60]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000706:	2200      	movs	r2, #0
 8000708:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800070a:	4b0e      	ldr	r3, [pc, #56]	@ (8000744 <MX_SPI2_Init+0x64>)
 800070c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000710:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000712:	4b0c      	ldr	r3, [pc, #48]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000714:	2200      	movs	r2, #0
 8000716:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000718:	4b0a      	ldr	r3, [pc, #40]	@ (8000744 <MX_SPI2_Init+0x64>)
 800071a:	2200      	movs	r2, #0
 800071c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800071e:	4b09      	ldr	r3, [pc, #36]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000720:	2200      	movs	r2, #0
 8000722:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000724:	4b07      	ldr	r3, [pc, #28]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000726:	2200      	movs	r2, #0
 8000728:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800072a:	4b06      	ldr	r3, [pc, #24]	@ (8000744 <MX_SPI2_Init+0x64>)
 800072c:	220a      	movs	r2, #10
 800072e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000730:	4804      	ldr	r0, [pc, #16]	@ (8000744 <MX_SPI2_Init+0x64>)
 8000732:	f003 fc49 	bl	8003fc8 <HAL_SPI_Init>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 800073c:	f000 fc04 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000740:	bf00      	nop
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200000f4 	.word	0x200000f4
 8000748:	40003800 	.word	0x40003800

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08e      	sub	sp, #56	@ 0x38
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000752:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
 800075e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000760:	f107 0320 	add.w	r3, r7, #32
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
 8000776:	611a      	str	r2, [r3, #16]
 8000778:	615a      	str	r2, [r3, #20]
 800077a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800077c:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <MX_TIM2_Init+0xe8>)
 800077e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000782:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1-1;
 8000784:	4b2b      	ldr	r3, [pc, #172]	@ (8000834 <MX_TIM2_Init+0xe8>)
 8000786:	2200      	movs	r2, #0
 8000788:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078a:	4b2a      	ldr	r3, [pc, #168]	@ (8000834 <MX_TIM2_Init+0xe8>)
 800078c:	2200      	movs	r2, #0
 800078e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000-1;
 8000790:	4b28      	ldr	r3, [pc, #160]	@ (8000834 <MX_TIM2_Init+0xe8>)
 8000792:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000796:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000798:	4b26      	ldr	r3, [pc, #152]	@ (8000834 <MX_TIM2_Init+0xe8>)
 800079a:	2200      	movs	r2, #0
 800079c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800079e:	4b25      	ldr	r3, [pc, #148]	@ (8000834 <MX_TIM2_Init+0xe8>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007a4:	4823      	ldr	r0, [pc, #140]	@ (8000834 <MX_TIM2_Init+0xe8>)
 80007a6:	f003 fef6 	bl	8004596 <HAL_TIM_Base_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80007b0:	f000 fbca 	bl	8000f48 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80007be:	4619      	mov	r1, r3
 80007c0:	481c      	ldr	r0, [pc, #112]	@ (8000834 <MX_TIM2_Init+0xe8>)
 80007c2:	f004 fa35 	bl	8004c30 <HAL_TIM_ConfigClockSource>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80007cc:	f000 fbbc 	bl	8000f48 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007d0:	4818      	ldr	r0, [pc, #96]	@ (8000834 <MX_TIM2_Init+0xe8>)
 80007d2:	f003 ff81 	bl	80046d8 <HAL_TIM_PWM_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80007dc:	f000 fbb4 	bl	8000f48 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e0:	2300      	movs	r3, #0
 80007e2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e4:	2300      	movs	r3, #0
 80007e6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007e8:	f107 0320 	add.w	r3, r7, #32
 80007ec:	4619      	mov	r1, r3
 80007ee:	4811      	ldr	r0, [pc, #68]	@ (8000834 <MX_TIM2_Init+0xe8>)
 80007f0:	f004 fdba 	bl	8005368 <HAL_TIMEx_MasterConfigSynchronization>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80007fa:	f000 fba5 	bl	8000f48 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007fe:	2360      	movs	r3, #96	@ 0x60
 8000800:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 500;
 8000802:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8000806:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000808:	2300      	movs	r3, #0
 800080a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2200      	movs	r2, #0
 8000814:	4619      	mov	r1, r3
 8000816:	4807      	ldr	r0, [pc, #28]	@ (8000834 <MX_TIM2_Init+0xe8>)
 8000818:	f004 f948 	bl	8004aac <HAL_TIM_PWM_ConfigChannel>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000822:	f000 fb91 	bl	8000f48 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000826:	4803      	ldr	r0, [pc, #12]	@ (8000834 <MX_TIM2_Init+0xe8>)
 8000828:	f001 f926 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 800082c:	bf00      	nop
 800082e:	3738      	adds	r7, #56	@ 0x38
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	2000014c 	.word	0x2000014c

08000838 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	b088      	sub	sp, #32
 800083c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083e:	f107 0310 	add.w	r3, r7, #16
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]
 800084a:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800084c:	4b3b      	ldr	r3, [pc, #236]	@ (800093c <MX_GPIO_Init+0x104>)
 800084e:	699b      	ldr	r3, [r3, #24]
 8000850:	4a3a      	ldr	r2, [pc, #232]	@ (800093c <MX_GPIO_Init+0x104>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6193      	str	r3, [r2, #24]
 8000858:	4b38      	ldr	r3, [pc, #224]	@ (800093c <MX_GPIO_Init+0x104>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000864:	4b35      	ldr	r3, [pc, #212]	@ (800093c <MX_GPIO_Init+0x104>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	4a34      	ldr	r2, [pc, #208]	@ (800093c <MX_GPIO_Init+0x104>)
 800086a:	f043 0320 	orr.w	r3, r3, #32
 800086e:	6193      	str	r3, [r2, #24]
 8000870:	4b32      	ldr	r3, [pc, #200]	@ (800093c <MX_GPIO_Init+0x104>)
 8000872:	699b      	ldr	r3, [r3, #24]
 8000874:	f003 0320 	and.w	r3, r3, #32
 8000878:	60bb      	str	r3, [r7, #8]
 800087a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800087c:	4b2f      	ldr	r3, [pc, #188]	@ (800093c <MX_GPIO_Init+0x104>)
 800087e:	699b      	ldr	r3, [r3, #24]
 8000880:	4a2e      	ldr	r2, [pc, #184]	@ (800093c <MX_GPIO_Init+0x104>)
 8000882:	f043 0304 	orr.w	r3, r3, #4
 8000886:	6193      	str	r3, [r2, #24]
 8000888:	4b2c      	ldr	r3, [pc, #176]	@ (800093c <MX_GPIO_Init+0x104>)
 800088a:	699b      	ldr	r3, [r3, #24]
 800088c:	f003 0304 	and.w	r3, r3, #4
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000894:	4b29      	ldr	r3, [pc, #164]	@ (800093c <MX_GPIO_Init+0x104>)
 8000896:	699b      	ldr	r3, [r3, #24]
 8000898:	4a28      	ldr	r2, [pc, #160]	@ (800093c <MX_GPIO_Init+0x104>)
 800089a:	f043 0308 	orr.w	r3, r3, #8
 800089e:	6193      	str	r3, [r2, #24]
 80008a0:	4b26      	ldr	r3, [pc, #152]	@ (800093c <MX_GPIO_Init+0x104>)
 80008a2:	699b      	ldr	r3, [r3, #24]
 80008a4:	f003 0308 	and.w	r3, r3, #8
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80008ac:	2200      	movs	r2, #0
 80008ae:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80008b2:	4823      	ldr	r0, [pc, #140]	@ (8000940 <MX_GPIO_Init+0x108>)
 80008b4:	f002 f961 	bl	8002b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SD_CS_Pin|GPIO_PIN_10, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f240 4102 	movw	r1, #1026	@ 0x402
 80008be:	4821      	ldr	r0, [pc, #132]	@ (8000944 <MX_GPIO_Init+0x10c>)
 80008c0:	f002 f95b 	bl	8002b7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80008c4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80008c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ca:	2301      	movs	r3, #1
 80008cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ce:	2300      	movs	r3, #0
 80008d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008d2:	2302      	movs	r3, #2
 80008d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008d6:	f107 0310 	add.w	r3, r7, #16
 80008da:	4619      	mov	r1, r3
 80008dc:	4818      	ldr	r0, [pc, #96]	@ (8000940 <MX_GPIO_Init+0x108>)
 80008de:	f001 ffb1 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENCODER_A_Pin ENCODER_B_Pin */
  GPIO_InitStruct.Pin = ENCODER_A_Pin|ENCODER_B_Pin;
 80008e2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e8:	2300      	movs	r3, #0
 80008ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ec:	2300      	movs	r3, #0
 80008ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4619      	mov	r1, r3
 80008f6:	4812      	ldr	r0, [pc, #72]	@ (8000940 <MX_GPIO_Init+0x108>)
 80008f8:	f001 ffa4 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_BACK_Pin BTN_ENTER_Pin */
  GPIO_InitStruct.Pin = BTN_BACK_Pin|BTN_ENTER_Pin;
 80008fc:	230c      	movs	r3, #12
 80008fe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000900:	2300      	movs	r3, #0
 8000902:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000908:	f107 0310 	add.w	r3, r7, #16
 800090c:	4619      	mov	r1, r3
 800090e:	480e      	ldr	r0, [pc, #56]	@ (8000948 <MX_GPIO_Init+0x110>)
 8000910:	f001 ff98 	bl	8002844 <HAL_GPIO_Init>

  /*Configure GPIO pins : SD_CS_Pin PB10 */
  GPIO_InitStruct.Pin = SD_CS_Pin|GPIO_PIN_10;
 8000914:	f240 4302 	movw	r3, #1026	@ 0x402
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2302      	movs	r3, #2
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000926:	f107 0310 	add.w	r3, r7, #16
 800092a:	4619      	mov	r1, r3
 800092c:	4805      	ldr	r0, [pc, #20]	@ (8000944 <MX_GPIO_Init+0x10c>)
 800092e:	f001 ff89 	bl	8002844 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000932:	bf00      	nop
 8000934:	3720      	adds	r7, #32
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
 800093a:	bf00      	nop
 800093c:	40021000 	.word	0x40021000
 8000940:	40011000 	.word	0x40011000
 8000944:	40010c00 	.word	0x40010c00
 8000948:	40010800 	.word	0x40010800

0800094c <StartDefaultTask>:
 * @retval None
 */
uint8_t temp = 1;
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	f5ad 6d07 	sub.w	sp, sp, #2160	@ 0x870
 8000952:	af00      	add	r7, sp, #0
 8000954:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8000958:	f6a3 036c 	subw	r3, r3, #2156	@ 0x86c
 800095c:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		if (displayParams.menu != START
 800095e:	4b50      	ldr	r3, [pc, #320]	@ (8000aa0 <StartDefaultTask+0x154>)
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d011      	beq.n	800098a <StartDefaultTask+0x3e>
				&& HAL_GetTick() - lastInteractionTick > 6000) {
 8000966:	f001 fe83 	bl	8002670 <HAL_GetTick>
 800096a:	4602      	mov	r2, r0
 800096c:	4b4d      	ldr	r3, [pc, #308]	@ (8000aa4 <StartDefaultTask+0x158>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	1ad3      	subs	r3, r2, r3
 8000972:	f241 7270 	movw	r2, #6000	@ 0x1770
 8000976:	4293      	cmp	r3, r2
 8000978:	d907      	bls.n	800098a <StartDefaultTask+0x3e>
			displayParams.menu = START;
 800097a:	4b49      	ldr	r3, [pc, #292]	@ (8000aa0 <StartDefaultTask+0x154>)
 800097c:	2200      	movs	r2, #0
 800097e:	701a      	strb	r2, [r3, #0]
			lastInteractionTick = HAL_GetTick();
 8000980:	f001 fe76 	bl	8002670 <HAL_GetTick>
 8000984:	4603      	mov	r3, r0
 8000986:	4a47      	ldr	r2, [pc, #284]	@ (8000aa4 <StartDefaultTask+0x158>)
 8000988:	6013      	str	r3, [r2, #0]
		}

		if (temp) {
 800098a:	4b47      	ldr	r3, [pc, #284]	@ (8000aa8 <StartDefaultTask+0x15c>)
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	2b00      	cmp	r3, #0
 8000990:	f000 8081 	beq.w	8000a96 <StartDefaultTask+0x14a>
			temp = 0;
 8000994:	4b44      	ldr	r3, [pc, #272]	@ (8000aa8 <StartDefaultTask+0x15c>)
 8000996:	2200      	movs	r2, #0
 8000998:	701a      	strb	r2, [r3, #0]
			FATFS FatFs;
			FIL fil;
			FRESULT fres;

			// Montar el disco inmediatamente
			fres = f_mount(&FatFs, "", FA_READ);
 800099a:	f507 730d 	add.w	r3, r7, #564	@ 0x234
 800099e:	2201      	movs	r2, #1
 80009a0:	4942      	ldr	r1, [pc, #264]	@ (8000aac <StartDefaultTask+0x160>)
 80009a2:	4618      	mov	r0, r3
 80009a4:	f006 fc58 	bl	8007258 <f_mount>
 80009a8:	4603      	mov	r3, r0
 80009aa:	f887 386b 	strb.w	r3, [r7, #2155]	@ 0x86b
			if (fres != FR_OK) {
 80009ae:	f897 386b 	ldrb.w	r3, [r7, #2155]	@ 0x86b
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d006      	beq.n	80009c4 <StartDefaultTask+0x78>
#ifdef DEBUG_SD
				ACTIVATE_DEBUG_PIN();
 80009b6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009ba:	483d      	ldr	r0, [pc, #244]	@ (8000ab0 <StartDefaultTask+0x164>)
 80009bc:	f002 f8f5 	bl	8002baa <HAL_GPIO_TogglePin>
#endif
				Error_Handler();
 80009c0:	f000 fac2 	bl	8000f48 <Error_Handler>
			}

			// Se lee el archivo de prueba
			fres = f_open(&fil, "test.mp3", FA_READ);
 80009c4:	f107 0308 	add.w	r3, r7, #8
 80009c8:	2201      	movs	r2, #1
 80009ca:	493a      	ldr	r1, [pc, #232]	@ (8000ab4 <StartDefaultTask+0x168>)
 80009cc:	4618      	mov	r0, r3
 80009ce:	f006 fc8b 	bl	80072e8 <f_open>
 80009d2:	4603      	mov	r3, r0
 80009d4:	f887 386b 	strb.w	r3, [r7, #2155]	@ 0x86b
			if (fres != FR_OK) {
 80009d8:	f897 386b 	ldrb.w	r3, [r7, #2155]	@ 0x86b
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d006      	beq.n	80009ee <StartDefaultTask+0xa2>
#ifdef DEBUG_SD
				ACTIVATE_DEBUG_PIN();
 80009e0:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80009e4:	4832      	ldr	r0, [pc, #200]	@ (8000ab0 <StartDefaultTask+0x164>)
 80009e6:	f002 f8e0 	bl	8002baa <HAL_GPIO_TogglePin>
#endif
				Error_Handler();  // File not found, path invalid, etc.
 80009ea:	f000 faad 	bl	8000f48 <Error_Handler>

			// Ahora se lee la información del archivo de prueba
			UINT bytesRead;
			BYTE mp3Buf[1024]; // Buffer size (can be larger like 1024 or 2048 for faster reads)

			fres = f_read(&fil, mp3Buf, sizeof(mp3Buf), &bytesRead);
 80009ee:	f607 0364 	addw	r3, r7, #2148	@ 0x864
 80009f2:	f207 4164 	addw	r1, r7, #1124	@ 0x464
 80009f6:	f107 0008 	add.w	r0, r7, #8
 80009fa:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80009fe:	f006 fee8 	bl	80077d2 <f_read>
 8000a02:	4603      	mov	r3, r0
 8000a04:	f887 386b 	strb.w	r3, [r7, #2155]	@ 0x86b
			if (fres != FR_OK) {
 8000a08:	f897 386b 	ldrb.w	r3, [r7, #2155]	@ 0x86b
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d006      	beq.n	8000a1e <StartDefaultTask+0xd2>
#ifdef DEBUG_SD
				ACTIVATE_DEBUG_PIN();
 8000a10:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a14:	4826      	ldr	r0, [pc, #152]	@ (8000ab0 <StartDefaultTask+0x164>)
 8000a16:	f002 f8c8 	bl	8002baa <HAL_GPIO_TogglePin>
#endif
				Error_Handler();
 8000a1a:	f000 fa95 	bl	8000f48 <Error_Handler>
			}

			// Error si el archivo no se encontró básicamente
			if (bytesRead == 0) {
 8000a1e:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d106      	bne.n	8000a34 <StartDefaultTask+0xe8>
#ifdef DEBUG_SD
				ACTIVATE_DEBUG_PIN();
 8000a26:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a2a:	4821      	ldr	r0, [pc, #132]	@ (8000ab0 <StartDefaultTask+0x164>)
 8000a2c:	f002 f8bd 	bl	8002baa <HAL_GPIO_TogglePin>
#endif
				Error_Handler();
 8000a30:	f000 fa8a 	bl	8000f48 <Error_Handler>
			}

			// Process or send mp3Buf[0..bytesRead-1]
			// For now, just print the first few bytes for demo
			for (int i = 0; i < 1024 && i < bytesRead; i++) {
 8000a34:	2300      	movs	r3, #0
 8000a36:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 8000a3a:	e01c      	b.n	8000a76 <StartDefaultTask+0x12a>
				//TIM2->CCMR1 = (mp3Buf[i] * 1000) / 256;
				TIM2->CCMR1 = ((mp3Buf[i] + 32768) * 1000) / 65536; // Scale to 0-999
 8000a3c:	f507 6307 	add.w	r3, r7, #2160	@ 0x870
 8000a40:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 8000a44:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 8000a48:	4413      	add	r3, r2
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	f503 4300 	add.w	r3, r3, #32768	@ 0x8000
 8000a50:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	da02      	bge.n	8000a62 <StartDefaultTask+0x116>
 8000a5c:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8000a60:	33ff      	adds	r3, #255	@ 0xff
 8000a62:	141b      	asrs	r3, r3, #16
 8000a64:	461a      	mov	r2, r3
 8000a66:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8000a6a:	619a      	str	r2, [r3, #24]
			for (int i = 0; i < 1024 && i < bytesRead; i++) {
 8000a6c:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 8000a70:	3301      	adds	r3, #1
 8000a72:	f8c7 386c 	str.w	r3, [r7, #2156]	@ 0x86c
 8000a76:	f8d7 386c 	ldr.w	r3, [r7, #2156]	@ 0x86c
 8000a7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000a7e:	da05      	bge.n	8000a8c <StartDefaultTask+0x140>
 8000a80:	f8d7 286c 	ldr.w	r2, [r7, #2156]	@ 0x86c
 8000a84:	f8d7 3864 	ldr.w	r3, [r7, #2148]	@ 0x864
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	d3d7      	bcc.n	8000a3c <StartDefaultTask+0xf0>
			}

			// Se desmonta
			f_close(&fil);
 8000a8c:	f107 0308 	add.w	r3, r7, #8
 8000a90:	4618      	mov	r0, r3
 8000a92:	f007 f8c3 	bl	8007c1c <f_close>

		}
		osDelay(1000);
 8000a96:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000a9a:	f007 fa5f 	bl	8007f5c <osDelay>
		if (displayParams.menu != START
 8000a9e:	e75e      	b.n	800095e <StartDefaultTask+0x12>
 8000aa0:	200001a8 	.word	0x200001a8
 8000aa4:	200001b4 	.word	0x200001b4
 8000aa8:	20000008 	.word	0x20000008
 8000aac:	0800aa60 	.word	0x0800aa60
 8000ab0:	40010c00 	.word	0x40010c00
 8000ab4:	0800aa64 	.word	0x0800aa64

08000ab8 <menu>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_menu */
void menu(void *argument)
{
 8000ab8:	b5b0      	push	{r4, r5, r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN menu */
	/* Infinite loop */

	DisplayMenu menu = START;
 8000ac0:	2300      	movs	r3, #0
 8000ac2:	75bb      	strb	r3, [r7, #22]
	DisplayMenu prevMenu = START;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	75fb      	strb	r3, [r7, #23]

	const uint16_t halfWidth = SCREEN_WIDTH / 2;
 8000ac8:	2340      	movs	r3, #64	@ 0x40
 8000aca:	82bb      	strh	r3, [r7, #20]
	const uint16_t halfHeight = SCREEN_HEIGHT / 2;
 8000acc:	2320      	movs	r3, #32
 8000ace:	827b      	strh	r3, [r7, #18]

	uint32_t temp_angle;
	for (;;) {

		menu = ((DisplayParams*) argument)->menu;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	781b      	ldrb	r3, [r3, #0]
 8000ad4:	75bb      	strb	r3, [r7, #22]

		if (prevMenu != menu) {
 8000ad6:	7dfa      	ldrb	r2, [r7, #23]
 8000ad8:	7dbb      	ldrb	r3, [r7, #22]
 8000ada:	429a      	cmp	r2, r3
 8000adc:	d003      	beq.n	8000ae6 <menu+0x2e>
			prevMenu = menu;
 8000ade:	7dbb      	ldrb	r3, [r7, #22]
 8000ae0:	75fb      	strb	r3, [r7, #23]
			SSD1306_Clear();
 8000ae2:	f000 fe4a 	bl	800177a <SSD1306_Clear>
		}

		switch (menu) {
 8000ae6:	7dbb      	ldrb	r3, [r7, #22]
 8000ae8:	2b07      	cmp	r3, #7
 8000aea:	f200 812f 	bhi.w	8000d4c <menu+0x294>
 8000aee:	a201      	add	r2, pc, #4	@ (adr r2, 8000af4 <menu+0x3c>)
 8000af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000af4:	08000b15 	.word	0x08000b15
 8000af8:	08000cc1 	.word	0x08000cc1
 8000afc:	08000cd5 	.word	0x08000cd5
 8000b00:	08000ce9 	.word	0x08000ce9
 8000b04:	08000cfd 	.word	0x08000cfd
 8000b08:	08000d11 	.word	0x08000d11
 8000b0c:	08000d25 	.word	0x08000d25
 8000b10:	08000d39 	.word	0x08000d39
		case START:

			SSD1306_DrawFilledCircle(halfWidth, halfHeight,
 8000b14:	f9b7 0014 	ldrsh.w	r0, [r7, #20]
 8000b18:	f9b7 1012 	ldrsh.w	r1, [r7, #18]
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	221c      	movs	r2, #28
 8000b20:	f000 fd50 	bl	80015c4 <SSD1306_DrawFilledCircle>
			SCREEN_HEIGHT / 3 + 7, SSD1306_COLOR_BLACK);

			temp_angle =
					prev_point_angle + 60 > 360 ?
 8000b24:	4b8d      	ldr	r3, [pc, #564]	@ (8000d5c <menu+0x2a4>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	333c      	adds	r3, #60	@ 0x3c
							(prev_point_angle + 60) - 360 :
 8000b2a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000b2e:	d904      	bls.n	8000b3a <menu+0x82>
 8000b30:	4b8a      	ldr	r3, [pc, #552]	@ (8000d5c <menu+0x2a4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8000b38:	e002      	b.n	8000b40 <menu+0x88>
							prev_point_angle + 60;
 8000b3a:	4b88      	ldr	r3, [pc, #544]	@ (8000d5c <menu+0x2a4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
							(prev_point_angle + 60) - 360 :
 8000b3e:	333c      	adds	r3, #60	@ 0x3c
			temp_angle =
 8000b40:	60fb      	str	r3, [r7, #12]
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[temp_angle],
 8000b42:	8abb      	ldrh	r3, [r7, #20]
 8000b44:	4618      	mov	r0, r3
 8000b46:	f7ff fc71 	bl	800042c <__aeabi_i2f>
 8000b4a:	4604      	mov	r4, r0
 8000b4c:	4a84      	ldr	r2, [pc, #528]	@ (8000d60 <menu+0x2a8>)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b54:	4983      	ldr	r1, [pc, #524]	@ (8000d64 <menu+0x2ac>)
 8000b56:	4618      	mov	r0, r3
 8000b58:	f7ff fafa 	bl	8000150 <__aeabi_fmul>
 8000b5c:	4603      	mov	r3, r0
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4620      	mov	r0, r4
 8000b62:	f7ff fbaf 	bl	80002c4 <__addsf3>
 8000b66:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff fcb3 	bl	80004d4 <__aeabi_f2iz>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	b21c      	sxth	r4, r3
					halfHeight + SCREEN_HEIGHT / 3 * sin_table[temp_angle], 6,
 8000b72:	8a7b      	ldrh	r3, [r7, #18]
 8000b74:	4618      	mov	r0, r3
 8000b76:	f7ff fc59 	bl	800042c <__aeabi_i2f>
 8000b7a:	4605      	mov	r5, r0
 8000b7c:	4a7a      	ldr	r2, [pc, #488]	@ (8000d68 <menu+0x2b0>)
 8000b7e:	68fb      	ldr	r3, [r7, #12]
 8000b80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b84:	4977      	ldr	r1, [pc, #476]	@ (8000d64 <menu+0x2ac>)
 8000b86:	4618      	mov	r0, r3
 8000b88:	f7ff fae2 	bl	8000150 <__aeabi_fmul>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4628      	mov	r0, r5
 8000b92:	f7ff fb97 	bl	80002c4 <__addsf3>
 8000b96:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fc9b 	bl	80004d4 <__aeabi_f2iz>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	b219      	sxth	r1, r3
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	2206      	movs	r2, #6
 8000ba6:	4620      	mov	r0, r4
 8000ba8:	f000 fd0c 	bl	80015c4 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);

			temp_angle =
					prev_point_angle + 30 > 360 ?
 8000bac:	4b6b      	ldr	r3, [pc, #428]	@ (8000d5c <menu+0x2a4>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	331e      	adds	r3, #30
							(prev_point_angle + 30) - 360 :
 8000bb2:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000bb6:	d904      	bls.n	8000bc2 <menu+0x10a>
 8000bb8:	4b68      	ldr	r3, [pc, #416]	@ (8000d5c <menu+0x2a4>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f5a3 73a5 	sub.w	r3, r3, #330	@ 0x14a
 8000bc0:	e002      	b.n	8000bc8 <menu+0x110>
							prev_point_angle + 30;
 8000bc2:	4b66      	ldr	r3, [pc, #408]	@ (8000d5c <menu+0x2a4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
							(prev_point_angle + 30) - 360 :
 8000bc6:	331e      	adds	r3, #30
			temp_angle =
 8000bc8:	60fb      	str	r3, [r7, #12]
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[temp_angle],
 8000bca:	8abb      	ldrh	r3, [r7, #20]
 8000bcc:	4618      	mov	r0, r3
 8000bce:	f7ff fc2d 	bl	800042c <__aeabi_i2f>
 8000bd2:	4604      	mov	r4, r0
 8000bd4:	4a62      	ldr	r2, [pc, #392]	@ (8000d60 <menu+0x2a8>)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bdc:	4961      	ldr	r1, [pc, #388]	@ (8000d64 <menu+0x2ac>)
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff fab6 	bl	8000150 <__aeabi_fmul>
 8000be4:	4603      	mov	r3, r0
 8000be6:	4619      	mov	r1, r3
 8000be8:	4620      	mov	r0, r4
 8000bea:	f7ff fb6b 	bl	80002c4 <__addsf3>
 8000bee:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f7ff fc6f 	bl	80004d4 <__aeabi_f2iz>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin_table[temp_angle], 4,
 8000bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8000d68 <menu+0x2b0>)
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c02:	4958      	ldr	r1, [pc, #352]	@ (8000d64 <menu+0x2ac>)
 8000c04:	4618      	mov	r0, r3
 8000c06:	f7ff faa3 	bl	8000150 <__aeabi_fmul>
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8000c10:	4618      	mov	r0, r3
 8000c12:	f7ff fb57 	bl	80002c4 <__addsf3>
 8000c16:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff fc5b 	bl	80004d4 <__aeabi_f2iz>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	b219      	sxth	r1, r3
 8000c22:	2301      	movs	r3, #1
 8000c24:	2204      	movs	r2, #4
 8000c26:	4620      	mov	r0, r4
 8000c28:	f000 fccc 	bl	80015c4 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);
			SSD1306_DrawFilledCircle(
					halfWidth + SCREEN_HEIGHT / 3 * cos_table[point_angle],
 8000c2c:	8abb      	ldrh	r3, [r7, #20]
 8000c2e:	4618      	mov	r0, r3
 8000c30:	f7ff fbfc 	bl	800042c <__aeabi_i2f>
 8000c34:	4604      	mov	r4, r0
 8000c36:	4b4d      	ldr	r3, [pc, #308]	@ (8000d6c <menu+0x2b4>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a49      	ldr	r2, [pc, #292]	@ (8000d60 <menu+0x2a8>)
 8000c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c40:	4948      	ldr	r1, [pc, #288]	@ (8000d64 <menu+0x2ac>)
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fa84 	bl	8000150 <__aeabi_fmul>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4620      	mov	r0, r4
 8000c4e:	f7ff fb39 	bl	80002c4 <__addsf3>
 8000c52:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000c54:	4618      	mov	r0, r3
 8000c56:	f7ff fc3d 	bl	80004d4 <__aeabi_f2iz>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	b21c      	sxth	r4, r3
					64 / 2 + 64 / 3 * sin_table[point_angle], 2,
 8000c5e:	4b43      	ldr	r3, [pc, #268]	@ (8000d6c <menu+0x2b4>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a41      	ldr	r2, [pc, #260]	@ (8000d68 <menu+0x2b0>)
 8000c64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c68:	493e      	ldr	r1, [pc, #248]	@ (8000d64 <menu+0x2ac>)
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f7ff fa70 	bl	8000150 <__aeabi_fmul>
 8000c70:	4603      	mov	r3, r0
 8000c72:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 8000c76:	4618      	mov	r0, r3
 8000c78:	f7ff fb24 	bl	80002c4 <__addsf3>
 8000c7c:	4603      	mov	r3, r0
			SSD1306_DrawFilledCircle(
 8000c7e:	4618      	mov	r0, r3
 8000c80:	f7ff fc28 	bl	80004d4 <__aeabi_f2iz>
 8000c84:	4603      	mov	r3, r0
 8000c86:	b219      	sxth	r1, r3
 8000c88:	2301      	movs	r3, #1
 8000c8a:	2202      	movs	r2, #2
 8000c8c:	4620      	mov	r0, r4
 8000c8e:	f000 fc99 	bl	80015c4 <SSD1306_DrawFilledCircle>
					SSD1306_COLOR_WHITE);

			if (point_angle >= 360) {
 8000c92:	4b36      	ldr	r3, [pc, #216]	@ (8000d6c <menu+0x2b4>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 8000c9a:	d307      	bcc.n	8000cac <menu+0x1f4>
				prev_point_angle = point_angle;
 8000c9c:	4b33      	ldr	r3, [pc, #204]	@ (8000d6c <menu+0x2b4>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a2e      	ldr	r2, [pc, #184]	@ (8000d5c <menu+0x2a4>)
 8000ca2:	6013      	str	r3, [r2, #0]
				point_angle = 0;
 8000ca4:	4b31      	ldr	r3, [pc, #196]	@ (8000d6c <menu+0x2b4>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	601a      	str	r2, [r3, #0]
			} else {
				prev_point_angle = point_angle;
				point_angle += 8;
			}

			break;
 8000caa:	e050      	b.n	8000d4e <menu+0x296>
				prev_point_angle = point_angle;
 8000cac:	4b2f      	ldr	r3, [pc, #188]	@ (8000d6c <menu+0x2b4>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a2a      	ldr	r2, [pc, #168]	@ (8000d5c <menu+0x2a4>)
 8000cb2:	6013      	str	r3, [r2, #0]
				point_angle += 8;
 8000cb4:	4b2d      	ldr	r3, [pc, #180]	@ (8000d6c <menu+0x2b4>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	3308      	adds	r3, #8
 8000cba:	4a2c      	ldr	r2, [pc, #176]	@ (8000d6c <menu+0x2b4>)
 8000cbc:	6013      	str	r3, [r2, #0]
			break;
 8000cbe:	e046      	b.n	8000d4e <menu+0x296>
		case MENU:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000cc0:	2120      	movs	r1, #32
 8000cc2:	200a      	movs	r0, #10
 8000cc4:	f000 faca 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Menu >", &Font_7x10, 1);
 8000cc8:	2201      	movs	r2, #1
 8000cca:	4929      	ldr	r1, [pc, #164]	@ (8000d70 <menu+0x2b8>)
 8000ccc:	4829      	ldr	r0, [pc, #164]	@ (8000d74 <menu+0x2bc>)
 8000cce:	f000 fb59 	bl	8001384 <SSD1306_Puts>
			break;
 8000cd2:	e03c      	b.n	8000d4e <menu+0x296>
		case EQUALIZER:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000cd4:	2120      	movs	r1, #32
 8000cd6:	200a      	movs	r0, #10
 8000cd8:	f000 fac0 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Equal >", &Font_7x10, 1);
 8000cdc:	2201      	movs	r2, #1
 8000cde:	4924      	ldr	r1, [pc, #144]	@ (8000d70 <menu+0x2b8>)
 8000ce0:	4825      	ldr	r0, [pc, #148]	@ (8000d78 <menu+0x2c0>)
 8000ce2:	f000 fb4f 	bl	8001384 <SSD1306_Puts>
			break;
 8000ce6:	e032      	b.n	8000d4e <menu+0x296>
		case EQUALIZER_HIGH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000ce8:	2120      	movs	r1, #32
 8000cea:	200a      	movs	r0, #10
 8000cec:	f000 fab6 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Altos >", &Font_7x10, 1);
 8000cf0:	2201      	movs	r2, #1
 8000cf2:	491f      	ldr	r1, [pc, #124]	@ (8000d70 <menu+0x2b8>)
 8000cf4:	4821      	ldr	r0, [pc, #132]	@ (8000d7c <menu+0x2c4>)
 8000cf6:	f000 fb45 	bl	8001384 <SSD1306_Puts>
			break;
 8000cfa:	e028      	b.n	8000d4e <menu+0x296>
		case EQUALIZER_MID:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000cfc:	2120      	movs	r1, #32
 8000cfe:	200a      	movs	r0, #10
 8000d00:	f000 faac 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Medios >", &Font_7x10, 1);
 8000d04:	2201      	movs	r2, #1
 8000d06:	491a      	ldr	r1, [pc, #104]	@ (8000d70 <menu+0x2b8>)
 8000d08:	481d      	ldr	r0, [pc, #116]	@ (8000d80 <menu+0x2c8>)
 8000d0a:	f000 fb3b 	bl	8001384 <SSD1306_Puts>
			break;
 8000d0e:	e01e      	b.n	8000d4e <menu+0x296>
		case EQUALIZER_LOW:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000d10:	2120      	movs	r1, #32
 8000d12:	200a      	movs	r0, #10
 8000d14:	f000 faa2 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Bajos >", &Font_7x10, 1);
 8000d18:	2201      	movs	r2, #1
 8000d1a:	4915      	ldr	r1, [pc, #84]	@ (8000d70 <menu+0x2b8>)
 8000d1c:	4819      	ldr	r0, [pc, #100]	@ (8000d84 <menu+0x2cc>)
 8000d1e:	f000 fb31 	bl	8001384 <SSD1306_Puts>
			break;
 8000d22:	e014      	b.n	8000d4e <menu+0x296>
		case FOLDER_SEARCH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000d24:	2120      	movs	r1, #32
 8000d26:	200a      	movs	r0, #10
 8000d28:	f000 fa98 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Carpetas >", &Font_7x10, 1);
 8000d2c:	2201      	movs	r2, #1
 8000d2e:	4910      	ldr	r1, [pc, #64]	@ (8000d70 <menu+0x2b8>)
 8000d30:	4815      	ldr	r0, [pc, #84]	@ (8000d88 <menu+0x2d0>)
 8000d32:	f000 fb27 	bl	8001384 <SSD1306_Puts>
			break;
 8000d36:	e00a      	b.n	8000d4e <menu+0x296>
		case FILES_SEARCH:
			SSD1306_GotoXY(TEXT_X_OFFSET, SCREEN_HEIGHT / 2);
 8000d38:	2120      	movs	r1, #32
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f000 fa8e 	bl	800125c <SSD1306_GotoXY>
			SSD1306_Puts("< Archivos >", &Font_7x10, 1);
 8000d40:	2201      	movs	r2, #1
 8000d42:	490b      	ldr	r1, [pc, #44]	@ (8000d70 <menu+0x2b8>)
 8000d44:	4811      	ldr	r0, [pc, #68]	@ (8000d8c <menu+0x2d4>)
 8000d46:	f000 fb1d 	bl	8001384 <SSD1306_Puts>
			break;
 8000d4a:	e000      	b.n	8000d4e <menu+0x296>

		default:
			break;
 8000d4c:	bf00      	nop
		}

		SSD1306_UpdateScreen();
 8000d4e:	f000 f9e1 	bl	8001114 <SSD1306_UpdateScreen>
		osDelay(50);
 8000d52:	2032      	movs	r0, #50	@ 0x32
 8000d54:	f007 f902 	bl	8007f5c <osDelay>
		menu = ((DisplayParams*) argument)->menu;
 8000d58:	e6ba      	b.n	8000ad0 <menu+0x18>
 8000d5a:	bf00      	nop
 8000d5c:	200001ac 	.word	0x200001ac
 8000d60:	0800b904 	.word	0x0800b904
 8000d64:	41a80000 	.word	0x41a80000
 8000d68:	0800b360 	.word	0x0800b360
 8000d6c:	200001b0 	.word	0x200001b0
 8000d70:	20000000 	.word	0x20000000
 8000d74:	0800aa70 	.word	0x0800aa70
 8000d78:	0800aa7c 	.word	0x0800aa7c
 8000d7c:	0800aa88 	.word	0x0800aa88
 8000d80:	0800aa94 	.word	0x0800aa94
 8000d84:	0800aaa0 	.word	0x0800aaa0
 8000d88:	0800aaac 	.word	0x0800aaac
 8000d8c:	0800aabc 	.word	0x0800aabc

08000d90 <handleButtonPress>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handleButtonPress */
void handleButtonPress(void *argument)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b086      	sub	sp, #24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN handleButtonPress */
	/* Infinite loop */
	Bool isButtonPressed = FALSE;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	75fb      	strb	r3, [r7, #23]

	// Recupero los parámetros del botón
	ButtonParams btnParams = *((ButtonParams*) argument);
 8000d9c:	687a      	ldr	r2, [r7, #4]
 8000d9e:	f107 0308 	add.w	r3, r7, #8
 8000da2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000da4:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	for (;;) {

		if (btnParams.type == CANCEL) {
 8000da8:	7a3b      	ldrb	r3, [r7, #8]
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d105      	bne.n	8000dba <handleButtonPress+0x2a>
			HAL_GPIO_TogglePin(btnParams.port, btnParams.pin);
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	8a3a      	ldrh	r2, [r7, #16]
 8000db2:	4611      	mov	r1, r2
 8000db4:	4618      	mov	r0, r3
 8000db6:	f001 fef8 	bl	8002baa <HAL_GPIO_TogglePin>
		}

		// Esta lógica evita tener muchos disparos de botón
		if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin) == GPIO_PIN_RESET
 8000dba:	68fb      	ldr	r3, [r7, #12]
 8000dbc:	8a3a      	ldrh	r2, [r7, #16]
 8000dbe:	4611      	mov	r1, r2
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f001 fec3 	bl	8002b4c <HAL_GPIO_ReadPin>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d129      	bne.n	8000e20 <handleButtonPress+0x90>
				&& isButtonPressed == FALSE) {
 8000dcc:	7dfb      	ldrb	r3, [r7, #23]
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d126      	bne.n	8000e20 <handleButtonPress+0x90>
			isButtonPressed = TRUE;
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	75fb      	strb	r3, [r7, #23]

			// lógica del boton aceptar
			if (btnParams.type == ACCEPT) {
 8000dd6:	7a3b      	ldrb	r3, [r7, #8]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d10c      	bne.n	8000df6 <handleButtonPress+0x66>
				lastInteractionTick = HAL_GetTick();
 8000ddc:	f001 fc48 	bl	8002670 <HAL_GetTick>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4a1a      	ldr	r2, [pc, #104]	@ (8000e4c <handleButtonPress+0xbc>)
 8000de4:	6013      	str	r3, [r2, #0]

				switch (displayParams.menu) {
 8000de6:	4b1a      	ldr	r3, [pc, #104]	@ (8000e50 <handleButtonPress+0xc0>)
 8000de8:	781b      	ldrb	r3, [r3, #0]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d111      	bne.n	8000e12 <handleButtonPress+0x82>
				case START:
					displayParams.menu = MENU;
 8000dee:	4b18      	ldr	r3, [pc, #96]	@ (8000e50 <handleButtonPress+0xc0>)
 8000df0:	2201      	movs	r2, #1
 8000df2:	701a      	strb	r2, [r3, #0]
					break;
 8000df4:	e010      	b.n	8000e18 <handleButtonPress+0x88>
				default:
					break;
				}
			} else {
				lastInteractionTick = HAL_GetTick();
 8000df6:	f001 fc3b 	bl	8002670 <HAL_GetTick>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	4a13      	ldr	r2, [pc, #76]	@ (8000e4c <handleButtonPress+0xbc>)
 8000dfe:	6013      	str	r3, [r2, #0]

				switch (displayParams.menu) {
 8000e00:	4b13      	ldr	r3, [pc, #76]	@ (8000e50 <handleButtonPress+0xc0>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	3b01      	subs	r3, #1
 8000e06:	2b06      	cmp	r3, #6
 8000e08:	d805      	bhi.n	8000e16 <handleButtonPress+0x86>
				case EQUALIZER_HIGH:
				case EQUALIZER_MID:
				case EQUALIZER_LOW:
				case FILES_SEARCH:
				case FOLDER_SEARCH:
					displayParams.menu = START;
 8000e0a:	4b11      	ldr	r3, [pc, #68]	@ (8000e50 <handleButtonPress+0xc0>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	701a      	strb	r2, [r3, #0]
					break;
 8000e10:	e002      	b.n	8000e18 <handleButtonPress+0x88>
					break;
 8000e12:	bf00      	nop
 8000e14:	e000      	b.n	8000e18 <handleButtonPress+0x88>
				default:
					break;
 8000e16:	bf00      	nop
				}
			}

			osDelay(50);
 8000e18:	2032      	movs	r0, #50	@ 0x32
 8000e1a:	f007 f89f 	bl	8007f5c <osDelay>
 8000e1e:	e010      	b.n	8000e42 <handleButtonPress+0xb2>
		} else if (HAL_GPIO_ReadPin(btnParams.port, btnParams.pin)
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	8a3a      	ldrh	r2, [r7, #16]
 8000e24:	4611      	mov	r1, r2
 8000e26:	4618      	mov	r0, r3
 8000e28:	f001 fe90 	bl	8002b4c <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b01      	cmp	r3, #1
 8000e30:	d107      	bne.n	8000e42 <handleButtonPress+0xb2>
				== GPIO_PIN_SET && isButtonPressed == TRUE) {
 8000e32:	7dfb      	ldrb	r3, [r7, #23]
 8000e34:	2b01      	cmp	r3, #1
 8000e36:	d104      	bne.n	8000e42 <handleButtonPress+0xb2>
			isButtonPressed = FALSE;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	75fb      	strb	r3, [r7, #23]
			osDelay(50);
 8000e3c:	2032      	movs	r0, #50	@ 0x32
 8000e3e:	f007 f88d 	bl	8007f5c <osDelay>
		}
		osDelay(1);
 8000e42:	2001      	movs	r0, #1
 8000e44:	f007 f88a 	bl	8007f5c <osDelay>
		if (btnParams.type == CANCEL) {
 8000e48:	e7ae      	b.n	8000da8 <handleButtonPress+0x18>
 8000e4a:	bf00      	nop
 8000e4c:	200001b4 	.word	0x200001b4
 8000e50:	200001a8 	.word	0x200001a8

08000e54 <handleEncoder>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handleEncoder */
void handleEncoder(void *argument)
{
 8000e54:	b590      	push	{r4, r7, lr}
 8000e56:	b085      	sub	sp, #20
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN handleEncoder */

	static const int8_t encoderTable[4][4] = { { 0, +1, -1, 0 },
			{ -1, 0, 0, +1 }, { +1, 0, 0, -1 }, { 0, -1, +1, 0 } };

	uint8_t prev = 0;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	73fb      	strb	r3, [r7, #15]
	uint8_t curr;

	for (;;) {

		curr = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) << 1)
 8000e60:	2140      	movs	r1, #64	@ 0x40
 8000e62:	482c      	ldr	r0, [pc, #176]	@ (8000f14 <handleEncoder+0xc0>)
 8000e64:	f001 fe72 	bl	8002b4c <HAL_GPIO_ReadPin>
 8000e68:	4603      	mov	r3, r0
				| (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d101      	bne.n	8000e72 <handleEncoder+0x1e>
 8000e6e:	2402      	movs	r4, #2
 8000e70:	e000      	b.n	8000e74 <handleEncoder+0x20>
 8000e72:	2400      	movs	r4, #0
 8000e74:	2180      	movs	r1, #128	@ 0x80
 8000e76:	4827      	ldr	r0, [pc, #156]	@ (8000f14 <handleEncoder+0xc0>)
 8000e78:	f001 fe68 	bl	8002b4c <HAL_GPIO_ReadPin>
 8000e7c:	4603      	mov	r3, r0
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	bf0c      	ite	eq
 8000e82:	2301      	moveq	r3, #1
 8000e84:	2300      	movne	r3, #0
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	b25b      	sxtb	r3, r3
 8000e8a:	4323      	orrs	r3, r4
 8000e8c:	b25b      	sxtb	r3, r3
		curr = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) << 1)
 8000e8e:	73bb      	strb	r3, [r7, #14]

		if (curr != prev) {
 8000e90:	7bba      	ldrb	r2, [r7, #14]
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d0e3      	beq.n	8000e60 <handleEncoder+0xc>
			int8_t direction = encoderTable[prev][curr];
 8000e98:	7bfa      	ldrb	r2, [r7, #15]
 8000e9a:	7bbb      	ldrb	r3, [r7, #14]
 8000e9c:	491e      	ldr	r1, [pc, #120]	@ (8000f18 <handleEncoder+0xc4>)
 8000e9e:	0092      	lsls	r2, r2, #2
 8000ea0:	440a      	add	r2, r1
 8000ea2:	4413      	add	r3, r2
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	737b      	strb	r3, [r7, #13]
			prev = curr;
 8000ea8:	7bbb      	ldrb	r3, [r7, #14]
 8000eaa:	73fb      	strb	r3, [r7, #15]

			if (direction
 8000eac:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d0d5      	beq.n	8000e60 <handleEncoder+0xc>
					!= 0&& HAL_GetTick() - lastInteractionTick > ENCODER_DEBOUCE_DELAY) {
 8000eb4:	f001 fbdc 	bl	8002670 <HAL_GetTick>
 8000eb8:	4602      	mov	r2, r0
 8000eba:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <handleEncoder+0xc8>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	f5b3 7fc8 	cmp.w	r3, #400	@ 0x190
 8000ec4:	d9cc      	bls.n	8000e60 <handleEncoder+0xc>
				lastInteractionTick = HAL_GetTick();
 8000ec6:	f001 fbd3 	bl	8002670 <HAL_GetTick>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a13      	ldr	r2, [pc, #76]	@ (8000f1c <handleEncoder+0xc8>)
 8000ece:	6013      	str	r3, [r2, #0]

				if (displayParams.menu == 0x1 && direction == -1) {
 8000ed0:	4b13      	ldr	r3, [pc, #76]	@ (8000f20 <handleEncoder+0xcc>)
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d108      	bne.n	8000eea <handleEncoder+0x96>
 8000ed8:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ee0:	d103      	bne.n	8000eea <handleEncoder+0x96>
					displayParams.menu = DISPLAY_MENU_LENGTH - 1;
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	@ (8000f20 <handleEncoder+0xcc>)
 8000ee4:	2207      	movs	r2, #7
 8000ee6:	701a      	strb	r2, [r3, #0]
 8000ee8:	e012      	b.n	8000f10 <handleEncoder+0xbc>
				} else if (displayParams.menu == FILES_SEARCH
 8000eea:	4b0d      	ldr	r3, [pc, #52]	@ (8000f20 <handleEncoder+0xcc>)
 8000eec:	781b      	ldrb	r3, [r3, #0]
 8000eee:	2b07      	cmp	r3, #7
 8000ef0:	d107      	bne.n	8000f02 <handleEncoder+0xae>
						&& direction == 1) {
 8000ef2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8000ef6:	2b01      	cmp	r3, #1
 8000ef8:	d103      	bne.n	8000f02 <handleEncoder+0xae>
					displayParams.menu = 0x1;
 8000efa:	4b09      	ldr	r3, [pc, #36]	@ (8000f20 <handleEncoder+0xcc>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	701a      	strb	r2, [r3, #0]
 8000f00:	e006      	b.n	8000f10 <handleEncoder+0xbc>
				} else {
					displayParams.menu += direction;
 8000f02:	4b07      	ldr	r3, [pc, #28]	@ (8000f20 <handleEncoder+0xcc>)
 8000f04:	781a      	ldrb	r2, [r3, #0]
 8000f06:	7b7b      	ldrb	r3, [r7, #13]
 8000f08:	4413      	add	r3, r2
 8000f0a:	b2da      	uxtb	r2, r3
 8000f0c:	4b04      	ldr	r3, [pc, #16]	@ (8000f20 <handleEncoder+0xcc>)
 8000f0e:	701a      	strb	r2, [r3, #0]
		curr = ((HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET) << 1)
 8000f10:	e7a6      	b.n	8000e60 <handleEncoder+0xc>
 8000f12:	bf00      	nop
 8000f14:	40010800 	.word	0x40010800
 8000f18:	0800bea8 	.word	0x0800bea8
 8000f1c:	200001b4 	.word	0x200001b4
 8000f20:	200001a8 	.word	0x200001a8

08000f24 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b082      	sub	sp, #8
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	@ (8000f44 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d101      	bne.n	8000f3a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000f36:	f001 fb89 	bl	800264c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40000800 	.word	0x40000800

08000f48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f4e:	b672      	cpsid	i
}
 8000f50:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f52:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000f56:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <Error_Handler+0x40>)
 8000f58:	f001 fe27 	bl	8002baa <HAL_GPIO_TogglePin>
		for (uint32_t i = 0; i < 5000; i++) {
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	607b      	str	r3, [r7, #4]
 8000f60:	e00b      	b.n	8000f7a <Error_Handler+0x32>
			for (uint32_t j = 0; j < 100; j++) {
 8000f62:	2300      	movs	r3, #0
 8000f64:	603b      	str	r3, [r7, #0]
 8000f66:	e002      	b.n	8000f6e <Error_Handler+0x26>
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	3301      	adds	r3, #1
 8000f6c:	603b      	str	r3, [r7, #0]
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	2b63      	cmp	r3, #99	@ 0x63
 8000f72:	d9f9      	bls.n	8000f68 <Error_Handler+0x20>
		for (uint32_t i = 0; i < 5000; i++) {
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3301      	adds	r3, #1
 8000f78:	607b      	str	r3, [r7, #4]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8000f80:	4293      	cmp	r3, r2
 8000f82:	d9ee      	bls.n	8000f62 <Error_Handler+0x1a>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000f84:	e7e5      	b.n	8000f52 <Error_Handler+0xa>
 8000f86:	bf00      	nop
 8000f88:	40011000 	.word	0x40011000

08000f8c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b082      	sub	sp, #8
 8000f90:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8000f92:	f000 fbfb 	bl	800178c <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8000f96:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	2178      	movs	r1, #120	@ 0x78
 8000f9e:	485b      	ldr	r0, [pc, #364]	@ (800110c <SSD1306_Init+0x180>)
 8000fa0:	f002 f85e 	bl	8003060 <HAL_I2C_IsDeviceReady>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e0a9      	b.n	8001102 <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 8000fae:	f640 13c4 	movw	r3, #2500	@ 0x9c4
 8000fb2:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fb4:	e002      	b.n	8000fbc <SSD1306_Init+0x30>
		p--;
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	3b01      	subs	r3, #1
 8000fba:	607b      	str	r3, [r7, #4]
	while(p>0)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f9      	bne.n	8000fb6 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8000fc2:	22ae      	movs	r2, #174	@ 0xae
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	2078      	movs	r0, #120	@ 0x78
 8000fc8:	f000 fc5a 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8000fcc:	2220      	movs	r2, #32
 8000fce:	2100      	movs	r1, #0
 8000fd0:	2078      	movs	r0, #120	@ 0x78
 8000fd2:	f000 fc55 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8000fd6:	2210      	movs	r2, #16
 8000fd8:	2100      	movs	r1, #0
 8000fda:	2078      	movs	r0, #120	@ 0x78
 8000fdc:	f000 fc50 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000fe0:	22b0      	movs	r2, #176	@ 0xb0
 8000fe2:	2100      	movs	r1, #0
 8000fe4:	2078      	movs	r0, #120	@ 0x78
 8000fe6:	f000 fc4b 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8000fea:	22c8      	movs	r2, #200	@ 0xc8
 8000fec:	2100      	movs	r1, #0
 8000fee:	2078      	movs	r0, #120	@ 0x78
 8000ff0:	f000 fc46 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	2078      	movs	r0, #120	@ 0x78
 8000ffa:	f000 fc41 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 8000ffe:	2210      	movs	r2, #16
 8001000:	2100      	movs	r1, #0
 8001002:	2078      	movs	r0, #120	@ 0x78
 8001004:	f000 fc3c 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8001008:	2240      	movs	r2, #64	@ 0x40
 800100a:	2100      	movs	r1, #0
 800100c:	2078      	movs	r0, #120	@ 0x78
 800100e:	f000 fc37 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8001012:	2281      	movs	r2, #129	@ 0x81
 8001014:	2100      	movs	r1, #0
 8001016:	2078      	movs	r0, #120	@ 0x78
 8001018:	f000 fc32 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 800101c:	22ff      	movs	r2, #255	@ 0xff
 800101e:	2100      	movs	r1, #0
 8001020:	2078      	movs	r0, #120	@ 0x78
 8001022:	f000 fc2d 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8001026:	22a1      	movs	r2, #161	@ 0xa1
 8001028:	2100      	movs	r1, #0
 800102a:	2078      	movs	r0, #120	@ 0x78
 800102c:	f000 fc28 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8001030:	22a6      	movs	r2, #166	@ 0xa6
 8001032:	2100      	movs	r1, #0
 8001034:	2078      	movs	r0, #120	@ 0x78
 8001036:	f000 fc23 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800103a:	22a8      	movs	r2, #168	@ 0xa8
 800103c:	2100      	movs	r1, #0
 800103e:	2078      	movs	r0, #120	@ 0x78
 8001040:	f000 fc1e 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8001044:	223f      	movs	r2, #63	@ 0x3f
 8001046:	2100      	movs	r1, #0
 8001048:	2078      	movs	r0, #120	@ 0x78
 800104a:	f000 fc19 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800104e:	22a4      	movs	r2, #164	@ 0xa4
 8001050:	2100      	movs	r1, #0
 8001052:	2078      	movs	r0, #120	@ 0x78
 8001054:	f000 fc14 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8001058:	22d3      	movs	r2, #211	@ 0xd3
 800105a:	2100      	movs	r1, #0
 800105c:	2078      	movs	r0, #120	@ 0x78
 800105e:	f000 fc0f 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8001062:	2200      	movs	r2, #0
 8001064:	2100      	movs	r1, #0
 8001066:	2078      	movs	r0, #120	@ 0x78
 8001068:	f000 fc0a 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800106c:	22d5      	movs	r2, #213	@ 0xd5
 800106e:	2100      	movs	r1, #0
 8001070:	2078      	movs	r0, #120	@ 0x78
 8001072:	f000 fc05 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8001076:	22f0      	movs	r2, #240	@ 0xf0
 8001078:	2100      	movs	r1, #0
 800107a:	2078      	movs	r0, #120	@ 0x78
 800107c:	f000 fc00 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8001080:	22d9      	movs	r2, #217	@ 0xd9
 8001082:	2100      	movs	r1, #0
 8001084:	2078      	movs	r0, #120	@ 0x78
 8001086:	f000 fbfb 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800108a:	2222      	movs	r2, #34	@ 0x22
 800108c:	2100      	movs	r1, #0
 800108e:	2078      	movs	r0, #120	@ 0x78
 8001090:	f000 fbf6 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8001094:	22da      	movs	r2, #218	@ 0xda
 8001096:	2100      	movs	r1, #0
 8001098:	2078      	movs	r0, #120	@ 0x78
 800109a:	f000 fbf1 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800109e:	2212      	movs	r2, #18
 80010a0:	2100      	movs	r1, #0
 80010a2:	2078      	movs	r0, #120	@ 0x78
 80010a4:	f000 fbec 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80010a8:	22db      	movs	r2, #219	@ 0xdb
 80010aa:	2100      	movs	r1, #0
 80010ac:	2078      	movs	r0, #120	@ 0x78
 80010ae:	f000 fbe7 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80010b2:	2220      	movs	r2, #32
 80010b4:	2100      	movs	r1, #0
 80010b6:	2078      	movs	r0, #120	@ 0x78
 80010b8:	f000 fbe2 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 80010bc:	228d      	movs	r2, #141	@ 0x8d
 80010be:	2100      	movs	r1, #0
 80010c0:	2078      	movs	r0, #120	@ 0x78
 80010c2:	f000 fbdd 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 80010c6:	2214      	movs	r2, #20
 80010c8:	2100      	movs	r1, #0
 80010ca:	2078      	movs	r0, #120	@ 0x78
 80010cc:	f000 fbd8 	bl	8001880 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 80010d0:	22af      	movs	r2, #175	@ 0xaf
 80010d2:	2100      	movs	r1, #0
 80010d4:	2078      	movs	r0, #120	@ 0x78
 80010d6:	f000 fbd3 	bl	8001880 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 80010da:	222e      	movs	r2, #46	@ 0x2e
 80010dc:	2100      	movs	r1, #0
 80010de:	2078      	movs	r0, #120	@ 0x78
 80010e0:	f000 fbce 	bl	8001880 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f843 	bl	8001170 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 80010ea:	f000 f813 	bl	8001114 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 80010ee:	4b08      	ldr	r3, [pc, #32]	@ (8001110 <SSD1306_Init+0x184>)
 80010f0:	2200      	movs	r2, #0
 80010f2:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80010f4:	4b06      	ldr	r3, [pc, #24]	@ (8001110 <SSD1306_Init+0x184>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80010fa:	4b05      	ldr	r3, [pc, #20]	@ (8001110 <SSD1306_Init+0x184>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 8001100:	2301      	movs	r3, #1
}
 8001102:	4618      	mov	r0, r3
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	200000a0 	.word	0x200000a0
 8001110:	200005b8 	.word	0x200005b8

08001114 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 800111a:	2300      	movs	r3, #0
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e01d      	b.n	800115c <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	3b50      	subs	r3, #80	@ 0x50
 8001124:	b2db      	uxtb	r3, r3
 8001126:	461a      	mov	r2, r3
 8001128:	2100      	movs	r1, #0
 800112a:	2078      	movs	r0, #120	@ 0x78
 800112c:	f000 fba8 	bl	8001880 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 8001130:	2200      	movs	r2, #0
 8001132:	2100      	movs	r1, #0
 8001134:	2078      	movs	r0, #120	@ 0x78
 8001136:	f000 fba3 	bl	8001880 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 800113a:	2210      	movs	r2, #16
 800113c:	2100      	movs	r1, #0
 800113e:	2078      	movs	r0, #120	@ 0x78
 8001140:	f000 fb9e 	bl	8001880 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	01db      	lsls	r3, r3, #7
 8001148:	4a08      	ldr	r2, [pc, #32]	@ (800116c <SSD1306_UpdateScreen+0x58>)
 800114a:	441a      	add	r2, r3
 800114c:	2380      	movs	r3, #128	@ 0x80
 800114e:	2140      	movs	r1, #64	@ 0x40
 8001150:	2078      	movs	r0, #120	@ 0x78
 8001152:	f000 fb2f 	bl	80017b4 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	3301      	adds	r3, #1
 800115a:	71fb      	strb	r3, [r7, #7]
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	2b07      	cmp	r3, #7
 8001160:	d9de      	bls.n	8001120 <SSD1306_UpdateScreen+0xc>
	}
}
 8001162:	bf00      	nop
 8001164:	bf00      	nop
 8001166:	3708      	adds	r7, #8
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	200001b8 	.word	0x200001b8

08001170 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	4603      	mov	r3, r0
 8001178:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800117a:	79fb      	ldrb	r3, [r7, #7]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d101      	bne.n	8001184 <SSD1306_Fill+0x14>
 8001180:	2300      	movs	r3, #0
 8001182:	e000      	b.n	8001186 <SSD1306_Fill+0x16>
 8001184:	23ff      	movs	r3, #255	@ 0xff
 8001186:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800118a:	4619      	mov	r1, r3
 800118c:	4803      	ldr	r0, [pc, #12]	@ (800119c <SSD1306_Fill+0x2c>)
 800118e:	f009 fb4b 	bl	800a828 <memset>
}
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200001b8 	.word	0x200001b8

080011a0 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
 80011aa:	460b      	mov	r3, r1
 80011ac:	80bb      	strh	r3, [r7, #4]
 80011ae:	4613      	mov	r3, r2
 80011b0:	70fb      	strb	r3, [r7, #3]
	if (
 80011b2:	88fb      	ldrh	r3, [r7, #6]
 80011b4:	2b7f      	cmp	r3, #127	@ 0x7f
 80011b6:	d848      	bhi.n	800124a <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 80011b8:	88bb      	ldrh	r3, [r7, #4]
 80011ba:	2b3f      	cmp	r3, #63	@ 0x3f
 80011bc:	d845      	bhi.n	800124a <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 80011be:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <SSD1306_DrawPixel+0xb4>)
 80011c0:	791b      	ldrb	r3, [r3, #4]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d006      	beq.n	80011d4 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 80011c6:	78fb      	ldrb	r3, [r7, #3]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	bf0c      	ite	eq
 80011cc:	2301      	moveq	r3, #1
 80011ce:	2300      	movne	r3, #0
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 80011d4:	78fb      	ldrb	r3, [r7, #3]
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d11a      	bne.n	8001210 <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80011da:	88fa      	ldrh	r2, [r7, #6]
 80011dc:	88bb      	ldrh	r3, [r7, #4]
 80011de:	08db      	lsrs	r3, r3, #3
 80011e0:	b298      	uxth	r0, r3
 80011e2:	4603      	mov	r3, r0
 80011e4:	01db      	lsls	r3, r3, #7
 80011e6:	4413      	add	r3, r2
 80011e8:	4a1b      	ldr	r2, [pc, #108]	@ (8001258 <SSD1306_DrawPixel+0xb8>)
 80011ea:	5cd3      	ldrb	r3, [r2, r3]
 80011ec:	b25a      	sxtb	r2, r3
 80011ee:	88bb      	ldrh	r3, [r7, #4]
 80011f0:	f003 0307 	and.w	r3, r3, #7
 80011f4:	2101      	movs	r1, #1
 80011f6:	fa01 f303 	lsl.w	r3, r1, r3
 80011fa:	b25b      	sxtb	r3, r3
 80011fc:	4313      	orrs	r3, r2
 80011fe:	b259      	sxtb	r1, r3
 8001200:	88fa      	ldrh	r2, [r7, #6]
 8001202:	4603      	mov	r3, r0
 8001204:	01db      	lsls	r3, r3, #7
 8001206:	4413      	add	r3, r2
 8001208:	b2c9      	uxtb	r1, r1
 800120a:	4a13      	ldr	r2, [pc, #76]	@ (8001258 <SSD1306_DrawPixel+0xb8>)
 800120c:	54d1      	strb	r1, [r2, r3]
 800120e:	e01d      	b.n	800124c <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8001210:	88fa      	ldrh	r2, [r7, #6]
 8001212:	88bb      	ldrh	r3, [r7, #4]
 8001214:	08db      	lsrs	r3, r3, #3
 8001216:	b298      	uxth	r0, r3
 8001218:	4603      	mov	r3, r0
 800121a:	01db      	lsls	r3, r3, #7
 800121c:	4413      	add	r3, r2
 800121e:	4a0e      	ldr	r2, [pc, #56]	@ (8001258 <SSD1306_DrawPixel+0xb8>)
 8001220:	5cd3      	ldrb	r3, [r2, r3]
 8001222:	b25a      	sxtb	r2, r3
 8001224:	88bb      	ldrh	r3, [r7, #4]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	2101      	movs	r1, #1
 800122c:	fa01 f303 	lsl.w	r3, r1, r3
 8001230:	b25b      	sxtb	r3, r3
 8001232:	43db      	mvns	r3, r3
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4013      	ands	r3, r2
 8001238:	b259      	sxtb	r1, r3
 800123a:	88fa      	ldrh	r2, [r7, #6]
 800123c:	4603      	mov	r3, r0
 800123e:	01db      	lsls	r3, r3, #7
 8001240:	4413      	add	r3, r2
 8001242:	b2c9      	uxtb	r1, r1
 8001244:	4a04      	ldr	r2, [pc, #16]	@ (8001258 <SSD1306_DrawPixel+0xb8>)
 8001246:	54d1      	strb	r1, [r2, r3]
 8001248:	e000      	b.n	800124c <SSD1306_DrawPixel+0xac>
		return;
 800124a:	bf00      	nop
	}
}
 800124c:	370c      	adds	r7, #12
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr
 8001254:	200005b8 	.word	0x200005b8
 8001258:	200001b8 	.word	0x200001b8

0800125c <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	4603      	mov	r3, r0
 8001264:	460a      	mov	r2, r1
 8001266:	80fb      	strh	r3, [r7, #6]
 8001268:	4613      	mov	r3, r2
 800126a:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 800126c:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <SSD1306_GotoXY+0x28>)
 800126e:	88fb      	ldrh	r3, [r7, #6]
 8001270:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8001272:	4a04      	ldr	r2, [pc, #16]	@ (8001284 <SSD1306_GotoXY+0x28>)
 8001274:	88bb      	ldrh	r3, [r7, #4]
 8001276:	8053      	strh	r3, [r2, #2]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop
 8001284:	200005b8 	.word	0x200005b8

08001288 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b086      	sub	sp, #24
 800128c:	af00      	add	r7, sp, #0
 800128e:	4603      	mov	r3, r0
 8001290:	6039      	str	r1, [r7, #0]
 8001292:	71fb      	strb	r3, [r7, #7]
 8001294:	4613      	mov	r3, r2
 8001296:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8001298:	4b39      	ldr	r3, [pc, #228]	@ (8001380 <SSD1306_Putc+0xf8>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	461a      	mov	r2, r3
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	4413      	add	r3, r2
	if (
 80012a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80012a6:	dc07      	bgt.n	80012b8 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80012a8:	4b35      	ldr	r3, [pc, #212]	@ (8001380 <SSD1306_Putc+0xf8>)
 80012aa:	885b      	ldrh	r3, [r3, #2]
 80012ac:	461a      	mov	r2, r3
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	785b      	ldrb	r3, [r3, #1]
 80012b2:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80012b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80012b6:	dd01      	ble.n	80012bc <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 80012b8:	2300      	movs	r3, #0
 80012ba:	e05d      	b.n	8001378 <SSD1306_Putc+0xf0>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 80012bc:	2300      	movs	r3, #0
 80012be:	617b      	str	r3, [r7, #20]
 80012c0:	e04b      	b.n	800135a <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 80012c2:	683b      	ldr	r3, [r7, #0]
 80012c4:	685a      	ldr	r2, [r3, #4]
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3b20      	subs	r3, #32
 80012ca:	6839      	ldr	r1, [r7, #0]
 80012cc:	7849      	ldrb	r1, [r1, #1]
 80012ce:	fb01 f303 	mul.w	r3, r1, r3
 80012d2:	4619      	mov	r1, r3
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	440b      	add	r3, r1
 80012d8:	005b      	lsls	r3, r3, #1
 80012da:	4413      	add	r3, r2
 80012dc:	881b      	ldrh	r3, [r3, #0]
 80012de:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 80012e0:	2300      	movs	r3, #0
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	e030      	b.n	8001348 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	693b      	ldr	r3, [r7, #16]
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d010      	beq.n	8001318 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80012f6:	4b22      	ldr	r3, [pc, #136]	@ (8001380 <SSD1306_Putc+0xf8>)
 80012f8:	881a      	ldrh	r2, [r3, #0]
 80012fa:	693b      	ldr	r3, [r7, #16]
 80012fc:	b29b      	uxth	r3, r3
 80012fe:	4413      	add	r3, r2
 8001300:	b298      	uxth	r0, r3
 8001302:	4b1f      	ldr	r3, [pc, #124]	@ (8001380 <SSD1306_Putc+0xf8>)
 8001304:	885a      	ldrh	r2, [r3, #2]
 8001306:	697b      	ldr	r3, [r7, #20]
 8001308:	b29b      	uxth	r3, r3
 800130a:	4413      	add	r3, r2
 800130c:	b29b      	uxth	r3, r3
 800130e:	79ba      	ldrb	r2, [r7, #6]
 8001310:	4619      	mov	r1, r3
 8001312:	f7ff ff45 	bl	80011a0 <SSD1306_DrawPixel>
 8001316:	e014      	b.n	8001342 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8001318:	4b19      	ldr	r3, [pc, #100]	@ (8001380 <SSD1306_Putc+0xf8>)
 800131a:	881a      	ldrh	r2, [r3, #0]
 800131c:	693b      	ldr	r3, [r7, #16]
 800131e:	b29b      	uxth	r3, r3
 8001320:	4413      	add	r3, r2
 8001322:	b298      	uxth	r0, r3
 8001324:	4b16      	ldr	r3, [pc, #88]	@ (8001380 <SSD1306_Putc+0xf8>)
 8001326:	885a      	ldrh	r2, [r3, #2]
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	b29b      	uxth	r3, r3
 800132c:	4413      	add	r3, r2
 800132e:	b299      	uxth	r1, r3
 8001330:	79bb      	ldrb	r3, [r7, #6]
 8001332:	2b00      	cmp	r3, #0
 8001334:	bf0c      	ite	eq
 8001336:	2301      	moveq	r3, #1
 8001338:	2300      	movne	r3, #0
 800133a:	b2db      	uxtb	r3, r3
 800133c:	461a      	mov	r2, r3
 800133e:	f7ff ff2f 	bl	80011a0 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	3301      	adds	r3, #1
 8001346:	613b      	str	r3, [r7, #16]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	781b      	ldrb	r3, [r3, #0]
 800134c:	461a      	mov	r2, r3
 800134e:	693b      	ldr	r3, [r7, #16]
 8001350:	4293      	cmp	r3, r2
 8001352:	d3c8      	bcc.n	80012e6 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	3301      	adds	r3, #1
 8001358:	617b      	str	r3, [r7, #20]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	785b      	ldrb	r3, [r3, #1]
 800135e:	461a      	mov	r2, r3
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	4293      	cmp	r3, r2
 8001364:	d3ad      	bcc.n	80012c2 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 8001366:	4b06      	ldr	r3, [pc, #24]	@ (8001380 <SSD1306_Putc+0xf8>)
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	683a      	ldr	r2, [r7, #0]
 800136c:	7812      	ldrb	r2, [r2, #0]
 800136e:	4413      	add	r3, r2
 8001370:	b29a      	uxth	r2, r3
 8001372:	4b03      	ldr	r3, [pc, #12]	@ (8001380 <SSD1306_Putc+0xf8>)
 8001374:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 8001376:	79fb      	ldrb	r3, [r7, #7]
}
 8001378:	4618      	mov	r0, r3
 800137a:	3718      	adds	r7, #24
 800137c:	46bd      	mov	sp, r7
 800137e:	bd80      	pop	{r7, pc}
 8001380:	200005b8 	.word	0x200005b8

08001384 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8001384:	b580      	push	{r7, lr}
 8001386:	b084      	sub	sp, #16
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	4613      	mov	r3, r2
 8001390:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8001392:	e012      	b.n	80013ba <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	79fa      	ldrb	r2, [r7, #7]
 800139a:	68b9      	ldr	r1, [r7, #8]
 800139c:	4618      	mov	r0, r3
 800139e:	f7ff ff73 	bl	8001288 <SSD1306_Putc>
 80013a2:	4603      	mov	r3, r0
 80013a4:	461a      	mov	r2, r3
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	429a      	cmp	r2, r3
 80013ac:	d002      	beq.n	80013b4 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	781b      	ldrb	r3, [r3, #0]
 80013b2:	e008      	b.n	80013c6 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	3301      	adds	r3, #1
 80013b8:	60fb      	str	r3, [r7, #12]
	while (*str) {
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	781b      	ldrb	r3, [r3, #0]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1e8      	bne.n	8001394 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	781b      	ldrb	r3, [r3, #0]
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <SSD1306_DrawLine>:
 

void SSD1306_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, SSD1306_COLOR_t c) {
 80013ce:	b590      	push	{r4, r7, lr}
 80013d0:	b087      	sub	sp, #28
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4604      	mov	r4, r0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4603      	mov	r3, r0
 80013e2:	80bb      	strh	r3, [r7, #4]
 80013e4:	460b      	mov	r3, r1
 80013e6:	807b      	strh	r3, [r7, #2]
 80013e8:	4613      	mov	r3, r2
 80013ea:	803b      	strh	r3, [r7, #0]
	int16_t dx, dy, sx, sy, err, e2, i, tmp; 
	
	/* Check for overflow */
	if (x0 >= SSD1306_WIDTH) {
 80013ec:	88fb      	ldrh	r3, [r7, #6]
 80013ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80013f0:	d901      	bls.n	80013f6 <SSD1306_DrawLine+0x28>
		x0 = SSD1306_WIDTH - 1;
 80013f2:	237f      	movs	r3, #127	@ 0x7f
 80013f4:	80fb      	strh	r3, [r7, #6]
	}
	if (x1 >= SSD1306_WIDTH) {
 80013f6:	887b      	ldrh	r3, [r7, #2]
 80013f8:	2b7f      	cmp	r3, #127	@ 0x7f
 80013fa:	d901      	bls.n	8001400 <SSD1306_DrawLine+0x32>
		x1 = SSD1306_WIDTH - 1;
 80013fc:	237f      	movs	r3, #127	@ 0x7f
 80013fe:	807b      	strh	r3, [r7, #2]
	}
	if (y0 >= SSD1306_HEIGHT) {
 8001400:	88bb      	ldrh	r3, [r7, #4]
 8001402:	2b3f      	cmp	r3, #63	@ 0x3f
 8001404:	d901      	bls.n	800140a <SSD1306_DrawLine+0x3c>
		y0 = SSD1306_HEIGHT - 1;
 8001406:	233f      	movs	r3, #63	@ 0x3f
 8001408:	80bb      	strh	r3, [r7, #4]
	}
	if (y1 >= SSD1306_HEIGHT) {
 800140a:	883b      	ldrh	r3, [r7, #0]
 800140c:	2b3f      	cmp	r3, #63	@ 0x3f
 800140e:	d901      	bls.n	8001414 <SSD1306_DrawLine+0x46>
		y1 = SSD1306_HEIGHT - 1;
 8001410:	233f      	movs	r3, #63	@ 0x3f
 8001412:	803b      	strh	r3, [r7, #0]
	}
	
	dx = (x0 < x1) ? (x1 - x0) : (x0 - x1); 
 8001414:	88fa      	ldrh	r2, [r7, #6]
 8001416:	887b      	ldrh	r3, [r7, #2]
 8001418:	429a      	cmp	r2, r3
 800141a:	d205      	bcs.n	8001428 <SSD1306_DrawLine+0x5a>
 800141c:	887a      	ldrh	r2, [r7, #2]
 800141e:	88fb      	ldrh	r3, [r7, #6]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	b29b      	uxth	r3, r3
 8001424:	b21b      	sxth	r3, r3
 8001426:	e004      	b.n	8001432 <SSD1306_DrawLine+0x64>
 8001428:	88fa      	ldrh	r2, [r7, #6]
 800142a:	887b      	ldrh	r3, [r7, #2]
 800142c:	1ad3      	subs	r3, r2, r3
 800142e:	b29b      	uxth	r3, r3
 8001430:	b21b      	sxth	r3, r3
 8001432:	827b      	strh	r3, [r7, #18]
	dy = (y0 < y1) ? (y1 - y0) : (y0 - y1); 
 8001434:	88ba      	ldrh	r2, [r7, #4]
 8001436:	883b      	ldrh	r3, [r7, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d205      	bcs.n	8001448 <SSD1306_DrawLine+0x7a>
 800143c:	883a      	ldrh	r2, [r7, #0]
 800143e:	88bb      	ldrh	r3, [r7, #4]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	b29b      	uxth	r3, r3
 8001444:	b21b      	sxth	r3, r3
 8001446:	e004      	b.n	8001452 <SSD1306_DrawLine+0x84>
 8001448:	88ba      	ldrh	r2, [r7, #4]
 800144a:	883b      	ldrh	r3, [r7, #0]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b29b      	uxth	r3, r3
 8001450:	b21b      	sxth	r3, r3
 8001452:	823b      	strh	r3, [r7, #16]
	sx = (x0 < x1) ? 1 : -1; 
 8001454:	88fa      	ldrh	r2, [r7, #6]
 8001456:	887b      	ldrh	r3, [r7, #2]
 8001458:	429a      	cmp	r2, r3
 800145a:	d201      	bcs.n	8001460 <SSD1306_DrawLine+0x92>
 800145c:	2301      	movs	r3, #1
 800145e:	e001      	b.n	8001464 <SSD1306_DrawLine+0x96>
 8001460:	f04f 33ff 	mov.w	r3, #4294967295
 8001464:	81fb      	strh	r3, [r7, #14]
	sy = (y0 < y1) ? 1 : -1; 
 8001466:	88ba      	ldrh	r2, [r7, #4]
 8001468:	883b      	ldrh	r3, [r7, #0]
 800146a:	429a      	cmp	r2, r3
 800146c:	d201      	bcs.n	8001472 <SSD1306_DrawLine+0xa4>
 800146e:	2301      	movs	r3, #1
 8001470:	e001      	b.n	8001476 <SSD1306_DrawLine+0xa8>
 8001472:	f04f 33ff 	mov.w	r3, #4294967295
 8001476:	81bb      	strh	r3, [r7, #12]
	err = ((dx > dy) ? dx : -dy) / 2; 
 8001478:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800147c:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001480:	429a      	cmp	r2, r3
 8001482:	dd06      	ble.n	8001492 <SSD1306_DrawLine+0xc4>
 8001484:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001488:	0fda      	lsrs	r2, r3, #31
 800148a:	4413      	add	r3, r2
 800148c:	105b      	asrs	r3, r3, #1
 800148e:	b21b      	sxth	r3, r3
 8001490:	e006      	b.n	80014a0 <SSD1306_DrawLine+0xd2>
 8001492:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001496:	0fda      	lsrs	r2, r3, #31
 8001498:	4413      	add	r3, r2
 800149a:	105b      	asrs	r3, r3, #1
 800149c:	425b      	negs	r3, r3
 800149e:	b21b      	sxth	r3, r3
 80014a0:	82fb      	strh	r3, [r7, #22]

	if (dx == 0) {
 80014a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d129      	bne.n	80014fe <SSD1306_DrawLine+0x130>
		if (y1 < y0) {
 80014aa:	883a      	ldrh	r2, [r7, #0]
 80014ac:	88bb      	ldrh	r3, [r7, #4]
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d205      	bcs.n	80014be <SSD1306_DrawLine+0xf0>
			tmp = y1;
 80014b2:	883b      	ldrh	r3, [r7, #0]
 80014b4:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 80014b6:	88bb      	ldrh	r3, [r7, #4]
 80014b8:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 80014ba:	893b      	ldrh	r3, [r7, #8]
 80014bc:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 80014be:	887a      	ldrh	r2, [r7, #2]
 80014c0:	88fb      	ldrh	r3, [r7, #6]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d205      	bcs.n	80014d2 <SSD1306_DrawLine+0x104>
			tmp = x1;
 80014c6:	887b      	ldrh	r3, [r7, #2]
 80014c8:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 80014ca:	88fb      	ldrh	r3, [r7, #6]
 80014cc:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 80014ce:	893b      	ldrh	r3, [r7, #8]
 80014d0:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Vertical line */
		for (i = y0; i <= y1; i++) {
 80014d2:	88bb      	ldrh	r3, [r7, #4]
 80014d4:	82bb      	strh	r3, [r7, #20]
 80014d6:	e00c      	b.n	80014f2 <SSD1306_DrawLine+0x124>
			SSD1306_DrawPixel(x0, i, c);
 80014d8:	8ab9      	ldrh	r1, [r7, #20]
 80014da:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 80014de:	88fb      	ldrh	r3, [r7, #6]
 80014e0:	4618      	mov	r0, r3
 80014e2:	f7ff fe5d 	bl	80011a0 <SSD1306_DrawPixel>
		for (i = y0; i <= y1; i++) {
 80014e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80014ea:	b29b      	uxth	r3, r3
 80014ec:	3301      	adds	r3, #1
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	82bb      	strh	r3, [r7, #20]
 80014f2:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80014f6:	883b      	ldrh	r3, [r7, #0]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	dded      	ble.n	80014d8 <SSD1306_DrawLine+0x10a>
		}
		
		/* Return from function */
		return;
 80014fc:	e05f      	b.n	80015be <SSD1306_DrawLine+0x1f0>
	}
	
	if (dy == 0) {
 80014fe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d129      	bne.n	800155a <SSD1306_DrawLine+0x18c>
		if (y1 < y0) {
 8001506:	883a      	ldrh	r2, [r7, #0]
 8001508:	88bb      	ldrh	r3, [r7, #4]
 800150a:	429a      	cmp	r2, r3
 800150c:	d205      	bcs.n	800151a <SSD1306_DrawLine+0x14c>
			tmp = y1;
 800150e:	883b      	ldrh	r3, [r7, #0]
 8001510:	813b      	strh	r3, [r7, #8]
			y1 = y0;
 8001512:	88bb      	ldrh	r3, [r7, #4]
 8001514:	803b      	strh	r3, [r7, #0]
			y0 = tmp;
 8001516:	893b      	ldrh	r3, [r7, #8]
 8001518:	80bb      	strh	r3, [r7, #4]
		}
		
		if (x1 < x0) {
 800151a:	887a      	ldrh	r2, [r7, #2]
 800151c:	88fb      	ldrh	r3, [r7, #6]
 800151e:	429a      	cmp	r2, r3
 8001520:	d205      	bcs.n	800152e <SSD1306_DrawLine+0x160>
			tmp = x1;
 8001522:	887b      	ldrh	r3, [r7, #2]
 8001524:	813b      	strh	r3, [r7, #8]
			x1 = x0;
 8001526:	88fb      	ldrh	r3, [r7, #6]
 8001528:	807b      	strh	r3, [r7, #2]
			x0 = tmp;
 800152a:	893b      	ldrh	r3, [r7, #8]
 800152c:	80fb      	strh	r3, [r7, #6]
		}
		
		/* Horizontal line */
		for (i = x0; i <= x1; i++) {
 800152e:	88fb      	ldrh	r3, [r7, #6]
 8001530:	82bb      	strh	r3, [r7, #20]
 8001532:	e00c      	b.n	800154e <SSD1306_DrawLine+0x180>
			SSD1306_DrawPixel(i, y0, c);
 8001534:	8abb      	ldrh	r3, [r7, #20]
 8001536:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800153a:	88b9      	ldrh	r1, [r7, #4]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe2f 	bl	80011a0 <SSD1306_DrawPixel>
		for (i = x0; i <= x1; i++) {
 8001542:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001546:	b29b      	uxth	r3, r3
 8001548:	3301      	adds	r3, #1
 800154a:	b29b      	uxth	r3, r3
 800154c:	82bb      	strh	r3, [r7, #20]
 800154e:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001552:	887b      	ldrh	r3, [r7, #2]
 8001554:	429a      	cmp	r2, r3
 8001556:	dded      	ble.n	8001534 <SSD1306_DrawLine+0x166>
		}
		
		/* Return from function */
		return;
 8001558:	e031      	b.n	80015be <SSD1306_DrawLine+0x1f0>
	}
	
	while (1) {
		SSD1306_DrawPixel(x0, y0, c);
 800155a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800155e:	88b9      	ldrh	r1, [r7, #4]
 8001560:	88fb      	ldrh	r3, [r7, #6]
 8001562:	4618      	mov	r0, r3
 8001564:	f7ff fe1c 	bl	80011a0 <SSD1306_DrawPixel>
		if (x0 == x1 && y0 == y1) {
 8001568:	88fa      	ldrh	r2, [r7, #6]
 800156a:	887b      	ldrh	r3, [r7, #2]
 800156c:	429a      	cmp	r2, r3
 800156e:	d103      	bne.n	8001578 <SSD1306_DrawLine+0x1aa>
 8001570:	88ba      	ldrh	r2, [r7, #4]
 8001572:	883b      	ldrh	r3, [r7, #0]
 8001574:	429a      	cmp	r2, r3
 8001576:	d021      	beq.n	80015bc <SSD1306_DrawLine+0x1ee>
			break;
		}
		e2 = err; 
 8001578:	8afb      	ldrh	r3, [r7, #22]
 800157a:	817b      	strh	r3, [r7, #10]
		if (e2 > -dx) {
 800157c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001580:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001584:	425b      	negs	r3, r3
 8001586:	429a      	cmp	r2, r3
 8001588:	dd08      	ble.n	800159c <SSD1306_DrawLine+0x1ce>
			err -= dy;
 800158a:	8afa      	ldrh	r2, [r7, #22]
 800158c:	8a3b      	ldrh	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	b29b      	uxth	r3, r3
 8001592:	82fb      	strh	r3, [r7, #22]
			x0 += sx;
 8001594:	89fa      	ldrh	r2, [r7, #14]
 8001596:	88fb      	ldrh	r3, [r7, #6]
 8001598:	4413      	add	r3, r2
 800159a:	80fb      	strh	r3, [r7, #6]
		} 
		if (e2 < dy) {
 800159c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80015a0:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	dad8      	bge.n	800155a <SSD1306_DrawLine+0x18c>
			err += dx;
 80015a8:	8afa      	ldrh	r2, [r7, #22]
 80015aa:	8a7b      	ldrh	r3, [r7, #18]
 80015ac:	4413      	add	r3, r2
 80015ae:	b29b      	uxth	r3, r3
 80015b0:	82fb      	strh	r3, [r7, #22]
			y0 += sy;
 80015b2:	89ba      	ldrh	r2, [r7, #12]
 80015b4:	88bb      	ldrh	r3, [r7, #4]
 80015b6:	4413      	add	r3, r2
 80015b8:	80bb      	strh	r3, [r7, #4]
		SSD1306_DrawPixel(x0, y0, c);
 80015ba:	e7ce      	b.n	800155a <SSD1306_DrawLine+0x18c>
			break;
 80015bc:	bf00      	nop
		} 
	}
}
 80015be:	371c      	adds	r7, #28
 80015c0:	46bd      	mov	sp, r7
 80015c2:	bd90      	pop	{r4, r7, pc}

080015c4 <SSD1306_DrawFilledCircle>:
        SSD1306_DrawPixel(x0 + y, y0 - x, c);
        SSD1306_DrawPixel(x0 - y, y0 - x, c);
    }
}

void SSD1306_DrawFilledCircle(int16_t x0, int16_t y0, int16_t r, SSD1306_COLOR_t c) {
 80015c4:	b590      	push	{r4, r7, lr}
 80015c6:	b089      	sub	sp, #36	@ 0x24
 80015c8:	af02      	add	r7, sp, #8
 80015ca:	4604      	mov	r4, r0
 80015cc:	4608      	mov	r0, r1
 80015ce:	4611      	mov	r1, r2
 80015d0:	461a      	mov	r2, r3
 80015d2:	4623      	mov	r3, r4
 80015d4:	80fb      	strh	r3, [r7, #6]
 80015d6:	4603      	mov	r3, r0
 80015d8:	80bb      	strh	r3, [r7, #4]
 80015da:	460b      	mov	r3, r1
 80015dc:	807b      	strh	r3, [r7, #2]
 80015de:	4613      	mov	r3, r2
 80015e0:	707b      	strb	r3, [r7, #1]
	int16_t f = 1 - r;
 80015e2:	887b      	ldrh	r3, [r7, #2]
 80015e4:	f1c3 0301 	rsb	r3, r3, #1
 80015e8:	b29b      	uxth	r3, r3
 80015ea:	82fb      	strh	r3, [r7, #22]
	int16_t ddF_x = 1;
 80015ec:	2301      	movs	r3, #1
 80015ee:	82bb      	strh	r3, [r7, #20]
	int16_t ddF_y = -2 * r;
 80015f0:	887b      	ldrh	r3, [r7, #2]
 80015f2:	461a      	mov	r2, r3
 80015f4:	03d2      	lsls	r2, r2, #15
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	005b      	lsls	r3, r3, #1
 80015fa:	b29b      	uxth	r3, r3
 80015fc:	827b      	strh	r3, [r7, #18]
	int16_t x = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	823b      	strh	r3, [r7, #16]
	int16_t y = r;
 8001602:	887b      	ldrh	r3, [r7, #2]
 8001604:	81fb      	strh	r3, [r7, #14]

    SSD1306_DrawPixel(x0, y0 + r, c);
 8001606:	88f8      	ldrh	r0, [r7, #6]
 8001608:	88ba      	ldrh	r2, [r7, #4]
 800160a:	887b      	ldrh	r3, [r7, #2]
 800160c:	4413      	add	r3, r2
 800160e:	b29b      	uxth	r3, r3
 8001610:	787a      	ldrb	r2, [r7, #1]
 8001612:	4619      	mov	r1, r3
 8001614:	f7ff fdc4 	bl	80011a0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0, y0 - r, c);
 8001618:	88f8      	ldrh	r0, [r7, #6]
 800161a:	88ba      	ldrh	r2, [r7, #4]
 800161c:	887b      	ldrh	r3, [r7, #2]
 800161e:	1ad3      	subs	r3, r2, r3
 8001620:	b29b      	uxth	r3, r3
 8001622:	787a      	ldrb	r2, [r7, #1]
 8001624:	4619      	mov	r1, r3
 8001626:	f7ff fdbb 	bl	80011a0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 + r, y0, c);
 800162a:	88fa      	ldrh	r2, [r7, #6]
 800162c:	887b      	ldrh	r3, [r7, #2]
 800162e:	4413      	add	r3, r2
 8001630:	b29b      	uxth	r3, r3
 8001632:	88b9      	ldrh	r1, [r7, #4]
 8001634:	787a      	ldrb	r2, [r7, #1]
 8001636:	4618      	mov	r0, r3
 8001638:	f7ff fdb2 	bl	80011a0 <SSD1306_DrawPixel>
    SSD1306_DrawPixel(x0 - r, y0, c);
 800163c:	88fa      	ldrh	r2, [r7, #6]
 800163e:	887b      	ldrh	r3, [r7, #2]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	b29b      	uxth	r3, r3
 8001644:	88b9      	ldrh	r1, [r7, #4]
 8001646:	787a      	ldrb	r2, [r7, #1]
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fda9 	bl	80011a0 <SSD1306_DrawPixel>
    SSD1306_DrawLine(x0 - r, y0, x0 + r, y0, c);
 800164e:	88fa      	ldrh	r2, [r7, #6]
 8001650:	887b      	ldrh	r3, [r7, #2]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	b298      	uxth	r0, r3
 8001656:	88b9      	ldrh	r1, [r7, #4]
 8001658:	88fa      	ldrh	r2, [r7, #6]
 800165a:	887b      	ldrh	r3, [r7, #2]
 800165c:	4413      	add	r3, r2
 800165e:	b29a      	uxth	r2, r3
 8001660:	88bc      	ldrh	r4, [r7, #4]
 8001662:	787b      	ldrb	r3, [r7, #1]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4623      	mov	r3, r4
 8001668:	f7ff feb1 	bl	80013ce <SSD1306_DrawLine>

    while (x < y) {
 800166c:	e079      	b.n	8001762 <SSD1306_DrawFilledCircle+0x19e>
        if (f >= 0) {
 800166e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001672:	2b00      	cmp	r3, #0
 8001674:	db0e      	blt.n	8001694 <SSD1306_DrawFilledCircle+0xd0>
            y--;
 8001676:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800167a:	b29b      	uxth	r3, r3
 800167c:	3b01      	subs	r3, #1
 800167e:	b29b      	uxth	r3, r3
 8001680:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 8001682:	8a7b      	ldrh	r3, [r7, #18]
 8001684:	3302      	adds	r3, #2
 8001686:	b29b      	uxth	r3, r3
 8001688:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 800168a:	8afa      	ldrh	r2, [r7, #22]
 800168c:	8a7b      	ldrh	r3, [r7, #18]
 800168e:	4413      	add	r3, r2
 8001690:	b29b      	uxth	r3, r3
 8001692:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 8001694:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8001698:	b29b      	uxth	r3, r3
 800169a:	3301      	adds	r3, #1
 800169c:	b29b      	uxth	r3, r3
 800169e:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 80016a0:	8abb      	ldrh	r3, [r7, #20]
 80016a2:	3302      	adds	r3, #2
 80016a4:	b29b      	uxth	r3, r3
 80016a6:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 80016a8:	8afa      	ldrh	r2, [r7, #22]
 80016aa:	8abb      	ldrh	r3, [r7, #20]
 80016ac:	4413      	add	r3, r2
 80016ae:	b29b      	uxth	r3, r3
 80016b0:	82fb      	strh	r3, [r7, #22]

        SSD1306_DrawLine(x0 - x, y0 + y, x0 + x, y0 + y, c);
 80016b2:	88fa      	ldrh	r2, [r7, #6]
 80016b4:	8a3b      	ldrh	r3, [r7, #16]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	b298      	uxth	r0, r3
 80016ba:	88ba      	ldrh	r2, [r7, #4]
 80016bc:	89fb      	ldrh	r3, [r7, #14]
 80016be:	4413      	add	r3, r2
 80016c0:	b299      	uxth	r1, r3
 80016c2:	88fa      	ldrh	r2, [r7, #6]
 80016c4:	8a3b      	ldrh	r3, [r7, #16]
 80016c6:	4413      	add	r3, r2
 80016c8:	b29c      	uxth	r4, r3
 80016ca:	88ba      	ldrh	r2, [r7, #4]
 80016cc:	89fb      	ldrh	r3, [r7, #14]
 80016ce:	4413      	add	r3, r2
 80016d0:	b29a      	uxth	r2, r3
 80016d2:	787b      	ldrb	r3, [r7, #1]
 80016d4:	9300      	str	r3, [sp, #0]
 80016d6:	4613      	mov	r3, r2
 80016d8:	4622      	mov	r2, r4
 80016da:	f7ff fe78 	bl	80013ce <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + x, y0 - y, x0 - x, y0 - y, c);
 80016de:	88fa      	ldrh	r2, [r7, #6]
 80016e0:	8a3b      	ldrh	r3, [r7, #16]
 80016e2:	4413      	add	r3, r2
 80016e4:	b298      	uxth	r0, r3
 80016e6:	88ba      	ldrh	r2, [r7, #4]
 80016e8:	89fb      	ldrh	r3, [r7, #14]
 80016ea:	1ad3      	subs	r3, r2, r3
 80016ec:	b299      	uxth	r1, r3
 80016ee:	88fa      	ldrh	r2, [r7, #6]
 80016f0:	8a3b      	ldrh	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	b29c      	uxth	r4, r3
 80016f6:	88ba      	ldrh	r2, [r7, #4]
 80016f8:	89fb      	ldrh	r3, [r7, #14]
 80016fa:	1ad3      	subs	r3, r2, r3
 80016fc:	b29a      	uxth	r2, r3
 80016fe:	787b      	ldrb	r3, [r7, #1]
 8001700:	9300      	str	r3, [sp, #0]
 8001702:	4613      	mov	r3, r2
 8001704:	4622      	mov	r2, r4
 8001706:	f7ff fe62 	bl	80013ce <SSD1306_DrawLine>

        SSD1306_DrawLine(x0 + y, y0 + x, x0 - y, y0 + x, c);
 800170a:	88fa      	ldrh	r2, [r7, #6]
 800170c:	89fb      	ldrh	r3, [r7, #14]
 800170e:	4413      	add	r3, r2
 8001710:	b298      	uxth	r0, r3
 8001712:	88ba      	ldrh	r2, [r7, #4]
 8001714:	8a3b      	ldrh	r3, [r7, #16]
 8001716:	4413      	add	r3, r2
 8001718:	b299      	uxth	r1, r3
 800171a:	88fa      	ldrh	r2, [r7, #6]
 800171c:	89fb      	ldrh	r3, [r7, #14]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b29c      	uxth	r4, r3
 8001722:	88ba      	ldrh	r2, [r7, #4]
 8001724:	8a3b      	ldrh	r3, [r7, #16]
 8001726:	4413      	add	r3, r2
 8001728:	b29a      	uxth	r2, r3
 800172a:	787b      	ldrb	r3, [r7, #1]
 800172c:	9300      	str	r3, [sp, #0]
 800172e:	4613      	mov	r3, r2
 8001730:	4622      	mov	r2, r4
 8001732:	f7ff fe4c 	bl	80013ce <SSD1306_DrawLine>
        SSD1306_DrawLine(x0 + y, y0 - x, x0 - y, y0 - x, c);
 8001736:	88fa      	ldrh	r2, [r7, #6]
 8001738:	89fb      	ldrh	r3, [r7, #14]
 800173a:	4413      	add	r3, r2
 800173c:	b298      	uxth	r0, r3
 800173e:	88ba      	ldrh	r2, [r7, #4]
 8001740:	8a3b      	ldrh	r3, [r7, #16]
 8001742:	1ad3      	subs	r3, r2, r3
 8001744:	b299      	uxth	r1, r3
 8001746:	88fa      	ldrh	r2, [r7, #6]
 8001748:	89fb      	ldrh	r3, [r7, #14]
 800174a:	1ad3      	subs	r3, r2, r3
 800174c:	b29c      	uxth	r4, r3
 800174e:	88ba      	ldrh	r2, [r7, #4]
 8001750:	8a3b      	ldrh	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b29a      	uxth	r2, r3
 8001756:	787b      	ldrb	r3, [r7, #1]
 8001758:	9300      	str	r3, [sp, #0]
 800175a:	4613      	mov	r3, r2
 800175c:	4622      	mov	r2, r4
 800175e:	f7ff fe36 	bl	80013ce <SSD1306_DrawLine>
    while (x < y) {
 8001762:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8001766:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800176a:	429a      	cmp	r2, r3
 800176c:	f6ff af7f 	blt.w	800166e <SSD1306_DrawFilledCircle+0xaa>
    }
}
 8001770:	bf00      	nop
 8001772:	bf00      	nop
 8001774:	371c      	adds	r7, #28
 8001776:	46bd      	mov	sp, r7
 8001778:	bd90      	pop	{r4, r7, pc}

0800177a <SSD1306_Clear>:
 


void SSD1306_Clear (void)
{
 800177a:	b580      	push	{r7, lr}
 800177c:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 800177e:	2000      	movs	r0, #0
 8001780:	f7ff fcf6 	bl	8001170 <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8001784:	f7ff fcc6 	bl	8001114 <SSD1306_UpdateScreen>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}

0800178c <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8001792:	4b07      	ldr	r3, [pc, #28]	@ (80017b0 <ssd1306_I2C_Init+0x24>)
 8001794:	607b      	str	r3, [r7, #4]
	while(p>0)
 8001796:	e002      	b.n	800179e <ssd1306_I2C_Init+0x12>
		p--;
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	3b01      	subs	r3, #1
 800179c:	607b      	str	r3, [r7, #4]
	while(p>0)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d1f9      	bne.n	8001798 <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 80017a4:	bf00      	nop
 80017a6:	bf00      	nop
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bc80      	pop	{r7}
 80017ae:	4770      	bx	lr
 80017b0:	0003d090 	.word	0x0003d090

080017b4 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 80017b4:	b590      	push	{r4, r7, lr}
 80017b6:	b0c7      	sub	sp, #284	@ 0x11c
 80017b8:	af02      	add	r7, sp, #8
 80017ba:	4604      	mov	r4, r0
 80017bc:	4608      	mov	r0, r1
 80017be:	f507 7188 	add.w	r1, r7, #272	@ 0x110
 80017c2:	f5a1 7188 	sub.w	r1, r1, #272	@ 0x110
 80017c6:	600a      	str	r2, [r1, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017ce:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 80017d2:	4622      	mov	r2, r4
 80017d4:	701a      	strb	r2, [r3, #0]
 80017d6:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017da:	f5a3 7385 	sub.w	r3, r3, #266	@ 0x10a
 80017de:	4602      	mov	r2, r0
 80017e0:	701a      	strb	r2, [r3, #0]
 80017e2:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017e6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80017ea:	460a      	mov	r2, r1
 80017ec:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 80017ee:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 80017f2:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80017f6:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 80017fa:	f5a2 7285 	sub.w	r2, r2, #266	@ 0x10a
 80017fe:	7812      	ldrb	r2, [r2, #0]
 8001800:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001808:	e015      	b.n	8001836 <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 800180a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800180e:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001812:	f5a2 7288 	sub.w	r2, r2, #272	@ 0x110
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	441a      	add	r2, r3
 800181a:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800181e:	3301      	adds	r3, #1
 8001820:	7811      	ldrb	r1, [r2, #0]
 8001822:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001826:	f5a2 7282 	sub.w	r2, r2, #260	@ 0x104
 800182a:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 800182c:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 8001830:	3301      	adds	r3, #1
 8001832:	f887 310f 	strb.w	r3, [r7, #271]	@ 0x10f
 8001836:	f897 310f 	ldrb.w	r3, [r7, #271]	@ 0x10f
 800183a:	b29b      	uxth	r3, r3
 800183c:	f507 7288 	add.w	r2, r7, #272	@ 0x110
 8001840:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 8001844:	8812      	ldrh	r2, [r2, #0]
 8001846:	429a      	cmp	r2, r3
 8001848:	d8df      	bhi.n	800180a <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 800184a:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800184e:	f2a3 1309 	subw	r3, r3, #265	@ 0x109
 8001852:	781b      	ldrb	r3, [r3, #0]
 8001854:	b299      	uxth	r1, r3
 8001856:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 800185a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800185e:	881b      	ldrh	r3, [r3, #0]
 8001860:	3301      	adds	r3, #1
 8001862:	b29b      	uxth	r3, r3
 8001864:	f107 020c 	add.w	r2, r7, #12
 8001868:	200a      	movs	r0, #10
 800186a:	9000      	str	r0, [sp, #0]
 800186c:	4803      	ldr	r0, [pc, #12]	@ (800187c <ssd1306_I2C_WriteMulti+0xc8>)
 800186e:	f001 faf9 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 8001872:	bf00      	nop
 8001874:	f507 778a 	add.w	r7, r7, #276	@ 0x114
 8001878:	46bd      	mov	sp, r7
 800187a:	bd90      	pop	{r4, r7, pc}
 800187c:	200000a0 	.word	0x200000a0

08001880 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af02      	add	r7, sp, #8
 8001886:	4603      	mov	r3, r0
 8001888:	71fb      	strb	r3, [r7, #7]
 800188a:	460b      	mov	r3, r1
 800188c:	71bb      	strb	r3, [r7, #6]
 800188e:	4613      	mov	r3, r2
 8001890:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8001892:	79bb      	ldrb	r3, [r7, #6]
 8001894:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8001896:	797b      	ldrb	r3, [r7, #5]
 8001898:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800189a:	79fb      	ldrb	r3, [r7, #7]
 800189c:	b299      	uxth	r1, r3
 800189e:	f107 020c 	add.w	r2, r7, #12
 80018a2:	230a      	movs	r3, #10
 80018a4:	9300      	str	r3, [sp, #0]
 80018a6:	2302      	movs	r3, #2
 80018a8:	4803      	ldr	r0, [pc, #12]	@ (80018b8 <ssd1306_I2C_Write+0x38>)
 80018aa:	f001 fadb 	bl	8002e64 <HAL_I2C_Master_Transmit>
}
 80018ae:	bf00      	nop
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	200000a0 	.word	0x200000a0

080018bc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80018c2:	4b18      	ldr	r3, [pc, #96]	@ (8001924 <HAL_MspInit+0x68>)
 80018c4:	699b      	ldr	r3, [r3, #24]
 80018c6:	4a17      	ldr	r2, [pc, #92]	@ (8001924 <HAL_MspInit+0x68>)
 80018c8:	f043 0301 	orr.w	r3, r3, #1
 80018cc:	6193      	str	r3, [r2, #24]
 80018ce:	4b15      	ldr	r3, [pc, #84]	@ (8001924 <HAL_MspInit+0x68>)
 80018d0:	699b      	ldr	r3, [r3, #24]
 80018d2:	f003 0301 	and.w	r3, r3, #1
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018da:	4b12      	ldr	r3, [pc, #72]	@ (8001924 <HAL_MspInit+0x68>)
 80018dc:	69db      	ldr	r3, [r3, #28]
 80018de:	4a11      	ldr	r2, [pc, #68]	@ (8001924 <HAL_MspInit+0x68>)
 80018e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018e4:	61d3      	str	r3, [r2, #28]
 80018e6:	4b0f      	ldr	r3, [pc, #60]	@ (8001924 <HAL_MspInit+0x68>)
 80018e8:	69db      	ldr	r3, [r3, #28]
 80018ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	210f      	movs	r1, #15
 80018f6:	f06f 0001 	mvn.w	r0, #1
 80018fa:	f000 ff78 	bl	80027ee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80018fe:	4b0a      	ldr	r3, [pc, #40]	@ (8001928 <HAL_MspInit+0x6c>)
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	60fb      	str	r3, [r7, #12]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001912:	60fb      	str	r3, [r7, #12]
 8001914:	4a04      	ldr	r2, [pc, #16]	@ (8001928 <HAL_MspInit+0x6c>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800191a:	bf00      	nop
 800191c:	3710      	adds	r7, #16
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	40021000 	.word	0x40021000
 8001928:	40010000 	.word	0x40010000

0800192c <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b088      	sub	sp, #32
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001934:	f107 0310 	add.w	r3, r7, #16
 8001938:	2200      	movs	r2, #0
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	605a      	str	r2, [r3, #4]
 800193e:	609a      	str	r2, [r3, #8]
 8001940:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a15      	ldr	r2, [pc, #84]	@ (800199c <HAL_I2C_MspInit+0x70>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d123      	bne.n	8001994 <HAL_I2C_MspInit+0x68>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194c:	4b14      	ldr	r3, [pc, #80]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 800194e:	699b      	ldr	r3, [r3, #24]
 8001950:	4a13      	ldr	r2, [pc, #76]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 8001952:	f043 0308 	orr.w	r3, r3, #8
 8001956:	6193      	str	r3, [r2, #24]
 8001958:	4b11      	ldr	r3, [pc, #68]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 800195a:	699b      	ldr	r3, [r3, #24]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	60fb      	str	r3, [r7, #12]
 8001962:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001964:	23c0      	movs	r3, #192	@ 0xc0
 8001966:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001968:	2312      	movs	r3, #18
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800196c:	2303      	movs	r3, #3
 800196e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001970:	f107 0310 	add.w	r3, r7, #16
 8001974:	4619      	mov	r1, r3
 8001976:	480b      	ldr	r0, [pc, #44]	@ (80019a4 <HAL_I2C_MspInit+0x78>)
 8001978:	f000 ff64 	bl	8002844 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800197c:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 800197e:	69db      	ldr	r3, [r3, #28]
 8001980:	4a07      	ldr	r2, [pc, #28]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 8001982:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001986:	61d3      	str	r3, [r2, #28]
 8001988:	4b05      	ldr	r3, [pc, #20]	@ (80019a0 <HAL_I2C_MspInit+0x74>)
 800198a:	69db      	ldr	r3, [r3, #28]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001990:	60bb      	str	r3, [r7, #8]
 8001992:	68bb      	ldr	r3, [r7, #8]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001994:	bf00      	nop
 8001996:	3720      	adds	r7, #32
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40005400 	.word	0x40005400
 80019a0:	40021000 	.word	0x40021000
 80019a4:	40010c00 	.word	0x40010c00

080019a8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b088      	sub	sp, #32
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b0:	f107 0310 	add.w	r3, r7, #16
 80019b4:	2200      	movs	r2, #0
 80019b6:	601a      	str	r2, [r3, #0]
 80019b8:	605a      	str	r2, [r3, #4]
 80019ba:	609a      	str	r2, [r3, #8]
 80019bc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI2)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	4a1c      	ldr	r2, [pc, #112]	@ (8001a34 <HAL_SPI_MspInit+0x8c>)
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d131      	bne.n	8001a2c <HAL_SPI_MspInit+0x84>
  {
    /* USER CODE BEGIN SPI2_MspInit 0 */

    /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019ce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019d2:	61d3      	str	r3, [r2, #28]
 80019d4:	4b18      	ldr	r3, [pc, #96]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019d6:	69db      	ldr	r3, [r3, #28]
 80019d8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019dc:	60fb      	str	r3, [r7, #12]
 80019de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019e0:	4b15      	ldr	r3, [pc, #84]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019e2:	699b      	ldr	r3, [r3, #24]
 80019e4:	4a14      	ldr	r2, [pc, #80]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019e6:	f043 0308 	orr.w	r3, r3, #8
 80019ea:	6193      	str	r3, [r2, #24]
 80019ec:	4b12      	ldr	r3, [pc, #72]	@ (8001a38 <HAL_SPI_MspInit+0x90>)
 80019ee:	699b      	ldr	r3, [r3, #24]
 80019f0:	f003 0308 	and.w	r3, r3, #8
 80019f4:	60bb      	str	r3, [r7, #8]
 80019f6:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80019f8:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80019fc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fe:	2302      	movs	r3, #2
 8001a00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a02:	2303      	movs	r3, #3
 8001a04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a06:	f107 0310 	add.w	r3, r7, #16
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	480b      	ldr	r0, [pc, #44]	@ (8001a3c <HAL_SPI_MspInit+0x94>)
 8001a0e:	f000 ff19 	bl	8002844 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001a12:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001a16:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	4805      	ldr	r0, [pc, #20]	@ (8001a3c <HAL_SPI_MspInit+0x94>)
 8001a28:	f000 ff0c 	bl	8002844 <HAL_GPIO_Init>

    /* USER CODE END SPI2_MspInit 1 */

  }

}
 8001a2c:	bf00      	nop
 8001a2e:	3720      	adds	r7, #32
 8001a30:	46bd      	mov	sp, r7
 8001a32:	bd80      	pop	{r7, pc}
 8001a34:	40003800 	.word	0x40003800
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	40010c00 	.word	0x40010c00

08001a40 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b085      	sub	sp, #20
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a50:	d10b      	bne.n	8001a6a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <HAL_TIM_Base_MspInit+0x34>)
 8001a54:	69db      	ldr	r3, [r3, #28]
 8001a56:	4a07      	ldr	r2, [pc, #28]	@ (8001a74 <HAL_TIM_Base_MspInit+0x34>)
 8001a58:	f043 0301 	orr.w	r3, r3, #1
 8001a5c:	61d3      	str	r3, [r2, #28]
 8001a5e:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <HAL_TIM_Base_MspInit+0x34>)
 8001a60:	69db      	ldr	r3, [r3, #28]
 8001a62:	f003 0301 	and.w	r3, r3, #1
 8001a66:	60fb      	str	r3, [r7, #12]
 8001a68:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 8001a6a:	bf00      	nop
 8001a6c:	3714      	adds	r7, #20
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bc80      	pop	{r7}
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b088      	sub	sp, #32
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0310 	add.w	r3, r7, #16
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a96:	d117      	bne.n	8001ac8 <HAL_TIM_MspPostInit+0x50>
  {
    /* USER CODE BEGIN TIM2_MspPostInit 0 */

    /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a98:	4b0d      	ldr	r3, [pc, #52]	@ (8001ad0 <HAL_TIM_MspPostInit+0x58>)
 8001a9a:	699b      	ldr	r3, [r3, #24]
 8001a9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001ad0 <HAL_TIM_MspPostInit+0x58>)
 8001a9e:	f043 0304 	orr.w	r3, r3, #4
 8001aa2:	6193      	str	r3, [r2, #24]
 8001aa4:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_TIM_MspPostInit+0x58>)
 8001aa6:	699b      	ldr	r3, [r3, #24]
 8001aa8:	f003 0304 	and.w	r3, r3, #4
 8001aac:	60fb      	str	r3, [r7, #12]
 8001aae:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ab4:	2302      	movs	r3, #2
 8001ab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab8:	2302      	movs	r3, #2
 8001aba:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <HAL_TIM_MspPostInit+0x5c>)
 8001ac4:	f000 febe 	bl	8002844 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001ac8:	bf00      	nop
 8001aca:	3720      	adds	r7, #32
 8001acc:	46bd      	mov	sp, r7
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	40010800 	.word	0x40010800

08001ad8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08e      	sub	sp, #56	@ 0x38
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001aee:	4b34      	ldr	r3, [pc, #208]	@ (8001bc0 <HAL_InitTick+0xe8>)
 8001af0:	69db      	ldr	r3, [r3, #28]
 8001af2:	4a33      	ldr	r2, [pc, #204]	@ (8001bc0 <HAL_InitTick+0xe8>)
 8001af4:	f043 0304 	orr.w	r3, r3, #4
 8001af8:	61d3      	str	r3, [r2, #28]
 8001afa:	4b31      	ldr	r3, [pc, #196]	@ (8001bc0 <HAL_InitTick+0xe8>)
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f003 0304 	and.w	r3, r3, #4
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001b06:	f107 0210 	add.w	r2, r7, #16
 8001b0a:	f107 0314 	add.w	r3, r7, #20
 8001b0e:	4611      	mov	r1, r2
 8001b10:	4618      	mov	r0, r3
 8001b12:	f002 fa0b 	bl	8003f2c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001b16:	6a3b      	ldr	r3, [r7, #32]
 8001b18:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d103      	bne.n	8001b28 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001b20:	f002 f9f0 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8001b24:	6378      	str	r0, [r7, #52]	@ 0x34
 8001b26:	e004      	b.n	8001b32 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b28:	f002 f9ec 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	005b      	lsls	r3, r3, #1
 8001b30:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001b34:	4a23      	ldr	r2, [pc, #140]	@ (8001bc4 <HAL_InitTick+0xec>)
 8001b36:	fba2 2303 	umull	r2, r3, r2, r3
 8001b3a:	0c9b      	lsrs	r3, r3, #18
 8001b3c:	3b01      	subs	r3, #1
 8001b3e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b42:	4a22      	ldr	r2, [pc, #136]	@ (8001bcc <HAL_InitTick+0xf4>)
 8001b44:	601a      	str	r2, [r3, #0]
   * Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8001b46:	4b20      	ldr	r3, [pc, #128]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b4c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8001b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b52:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b60:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8001b66:	4818      	ldr	r0, [pc, #96]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b68:	f002 fd15 	bl	8004596 <HAL_TIM_Base_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8001b72:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d11b      	bne.n	8001bb2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8001b7a:	4813      	ldr	r0, [pc, #76]	@ (8001bc8 <HAL_InitTick+0xf0>)
 8001b7c:	f002 fd5a 	bl	8004634 <HAL_TIM_Base_Start_IT>
 8001b80:	4603      	mov	r3, r0
 8001b82:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8001b86:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d111      	bne.n	8001bb2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001b8e:	201e      	movs	r0, #30
 8001b90:	f000 fe49 	bl	8002826 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	2b0f      	cmp	r3, #15
 8001b98:	d808      	bhi.n	8001bac <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	6879      	ldr	r1, [r7, #4]
 8001b9e:	201e      	movs	r0, #30
 8001ba0:	f000 fe25 	bl	80027ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd0 <HAL_InitTick+0xf8>)
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6013      	str	r3, [r2, #0]
 8001baa:	e002      	b.n	8001bb2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8001bac:	2301      	movs	r3, #1
 8001bae:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3738      	adds	r7, #56	@ 0x38
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	431bde83 	.word	0x431bde83
 8001bc8:	200005c0 	.word	0x200005c0
 8001bcc:	40000800 	.word	0x40000800
 8001bd0:	20000014 	.word	0x20000014

08001bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001bd8:	bf00      	nop
 8001bda:	e7fd      	b.n	8001bd8 <NMI_Handler+0x4>

08001bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001be0:	bf00      	nop
 8001be2:	e7fd      	b.n	8001be0 <HardFault_Handler+0x4>

08001be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001be8:	bf00      	nop
 8001bea:	e7fd      	b.n	8001be8 <MemManage_Handler+0x4>

08001bec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bec:	b480      	push	{r7}
 8001bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bf0:	bf00      	nop
 8001bf2:	e7fd      	b.n	8001bf0 <BusFault_Handler+0x4>

08001bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bf8:	bf00      	nop
 8001bfa:	e7fd      	b.n	8001bf8 <UsageFault_Handler+0x4>

08001bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c00:	bf00      	nop
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bc80      	pop	{r7}
 8001c06:	4770      	bx	lr

08001c08 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001c0c:	4802      	ldr	r0, [pc, #8]	@ (8001c18 <TIM4_IRQHandler+0x10>)
 8001c0e:	f002 fe5d 	bl	80048cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	200005c0 	.word	0x200005c0

08001c1c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c20:	bf00      	nop
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <SPI_Timer_On>:

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
	spiTimerTickStart = HAL_GetTick();
 8001c30:	f000 fd1e 	bl	8002670 <HAL_GetTick>
 8001c34:	4603      	mov	r3, r0
 8001c36:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <SPI_Timer_On+0x20>)
 8001c38:	6013      	str	r3, [r2, #0]
	spiTimerTickDelay = waitTicks;
 8001c3a:	4a04      	ldr	r2, [pc, #16]	@ (8001c4c <SPI_Timer_On+0x24>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	6013      	str	r3, [r2, #0]
}
 8001c40:	bf00      	nop
 8001c42:	3708      	adds	r7, #8
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	2000060c 	.word	0x2000060c
 8001c4c:	20000610 	.word	0x20000610

08001c50 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status()
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
	return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 8001c54:	f000 fd0c 	bl	8002670 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	4b06      	ldr	r3, [pc, #24]	@ (8001c74 <SPI_Timer_Status+0x24>)
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	1ad2      	subs	r2, r2, r3
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <SPI_Timer_Status+0x28>)
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	bf34      	ite	cc
 8001c68:	2301      	movcc	r3, #1
 8001c6a:	2300      	movcs	r3, #0
 8001c6c:	b2db      	uxtb	r3, r3
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	bd80      	pop	{r7, pc}
 8001c72:	bf00      	nop
 8001c74:	2000060c 	.word	0x2000060c
 8001c78:	20000610 	.word	0x20000610

08001c7c <xchg_spi>:

/* Exchange a byte */
static BYTE xchg_spi(
	BYTE dat /* Data to send */
)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b086      	sub	sp, #24
 8001c80:	af02      	add	r7, sp, #8
 8001c82:	4603      	mov	r3, r0
 8001c84:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 8001c86:	f107 020f 	add.w	r2, r7, #15
 8001c8a:	1df9      	adds	r1, r7, #7
 8001c8c:	2332      	movs	r3, #50	@ 0x32
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	2301      	movs	r3, #1
 8001c92:	4804      	ldr	r0, [pc, #16]	@ (8001ca4 <xchg_spi+0x28>)
 8001c94:	f002 fa1c 	bl	80040d0 <HAL_SPI_TransmitReceive>
	return rxDat;
 8001c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	3710      	adds	r7, #16
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	200000f4 	.word	0x200000f4

08001ca8 <rcvr_spi_multi>:
/* Receive multiple byte */
static void rcvr_spi_multi(
	BYTE *buff, /* Pointer to data buffer */
	UINT btr	/* Number of bytes to receive (even number) */
)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b084      	sub	sp, #16
 8001cac:	af02      	add	r7, sp, #8
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
	static const uint8_t dummy[2048] = {[0 ... 2047] = 0xFF};
	HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, dummy, buff, btr, 50);
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2232      	movs	r2, #50	@ 0x32
 8001cb8:	9200      	str	r2, [sp, #0]
 8001cba:	687a      	ldr	r2, [r7, #4]
 8001cbc:	4903      	ldr	r1, [pc, #12]	@ (8001ccc <rcvr_spi_multi+0x24>)
 8001cbe:	4804      	ldr	r0, [pc, #16]	@ (8001cd0 <rcvr_spi_multi+0x28>)
 8001cc0:	f002 fa06 	bl	80040d0 <HAL_SPI_TransmitReceive>

	/*
	for(UINT i=0; i<btr; i++) {
		*(buff+i) = xchg_spi(0xFF);
	}*/
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}
 8001ccc:	0800bed0 	.word	0x0800bed0
 8001cd0:	200000f4 	.word	0x200000f4

08001cd4 <xmit_spi_multi>:
/* Send multiple byte */
static void xmit_spi_multi(
	const BYTE *buff, /* Pointer to the data */
	UINT btx		  /* Number of bytes to send (even number) */
)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b084      	sub	sp, #16
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	6039      	str	r1, [r7, #0]
	for (UINT i = 0; i < btx; i++)
 8001cde:	2300      	movs	r3, #0
 8001ce0:	60fb      	str	r3, [r7, #12]
 8001ce2:	e009      	b.n	8001cf8 <xmit_spi_multi+0x24>
	{
		xchg_spi(*(buff + i));
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	4413      	add	r3, r2
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ffc5 	bl	8001c7c <xchg_spi>
	for (UINT i = 0; i < btx; i++)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	60fb      	str	r3, [r7, #12]
 8001cf8:	68fa      	ldr	r2, [r7, #12]
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d3f1      	bcc.n	8001ce4 <xmit_spi_multi+0x10>
	}
}
 8001d00:	bf00      	nop
 8001d02:	bf00      	nop
 8001d04:	3710      	adds	r7, #16
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <wait_ready>:
/*-----------------------------------------------------------------------*/

static int wait_ready(		  /* 1:Ready, 0:Timeout */
					  UINT wt /* Timeout [ms] */
)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	b086      	sub	sp, #24
 8001d0e:	af00      	add	r7, sp, #0
 8001d10:	6078      	str	r0, [r7, #4]
	// wait_ready needs its own timer, unfortunately, so it can't use the
	// spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 8001d12:	f000 fcad 	bl	8002670 <HAL_GetTick>
 8001d16:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	613b      	str	r3, [r7, #16]
	do
	{
		d = xchg_spi(0xFF);
 8001d1c:	20ff      	movs	r0, #255	@ 0xff
 8001d1e:	f7ff ffad 	bl	8001c7c <xchg_spi>
 8001d22:	4603      	mov	r3, r0
 8001d24:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay)); /* Wait for card goes ready or timeout */
 8001d26:	7bfb      	ldrb	r3, [r7, #15]
 8001d28:	2bff      	cmp	r3, #255	@ 0xff
 8001d2a:	d007      	beq.n	8001d3c <wait_ready+0x32>
 8001d2c:	f000 fca0 	bl	8002670 <HAL_GetTick>
 8001d30:	4602      	mov	r2, r0
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	693a      	ldr	r2, [r7, #16]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d8ef      	bhi.n	8001d1c <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 8001d3c:	7bfb      	ldrb	r3, [r7, #15]
 8001d3e:	2bff      	cmp	r3, #255	@ 0xff
 8001d40:	bf0c      	ite	eq
 8001d42:	2301      	moveq	r3, #1
 8001d44:	2300      	movne	r3, #0
 8001d46:	b2db      	uxtb	r3, r3
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <despiselect>:
/*-----------------------------------------------------------------------*/
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static void despiselect(void)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 8001d54:	2201      	movs	r2, #1
 8001d56:	2102      	movs	r1, #2
 8001d58:	4803      	ldr	r0, [pc, #12]	@ (8001d68 <despiselect+0x18>)
 8001d5a:	f000 ff0e 	bl	8002b7a <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO hi-z for multiple slave SPI) */
 8001d5e:	20ff      	movs	r0, #255	@ 0xff
 8001d60:	f7ff ff8c 	bl	8001c7c <xchg_spi>
}
 8001d64:	bf00      	nop
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010c00 	.word	0x40010c00

08001d6c <spiselect>:
/*-----------------------------------------------------------------------*/
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static int spiselect(void) /* 1:OK, 0:Timeout */
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 8001d70:	2200      	movs	r2, #0
 8001d72:	2102      	movs	r1, #2
 8001d74:	4809      	ldr	r0, [pc, #36]	@ (8001d9c <spiselect+0x30>)
 8001d76:	f000 ff00 	bl	8002b7a <HAL_GPIO_WritePin>
	xchg_spi(0xFF); /* Dummy clock (force DO enabled) */
 8001d7a:	20ff      	movs	r0, #255	@ 0xff
 8001d7c:	f7ff ff7e 	bl	8001c7c <xchg_spi>
	if (wait_ready(500))
 8001d80:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001d84:	f7ff ffc1 	bl	8001d0a <wait_ready>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d001      	beq.n	8001d92 <spiselect+0x26>
		return 1; /* Wait for card ready */
 8001d8e:	2301      	movs	r3, #1
 8001d90:	e002      	b.n	8001d98 <spiselect+0x2c>

	despiselect();
 8001d92:	f7ff ffdd 	bl	8001d50 <despiselect>
	return 0; /* Timeout */
 8001d96:	2300      	movs	r3, #0
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40010c00 	.word	0x40010c00

08001da0 <rcvr_datablock>:

static int rcvr_datablock(			  /* 1:OK, 0:Error */
						  BYTE *buff, /* Data buffer */
						  UINT btr	  /* Data block length (byte) */
)
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b084      	sub	sp, #16
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
 8001da8:	6039      	str	r1, [r7, #0]
	BYTE token;

	SPI_Timer_On(200);
 8001daa:	20c8      	movs	r0, #200	@ 0xc8
 8001dac:	f7ff ff3c 	bl	8001c28 <SPI_Timer_On>
	do
	{ /* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 8001db0:	20ff      	movs	r0, #255	@ 0xff
 8001db2:	f7ff ff63 	bl	8001c7c <xchg_spi>
 8001db6:	4603      	mov	r3, r0
 8001db8:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 8001dba:	7bfb      	ldrb	r3, [r7, #15]
 8001dbc:	2bff      	cmp	r3, #255	@ 0xff
 8001dbe:	d104      	bne.n	8001dca <rcvr_datablock+0x2a>
 8001dc0:	f7ff ff46 	bl	8001c50 <SPI_Timer_Status>
 8001dc4:	4603      	mov	r3, r0
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d1f2      	bne.n	8001db0 <rcvr_datablock+0x10>
	if (token != 0xFE)
 8001dca:	7bfb      	ldrb	r3, [r7, #15]
 8001dcc:	2bfe      	cmp	r3, #254	@ 0xfe
 8001dce:	d001      	beq.n	8001dd4 <rcvr_datablock+0x34>
		return 0; /* Function fails if invalid DataStart token or timeout */
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	e00a      	b.n	8001dea <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr); /* Store trailing data to the buffer */
 8001dd4:	6839      	ldr	r1, [r7, #0]
 8001dd6:	6878      	ldr	r0, [r7, #4]
 8001dd8:	f7ff ff66 	bl	8001ca8 <rcvr_spi_multi>
	xchg_spi(0xFF);
 8001ddc:	20ff      	movs	r0, #255	@ 0xff
 8001dde:	f7ff ff4d 	bl	8001c7c <xchg_spi>
	xchg_spi(0xFF); /* Discard CRC */
 8001de2:	20ff      	movs	r0, #255	@ 0xff
 8001de4:	f7ff ff4a 	bl	8001c7c <xchg_spi>

	return 1; /* Function succeeded */
 8001de8:	2301      	movs	r3, #1
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <xmit_datablock>:
#if _USE_WRITE
static int xmit_datablock(					/* 1:OK, 0:Failed */
						  const BYTE *buff, /* Ponter to 512 byte data to be sent */
						  BYTE token		/* Token */
)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
	BYTE resp;

	if (!wait_ready(500))
 8001dfe:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e02:	f7ff ff82 	bl	8001d0a <wait_ready>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <xmit_datablock+0x1e>
		return 0; /* Wait for card ready */
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	e01e      	b.n	8001e4e <xmit_datablock+0x5c>

	xchg_spi(token); /* Send token */
 8001e10:	78fb      	ldrb	r3, [r7, #3]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff32 	bl	8001c7c <xchg_spi>
	if (token != 0xFD)
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	2bfd      	cmp	r3, #253	@ 0xfd
 8001e1c:	d016      	beq.n	8001e4c <xmit_datablock+0x5a>
	{							   /* Send data if token is other than StopTran */
		xmit_spi_multi(buff, 512); /* Data */
 8001e1e:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f7ff ff56 	bl	8001cd4 <xmit_spi_multi>
		xchg_spi(0xFF);
 8001e28:	20ff      	movs	r0, #255	@ 0xff
 8001e2a:	f7ff ff27 	bl	8001c7c <xchg_spi>
		xchg_spi(0xFF); /* Dummy CRC */
 8001e2e:	20ff      	movs	r0, #255	@ 0xff
 8001e30:	f7ff ff24 	bl	8001c7c <xchg_spi>

		resp = xchg_spi(0xFF); /* Receive data resp */
 8001e34:	20ff      	movs	r0, #255	@ 0xff
 8001e36:	f7ff ff21 	bl	8001c7c <xchg_spi>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05)
 8001e3e:	7bfb      	ldrb	r3, [r7, #15]
 8001e40:	f003 031f 	and.w	r3, r3, #31
 8001e44:	2b05      	cmp	r3, #5
 8001e46:	d001      	beq.n	8001e4c <xmit_datablock+0x5a>
			return 0; /* Function fails if the data packet was not accepted */
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e000      	b.n	8001e4e <xmit_datablock+0x5c>
	}
	return 1;
 8001e4c:	2301      	movs	r3, #1
}
 8001e4e:	4618      	mov	r0, r3
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}

08001e56 <send_cmd>:

static BYTE send_cmd(		   /* Return value: R1 resp (bit7==1:Failed to send) */
					 BYTE cmd, /* Command index */
					 DWORD arg /* Argument */
)
{
 8001e56:	b580      	push	{r7, lr}
 8001e58:	b084      	sub	sp, #16
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	6039      	str	r1, [r7, #0]
 8001e60:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;

	if (cmd & 0x80)
 8001e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	da0e      	bge.n	8001e88 <send_cmd+0x32>
	{ /* Send a CMD55 prior to ACMD<n> */
		cmd &= 0x7F;
 8001e6a:	79fb      	ldrb	r3, [r7, #7]
 8001e6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001e70:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 8001e72:	2100      	movs	r1, #0
 8001e74:	2037      	movs	r0, #55	@ 0x37
 8001e76:	f7ff ffee 	bl	8001e56 <send_cmd>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	73bb      	strb	r3, [r7, #14]
		if (res > 1)
 8001e7e:	7bbb      	ldrb	r3, [r7, #14]
 8001e80:	2b01      	cmp	r3, #1
 8001e82:	d901      	bls.n	8001e88 <send_cmd+0x32>
			return res;
 8001e84:	7bbb      	ldrb	r3, [r7, #14]
 8001e86:	e051      	b.n	8001f2c <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12)
 8001e88:	79fb      	ldrb	r3, [r7, #7]
 8001e8a:	2b0c      	cmp	r3, #12
 8001e8c:	d008      	beq.n	8001ea0 <send_cmd+0x4a>
	{
		despiselect();
 8001e8e:	f7ff ff5f 	bl	8001d50 <despiselect>
		if (!spiselect())
 8001e92:	f7ff ff6b 	bl	8001d6c <spiselect>
 8001e96:	4603      	mov	r3, r0
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <send_cmd+0x4a>
			return 0xFF;
 8001e9c:	23ff      	movs	r3, #255	@ 0xff
 8001e9e:	e045      	b.n	8001f2c <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);		 /* Start + command index */
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff fee7 	bl	8001c7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24)); /* Argument[31..24] */
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	0e1b      	lsrs	r3, r3, #24
 8001eb2:	b2db      	uxtb	r3, r3
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f7ff fee1 	bl	8001c7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16)); /* Argument[23..16] */
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	0c1b      	lsrs	r3, r3, #16
 8001ebe:	b2db      	uxtb	r3, r3
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	f7ff fedb 	bl	8001c7c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));	 /* Argument[15..8] */
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	0a1b      	lsrs	r3, r3, #8
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff fed5 	bl	8001c7c <xchg_spi>
	xchg_spi((BYTE)arg);		 /* Argument[7..0] */
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fed0 	bl	8001c7c <xchg_spi>
	n = 0x01;					 /* Dummy CRC + Stop */
 8001edc:	2301      	movs	r3, #1
 8001ede:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0)
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d101      	bne.n	8001eea <send_cmd+0x94>
		n = 0x95; /* Valid CRC for CMD0(0) */
 8001ee6:	2395      	movs	r3, #149	@ 0x95
 8001ee8:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8)
 8001eea:	79fb      	ldrb	r3, [r7, #7]
 8001eec:	2b08      	cmp	r3, #8
 8001eee:	d101      	bne.n	8001ef4 <send_cmd+0x9e>
		n = 0x87; /* Valid CRC for CMD8(0x1AA) */
 8001ef0:	2387      	movs	r3, #135	@ 0x87
 8001ef2:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 8001ef4:	7bfb      	ldrb	r3, [r7, #15]
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f7ff fec0 	bl	8001c7c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12)
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b0c      	cmp	r3, #12
 8001f00:	d102      	bne.n	8001f08 <send_cmd+0xb2>
		xchg_spi(0xFF); /* Diacard following one byte when CMD12 */
 8001f02:	20ff      	movs	r0, #255	@ 0xff
 8001f04:	f7ff feba 	bl	8001c7c <xchg_spi>
	n = 10;				/* Wait for response (10 bytes max) */
 8001f08:	230a      	movs	r3, #10
 8001f0a:	73fb      	strb	r3, [r7, #15]
	do
	{
		res = xchg_spi(0xFF);
 8001f0c:	20ff      	movs	r0, #255	@ 0xff
 8001f0e:	f7ff feb5 	bl	8001c7c <xchg_spi>
 8001f12:	4603      	mov	r3, r0
 8001f14:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 8001f16:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	da05      	bge.n	8001f2a <send_cmd+0xd4>
 8001f1e:	7bfb      	ldrb	r3, [r7, #15]
 8001f20:	3b01      	subs	r3, #1
 8001f22:	73fb      	strb	r3, [r7, #15]
 8001f24:	7bfb      	ldrb	r3, [r7, #15]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <send_cmd+0xb6>

	return res; /* Return received response */
 8001f2a:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3710      	adds	r7, #16
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}

08001f34 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize(
	BYTE drv /* Physical drive number (0) */
)
{
 8001f34:	b590      	push	{r4, r7, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0)
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <USER_SPI_initialize+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8001f44:	2301      	movs	r3, #1
 8001f46:	e0d4      	b.n	80020f2 <USER_SPI_initialize+0x1be>
	// assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK)
 8001f48:	4b6c      	ldr	r3, [pc, #432]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 0302 	and.w	r3, r3, #2
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d003      	beq.n	8001f5e <USER_SPI_initialize+0x2a>
		return Stat; /* Is card existing in the soket? */
 8001f56:	4b69      	ldr	r3, [pc, #420]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	e0c9      	b.n	80020f2 <USER_SPI_initialize+0x1be>

	FCLK_SLOW();
 8001f5e:	4b68      	ldr	r3, [pc, #416]	@ (8002100 <USER_SPI_initialize+0x1cc>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f023 0238 	bic.w	r2, r3, #56	@ 0x38
 8001f68:	4b65      	ldr	r3, [pc, #404]	@ (8002100 <USER_SPI_initialize+0x1cc>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f042 0220 	orr.w	r2, r2, #32
 8001f70:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--)
 8001f72:	230a      	movs	r3, #10
 8001f74:	73fb      	strb	r3, [r7, #15]
 8001f76:	e005      	b.n	8001f84 <USER_SPI_initialize+0x50>
		xchg_spi(0xFF); /* Send 80 dummy clocks */
 8001f78:	20ff      	movs	r0, #255	@ 0xff
 8001f7a:	f7ff fe7f 	bl	8001c7c <xchg_spi>
	for (n = 10; n; n--)
 8001f7e:	7bfb      	ldrb	r3, [r7, #15]
 8001f80:	3b01      	subs	r3, #1
 8001f82:	73fb      	strb	r3, [r7, #15]
 8001f84:	7bfb      	ldrb	r3, [r7, #15]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d1f6      	bne.n	8001f78 <USER_SPI_initialize+0x44>

	ty = 0;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1)
 8001f8e:	2100      	movs	r1, #0
 8001f90:	2000      	movs	r0, #0
 8001f92:	f7ff ff60 	bl	8001e56 <send_cmd>
 8001f96:	4603      	mov	r3, r0
 8001f98:	2b01      	cmp	r3, #1
 8001f9a:	f040 808b 	bne.w	80020b4 <USER_SPI_initialize+0x180>
	{						/* Put the card SPI/Idle state */
		SPI_Timer_On(1000); /* Initialization timeout = 1 sec */
 8001f9e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001fa2:	f7ff fe41 	bl	8001c28 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1)
 8001fa6:	f44f 71d5 	mov.w	r1, #426	@ 0x1aa
 8001faa:	2008      	movs	r0, #8
 8001fac:	f7ff ff53 	bl	8001e56 <send_cmd>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d151      	bne.n	800205a <USER_SPI_initialize+0x126>
		{ /* SDv2? */
			for (n = 0; n < 4; n++)
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	73fb      	strb	r3, [r7, #15]
 8001fba:	e00d      	b.n	8001fd8 <USER_SPI_initialize+0xa4>
				ocr[n] = xchg_spi(0xFF); /* Get 32 bit return value of R7 resp */
 8001fbc:	7bfc      	ldrb	r4, [r7, #15]
 8001fbe:	20ff      	movs	r0, #255	@ 0xff
 8001fc0:	f7ff fe5c 	bl	8001c7c <xchg_spi>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461a      	mov	r2, r3
 8001fc8:	f104 0310 	add.w	r3, r4, #16
 8001fcc:	443b      	add	r3, r7
 8001fce:	f803 2c08 	strb.w	r2, [r3, #-8]
			for (n = 0; n < 4; n++)
 8001fd2:	7bfb      	ldrb	r3, [r7, #15]
 8001fd4:	3301      	adds	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
 8001fda:	2b03      	cmp	r3, #3
 8001fdc:	d9ee      	bls.n	8001fbc <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA)
 8001fde:	7abb      	ldrb	r3, [r7, #10]
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d167      	bne.n	80020b4 <USER_SPI_initialize+0x180>
 8001fe4:	7afb      	ldrb	r3, [r7, #11]
 8001fe6:	2baa      	cmp	r3, #170	@ 0xaa
 8001fe8:	d164      	bne.n	80020b4 <USER_SPI_initialize+0x180>
			{ /* Is the card supports vcc of 2.7-3.6V? */
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30))
 8001fea:	bf00      	nop
 8001fec:	f7ff fe30 	bl	8001c50 <SPI_Timer_Status>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d007      	beq.n	8002006 <USER_SPI_initialize+0xd2>
 8001ff6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001ffa:	20a9      	movs	r0, #169	@ 0xa9
 8001ffc:	f7ff ff2b 	bl	8001e56 <send_cmd>
 8002000:	4603      	mov	r3, r0
 8002002:	2b00      	cmp	r3, #0
 8002004:	d1f2      	bne.n	8001fec <USER_SPI_initialize+0xb8>
					; /* Wait for end of initialization with ACMD41(HCS) */
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0)
 8002006:	f7ff fe23 	bl	8001c50 <SPI_Timer_Status>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d051      	beq.n	80020b4 <USER_SPI_initialize+0x180>
 8002010:	2100      	movs	r1, #0
 8002012:	203a      	movs	r0, #58	@ 0x3a
 8002014:	f7ff ff1f 	bl	8001e56 <send_cmd>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d14a      	bne.n	80020b4 <USER_SPI_initialize+0x180>
				{ /* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++)
 800201e:	2300      	movs	r3, #0
 8002020:	73fb      	strb	r3, [r7, #15]
 8002022:	e00d      	b.n	8002040 <USER_SPI_initialize+0x10c>
						ocr[n] = xchg_spi(0xFF);
 8002024:	7bfc      	ldrb	r4, [r7, #15]
 8002026:	20ff      	movs	r0, #255	@ 0xff
 8002028:	f7ff fe28 	bl	8001c7c <xchg_spi>
 800202c:	4603      	mov	r3, r0
 800202e:	461a      	mov	r2, r3
 8002030:	f104 0310 	add.w	r3, r4, #16
 8002034:	443b      	add	r3, r7
 8002036:	f803 2c08 	strb.w	r2, [r3, #-8]
					for (n = 0; n < 4; n++)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	2b03      	cmp	r3, #3
 8002044:	d9ee      	bls.n	8002024 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2; /* Card id SDv2 */
 8002046:	7a3b      	ldrb	r3, [r7, #8]
 8002048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <USER_SPI_initialize+0x120>
 8002050:	230c      	movs	r3, #12
 8002052:	e000      	b.n	8002056 <USER_SPI_initialize+0x122>
 8002054:	2304      	movs	r3, #4
 8002056:	737b      	strb	r3, [r7, #13]
 8002058:	e02c      	b.n	80020b4 <USER_SPI_initialize+0x180>
				}
			}
		}
		else
		{ /* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1)
 800205a:	2100      	movs	r1, #0
 800205c:	20a9      	movs	r0, #169	@ 0xa9
 800205e:	f7ff fefa 	bl	8001e56 <send_cmd>
 8002062:	4603      	mov	r3, r0
 8002064:	2b01      	cmp	r3, #1
 8002066:	d804      	bhi.n	8002072 <USER_SPI_initialize+0x13e>
			{ /* SDv1 or MMC? */
				ty = CT_SD1;
 8002068:	2302      	movs	r3, #2
 800206a:	737b      	strb	r3, [r7, #13]
				cmd = ACMD41; /* SDv1 (ACMD41(0)) */
 800206c:	23a9      	movs	r3, #169	@ 0xa9
 800206e:	73bb      	strb	r3, [r7, #14]
 8002070:	e003      	b.n	800207a <USER_SPI_initialize+0x146>
			}
			else
			{
				ty = CT_MMC;
 8002072:	2301      	movs	r3, #1
 8002074:	737b      	strb	r3, [r7, #13]
				cmd = CMD1; /* MMCv3 (CMD1(0)) */
 8002076:	2301      	movs	r3, #1
 8002078:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0))
 800207a:	bf00      	nop
 800207c:	f7ff fde8 	bl	8001c50 <SPI_Timer_Status>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d007      	beq.n	8002096 <USER_SPI_initialize+0x162>
 8002086:	7bbb      	ldrb	r3, [r7, #14]
 8002088:	2100      	movs	r1, #0
 800208a:	4618      	mov	r0, r3
 800208c:	f7ff fee3 	bl	8001e56 <send_cmd>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d1f2      	bne.n	800207c <USER_SPI_initialize+0x148>
				;												  /* Wait for end of initialization */
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0) /* Set block length: 512 */
 8002096:	f7ff fddb 	bl	8001c50 <SPI_Timer_Status>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d007      	beq.n	80020b0 <USER_SPI_initialize+0x17c>
 80020a0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80020a4:	2010      	movs	r0, #16
 80020a6:	f7ff fed6 	bl	8001e56 <send_cmd>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <USER_SPI_initialize+0x180>
				ty = 0;
 80020b0:	2300      	movs	r3, #0
 80020b2:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty; /* Card type */
 80020b4:	4a13      	ldr	r2, [pc, #76]	@ (8002104 <USER_SPI_initialize+0x1d0>)
 80020b6:	7b7b      	ldrb	r3, [r7, #13]
 80020b8:	7013      	strb	r3, [r2, #0]
	despiselect();
 80020ba:	f7ff fe49 	bl	8001d50 <despiselect>

	if (ty)
 80020be:	7b7b      	ldrb	r3, [r7, #13]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d010      	beq.n	80020e6 <USER_SPI_initialize+0x1b2>
	{						 /* OK */
		FCLK_FAST();		 /* Set fast clock */
 80020c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <USER_SPI_initialize+0x1cc>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002100 <USER_SPI_initialize+0x1cc>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0238 	bic.w	r2, r2, #56	@ 0x38
 80020d2:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT; /* Clear STA_NOINIT flag */
 80020d4:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	f023 0301 	bic.w	r3, r3, #1
 80020de:	b2da      	uxtb	r2, r3
 80020e0:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 80020e2:	701a      	strb	r2, [r3, #0]
 80020e4:	e002      	b.n	80020ec <USER_SPI_initialize+0x1b8>
	}
	else
	{ /* Failed */
		Stat = STA_NOINIT;
 80020e6:	4b05      	ldr	r3, [pc, #20]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 80020ec:	4b03      	ldr	r3, [pc, #12]	@ (80020fc <USER_SPI_initialize+0x1c8>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	b2db      	uxtb	r3, r3
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3714      	adds	r7, #20
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd90      	pop	{r4, r7, pc}
 80020fa:	bf00      	nop
 80020fc:	20000010 	.word	0x20000010
 8002100:	200000f4 	.word	0x200000f4
 8002104:	20000608 	.word	0x20000608

08002108 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status(
	BYTE drv /* Physical drive number (0) */
)
{
 8002108:	b480      	push	{r7}
 800210a:	b083      	sub	sp, #12
 800210c:	af00      	add	r7, sp, #0
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	if (drv)
 8002112:	79fb      	ldrb	r3, [r7, #7]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d001      	beq.n	800211c <USER_SPI_status+0x14>
		return STA_NOINIT; /* Supports only drive 0 */
 8002118:	2301      	movs	r3, #1
 800211a:	e002      	b.n	8002122 <USER_SPI_status+0x1a>

	return Stat; /* Return disk status */
 800211c:	4b03      	ldr	r3, [pc, #12]	@ (800212c <USER_SPI_status+0x24>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
}
 8002122:	4618      	mov	r0, r3
 8002124:	370c      	adds	r7, #12
 8002126:	46bd      	mov	sp, r7
 8002128:	bc80      	pop	{r7}
 800212a:	4770      	bx	lr
 800212c:	20000010 	.word	0x20000010

08002130 <USER_SPI_read>:
	BYTE drv,	  /* Physical drive number (0) */
	BYTE *buff,	  /* Pointer to the data buffer to store read data */
	DWORD sector, /* Start sector number (LBA) */
	UINT count	  /* Number of sectors to read (1..128) */
)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b084      	sub	sp, #16
 8002134:	af00      	add	r7, sp, #0
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
 800213a:	603b      	str	r3, [r7, #0]
 800213c:	4603      	mov	r3, r0
 800213e:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d102      	bne.n	800214c <USER_SPI_read+0x1c>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d101      	bne.n	8002150 <USER_SPI_read+0x20>
		return RES_PARERR; /* Check parameter */
 800214c:	2304      	movs	r3, #4
 800214e:	e04d      	b.n	80021ec <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT)
 8002150:	4b28      	ldr	r3, [pc, #160]	@ (80021f4 <USER_SPI_read+0xc4>)
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	b2db      	uxtb	r3, r3
 8002156:	f003 0301 	and.w	r3, r3, #1
 800215a:	2b00      	cmp	r3, #0
 800215c:	d001      	beq.n	8002162 <USER_SPI_read+0x32>
		return RES_NOTRDY; /* Check if drive is ready */
 800215e:	2303      	movs	r3, #3
 8002160:	e044      	b.n	80021ec <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK))
 8002162:	4b25      	ldr	r3, [pc, #148]	@ (80021f8 <USER_SPI_read+0xc8>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f003 0308 	and.w	r3, r3, #8
 800216a:	2b00      	cmp	r3, #0
 800216c:	d102      	bne.n	8002174 <USER_SPI_read+0x44>
		sector *= 512; /* LBA ot BA conversion (byte addressing cards) */
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	025b      	lsls	r3, r3, #9
 8002172:	607b      	str	r3, [r7, #4]

	if (count == 1)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	2b01      	cmp	r3, #1
 8002178:	d111      	bne.n	800219e <USER_SPI_read+0x6e>
	{									   /* Single sector read */
		if ((send_cmd(CMD17, sector) == 0) /* READ_SINGLE_BLOCK */
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	2011      	movs	r0, #17
 800217e:	f7ff fe6a 	bl	8001e56 <send_cmd>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d129      	bne.n	80021dc <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512))
 8002188:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800218c:	68b8      	ldr	r0, [r7, #8]
 800218e:	f7ff fe07 	bl	8001da0 <rcvr_datablock>
 8002192:	4603      	mov	r3, r0
 8002194:	2b00      	cmp	r3, #0
 8002196:	d021      	beq.n	80021dc <USER_SPI_read+0xac>
		{
			count = 0;
 8002198:	2300      	movs	r3, #0
 800219a:	603b      	str	r3, [r7, #0]
 800219c:	e01e      	b.n	80021dc <USER_SPI_read+0xac>
		}
	}
	else
	{ /* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0)
 800219e:	6879      	ldr	r1, [r7, #4]
 80021a0:	2012      	movs	r0, #18
 80021a2:	f7ff fe58 	bl	8001e56 <send_cmd>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d117      	bne.n	80021dc <USER_SPI_read+0xac>
		{ /* READ_MULTIPLE_BLOCK */
			do
			{
				if (!rcvr_datablock(buff, 512))
 80021ac:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80021b0:	68b8      	ldr	r0, [r7, #8]
 80021b2:	f7ff fdf5 	bl	8001da0 <rcvr_datablock>
 80021b6:	4603      	mov	r3, r0
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d00a      	beq.n	80021d2 <USER_SPI_read+0xa2>
					break;
				buff += 512;
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80021c2:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	3b01      	subs	r3, #1
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d1ed      	bne.n	80021ac <USER_SPI_read+0x7c>
 80021d0:	e000      	b.n	80021d4 <USER_SPI_read+0xa4>
					break;
 80021d2:	bf00      	nop
			send_cmd(CMD12, 0); /* STOP_TRANSMISSION */
 80021d4:	2100      	movs	r1, #0
 80021d6:	200c      	movs	r0, #12
 80021d8:	f7ff fe3d 	bl	8001e56 <send_cmd>
		}
	}
	despiselect();
 80021dc:	f7ff fdb8 	bl	8001d50 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	bf14      	ite	ne
 80021e6:	2301      	movne	r3, #1
 80021e8:	2300      	moveq	r3, #0
 80021ea:	b2db      	uxtb	r3, r3
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3710      	adds	r7, #16
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bd80      	pop	{r7, pc}
 80021f4:	20000010 	.word	0x20000010
 80021f8:	20000608 	.word	0x20000608

080021fc <USER_SPI_write>:
	BYTE drv,		  /* Physical drive number (0) */
	const BYTE *buff, /* Ponter to the data to write */
	DWORD sector,	  /* Start sector number (LBA) */
	UINT count		  /* Number of sectors to write (1..128) */
)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	60b9      	str	r1, [r7, #8]
 8002204:	607a      	str	r2, [r7, #4]
 8002206:	603b      	str	r3, [r7, #0]
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]
	if (drv || !count)
 800220c:	7bfb      	ldrb	r3, [r7, #15]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d102      	bne.n	8002218 <USER_SPI_write+0x1c>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	2b00      	cmp	r3, #0
 8002216:	d101      	bne.n	800221c <USER_SPI_write+0x20>
		return RES_PARERR; /* Check parameter */
 8002218:	2304      	movs	r3, #4
 800221a:	e063      	b.n	80022e4 <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT)
 800221c:	4b33      	ldr	r3, [pc, #204]	@ (80022ec <USER_SPI_write+0xf0>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	b2db      	uxtb	r3, r3
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <USER_SPI_write+0x32>
		return RES_NOTRDY; /* Check drive status */
 800222a:	2303      	movs	r3, #3
 800222c:	e05a      	b.n	80022e4 <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT)
 800222e:	4b2f      	ldr	r3, [pc, #188]	@ (80022ec <USER_SPI_write+0xf0>)
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b2db      	uxtb	r3, r3
 8002234:	f003 0304 	and.w	r3, r3, #4
 8002238:	2b00      	cmp	r3, #0
 800223a:	d001      	beq.n	8002240 <USER_SPI_write+0x44>
		return RES_WRPRT; /* Check write protect */
 800223c:	2302      	movs	r3, #2
 800223e:	e051      	b.n	80022e4 <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK))
 8002240:	4b2b      	ldr	r3, [pc, #172]	@ (80022f0 <USER_SPI_write+0xf4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	f003 0308 	and.w	r3, r3, #8
 8002248:	2b00      	cmp	r3, #0
 800224a:	d102      	bne.n	8002252 <USER_SPI_write+0x56>
		sector *= 512; /* LBA ==> BA conversion (byte addressing cards) */
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	025b      	lsls	r3, r3, #9
 8002250:	607b      	str	r3, [r7, #4]

	if (count == 1)
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	2b01      	cmp	r3, #1
 8002256:	d110      	bne.n	800227a <USER_SPI_write+0x7e>
	{									   /* Single sector write */
		if ((send_cmd(CMD24, sector) == 0) /* WRITE_BLOCK */
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	2018      	movs	r0, #24
 800225c:	f7ff fdfb 	bl	8001e56 <send_cmd>
 8002260:	4603      	mov	r3, r0
 8002262:	2b00      	cmp	r3, #0
 8002264:	d136      	bne.n	80022d4 <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE))
 8002266:	21fe      	movs	r1, #254	@ 0xfe
 8002268:	68b8      	ldr	r0, [r7, #8]
 800226a:	f7ff fdc2 	bl	8001df2 <xmit_datablock>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d02f      	beq.n	80022d4 <USER_SPI_write+0xd8>
		{
			count = 0;
 8002274:	2300      	movs	r3, #0
 8002276:	603b      	str	r3, [r7, #0]
 8002278:	e02c      	b.n	80022d4 <USER_SPI_write+0xd8>
		}
	}
	else
	{ /* Multiple sector write */
		if (CardType & CT_SDC)
 800227a:	4b1d      	ldr	r3, [pc, #116]	@ (80022f0 <USER_SPI_write+0xf4>)
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	f003 0306 	and.w	r3, r3, #6
 8002282:	2b00      	cmp	r3, #0
 8002284:	d003      	beq.n	800228e <USER_SPI_write+0x92>
			send_cmd(ACMD23, count); /* Predefine number of sectors */
 8002286:	6839      	ldr	r1, [r7, #0]
 8002288:	2097      	movs	r0, #151	@ 0x97
 800228a:	f7ff fde4 	bl	8001e56 <send_cmd>
		if (send_cmd(CMD25, sector) == 0)
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	2019      	movs	r0, #25
 8002292:	f7ff fde0 	bl	8001e56 <send_cmd>
 8002296:	4603      	mov	r3, r0
 8002298:	2b00      	cmp	r3, #0
 800229a:	d11b      	bne.n	80022d4 <USER_SPI_write+0xd8>
		{ /* WRITE_MULTIPLE_BLOCK */
			do
			{
				if (!xmit_datablock(buff, 0xFC))
 800229c:	21fc      	movs	r1, #252	@ 0xfc
 800229e:	68b8      	ldr	r0, [r7, #8]
 80022a0:	f7ff fda7 	bl	8001df2 <xmit_datablock>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <USER_SPI_write+0xc4>
					break;
				buff += 512;
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 80022b0:	60bb      	str	r3, [r7, #8]
			} while (--count);
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	3b01      	subs	r3, #1
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1ee      	bne.n	800229c <USER_SPI_write+0xa0>
 80022be:	e000      	b.n	80022c2 <USER_SPI_write+0xc6>
					break;
 80022c0:	bf00      	nop
			if (!xmit_datablock(0, 0xFD))
 80022c2:	21fd      	movs	r1, #253	@ 0xfd
 80022c4:	2000      	movs	r0, #0
 80022c6:	f7ff fd94 	bl	8001df2 <xmit_datablock>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <USER_SPI_write+0xd8>
				count = 1; /* STOP_TRAN token */
 80022d0:	2301      	movs	r3, #1
 80022d2:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 80022d4:	f7ff fd3c 	bl	8001d50 <despiselect>

	return count ? RES_ERROR : RES_OK; /* Return result */
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	bf14      	ite	ne
 80022de:	2301      	movne	r3, #1
 80022e0:	2300      	moveq	r3, #0
 80022e2:	b2db      	uxtb	r3, r3
}
 80022e4:	4618      	mov	r0, r3
 80022e6:	3710      	adds	r7, #16
 80022e8:	46bd      	mov	sp, r7
 80022ea:	bd80      	pop	{r7, pc}
 80022ec:	20000010 	.word	0x20000010
 80022f0:	20000608 	.word	0x20000608

080022f4 <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl(
	BYTE drv,  /* Physical drive number (0) */
	BYTE cmd,  /* Control command code */
	void *buff /* Pointer to the conrtol data */
)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b08c      	sub	sp, #48	@ 0x30
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	4603      	mov	r3, r0
 80022fc:	603a      	str	r2, [r7, #0]
 80022fe:	71fb      	strb	r3, [r7, #7]
 8002300:	460b      	mov	r3, r1
 8002302:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;

	if (drv)
 8002304:	79fb      	ldrb	r3, [r7, #7]
 8002306:	2b00      	cmp	r3, #0
 8002308:	d001      	beq.n	800230e <USER_SPI_ioctl+0x1a>
		return RES_PARERR; /* Check parameter */
 800230a:	2304      	movs	r3, #4
 800230c:	e15a      	b.n	80025c4 <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT)
 800230e:	4baf      	ldr	r3, [pc, #700]	@ (80025cc <USER_SPI_ioctl+0x2d8>)
 8002310:	781b      	ldrb	r3, [r3, #0]
 8002312:	b2db      	uxtb	r3, r3
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <USER_SPI_ioctl+0x2c>
		return RES_NOTRDY; /* Check if drive is ready */
 800231c:	2303      	movs	r3, #3
 800231e:	e151      	b.n	80025c4 <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

	switch (cmd)
 8002326:	79bb      	ldrb	r3, [r7, #6]
 8002328:	2b04      	cmp	r3, #4
 800232a:	f200 8136 	bhi.w	800259a <USER_SPI_ioctl+0x2a6>
 800232e:	a201      	add	r2, pc, #4	@ (adr r2, 8002334 <USER_SPI_ioctl+0x40>)
 8002330:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002334:	08002349 	.word	0x08002349
 8002338:	0800235d 	.word	0x0800235d
 800233c:	0800259b 	.word	0x0800259b
 8002340:	08002409 	.word	0x08002409
 8002344:	080024ff 	.word	0x080024ff
	{
	case CTRL_SYNC: /* Wait for end of internal write process of the drive */
		if (spiselect())
 8002348:	f7ff fd10 	bl	8001d6c <spiselect>
 800234c:	4603      	mov	r3, r0
 800234e:	2b00      	cmp	r3, #0
 8002350:	f000 8127 	beq.w	80025a2 <USER_SPI_ioctl+0x2ae>
			res = RES_OK;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 800235a:	e122      	b.n	80025a2 <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT: /* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
 800235c:	2100      	movs	r1, #0
 800235e:	2009      	movs	r0, #9
 8002360:	f7ff fd79 	bl	8001e56 <send_cmd>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	f040 811d 	bne.w	80025a6 <USER_SPI_ioctl+0x2b2>
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	2110      	movs	r1, #16
 8002372:	4618      	mov	r0, r3
 8002374:	f7ff fd14 	bl	8001da0 <rcvr_datablock>
 8002378:	4603      	mov	r3, r0
 800237a:	2b00      	cmp	r3, #0
 800237c:	f000 8113 	beq.w	80025a6 <USER_SPI_ioctl+0x2b2>
		{
			if ((csd[0] >> 6) == 1)
 8002380:	7b3b      	ldrb	r3, [r7, #12]
 8002382:	099b      	lsrs	r3, r3, #6
 8002384:	b2db      	uxtb	r3, r3
 8002386:	2b01      	cmp	r3, #1
 8002388:	d111      	bne.n	80023ae <USER_SPI_ioctl+0xba>
			{ /* SDC ver 2.00 */
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800238a:	7d7b      	ldrb	r3, [r7, #21]
 800238c:	461a      	mov	r2, r3
 800238e:	7d3b      	ldrb	r3, [r7, #20]
 8002390:	021b      	lsls	r3, r3, #8
 8002392:	4413      	add	r3, r2
 8002394:	461a      	mov	r2, r3
 8002396:	7cfb      	ldrb	r3, [r7, #19]
 8002398:	041b      	lsls	r3, r3, #16
 800239a:	f403 137c 	and.w	r3, r3, #4128768	@ 0x3f0000
 800239e:	4413      	add	r3, r2
 80023a0:	3301      	adds	r3, #1
 80023a2:	61fb      	str	r3, [r7, #28]
				*(DWORD *)buff = csize << 10;
 80023a4:	69fb      	ldr	r3, [r7, #28]
 80023a6:	029a      	lsls	r2, r3, #10
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	601a      	str	r2, [r3, #0]
 80023ac:	e028      	b.n	8002400 <USER_SPI_ioctl+0x10c>
			}
			else
			{ /* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 80023ae:	7c7b      	ldrb	r3, [r7, #17]
 80023b0:	f003 030f 	and.w	r3, r3, #15
 80023b4:	b2da      	uxtb	r2, r3
 80023b6:	7dbb      	ldrb	r3, [r7, #22]
 80023b8:	09db      	lsrs	r3, r3, #7
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	4413      	add	r3, r2
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	7d7b      	ldrb	r3, [r7, #21]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	b2db      	uxtb	r3, r3
 80023c6:	f003 0306 	and.w	r3, r3, #6
 80023ca:	b2db      	uxtb	r3, r3
 80023cc:	4413      	add	r3, r2
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	3302      	adds	r3, #2
 80023d2:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 80023d6:	7d3b      	ldrb	r3, [r7, #20]
 80023d8:	099b      	lsrs	r3, r3, #6
 80023da:	b2db      	uxtb	r3, r3
 80023dc:	461a      	mov	r2, r3
 80023de:	7cfb      	ldrb	r3, [r7, #19]
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	441a      	add	r2, r3
 80023e4:	7cbb      	ldrb	r3, [r7, #18]
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80023ec:	4413      	add	r3, r2
 80023ee:	3301      	adds	r3, #1
 80023f0:	61fb      	str	r3, [r7, #28]
				*(DWORD *)buff = csize << (n - 9);
 80023f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023f6:	3b09      	subs	r3, #9
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	409a      	lsls	r2, r3
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002406:	e0ce      	b.n	80025a6 <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE: /* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2)
 8002408:	4b71      	ldr	r3, [pc, #452]	@ (80025d0 <USER_SPI_ioctl+0x2dc>)
 800240a:	781b      	ldrb	r3, [r3, #0]
 800240c:	f003 0304 	and.w	r3, r3, #4
 8002410:	2b00      	cmp	r3, #0
 8002412:	d031      	beq.n	8002478 <USER_SPI_ioctl+0x184>
		{ /* SDC ver 2.00 */
			if (send_cmd(ACMD13, 0) == 0)
 8002414:	2100      	movs	r1, #0
 8002416:	208d      	movs	r0, #141	@ 0x8d
 8002418:	f7ff fd1d 	bl	8001e56 <send_cmd>
 800241c:	4603      	mov	r3, r0
 800241e:	2b00      	cmp	r3, #0
 8002420:	f040 80c3 	bne.w	80025aa <USER_SPI_ioctl+0x2b6>
			{ /* Read SD status */
				xchg_spi(0xFF);
 8002424:	20ff      	movs	r0, #255	@ 0xff
 8002426:	f7ff fc29 	bl	8001c7c <xchg_spi>
				if (rcvr_datablock(csd, 16))
 800242a:	f107 030c 	add.w	r3, r7, #12
 800242e:	2110      	movs	r1, #16
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fcb5 	bl	8001da0 <rcvr_datablock>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	f000 80b6 	beq.w	80025aa <USER_SPI_ioctl+0x2b6>
				{ /* Read partial block */
					for (n = 64 - 16; n; n--)
 800243e:	2330      	movs	r3, #48	@ 0x30
 8002440:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002444:	e007      	b.n	8002456 <USER_SPI_ioctl+0x162>
						xchg_spi(0xFF); /* Purge trailing data */
 8002446:	20ff      	movs	r0, #255	@ 0xff
 8002448:	f7ff fc18 	bl	8001c7c <xchg_spi>
					for (n = 64 - 16; n; n--)
 800244c:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002450:	3b01      	subs	r3, #1
 8002452:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 8002456:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1f3      	bne.n	8002446 <USER_SPI_ioctl+0x152>
					*(DWORD *)buff = 16UL << (csd[10] >> 4);
 800245e:	7dbb      	ldrb	r3, [r7, #22]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	2310      	movs	r3, #16
 8002468:	fa03 f202 	lsl.w	r2, r3, r2
 800246c:	683b      	ldr	r3, [r7, #0]
 800246e:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 8002470:	2300      	movs	r3, #0
 8002472:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
					*(DWORD *)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 8002476:	e098      	b.n	80025aa <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16))
 8002478:	2100      	movs	r1, #0
 800247a:	2009      	movs	r0, #9
 800247c:	f7ff fceb 	bl	8001e56 <send_cmd>
 8002480:	4603      	mov	r3, r0
 8002482:	2b00      	cmp	r3, #0
 8002484:	f040 8091 	bne.w	80025aa <USER_SPI_ioctl+0x2b6>
 8002488:	f107 030c 	add.w	r3, r7, #12
 800248c:	2110      	movs	r1, #16
 800248e:	4618      	mov	r0, r3
 8002490:	f7ff fc86 	bl	8001da0 <rcvr_datablock>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	f000 8087 	beq.w	80025aa <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1)
 800249c:	4b4c      	ldr	r3, [pc, #304]	@ (80025d0 <USER_SPI_ioctl+0x2dc>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d012      	beq.n	80024ce <USER_SPI_ioctl+0x1da>
					*(DWORD *)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 80024a8:	7dbb      	ldrb	r3, [r7, #22]
 80024aa:	005b      	lsls	r3, r3, #1
 80024ac:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 80024b0:	7dfa      	ldrb	r2, [r7, #23]
 80024b2:	09d2      	lsrs	r2, r2, #7
 80024b4:	b2d2      	uxtb	r2, r2
 80024b6:	4413      	add	r3, r2
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	7e7b      	ldrb	r3, [r7, #25]
 80024bc:	099b      	lsrs	r3, r3, #6
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	3b01      	subs	r3, #1
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	461a      	mov	r2, r3
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	601a      	str	r2, [r3, #0]
 80024cc:	e013      	b.n	80024f6 <USER_SPI_ioctl+0x202>
					*(DWORD *)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 80024ce:	7dbb      	ldrb	r3, [r7, #22]
 80024d0:	109b      	asrs	r3, r3, #2
 80024d2:	b29b      	uxth	r3, r3
 80024d4:	f003 031f 	and.w	r3, r3, #31
 80024d8:	3301      	adds	r3, #1
 80024da:	7dfa      	ldrb	r2, [r7, #23]
 80024dc:	00d2      	lsls	r2, r2, #3
 80024de:	f002 0218 	and.w	r2, r2, #24
 80024e2:	7df9      	ldrb	r1, [r7, #23]
 80024e4:	0949      	lsrs	r1, r1, #5
 80024e6:	b2c9      	uxtb	r1, r1
 80024e8:	440a      	add	r2, r1
 80024ea:	3201      	adds	r2, #1
 80024ec:	fb02 f303 	mul.w	r3, r2, r3
 80024f0:	461a      	mov	r2, r3
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 80024f6:	2300      	movs	r3, #0
 80024f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		break;
 80024fc:	e055      	b.n	80025aa <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM: /* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC))
 80024fe:	4b34      	ldr	r3, [pc, #208]	@ (80025d0 <USER_SPI_ioctl+0x2dc>)
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	f003 0306 	and.w	r3, r3, #6
 8002506:	2b00      	cmp	r3, #0
 8002508:	d051      	beq.n	80025ae <USER_SPI_ioctl+0x2ba>
			break; /* Check if the card is SDC */
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd))
 800250a:	f107 020c 	add.w	r2, r7, #12
 800250e:	79fb      	ldrb	r3, [r7, #7]
 8002510:	210b      	movs	r1, #11
 8002512:	4618      	mov	r0, r3
 8002514:	f7ff feee 	bl	80022f4 <USER_SPI_ioctl>
 8002518:	4603      	mov	r3, r0
 800251a:	2b00      	cmp	r3, #0
 800251c:	d149      	bne.n	80025b2 <USER_SPI_ioctl+0x2be>
			break; /* Get CSD */
		if (!(csd[0] >> 6) && !(csd[10] & 0x40))
 800251e:	7b3b      	ldrb	r3, [r7, #12]
 8002520:	099b      	lsrs	r3, r3, #6
 8002522:	b2db      	uxtb	r3, r3
 8002524:	2b00      	cmp	r3, #0
 8002526:	d104      	bne.n	8002532 <USER_SPI_ioctl+0x23e>
 8002528:	7dbb      	ldrb	r3, [r7, #22]
 800252a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800252e:	2b00      	cmp	r3, #0
 8002530:	d041      	beq.n	80025b6 <USER_SPI_ioctl+0x2c2>
			break; /* Check if sector erase can be applied to the card */
		dp = buff;
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	623b      	str	r3, [r7, #32]
		st = dp[0];
 8002536:	6a3b      	ldr	r3, [r7, #32]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	62bb      	str	r3, [r7, #40]	@ 0x28
		ed = dp[1]; /* Load sector block */
 800253c:	6a3b      	ldr	r3, [r7, #32]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
		if (!(CardType & CT_BLOCK))
 8002542:	4b23      	ldr	r3, [pc, #140]	@ (80025d0 <USER_SPI_ioctl+0x2dc>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	f003 0308 	and.w	r3, r3, #8
 800254a:	2b00      	cmp	r3, #0
 800254c:	d105      	bne.n	800255a <USER_SPI_ioctl+0x266>
		{
			st *= 512;
 800254e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002550:	025b      	lsls	r3, r3, #9
 8002552:	62bb      	str	r3, [r7, #40]	@ 0x28
			ed *= 512;
 8002554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002556:	025b      	lsls	r3, r3, #9
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000))
 800255a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800255c:	2020      	movs	r0, #32
 800255e:	f7ff fc7a 	bl	8001e56 <send_cmd>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	d128      	bne.n	80025ba <USER_SPI_ioctl+0x2c6>
 8002568:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800256a:	2021      	movs	r0, #33	@ 0x21
 800256c:	f7ff fc73 	bl	8001e56 <send_cmd>
 8002570:	4603      	mov	r3, r0
 8002572:	2b00      	cmp	r3, #0
 8002574:	d121      	bne.n	80025ba <USER_SPI_ioctl+0x2c6>
 8002576:	2100      	movs	r1, #0
 8002578:	2026      	movs	r0, #38	@ 0x26
 800257a:	f7ff fc6c 	bl	8001e56 <send_cmd>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d11a      	bne.n	80025ba <USER_SPI_ioctl+0x2c6>
 8002584:	f247 5030 	movw	r0, #30000	@ 0x7530
 8002588:	f7ff fbbf 	bl	8001d0a <wait_ready>
 800258c:	4603      	mov	r3, r0
 800258e:	2b00      	cmp	r3, #0
 8002590:	d013      	beq.n	80025ba <USER_SPI_ioctl+0x2c6>
		{				  /* Erase sector block */
			res = RES_OK; /* FatFs does not check result of this command */
 8002592:	2300      	movs	r3, #0
 8002594:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
		}
		break;
 8002598:	e00f      	b.n	80025ba <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800259a:	2304      	movs	r3, #4
 800259c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80025a0:	e00c      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
		break;
 80025a2:	bf00      	nop
 80025a4:	e00a      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
		break;
 80025a6:	bf00      	nop
 80025a8:	e008      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
		break;
 80025aa:	bf00      	nop
 80025ac:	e006      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
			break; /* Check if the card is SDC */
 80025ae:	bf00      	nop
 80025b0:	e004      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
			break; /* Get CSD */
 80025b2:	bf00      	nop
 80025b4:	e002      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
			break; /* Check if sector erase can be applied to the card */
 80025b6:	bf00      	nop
 80025b8:	e000      	b.n	80025bc <USER_SPI_ioctl+0x2c8>
		break;
 80025ba:	bf00      	nop
	}

	despiselect();
 80025bc:	f7ff fbc8 	bl	8001d50 <despiselect>

	return res;
 80025c0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025c4:	4618      	mov	r0, r3
 80025c6:	3730      	adds	r7, #48	@ 0x30
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bd80      	pop	{r7, pc}
 80025cc:	20000010 	.word	0x20000010
 80025d0:	20000608 	.word	0x20000608

080025d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025d4:	f7ff fb22 	bl	8001c1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025d8:	480b      	ldr	r0, [pc, #44]	@ (8002608 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80025da:	490c      	ldr	r1, [pc, #48]	@ (800260c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80025dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002610 <LoopFillZerobss+0x16>)
  movs r3, #0
 80025de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025e0:	e002      	b.n	80025e8 <LoopCopyDataInit>

080025e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025e6:	3304      	adds	r3, #4

080025e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025ec:	d3f9      	bcc.n	80025e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025ee:	4a09      	ldr	r2, [pc, #36]	@ (8002614 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80025f0:	4c09      	ldr	r4, [pc, #36]	@ (8002618 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025f4:	e001      	b.n	80025fa <LoopFillZerobss>

080025f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025f8:	3204      	adds	r2, #4

080025fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025fc:	d3fb      	bcc.n	80025f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80025fe:	f008 f979 	bl	800a8f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002602:	f7fd ff8d 	bl	8000520 <main>
  bx lr
 8002606:	4770      	bx	lr
  ldr r0, =_sdata
 8002608:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800260c:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8002610:	0800c76c 	.word	0x0800c76c
  ldr r2, =_sbss
 8002614:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8002618:	20002cf0 	.word	0x20002cf0

0800261c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800261c:	e7fe      	b.n	800261c <ADC1_2_IRQHandler>
	...

08002620 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002624:	4b08      	ldr	r3, [pc, #32]	@ (8002648 <HAL_Init+0x28>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_Init+0x28>)
 800262a:	f043 0310 	orr.w	r3, r3, #16
 800262e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002630:	2003      	movs	r0, #3
 8002632:	f000 f8d1 	bl	80027d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002636:	200f      	movs	r0, #15
 8002638:	f7ff fa4e 	bl	8001ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800263c:	f7ff f93e 	bl	80018bc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002640:	2300      	movs	r3, #0
}
 8002642:	4618      	mov	r0, r3
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	40022000 	.word	0x40022000

0800264c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002650:	4b05      	ldr	r3, [pc, #20]	@ (8002668 <HAL_IncTick+0x1c>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	461a      	mov	r2, r3
 8002656:	4b05      	ldr	r3, [pc, #20]	@ (800266c <HAL_IncTick+0x20>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4413      	add	r3, r2
 800265c:	4a03      	ldr	r2, [pc, #12]	@ (800266c <HAL_IncTick+0x20>)
 800265e:	6013      	str	r3, [r2, #0]
}
 8002660:	bf00      	nop
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr
 8002668:	20000018 	.word	0x20000018
 800266c:	20000614 	.word	0x20000614

08002670 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002670:	b480      	push	{r7}
 8002672:	af00      	add	r7, sp, #0
  return uwTick;
 8002674:	4b02      	ldr	r3, [pc, #8]	@ (8002680 <HAL_GetTick+0x10>)
 8002676:	681b      	ldr	r3, [r3, #0]
}
 8002678:	4618      	mov	r0, r3
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr
 8002680:	20000614 	.word	0x20000614

08002684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002684:	b480      	push	{r7}
 8002686:	b085      	sub	sp, #20
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	f003 0307 	and.w	r3, r3, #7
 8002692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800269a:	68ba      	ldr	r2, [r7, #8]
 800269c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80026a0:	4013      	ands	r3, r2
 80026a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80026ac:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80026b0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80026b6:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <__NVIC_SetPriorityGrouping+0x44>)
 80026b8:	68bb      	ldr	r3, [r7, #8]
 80026ba:	60d3      	str	r3, [r2, #12]
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bc80      	pop	{r7}
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	e000ed00 	.word	0xe000ed00

080026cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80026d0:	4b04      	ldr	r3, [pc, #16]	@ (80026e4 <__NVIC_GetPriorityGrouping+0x18>)
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	0a1b      	lsrs	r3, r3, #8
 80026d6:	f003 0307 	and.w	r3, r3, #7
}
 80026da:	4618      	mov	r0, r3
 80026dc:	46bd      	mov	sp, r7
 80026de:	bc80      	pop	{r7}
 80026e0:	4770      	bx	lr
 80026e2:	bf00      	nop
 80026e4:	e000ed00 	.word	0xe000ed00

080026e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026e8:	b480      	push	{r7}
 80026ea:	b083      	sub	sp, #12
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	4603      	mov	r3, r0
 80026f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80026f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	db0b      	blt.n	8002712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80026fa:	79fb      	ldrb	r3, [r7, #7]
 80026fc:	f003 021f 	and.w	r2, r3, #31
 8002700:	4906      	ldr	r1, [pc, #24]	@ (800271c <__NVIC_EnableIRQ+0x34>)
 8002702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002706:	095b      	lsrs	r3, r3, #5
 8002708:	2001      	movs	r0, #1
 800270a:	fa00 f202 	lsl.w	r2, r0, r2
 800270e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002712:	bf00      	nop
 8002714:	370c      	adds	r7, #12
 8002716:	46bd      	mov	sp, r7
 8002718:	bc80      	pop	{r7}
 800271a:	4770      	bx	lr
 800271c:	e000e100 	.word	0xe000e100

08002720 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002720:	b480      	push	{r7}
 8002722:	b083      	sub	sp, #12
 8002724:	af00      	add	r7, sp, #0
 8002726:	4603      	mov	r3, r0
 8002728:	6039      	str	r1, [r7, #0]
 800272a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800272c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	db0a      	blt.n	800274a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	b2da      	uxtb	r2, r3
 8002738:	490c      	ldr	r1, [pc, #48]	@ (800276c <__NVIC_SetPriority+0x4c>)
 800273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800273e:	0112      	lsls	r2, r2, #4
 8002740:	b2d2      	uxtb	r2, r2
 8002742:	440b      	add	r3, r1
 8002744:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002748:	e00a      	b.n	8002760 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	b2da      	uxtb	r2, r3
 800274e:	4908      	ldr	r1, [pc, #32]	@ (8002770 <__NVIC_SetPriority+0x50>)
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	f003 030f 	and.w	r3, r3, #15
 8002756:	3b04      	subs	r3, #4
 8002758:	0112      	lsls	r2, r2, #4
 800275a:	b2d2      	uxtb	r2, r2
 800275c:	440b      	add	r3, r1
 800275e:	761a      	strb	r2, [r3, #24]
}
 8002760:	bf00      	nop
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	e000e100 	.word	0xe000e100
 8002770:	e000ed00 	.word	0xe000ed00

08002774 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002774:	b480      	push	{r7}
 8002776:	b089      	sub	sp, #36	@ 0x24
 8002778:	af00      	add	r7, sp, #0
 800277a:	60f8      	str	r0, [r7, #12]
 800277c:	60b9      	str	r1, [r7, #8]
 800277e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	f003 0307 	and.w	r3, r3, #7
 8002786:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002788:	69fb      	ldr	r3, [r7, #28]
 800278a:	f1c3 0307 	rsb	r3, r3, #7
 800278e:	2b04      	cmp	r3, #4
 8002790:	bf28      	it	cs
 8002792:	2304      	movcs	r3, #4
 8002794:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002796:	69fb      	ldr	r3, [r7, #28]
 8002798:	3304      	adds	r3, #4
 800279a:	2b06      	cmp	r3, #6
 800279c:	d902      	bls.n	80027a4 <NVIC_EncodePriority+0x30>
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	3b03      	subs	r3, #3
 80027a2:	e000      	b.n	80027a6 <NVIC_EncodePriority+0x32>
 80027a4:	2300      	movs	r3, #0
 80027a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027a8:	f04f 32ff 	mov.w	r2, #4294967295
 80027ac:	69bb      	ldr	r3, [r7, #24]
 80027ae:	fa02 f303 	lsl.w	r3, r2, r3
 80027b2:	43da      	mvns	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	401a      	ands	r2, r3
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80027bc:	f04f 31ff 	mov.w	r1, #4294967295
 80027c0:	697b      	ldr	r3, [r7, #20]
 80027c2:	fa01 f303 	lsl.w	r3, r1, r3
 80027c6:	43d9      	mvns	r1, r3
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80027cc:	4313      	orrs	r3, r2
         );
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3724      	adds	r7, #36	@ 0x24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bc80      	pop	{r7}
 80027d6:	4770      	bx	lr

080027d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff ff4f 	bl	8002684 <__NVIC_SetPriorityGrouping>
}
 80027e6:	bf00      	nop
 80027e8:	3708      	adds	r7, #8
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}

080027ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b086      	sub	sp, #24
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	4603      	mov	r3, r0
 80027f6:	60b9      	str	r1, [r7, #8]
 80027f8:	607a      	str	r2, [r7, #4]
 80027fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80027fc:	2300      	movs	r3, #0
 80027fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002800:	f7ff ff64 	bl	80026cc <__NVIC_GetPriorityGrouping>
 8002804:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002806:	687a      	ldr	r2, [r7, #4]
 8002808:	68b9      	ldr	r1, [r7, #8]
 800280a:	6978      	ldr	r0, [r7, #20]
 800280c:	f7ff ffb2 	bl	8002774 <NVIC_EncodePriority>
 8002810:	4602      	mov	r2, r0
 8002812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002816:	4611      	mov	r1, r2
 8002818:	4618      	mov	r0, r3
 800281a:	f7ff ff81 	bl	8002720 <__NVIC_SetPriority>
}
 800281e:	bf00      	nop
 8002820:	3718      	adds	r7, #24
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}

08002826 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002826:	b580      	push	{r7, lr}
 8002828:	b082      	sub	sp, #8
 800282a:	af00      	add	r7, sp, #0
 800282c:	4603      	mov	r3, r0
 800282e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002830:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff57 	bl	80026e8 <__NVIC_EnableIRQ>
}
 800283a:	bf00      	nop
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
	...

08002844 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002844:	b480      	push	{r7}
 8002846:	b08b      	sub	sp, #44	@ 0x2c
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800284e:	2300      	movs	r3, #0
 8002850:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002852:	2300      	movs	r3, #0
 8002854:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002856:	e169      	b.n	8002b2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002858:	2201      	movs	r2, #1
 800285a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800285c:	fa02 f303 	lsl.w	r3, r2, r3
 8002860:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	69fa      	ldr	r2, [r7, #28]
 8002868:	4013      	ands	r3, r2
 800286a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800286c:	69ba      	ldr	r2, [r7, #24]
 800286e:	69fb      	ldr	r3, [r7, #28]
 8002870:	429a      	cmp	r2, r3
 8002872:	f040 8158 	bne.w	8002b26 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	4a9a      	ldr	r2, [pc, #616]	@ (8002ae4 <HAL_GPIO_Init+0x2a0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d05e      	beq.n	800293e <HAL_GPIO_Init+0xfa>
 8002880:	4a98      	ldr	r2, [pc, #608]	@ (8002ae4 <HAL_GPIO_Init+0x2a0>)
 8002882:	4293      	cmp	r3, r2
 8002884:	d875      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 8002886:	4a98      	ldr	r2, [pc, #608]	@ (8002ae8 <HAL_GPIO_Init+0x2a4>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d058      	beq.n	800293e <HAL_GPIO_Init+0xfa>
 800288c:	4a96      	ldr	r2, [pc, #600]	@ (8002ae8 <HAL_GPIO_Init+0x2a4>)
 800288e:	4293      	cmp	r3, r2
 8002890:	d86f      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 8002892:	4a96      	ldr	r2, [pc, #600]	@ (8002aec <HAL_GPIO_Init+0x2a8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d052      	beq.n	800293e <HAL_GPIO_Init+0xfa>
 8002898:	4a94      	ldr	r2, [pc, #592]	@ (8002aec <HAL_GPIO_Init+0x2a8>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d869      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 800289e:	4a94      	ldr	r2, [pc, #592]	@ (8002af0 <HAL_GPIO_Init+0x2ac>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d04c      	beq.n	800293e <HAL_GPIO_Init+0xfa>
 80028a4:	4a92      	ldr	r2, [pc, #584]	@ (8002af0 <HAL_GPIO_Init+0x2ac>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d863      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 80028aa:	4a92      	ldr	r2, [pc, #584]	@ (8002af4 <HAL_GPIO_Init+0x2b0>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d046      	beq.n	800293e <HAL_GPIO_Init+0xfa>
 80028b0:	4a90      	ldr	r2, [pc, #576]	@ (8002af4 <HAL_GPIO_Init+0x2b0>)
 80028b2:	4293      	cmp	r3, r2
 80028b4:	d85d      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 80028b6:	2b12      	cmp	r3, #18
 80028b8:	d82a      	bhi.n	8002910 <HAL_GPIO_Init+0xcc>
 80028ba:	2b12      	cmp	r3, #18
 80028bc:	d859      	bhi.n	8002972 <HAL_GPIO_Init+0x12e>
 80028be:	a201      	add	r2, pc, #4	@ (adr r2, 80028c4 <HAL_GPIO_Init+0x80>)
 80028c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028c4:	0800293f 	.word	0x0800293f
 80028c8:	08002919 	.word	0x08002919
 80028cc:	0800292b 	.word	0x0800292b
 80028d0:	0800296d 	.word	0x0800296d
 80028d4:	08002973 	.word	0x08002973
 80028d8:	08002973 	.word	0x08002973
 80028dc:	08002973 	.word	0x08002973
 80028e0:	08002973 	.word	0x08002973
 80028e4:	08002973 	.word	0x08002973
 80028e8:	08002973 	.word	0x08002973
 80028ec:	08002973 	.word	0x08002973
 80028f0:	08002973 	.word	0x08002973
 80028f4:	08002973 	.word	0x08002973
 80028f8:	08002973 	.word	0x08002973
 80028fc:	08002973 	.word	0x08002973
 8002900:	08002973 	.word	0x08002973
 8002904:	08002973 	.word	0x08002973
 8002908:	08002921 	.word	0x08002921
 800290c:	08002935 	.word	0x08002935
 8002910:	4a79      	ldr	r2, [pc, #484]	@ (8002af8 <HAL_GPIO_Init+0x2b4>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d013      	beq.n	800293e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002916:	e02c      	b.n	8002972 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	68db      	ldr	r3, [r3, #12]
 800291c:	623b      	str	r3, [r7, #32]
          break;
 800291e:	e029      	b.n	8002974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	3304      	adds	r3, #4
 8002926:	623b      	str	r3, [r7, #32]
          break;
 8002928:	e024      	b.n	8002974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	3308      	adds	r3, #8
 8002930:	623b      	str	r3, [r7, #32]
          break;
 8002932:	e01f      	b.n	8002974 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002934:	683b      	ldr	r3, [r7, #0]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	330c      	adds	r3, #12
 800293a:	623b      	str	r3, [r7, #32]
          break;
 800293c:	e01a      	b.n	8002974 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	689b      	ldr	r3, [r3, #8]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d102      	bne.n	800294c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002946:	2304      	movs	r3, #4
 8002948:	623b      	str	r3, [r7, #32]
          break;
 800294a:	e013      	b.n	8002974 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	689b      	ldr	r3, [r3, #8]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d105      	bne.n	8002960 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002954:	2308      	movs	r3, #8
 8002956:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	69fa      	ldr	r2, [r7, #28]
 800295c:	611a      	str	r2, [r3, #16]
          break;
 800295e:	e009      	b.n	8002974 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002960:	2308      	movs	r3, #8
 8002962:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	615a      	str	r2, [r3, #20]
          break;
 800296a:	e003      	b.n	8002974 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800296c:	2300      	movs	r3, #0
 800296e:	623b      	str	r3, [r7, #32]
          break;
 8002970:	e000      	b.n	8002974 <HAL_GPIO_Init+0x130>
          break;
 8002972:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	2bff      	cmp	r3, #255	@ 0xff
 8002978:	d801      	bhi.n	800297e <HAL_GPIO_Init+0x13a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	e001      	b.n	8002982 <HAL_GPIO_Init+0x13e>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	3304      	adds	r3, #4
 8002982:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	2bff      	cmp	r3, #255	@ 0xff
 8002988:	d802      	bhi.n	8002990 <HAL_GPIO_Init+0x14c>
 800298a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	e002      	b.n	8002996 <HAL_GPIO_Init+0x152>
 8002990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002992:	3b08      	subs	r3, #8
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	210f      	movs	r1, #15
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	fa01 f303 	lsl.w	r3, r1, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	401a      	ands	r2, r3
 80029a8:	6a39      	ldr	r1, [r7, #32]
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	fa01 f303 	lsl.w	r3, r1, r3
 80029b0:	431a      	orrs	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029be:	2b00      	cmp	r3, #0
 80029c0:	f000 80b1 	beq.w	8002b26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80029c4:	4b4d      	ldr	r3, [pc, #308]	@ (8002afc <HAL_GPIO_Init+0x2b8>)
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	4a4c      	ldr	r2, [pc, #304]	@ (8002afc <HAL_GPIO_Init+0x2b8>)
 80029ca:	f043 0301 	orr.w	r3, r3, #1
 80029ce:	6193      	str	r3, [r2, #24]
 80029d0:	4b4a      	ldr	r3, [pc, #296]	@ (8002afc <HAL_GPIO_Init+0x2b8>)
 80029d2:	699b      	ldr	r3, [r3, #24]
 80029d4:	f003 0301 	and.w	r3, r3, #1
 80029d8:	60bb      	str	r3, [r7, #8]
 80029da:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80029dc:	4a48      	ldr	r2, [pc, #288]	@ (8002b00 <HAL_GPIO_Init+0x2bc>)
 80029de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e0:	089b      	lsrs	r3, r3, #2
 80029e2:	3302      	adds	r3, #2
 80029e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029e8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80029ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ec:	f003 0303 	and.w	r3, r3, #3
 80029f0:	009b      	lsls	r3, r3, #2
 80029f2:	220f      	movs	r2, #15
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	43db      	mvns	r3, r3
 80029fa:	68fa      	ldr	r2, [r7, #12]
 80029fc:	4013      	ands	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a40      	ldr	r2, [pc, #256]	@ (8002b04 <HAL_GPIO_Init+0x2c0>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d013      	beq.n	8002a30 <HAL_GPIO_Init+0x1ec>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b08 <HAL_GPIO_Init+0x2c4>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d00d      	beq.n	8002a2c <HAL_GPIO_Init+0x1e8>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	4a3e      	ldr	r2, [pc, #248]	@ (8002b0c <HAL_GPIO_Init+0x2c8>)
 8002a14:	4293      	cmp	r3, r2
 8002a16:	d007      	beq.n	8002a28 <HAL_GPIO_Init+0x1e4>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b10 <HAL_GPIO_Init+0x2cc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d101      	bne.n	8002a24 <HAL_GPIO_Init+0x1e0>
 8002a20:	2303      	movs	r3, #3
 8002a22:	e006      	b.n	8002a32 <HAL_GPIO_Init+0x1ee>
 8002a24:	2304      	movs	r3, #4
 8002a26:	e004      	b.n	8002a32 <HAL_GPIO_Init+0x1ee>
 8002a28:	2302      	movs	r3, #2
 8002a2a:	e002      	b.n	8002a32 <HAL_GPIO_Init+0x1ee>
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e000      	b.n	8002a32 <HAL_GPIO_Init+0x1ee>
 8002a30:	2300      	movs	r3, #0
 8002a32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a34:	f002 0203 	and.w	r2, r2, #3
 8002a38:	0092      	lsls	r2, r2, #2
 8002a3a:	4093      	lsls	r3, r2
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a42:	492f      	ldr	r1, [pc, #188]	@ (8002b00 <HAL_GPIO_Init+0x2bc>)
 8002a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a46:	089b      	lsrs	r3, r3, #2
 8002a48:	3302      	adds	r3, #2
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d006      	beq.n	8002a6a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002a5c:	4b2d      	ldr	r3, [pc, #180]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a5e:	689a      	ldr	r2, [r3, #8]
 8002a60:	492c      	ldr	r1, [pc, #176]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4313      	orrs	r3, r2
 8002a66:	608b      	str	r3, [r1, #8]
 8002a68:	e006      	b.n	8002a78 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002a6a:	4b2a      	ldr	r3, [pc, #168]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a6c:	689a      	ldr	r2, [r3, #8]
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	43db      	mvns	r3, r3
 8002a72:	4928      	ldr	r1, [pc, #160]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a74:	4013      	ands	r3, r2
 8002a76:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d006      	beq.n	8002a92 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002a84:	4b23      	ldr	r3, [pc, #140]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a86:	68da      	ldr	r2, [r3, #12]
 8002a88:	4922      	ldr	r1, [pc, #136]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a8a:	69bb      	ldr	r3, [r7, #24]
 8002a8c:	4313      	orrs	r3, r2
 8002a8e:	60cb      	str	r3, [r1, #12]
 8002a90:	e006      	b.n	8002aa0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002a92:	4b20      	ldr	r3, [pc, #128]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	43db      	mvns	r3, r3
 8002a9a:	491e      	ldr	r1, [pc, #120]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002a9c:	4013      	ands	r3, r2
 8002a9e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002aac:	4b19      	ldr	r3, [pc, #100]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002aae:	685a      	ldr	r2, [r3, #4]
 8002ab0:	4918      	ldr	r1, [pc, #96]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	604b      	str	r3, [r1, #4]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002aba:	4b16      	ldr	r3, [pc, #88]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4914      	ldr	r1, [pc, #80]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d021      	beq.n	8002b18 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	490e      	ldr	r1, [pc, #56]	@ (8002b14 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	600b      	str	r3, [r1, #0]
 8002ae0:	e021      	b.n	8002b26 <HAL_GPIO_Init+0x2e2>
 8002ae2:	bf00      	nop
 8002ae4:	10320000 	.word	0x10320000
 8002ae8:	10310000 	.word	0x10310000
 8002aec:	10220000 	.word	0x10220000
 8002af0:	10210000 	.word	0x10210000
 8002af4:	10120000 	.word	0x10120000
 8002af8:	10110000 	.word	0x10110000
 8002afc:	40021000 	.word	0x40021000
 8002b00:	40010000 	.word	0x40010000
 8002b04:	40010800 	.word	0x40010800
 8002b08:	40010c00 	.word	0x40010c00
 8002b0c:	40011000 	.word	0x40011000
 8002b10:	40011400 	.word	0x40011400
 8002b14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b18:	4b0b      	ldr	r3, [pc, #44]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	43db      	mvns	r3, r3
 8002b20:	4909      	ldr	r1, [pc, #36]	@ (8002b48 <HAL_GPIO_Init+0x304>)
 8002b22:	4013      	ands	r3, r2
 8002b24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b28:	3301      	adds	r3, #1
 8002b2a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	681a      	ldr	r2, [r3, #0]
 8002b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b32:	fa22 f303 	lsr.w	r3, r2, r3
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	f47f ae8e 	bne.w	8002858 <HAL_GPIO_Init+0x14>
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	bf00      	nop
 8002b40:	372c      	adds	r7, #44	@ 0x2c
 8002b42:	46bd      	mov	sp, r7
 8002b44:	bc80      	pop	{r7}
 8002b46:	4770      	bx	lr
 8002b48:	40010400 	.word	0x40010400

08002b4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	689a      	ldr	r2, [r3, #8]
 8002b5c:	887b      	ldrh	r3, [r7, #2]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d002      	beq.n	8002b6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002b64:	2301      	movs	r3, #1
 8002b66:	73fb      	strb	r3, [r7, #15]
 8002b68:	e001      	b.n	8002b6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002b6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b70:	4618      	mov	r0, r3
 8002b72:	3714      	adds	r7, #20
 8002b74:	46bd      	mov	sp, r7
 8002b76:	bc80      	pop	{r7}
 8002b78:	4770      	bx	lr

08002b7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	b083      	sub	sp, #12
 8002b7e:	af00      	add	r7, sp, #0
 8002b80:	6078      	str	r0, [r7, #4]
 8002b82:	460b      	mov	r3, r1
 8002b84:	807b      	strh	r3, [r7, #2]
 8002b86:	4613      	mov	r3, r2
 8002b88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002b8a:	787b      	ldrb	r3, [r7, #1]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002b90:	887a      	ldrh	r2, [r7, #2]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002b96:	e003      	b.n	8002ba0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002b98:	887b      	ldrh	r3, [r7, #2]
 8002b9a:	041a      	lsls	r2, r3, #16
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	611a      	str	r2, [r3, #16]
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr

08002baa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b085      	sub	sp, #20
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
 8002bb2:	460b      	mov	r3, r1
 8002bb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bbc:	887a      	ldrh	r2, [r7, #2]
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	4013      	ands	r3, r2
 8002bc2:	041a      	lsls	r2, r3, #16
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	43d9      	mvns	r1, r3
 8002bc8:	887b      	ldrh	r3, [r7, #2]
 8002bca:	400b      	ands	r3, r1
 8002bcc:	431a      	orrs	r2, r3
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	611a      	str	r2, [r3, #16]
}
 8002bd2:	bf00      	nop
 8002bd4:	3714      	adds	r7, #20
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	bc80      	pop	{r7}
 8002bda:	4770      	bx	lr

08002bdc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002bdc:	b580      	push	{r7, lr}
 8002bde:	b084      	sub	sp, #16
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d101      	bne.n	8002bee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e12b      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002bf4:	b2db      	uxtb	r3, r3
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d106      	bne.n	8002c08 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f7fe fe92 	bl	800192c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2224      	movs	r2, #36	@ 0x24
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f022 0201 	bic.w	r2, r2, #1
 8002c1e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002c2e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002c3e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002c40:	f001 f960 	bl	8003f04 <HAL_RCC_GetPCLK1Freq>
 8002c44:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	4a81      	ldr	r2, [pc, #516]	@ (8002e50 <HAL_I2C_Init+0x274>)
 8002c4c:	4293      	cmp	r3, r2
 8002c4e:	d807      	bhi.n	8002c60 <HAL_I2C_Init+0x84>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	4a80      	ldr	r2, [pc, #512]	@ (8002e54 <HAL_I2C_Init+0x278>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	bf94      	ite	ls
 8002c58:	2301      	movls	r3, #1
 8002c5a:	2300      	movhi	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	e006      	b.n	8002c6e <HAL_I2C_Init+0x92>
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	4a7d      	ldr	r2, [pc, #500]	@ (8002e58 <HAL_I2C_Init+0x27c>)
 8002c64:	4293      	cmp	r3, r2
 8002c66:	bf94      	ite	ls
 8002c68:	2301      	movls	r3, #1
 8002c6a:	2300      	movhi	r3, #0
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002c72:	2301      	movs	r3, #1
 8002c74:	e0e7      	b.n	8002e46 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	4a78      	ldr	r2, [pc, #480]	@ (8002e5c <HAL_I2C_Init+0x280>)
 8002c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c7e:	0c9b      	lsrs	r3, r3, #18
 8002c80:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	68ba      	ldr	r2, [r7, #8]
 8002c92:	430a      	orrs	r2, r1
 8002c94:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	6a1b      	ldr	r3, [r3, #32]
 8002c9c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	4a6a      	ldr	r2, [pc, #424]	@ (8002e50 <HAL_I2C_Init+0x274>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d802      	bhi.n	8002cb0 <HAL_I2C_Init+0xd4>
 8002caa:	68bb      	ldr	r3, [r7, #8]
 8002cac:	3301      	adds	r3, #1
 8002cae:	e009      	b.n	8002cc4 <HAL_I2C_Init+0xe8>
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002cb6:	fb02 f303 	mul.w	r3, r2, r3
 8002cba:	4a69      	ldr	r2, [pc, #420]	@ (8002e60 <HAL_I2C_Init+0x284>)
 8002cbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002cc0:	099b      	lsrs	r3, r3, #6
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6812      	ldr	r2, [r2, #0]
 8002cc8:	430b      	orrs	r3, r1
 8002cca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	69db      	ldr	r3, [r3, #28]
 8002cd2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8002cd6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	495c      	ldr	r1, [pc, #368]	@ (8002e50 <HAL_I2C_Init+0x274>)
 8002ce0:	428b      	cmp	r3, r1
 8002ce2:	d819      	bhi.n	8002d18 <HAL_I2C_Init+0x13c>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	1e59      	subs	r1, r3, #1
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cf2:	1c59      	adds	r1, r3, #1
 8002cf4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002cf8:	400b      	ands	r3, r1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <HAL_I2C_Init+0x138>
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	1e59      	subs	r1, r3, #1
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fbb1 f3f3 	udiv	r3, r1, r3
 8002d0c:	3301      	adds	r3, #1
 8002d0e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d12:	e051      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d14:	2304      	movs	r3, #4
 8002d16:	e04f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d111      	bne.n	8002d44 <HAL_I2C_Init+0x168>
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	1e58      	subs	r0, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6859      	ldr	r1, [r3, #4]
 8002d28:	460b      	mov	r3, r1
 8002d2a:	005b      	lsls	r3, r3, #1
 8002d2c:	440b      	add	r3, r1
 8002d2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d32:	3301      	adds	r3, #1
 8002d34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	bf0c      	ite	eq
 8002d3c:	2301      	moveq	r3, #1
 8002d3e:	2300      	movne	r3, #0
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	e012      	b.n	8002d6a <HAL_I2C_Init+0x18e>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	1e58      	subs	r0, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6859      	ldr	r1, [r3, #4]
 8002d4c:	460b      	mov	r3, r1
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	0099      	lsls	r1, r3, #2
 8002d54:	440b      	add	r3, r1
 8002d56:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	bf0c      	ite	eq
 8002d64:	2301      	moveq	r3, #1
 8002d66:	2300      	movne	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d001      	beq.n	8002d72 <HAL_I2C_Init+0x196>
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e022      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d10e      	bne.n	8002d98 <HAL_I2C_Init+0x1bc>
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	1e58      	subs	r0, r3, #1
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6859      	ldr	r1, [r3, #4]
 8002d82:	460b      	mov	r3, r1
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	440b      	add	r3, r1
 8002d88:	fbb0 f3f3 	udiv	r3, r0, r3
 8002d8c:	3301      	adds	r3, #1
 8002d8e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d92:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002d96:	e00f      	b.n	8002db8 <HAL_I2C_Init+0x1dc>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	1e58      	subs	r0, r3, #1
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6859      	ldr	r1, [r3, #4]
 8002da0:	460b      	mov	r3, r1
 8002da2:	009b      	lsls	r3, r3, #2
 8002da4:	440b      	add	r3, r1
 8002da6:	0099      	lsls	r1, r3, #2
 8002da8:	440b      	add	r3, r1
 8002daa:	fbb0 f3f3 	udiv	r3, r0, r3
 8002dae:	3301      	adds	r3, #1
 8002db0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002db4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002db8:	6879      	ldr	r1, [r7, #4]
 8002dba:	6809      	ldr	r1, [r1, #0]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	69da      	ldr	r2, [r3, #28]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6a1b      	ldr	r3, [r3, #32]
 8002dd2:	431a      	orrs	r2, r3
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	430a      	orrs	r2, r1
 8002dda:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8002de6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8002dea:	687a      	ldr	r2, [r7, #4]
 8002dec:	6911      	ldr	r1, [r2, #16]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	68d2      	ldr	r2, [r2, #12]
 8002df2:	4311      	orrs	r1, r2
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	6812      	ldr	r2, [r2, #0]
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	695a      	ldr	r2, [r3, #20]
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	699b      	ldr	r3, [r3, #24]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	430a      	orrs	r2, r1
 8002e16:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0201 	orr.w	r2, r2, #1
 8002e26:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	2220      	movs	r2, #32
 8002e32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2200      	movs	r2, #0
 8002e40:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3710      	adds	r7, #16
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}
 8002e4e:	bf00      	nop
 8002e50:	000186a0 	.word	0x000186a0
 8002e54:	001e847f 	.word	0x001e847f
 8002e58:	003d08ff 	.word	0x003d08ff
 8002e5c:	431bde83 	.word	0x431bde83
 8002e60:	10624dd3 	.word	0x10624dd3

08002e64 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b088      	sub	sp, #32
 8002e68:	af02      	add	r7, sp, #8
 8002e6a:	60f8      	str	r0, [r7, #12]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	461a      	mov	r2, r3
 8002e70:	460b      	mov	r3, r1
 8002e72:	817b      	strh	r3, [r7, #10]
 8002e74:	4613      	mov	r3, r2
 8002e76:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002e78:	f7ff fbfa 	bl	8002670 <HAL_GetTick>
 8002e7c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e84:	b2db      	uxtb	r3, r3
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	f040 80e0 	bne.w	800304c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	9300      	str	r3, [sp, #0]
 8002e90:	2319      	movs	r3, #25
 8002e92:	2201      	movs	r2, #1
 8002e94:	4970      	ldr	r1, [pc, #448]	@ (8003058 <HAL_I2C_Master_Transmit+0x1f4>)
 8002e96:	68f8      	ldr	r0, [r7, #12]
 8002e98:	f000 fa92 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d001      	beq.n	8002ea6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002ea2:	2302      	movs	r3, #2
 8002ea4:	e0d3      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_I2C_Master_Transmit+0x50>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e0cc      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d007      	beq.n	8002eda <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	681a      	ldr	r2, [r3, #0]
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f042 0201 	orr.w	r2, r2, #1
 8002ed8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	681a      	ldr	r2, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002ee8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2221      	movs	r2, #33	@ 0x21
 8002eee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2210      	movs	r2, #16
 8002ef6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2200      	movs	r2, #0
 8002efe:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	893a      	ldrh	r2, [r7, #8]
 8002f0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f10:	b29a      	uxth	r2, r3
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	4a50      	ldr	r2, [pc, #320]	@ (800305c <HAL_I2C_Master_Transmit+0x1f8>)
 8002f1a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002f1c:	8979      	ldrh	r1, [r7, #10]
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	6a3a      	ldr	r2, [r7, #32]
 8002f22:	68f8      	ldr	r0, [r7, #12]
 8002f24:	f000 f9ca 	bl	80032bc <I2C_MasterRequestWrite>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002f2e:	2301      	movs	r3, #1
 8002f30:	e08d      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	613b      	str	r3, [r7, #16]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	699b      	ldr	r3, [r3, #24]
 8002f44:	613b      	str	r3, [r7, #16]
 8002f46:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002f48:	e066      	b.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f4a:	697a      	ldr	r2, [r7, #20]
 8002f4c:	6a39      	ldr	r1, [r7, #32]
 8002f4e:	68f8      	ldr	r0, [r7, #12]
 8002f50:	f000 fb50 	bl	80035f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002f54:	4603      	mov	r3, r0
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d00d      	beq.n	8002f76 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	d107      	bne.n	8002f72 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f70:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e06b      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f7a:	781a      	ldrb	r2, [r3, #0]
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f86:	1c5a      	adds	r2, r3, #1
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002f9e:	3b01      	subs	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	695b      	ldr	r3, [r3, #20]
 8002fac:	f003 0304 	and.w	r3, r3, #4
 8002fb0:	2b04      	cmp	r3, #4
 8002fb2:	d11b      	bne.n	8002fec <HAL_I2C_Master_Transmit+0x188>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fc0:	781a      	ldrb	r2, [r3, #0]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fcc:	1c5a      	adds	r2, r3, #1
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	b29a      	uxth	r2, r3
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fec:	697a      	ldr	r2, [r7, #20]
 8002fee:	6a39      	ldr	r1, [r7, #32]
 8002ff0:	68f8      	ldr	r0, [r7, #12]
 8002ff2:	f000 fb47 	bl	8003684 <I2C_WaitOnBTFFlagUntilTimeout>
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d00d      	beq.n	8003018 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003000:	2b04      	cmp	r3, #4
 8003002:	d107      	bne.n	8003014 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003012:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e01a      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800301c:	2b00      	cmp	r3, #0
 800301e:	d194      	bne.n	8002f4a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	681a      	ldr	r2, [r3, #0]
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800302e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2220      	movs	r2, #32
 8003034:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003048:	2300      	movs	r3, #0
 800304a:	e000      	b.n	800304e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800304c:	2302      	movs	r3, #2
  }
}
 800304e:	4618      	mov	r0, r3
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}
 8003056:	bf00      	nop
 8003058:	00100002 	.word	0x00100002
 800305c:	ffff0000 	.word	0xffff0000

08003060 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b08a      	sub	sp, #40	@ 0x28
 8003064:	af02      	add	r7, sp, #8
 8003066:	60f8      	str	r0, [r7, #12]
 8003068:	607a      	str	r2, [r7, #4]
 800306a:	603b      	str	r3, [r7, #0]
 800306c:	460b      	mov	r3, r1
 800306e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003070:	f7ff fafe 	bl	8002670 <HAL_GetTick>
 8003074:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b20      	cmp	r3, #32
 8003084:	f040 8111 	bne.w	80032aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	2319      	movs	r3, #25
 800308e:	2201      	movs	r2, #1
 8003090:	4988      	ldr	r1, [pc, #544]	@ (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 f994 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800309e:	2302      	movs	r3, #2
 80030a0:	e104      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d101      	bne.n	80030b0 <HAL_I2C_IsDeviceReady+0x50>
 80030ac:	2302      	movs	r3, #2
 80030ae:	e0fd      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b01      	cmp	r3, #1
 80030c4:	d007      	beq.n	80030d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f042 0201 	orr.w	r2, r2, #1
 80030d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	681a      	ldr	r2, [r3, #0]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80030e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	2224      	movs	r2, #36	@ 0x24
 80030ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	2200      	movs	r2, #0
 80030f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	4a70      	ldr	r2, [pc, #448]	@ (80032b8 <HAL_I2C_IsDeviceReady+0x258>)
 80030f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003108:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	9300      	str	r3, [sp, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	2200      	movs	r2, #0
 8003112:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003116:	68f8      	ldr	r0, [r7, #12]
 8003118:	f000 f952 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	d00d      	beq.n	800313e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800312c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003130:	d103      	bne.n	800313a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003138:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800313a:	2303      	movs	r3, #3
 800313c:	e0b6      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800313e:	897b      	ldrh	r3, [r7, #10]
 8003140:	b2db      	uxtb	r3, r3
 8003142:	461a      	mov	r2, r3
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800314c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800314e:	f7ff fa8f 	bl	8002670 <HAL_GetTick>
 8003152:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	695b      	ldr	r3, [r3, #20]
 800315a:	f003 0302 	and.w	r3, r3, #2
 800315e:	2b02      	cmp	r3, #2
 8003160:	bf0c      	ite	eq
 8003162:	2301      	moveq	r3, #1
 8003164:	2300      	movne	r3, #0
 8003166:	b2db      	uxtb	r3, r3
 8003168:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	695b      	ldr	r3, [r3, #20]
 8003170:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003174:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003178:	bf0c      	ite	eq
 800317a:	2301      	moveq	r3, #1
 800317c:	2300      	movne	r3, #0
 800317e:	b2db      	uxtb	r3, r3
 8003180:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003182:	e025      	b.n	80031d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003184:	f7ff fa74 	bl	8002670 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	69fb      	ldr	r3, [r7, #28]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d302      	bcc.n	800319a <HAL_I2C_IsDeviceReady+0x13a>
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d103      	bne.n	80031a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	22a0      	movs	r2, #160	@ 0xa0
 800319e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695b      	ldr	r3, [r3, #20]
 80031a8:	f003 0302 	and.w	r3, r3, #2
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	bf0c      	ite	eq
 80031b0:	2301      	moveq	r3, #1
 80031b2:	2300      	movne	r3, #0
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80031c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80031c6:	bf0c      	ite	eq
 80031c8:	2301      	moveq	r3, #1
 80031ca:	2300      	movne	r3, #0
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80031d6:	b2db      	uxtb	r3, r3
 80031d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80031da:	d005      	beq.n	80031e8 <HAL_I2C_IsDeviceReady+0x188>
 80031dc:	7dfb      	ldrb	r3, [r7, #23]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d102      	bne.n	80031e8 <HAL_I2C_IsDeviceReady+0x188>
 80031e2:	7dbb      	ldrb	r3, [r7, #22]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d0cd      	beq.n	8003184 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	2220      	movs	r2, #32
 80031ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d129      	bne.n	8003252 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	695b      	ldr	r3, [r3, #20]
 8003218:	613b      	str	r3, [r7, #16]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	699b      	ldr	r3, [r3, #24]
 8003220:	613b      	str	r3, [r7, #16]
 8003222:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	9300      	str	r3, [sp, #0]
 8003228:	2319      	movs	r3, #25
 800322a:	2201      	movs	r2, #1
 800322c:	4921      	ldr	r1, [pc, #132]	@ (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 800322e:	68f8      	ldr	r0, [r7, #12]
 8003230:	f000 f8c6 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003234:	4603      	mov	r3, r0
 8003236:	2b00      	cmp	r3, #0
 8003238:	d001      	beq.n	800323e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800323a:	2301      	movs	r3, #1
 800323c:	e036      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2220      	movs	r2, #32
 8003242:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800324e:	2300      	movs	r3, #0
 8003250:	e02c      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003260:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800326a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800326c:	69fb      	ldr	r3, [r7, #28]
 800326e:	9300      	str	r3, [sp, #0]
 8003270:	2319      	movs	r3, #25
 8003272:	2201      	movs	r2, #1
 8003274:	490f      	ldr	r1, [pc, #60]	@ (80032b4 <HAL_I2C_IsDeviceReady+0x254>)
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 f8a2 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 800327c:	4603      	mov	r3, r0
 800327e:	2b00      	cmp	r3, #0
 8003280:	d001      	beq.n	8003286 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e012      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003286:	69bb      	ldr	r3, [r7, #24]
 8003288:	3301      	adds	r3, #1
 800328a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	429a      	cmp	r2, r3
 8003292:	f4ff af32 	bcc.w	80030fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2220      	movs	r2, #32
 800329a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	e000      	b.n	80032ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80032aa:	2302      	movs	r3, #2
  }
}
 80032ac:	4618      	mov	r0, r3
 80032ae:	3720      	adds	r7, #32
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	00100002 	.word	0x00100002
 80032b8:	ffff0000 	.word	0xffff0000

080032bc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b088      	sub	sp, #32
 80032c0:	af02      	add	r7, sp, #8
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	607a      	str	r2, [r7, #4]
 80032c6:	603b      	str	r3, [r7, #0]
 80032c8:	460b      	mov	r3, r1
 80032ca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032d0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b08      	cmp	r3, #8
 80032d6:	d006      	beq.n	80032e6 <I2C_MasterRequestWrite+0x2a>
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	2b01      	cmp	r3, #1
 80032dc:	d003      	beq.n	80032e6 <I2C_MasterRequestWrite+0x2a>
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80032e4:	d108      	bne.n	80032f8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80032f4:	601a      	str	r2, [r3, #0]
 80032f6:	e00b      	b.n	8003310 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032fc:	2b12      	cmp	r3, #18
 80032fe:	d107      	bne.n	8003310 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800330e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	9300      	str	r3, [sp, #0]
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2200      	movs	r2, #0
 8003318:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800331c:	68f8      	ldr	r0, [r7, #12]
 800331e:	f000 f84f 	bl	80033c0 <I2C_WaitOnFlagUntilTimeout>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d00d      	beq.n	8003344 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003332:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003336:	d103      	bne.n	8003340 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800333e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e035      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	691b      	ldr	r3, [r3, #16]
 8003348:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800334c:	d108      	bne.n	8003360 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800334e:	897b      	ldrh	r3, [r7, #10]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	461a      	mov	r2, r3
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800335c:	611a      	str	r2, [r3, #16]
 800335e:	e01b      	b.n	8003398 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003360:	897b      	ldrh	r3, [r7, #10]
 8003362:	11db      	asrs	r3, r3, #7
 8003364:	b2db      	uxtb	r3, r3
 8003366:	f003 0306 	and.w	r3, r3, #6
 800336a:	b2db      	uxtb	r3, r3
 800336c:	f063 030f 	orn	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	490e      	ldr	r1, [pc, #56]	@ (80033b8 <I2C_MasterRequestWrite+0xfc>)
 800337e:	68f8      	ldr	r0, [r7, #12]
 8003380:	f000 f898 	bl	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e010      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800338e:	897b      	ldrh	r3, [r7, #10]
 8003390:	b2da      	uxtb	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	4907      	ldr	r1, [pc, #28]	@ (80033bc <I2C_MasterRequestWrite+0x100>)
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f000 f888 	bl	80034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033a4:	4603      	mov	r3, r0
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d001      	beq.n	80033ae <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	e000      	b.n	80033b0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80033ae:	2300      	movs	r3, #0
}
 80033b0:	4618      	mov	r0, r3
 80033b2:	3718      	adds	r7, #24
 80033b4:	46bd      	mov	sp, r7
 80033b6:	bd80      	pop	{r7, pc}
 80033b8:	00010008 	.word	0x00010008
 80033bc:	00010002 	.word	0x00010002

080033c0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b084      	sub	sp, #16
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	603b      	str	r3, [r7, #0]
 80033cc:	4613      	mov	r3, r2
 80033ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033d0:	e048      	b.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033d8:	d044      	beq.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033da:	f7ff f949 	bl	8002670 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	429a      	cmp	r2, r3
 80033e8:	d302      	bcc.n	80033f0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d139      	bne.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	0c1b      	lsrs	r3, r3, #16
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	2b01      	cmp	r3, #1
 80033f8:	d10d      	bne.n	8003416 <I2C_WaitOnFlagUntilTimeout+0x56>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	43da      	mvns	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	4013      	ands	r3, r2
 8003406:	b29b      	uxth	r3, r3
 8003408:	2b00      	cmp	r3, #0
 800340a:	bf0c      	ite	eq
 800340c:	2301      	moveq	r3, #1
 800340e:	2300      	movne	r3, #0
 8003410:	b2db      	uxtb	r3, r3
 8003412:	461a      	mov	r2, r3
 8003414:	e00c      	b.n	8003430 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	699b      	ldr	r3, [r3, #24]
 800341c:	43da      	mvns	r2, r3
 800341e:	68bb      	ldr	r3, [r7, #8]
 8003420:	4013      	ands	r3, r2
 8003422:	b29b      	uxth	r3, r3
 8003424:	2b00      	cmp	r3, #0
 8003426:	bf0c      	ite	eq
 8003428:	2301      	moveq	r3, #1
 800342a:	2300      	movne	r3, #0
 800342c:	b2db      	uxtb	r3, r3
 800342e:	461a      	mov	r2, r3
 8003430:	79fb      	ldrb	r3, [r7, #7]
 8003432:	429a      	cmp	r2, r3
 8003434:	d116      	bne.n	8003464 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2220      	movs	r2, #32
 8003440:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003450:	f043 0220 	orr.w	r2, r3, #32
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003460:	2301      	movs	r3, #1
 8003462:	e023      	b.n	80034ac <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	0c1b      	lsrs	r3, r3, #16
 8003468:	b2db      	uxtb	r3, r3
 800346a:	2b01      	cmp	r3, #1
 800346c:	d10d      	bne.n	800348a <I2C_WaitOnFlagUntilTimeout+0xca>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	695b      	ldr	r3, [r3, #20]
 8003474:	43da      	mvns	r2, r3
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	4013      	ands	r3, r2
 800347a:	b29b      	uxth	r3, r3
 800347c:	2b00      	cmp	r3, #0
 800347e:	bf0c      	ite	eq
 8003480:	2301      	moveq	r3, #1
 8003482:	2300      	movne	r3, #0
 8003484:	b2db      	uxtb	r3, r3
 8003486:	461a      	mov	r2, r3
 8003488:	e00c      	b.n	80034a4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	699b      	ldr	r3, [r3, #24]
 8003490:	43da      	mvns	r2, r3
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	4013      	ands	r3, r2
 8003496:	b29b      	uxth	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	bf0c      	ite	eq
 800349c:	2301      	moveq	r3, #1
 800349e:	2300      	movne	r3, #0
 80034a0:	b2db      	uxtb	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	79fb      	ldrb	r3, [r7, #7]
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d093      	beq.n	80033d2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b084      	sub	sp, #16
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	60f8      	str	r0, [r7, #12]
 80034bc:	60b9      	str	r1, [r7, #8]
 80034be:	607a      	str	r2, [r7, #4]
 80034c0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034c2:	e071      	b.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80034d2:	d123      	bne.n	800351c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	681a      	ldr	r2, [r3, #0]
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034e2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80034ec:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	2200      	movs	r2, #0
 80034f2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	2220      	movs	r2, #32
 80034f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2200      	movs	r2, #0
 8003500:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003508:	f043 0204 	orr.w	r2, r3, #4
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e067      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003522:	d041      	beq.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003524:	f7ff f8a4 	bl	8002670 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	429a      	cmp	r2, r3
 8003532:	d302      	bcc.n	800353a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d136      	bne.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	0c1b      	lsrs	r3, r3, #16
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	d10c      	bne.n	800355e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	43da      	mvns	r2, r3
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4013      	ands	r3, r2
 8003550:	b29b      	uxth	r3, r3
 8003552:	2b00      	cmp	r3, #0
 8003554:	bf14      	ite	ne
 8003556:	2301      	movne	r3, #1
 8003558:	2300      	moveq	r3, #0
 800355a:	b2db      	uxtb	r3, r3
 800355c:	e00b      	b.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	699b      	ldr	r3, [r3, #24]
 8003564:	43da      	mvns	r2, r3
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	4013      	ands	r3, r2
 800356a:	b29b      	uxth	r3, r3
 800356c:	2b00      	cmp	r3, #0
 800356e:	bf14      	ite	ne
 8003570:	2301      	movne	r3, #1
 8003572:	2300      	moveq	r3, #0
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b00      	cmp	r3, #0
 8003578:	d016      	beq.n	80035a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	2220      	movs	r2, #32
 8003584:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2200      	movs	r2, #0
 800358c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003594:	f043 0220 	orr.w	r2, r3, #32
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	2200      	movs	r2, #0
 80035a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e021      	b.n	80035ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	0c1b      	lsrs	r3, r3, #16
 80035ac:	b2db      	uxtb	r3, r3
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10c      	bne.n	80035cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	695b      	ldr	r3, [r3, #20]
 80035b8:	43da      	mvns	r2, r3
 80035ba:	68bb      	ldr	r3, [r7, #8]
 80035bc:	4013      	ands	r3, r2
 80035be:	b29b      	uxth	r3, r3
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	bf14      	ite	ne
 80035c4:	2301      	movne	r3, #1
 80035c6:	2300      	moveq	r3, #0
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	e00b      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	699b      	ldr	r3, [r3, #24]
 80035d2:	43da      	mvns	r2, r3
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	4013      	ands	r3, r2
 80035d8:	b29b      	uxth	r3, r3
 80035da:	2b00      	cmp	r3, #0
 80035dc:	bf14      	ite	ne
 80035de:	2301      	movne	r3, #1
 80035e0:	2300      	moveq	r3, #0
 80035e2:	b2db      	uxtb	r3, r3
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	f47f af6d 	bne.w	80034c4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3710      	adds	r7, #16
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b084      	sub	sp, #16
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003600:	e034      	b.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 f886 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e034      	b.n	800367c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003618:	d028      	beq.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800361a:	f7ff f829 	bl	8002670 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	68ba      	ldr	r2, [r7, #8]
 8003626:	429a      	cmp	r2, r3
 8003628:	d302      	bcc.n	8003630 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11d      	bne.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800363a:	2b80      	cmp	r3, #128	@ 0x80
 800363c:	d016      	beq.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	2200      	movs	r2, #0
 8003642:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	2220      	movs	r2, #32
 8003648:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003658:	f043 0220 	orr.w	r2, r3, #32
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	2200      	movs	r2, #0
 8003664:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	e007      	b.n	800367c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	2b80      	cmp	r3, #128	@ 0x80
 8003678:	d1c3      	bne.n	8003602 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800367a:	2300      	movs	r3, #0
}
 800367c:	4618      	mov	r0, r3
 800367e:	3710      	adds	r7, #16
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}

08003684 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	60f8      	str	r0, [r7, #12]
 800368c:	60b9      	str	r1, [r7, #8]
 800368e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003690:	e034      	b.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f000 f83e 	bl	8003714 <I2C_IsAcknowledgeFailed>
 8003698:	4603      	mov	r3, r0
 800369a:	2b00      	cmp	r3, #0
 800369c:	d001      	beq.n	80036a2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e034      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036a8:	d028      	beq.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036aa:	f7fe ffe1 	bl	8002670 <HAL_GetTick>
 80036ae:	4602      	mov	r2, r0
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	68ba      	ldr	r2, [r7, #8]
 80036b6:	429a      	cmp	r2, r3
 80036b8:	d302      	bcc.n	80036c0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036ba:	68bb      	ldr	r3, [r7, #8]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d11d      	bne.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	695b      	ldr	r3, [r3, #20]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b04      	cmp	r3, #4
 80036cc:	d016      	beq.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2220      	movs	r2, #32
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2200      	movs	r2, #0
 80036e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036e8:	f043 0220 	orr.w	r2, r3, #32
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036f8:	2301      	movs	r3, #1
 80036fa:	e007      	b.n	800370c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d1c3      	bne.n	8003692 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	695b      	ldr	r3, [r3, #20]
 8003722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800372a:	d11b      	bne.n	8003764 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003734:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2200      	movs	r2, #0
 800373a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2220      	movs	r2, #32
 8003740:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2200      	movs	r2, #0
 8003748:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003750:	f043 0204 	orr.w	r2, r3, #4
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	370c      	adds	r7, #12
 800376a:	46bd      	mov	sp, r7
 800376c:	bc80      	pop	{r7}
 800376e:	4770      	bx	lr

08003770 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	b086      	sub	sp, #24
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e272      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	f000 8087 	beq.w	800389e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003790:	4b92      	ldr	r3, [pc, #584]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f003 030c 	and.w	r3, r3, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	d00c      	beq.n	80037b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800379c:	4b8f      	ldr	r3, [pc, #572]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d112      	bne.n	80037ce <HAL_RCC_OscConfig+0x5e>
 80037a8:	4b8c      	ldr	r3, [pc, #560]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80037b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037b4:	d10b      	bne.n	80037ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80037b6:	4b89      	ldr	r3, [pc, #548]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d06c      	beq.n	800389c <HAL_RCC_OscConfig+0x12c>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d168      	bne.n	800389c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e24c      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x76>
 80037d8:	4b80      	ldr	r3, [pc, #512]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4a7f      	ldr	r2, [pc, #508]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037de:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80037e2:	6013      	str	r3, [r2, #0]
 80037e4:	e02e      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x98>
 80037ee:	4b7b      	ldr	r3, [pc, #492]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a7a      	ldr	r2, [pc, #488]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80037f8:	6013      	str	r3, [r2, #0]
 80037fa:	4b78      	ldr	r3, [pc, #480]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	4a77      	ldr	r2, [pc, #476]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003800:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003804:	6013      	str	r3, [r2, #0]
 8003806:	e01d      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003810:	d10c      	bne.n	800382c <HAL_RCC_OscConfig+0xbc>
 8003812:	4b72      	ldr	r3, [pc, #456]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a71      	ldr	r2, [pc, #452]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003818:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800381c:	6013      	str	r3, [r2, #0]
 800381e:	4b6f      	ldr	r3, [pc, #444]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a6e      	ldr	r2, [pc, #440]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003824:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003828:	6013      	str	r3, [r2, #0]
 800382a:	e00b      	b.n	8003844 <HAL_RCC_OscConfig+0xd4>
 800382c:	4b6b      	ldr	r3, [pc, #428]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a6a      	ldr	r2, [pc, #424]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003832:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003836:	6013      	str	r3, [r2, #0]
 8003838:	4b68      	ldr	r3, [pc, #416]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a67      	ldr	r2, [pc, #412]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 800383e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003842:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d013      	beq.n	8003874 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800384c:	f7fe ff10 	bl	8002670 <HAL_GetTick>
 8003850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003852:	e008      	b.n	8003866 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003854:	f7fe ff0c 	bl	8002670 <HAL_GetTick>
 8003858:	4602      	mov	r2, r0
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	1ad3      	subs	r3, r2, r3
 800385e:	2b64      	cmp	r3, #100	@ 0x64
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e200      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003866:	4b5d      	ldr	r3, [pc, #372]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d0f0      	beq.n	8003854 <HAL_RCC_OscConfig+0xe4>
 8003872:	e014      	b.n	800389e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003874:	f7fe fefc 	bl	8002670 <HAL_GetTick>
 8003878:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800387a:	e008      	b.n	800388e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800387c:	f7fe fef8 	bl	8002670 <HAL_GetTick>
 8003880:	4602      	mov	r2, r0
 8003882:	693b      	ldr	r3, [r7, #16]
 8003884:	1ad3      	subs	r3, r2, r3
 8003886:	2b64      	cmp	r3, #100	@ 0x64
 8003888:	d901      	bls.n	800388e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e1ec      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800388e:	4b53      	ldr	r3, [pc, #332]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003896:	2b00      	cmp	r3, #0
 8003898:	d1f0      	bne.n	800387c <HAL_RCC_OscConfig+0x10c>
 800389a:	e000      	b.n	800389e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800389c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 0302 	and.w	r3, r3, #2
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d063      	beq.n	8003972 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80038aa:	4b4c      	ldr	r3, [pc, #304]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038ac:	685b      	ldr	r3, [r3, #4]
 80038ae:	f003 030c 	and.w	r3, r3, #12
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d00b      	beq.n	80038ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80038b6:	4b49      	ldr	r3, [pc, #292]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038b8:	685b      	ldr	r3, [r3, #4]
 80038ba:	f003 030c 	and.w	r3, r3, #12
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d11c      	bne.n	80038fc <HAL_RCC_OscConfig+0x18c>
 80038c2:	4b46      	ldr	r3, [pc, #280]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d116      	bne.n	80038fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038ce:	4b43      	ldr	r3, [pc, #268]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 0302 	and.w	r3, r3, #2
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d005      	beq.n	80038e6 <HAL_RCC_OscConfig+0x176>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d001      	beq.n	80038e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80038e2:	2301      	movs	r3, #1
 80038e4:	e1c0      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80038e6:	4b3d      	ldr	r3, [pc, #244]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	695b      	ldr	r3, [r3, #20]
 80038f2:	00db      	lsls	r3, r3, #3
 80038f4:	4939      	ldr	r1, [pc, #228]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80038f6:	4313      	orrs	r3, r2
 80038f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80038fa:	e03a      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d020      	beq.n	8003946 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003904:	4b36      	ldr	r3, [pc, #216]	@ (80039e0 <HAL_RCC_OscConfig+0x270>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe feb1 	bl	8002670 <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003912:	f7fe fead 	bl	8002670 <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e1a1      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003924:	4b2d      	ldr	r3, [pc, #180]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0302 	and.w	r3, r3, #2
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003930:	4b2a      	ldr	r3, [pc, #168]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	695b      	ldr	r3, [r3, #20]
 800393c:	00db      	lsls	r3, r3, #3
 800393e:	4927      	ldr	r1, [pc, #156]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003940:	4313      	orrs	r3, r2
 8003942:	600b      	str	r3, [r1, #0]
 8003944:	e015      	b.n	8003972 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003946:	4b26      	ldr	r3, [pc, #152]	@ (80039e0 <HAL_RCC_OscConfig+0x270>)
 8003948:	2200      	movs	r2, #0
 800394a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800394c:	f7fe fe90 	bl	8002670 <HAL_GetTick>
 8003950:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003952:	e008      	b.n	8003966 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003954:	f7fe fe8c 	bl	8002670 <HAL_GetTick>
 8003958:	4602      	mov	r2, r0
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	1ad3      	subs	r3, r2, r3
 800395e:	2b02      	cmp	r3, #2
 8003960:	d901      	bls.n	8003966 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e180      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003966:	4b1d      	ldr	r3, [pc, #116]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f003 0302 	and.w	r3, r3, #2
 800396e:	2b00      	cmp	r3, #0
 8003970:	d1f0      	bne.n	8003954 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0308 	and.w	r3, r3, #8
 800397a:	2b00      	cmp	r3, #0
 800397c:	d03a      	beq.n	80039f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d019      	beq.n	80039ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003986:	4b17      	ldr	r3, [pc, #92]	@ (80039e4 <HAL_RCC_OscConfig+0x274>)
 8003988:	2201      	movs	r2, #1
 800398a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800398c:	f7fe fe70 	bl	8002670 <HAL_GetTick>
 8003990:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003992:	e008      	b.n	80039a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003994:	f7fe fe6c 	bl	8002670 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	693b      	ldr	r3, [r7, #16]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	2b02      	cmp	r3, #2
 80039a0:	d901      	bls.n	80039a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80039a2:	2303      	movs	r3, #3
 80039a4:	e160      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80039a6:	4b0d      	ldr	r3, [pc, #52]	@ (80039dc <HAL_RCC_OscConfig+0x26c>)
 80039a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039aa:	f003 0302 	and.w	r3, r3, #2
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d0f0      	beq.n	8003994 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80039b2:	2001      	movs	r0, #1
 80039b4:	f000 faea 	bl	8003f8c <RCC_Delay>
 80039b8:	e01c      	b.n	80039f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80039ba:	4b0a      	ldr	r3, [pc, #40]	@ (80039e4 <HAL_RCC_OscConfig+0x274>)
 80039bc:	2200      	movs	r2, #0
 80039be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80039c0:	f7fe fe56 	bl	8002670 <HAL_GetTick>
 80039c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039c6:	e00f      	b.n	80039e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80039c8:	f7fe fe52 	bl	8002670 <HAL_GetTick>
 80039cc:	4602      	mov	r2, r0
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d908      	bls.n	80039e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80039d6:	2303      	movs	r3, #3
 80039d8:	e146      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
 80039da:	bf00      	nop
 80039dc:	40021000 	.word	0x40021000
 80039e0:	42420000 	.word	0x42420000
 80039e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80039e8:	4b92      	ldr	r3, [pc, #584]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 80039ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ec:	f003 0302 	and.w	r3, r3, #2
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1e9      	bne.n	80039c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0304 	and.w	r3, r3, #4
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	f000 80a6 	beq.w	8003b4e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003a02:	2300      	movs	r3, #0
 8003a04:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003a06:	4b8b      	ldr	r3, [pc, #556]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d10d      	bne.n	8003a2e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003a12:	4b88      	ldr	r3, [pc, #544]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a14:	69db      	ldr	r3, [r3, #28]
 8003a16:	4a87      	ldr	r2, [pc, #540]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a1c:	61d3      	str	r3, [r2, #28]
 8003a1e:	4b85      	ldr	r3, [pc, #532]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a20:	69db      	ldr	r3, [r3, #28]
 8003a22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2e:	4b82      	ldr	r3, [pc, #520]	@ (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d118      	bne.n	8003a6c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a3a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a40:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a46:	f7fe fe13 	bl	8002670 <HAL_GetTick>
 8003a4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e008      	b.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fe fe0f 	bl	8002670 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	693b      	ldr	r3, [r7, #16]
 8003a56:	1ad3      	subs	r3, r2, r3
 8003a58:	2b64      	cmp	r3, #100	@ 0x64
 8003a5a:	d901      	bls.n	8003a60 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003a5c:	2303      	movs	r3, #3
 8003a5e:	e103      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a60:	4b75      	ldr	r3, [pc, #468]	@ (8003c38 <HAL_RCC_OscConfig+0x4c8>)
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d0f0      	beq.n	8003a4e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	68db      	ldr	r3, [r3, #12]
 8003a70:	2b01      	cmp	r3, #1
 8003a72:	d106      	bne.n	8003a82 <HAL_RCC_OscConfig+0x312>
 8003a74:	4b6f      	ldr	r3, [pc, #444]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a76:	6a1b      	ldr	r3, [r3, #32]
 8003a78:	4a6e      	ldr	r2, [pc, #440]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a7a:	f043 0301 	orr.w	r3, r3, #1
 8003a7e:	6213      	str	r3, [r2, #32]
 8003a80:	e02d      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	68db      	ldr	r3, [r3, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d10c      	bne.n	8003aa4 <HAL_RCC_OscConfig+0x334>
 8003a8a:	4b6a      	ldr	r3, [pc, #424]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	4a69      	ldr	r2, [pc, #420]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a90:	f023 0301 	bic.w	r3, r3, #1
 8003a94:	6213      	str	r3, [r2, #32]
 8003a96:	4b67      	ldr	r3, [pc, #412]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	4a66      	ldr	r2, [pc, #408]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003a9c:	f023 0304 	bic.w	r3, r3, #4
 8003aa0:	6213      	str	r3, [r2, #32]
 8003aa2:	e01c      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	68db      	ldr	r3, [r3, #12]
 8003aa8:	2b05      	cmp	r3, #5
 8003aaa:	d10c      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x356>
 8003aac:	4b61      	ldr	r3, [pc, #388]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003aae:	6a1b      	ldr	r3, [r3, #32]
 8003ab0:	4a60      	ldr	r2, [pc, #384]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ab2:	f043 0304 	orr.w	r3, r3, #4
 8003ab6:	6213      	str	r3, [r2, #32]
 8003ab8:	4b5e      	ldr	r3, [pc, #376]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003aba:	6a1b      	ldr	r3, [r3, #32]
 8003abc:	4a5d      	ldr	r2, [pc, #372]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003abe:	f043 0301 	orr.w	r3, r3, #1
 8003ac2:	6213      	str	r3, [r2, #32]
 8003ac4:	e00b      	b.n	8003ade <HAL_RCC_OscConfig+0x36e>
 8003ac6:	4b5b      	ldr	r3, [pc, #364]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ac8:	6a1b      	ldr	r3, [r3, #32]
 8003aca:	4a5a      	ldr	r2, [pc, #360]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003acc:	f023 0301 	bic.w	r3, r3, #1
 8003ad0:	6213      	str	r3, [r2, #32]
 8003ad2:	4b58      	ldr	r3, [pc, #352]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ad4:	6a1b      	ldr	r3, [r3, #32]
 8003ad6:	4a57      	ldr	r2, [pc, #348]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ad8:	f023 0304 	bic.w	r3, r3, #4
 8003adc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d015      	beq.n	8003b12 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ae6:	f7fe fdc3 	bl	8002670 <HAL_GetTick>
 8003aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003aec:	e00a      	b.n	8003b04 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aee:	f7fe fdbf 	bl	8002670 <HAL_GetTick>
 8003af2:	4602      	mov	r2, r0
 8003af4:	693b      	ldr	r3, [r7, #16]
 8003af6:	1ad3      	subs	r3, r2, r3
 8003af8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003afc:	4293      	cmp	r3, r2
 8003afe:	d901      	bls.n	8003b04 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003b00:	2303      	movs	r3, #3
 8003b02:	e0b1      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b04:	4b4b      	ldr	r3, [pc, #300]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b06:	6a1b      	ldr	r3, [r3, #32]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d0ee      	beq.n	8003aee <HAL_RCC_OscConfig+0x37e>
 8003b10:	e014      	b.n	8003b3c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b12:	f7fe fdad 	bl	8002670 <HAL_GetTick>
 8003b16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b18:	e00a      	b.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003b1a:	f7fe fda9 	bl	8002670 <HAL_GetTick>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	693b      	ldr	r3, [r7, #16]
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b28:	4293      	cmp	r3, r2
 8003b2a:	d901      	bls.n	8003b30 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003b2c:	2303      	movs	r3, #3
 8003b2e:	e09b      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003b30:	4b40      	ldr	r3, [pc, #256]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	f003 0302 	and.w	r3, r3, #2
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d1ee      	bne.n	8003b1a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003b3c:	7dfb      	ldrb	r3, [r7, #23]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d105      	bne.n	8003b4e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b42:	4b3c      	ldr	r3, [pc, #240]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b44:	69db      	ldr	r3, [r3, #28]
 8003b46:	4a3b      	ldr	r2, [pc, #236]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b4c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	69db      	ldr	r3, [r3, #28]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	f000 8087 	beq.w	8003c66 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b58:	4b36      	ldr	r3, [pc, #216]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	f003 030c 	and.w	r3, r3, #12
 8003b60:	2b08      	cmp	r3, #8
 8003b62:	d061      	beq.n	8003c28 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	69db      	ldr	r3, [r3, #28]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d146      	bne.n	8003bfa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003b6c:	4b33      	ldr	r3, [pc, #204]	@ (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003b6e:	2200      	movs	r2, #0
 8003b70:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003b72:	f7fe fd7d 	bl	8002670 <HAL_GetTick>
 8003b76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b78:	e008      	b.n	8003b8c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b7a:	f7fe fd79 	bl	8002670 <HAL_GetTick>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	693b      	ldr	r3, [r7, #16]
 8003b82:	1ad3      	subs	r3, r2, r3
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d901      	bls.n	8003b8c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003b88:	2303      	movs	r3, #3
 8003b8a:	e06d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003b8c:	4b29      	ldr	r3, [pc, #164]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f0      	bne.n	8003b7a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6a1b      	ldr	r3, [r3, #32]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ba0:	d108      	bne.n	8003bb4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003ba2:	4b24      	ldr	r3, [pc, #144]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	689b      	ldr	r3, [r3, #8]
 8003bae:	4921      	ldr	r1, [pc, #132]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	6a19      	ldr	r1, [r3, #32]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bc4:	430b      	orrs	r3, r1
 8003bc6:	491b      	ldr	r1, [pc, #108]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bc8:	4313      	orrs	r3, r2
 8003bca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003bcc:	4b1b      	ldr	r3, [pc, #108]	@ (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003bce:	2201      	movs	r2, #1
 8003bd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd2:	f7fe fd4d 	bl	8002670 <HAL_GetTick>
 8003bd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bd8:	e008      	b.n	8003bec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bda:	f7fe fd49 	bl	8002670 <HAL_GetTick>
 8003bde:	4602      	mov	r2, r0
 8003be0:	693b      	ldr	r3, [r7, #16]
 8003be2:	1ad3      	subs	r3, r2, r3
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	d901      	bls.n	8003bec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003be8:	2303      	movs	r3, #3
 8003bea:	e03d      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003bec:	4b11      	ldr	r3, [pc, #68]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d0f0      	beq.n	8003bda <HAL_RCC_OscConfig+0x46a>
 8003bf8:	e035      	b.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bfa:	4b10      	ldr	r3, [pc, #64]	@ (8003c3c <HAL_RCC_OscConfig+0x4cc>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fd36 	bl	8002670 <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c08:	f7fe fd32 	bl	8002670 <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b02      	cmp	r3, #2
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e026      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c1a:	4b06      	ldr	r3, [pc, #24]	@ (8003c34 <HAL_RCC_OscConfig+0x4c4>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0x498>
 8003c26:	e01e      	b.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69db      	ldr	r3, [r3, #28]
 8003c2c:	2b01      	cmp	r3, #1
 8003c2e:	d107      	bne.n	8003c40 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003c30:	2301      	movs	r3, #1
 8003c32:	e019      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
 8003c34:	40021000 	.word	0x40021000
 8003c38:	40007000 	.word	0x40007000
 8003c3c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <HAL_RCC_OscConfig+0x500>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6a1b      	ldr	r3, [r3, #32]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3718      	adds	r7, #24
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000

08003c74 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d101      	bne.n	8003c88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e0d0      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c88:	4b6a      	ldr	r3, [pc, #424]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f003 0307 	and.w	r3, r3, #7
 8003c90:	683a      	ldr	r2, [r7, #0]
 8003c92:	429a      	cmp	r2, r3
 8003c94:	d910      	bls.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c96:	4b67      	ldr	r3, [pc, #412]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f023 0207 	bic.w	r2, r3, #7
 8003c9e:	4965      	ldr	r1, [pc, #404]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ca6:	4b63      	ldr	r3, [pc, #396]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f003 0307 	and.w	r3, r3, #7
 8003cae:	683a      	ldr	r2, [r7, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d001      	beq.n	8003cb8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e0b8      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0302 	and.w	r3, r3, #2
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d020      	beq.n	8003d06 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0304 	and.w	r3, r3, #4
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d005      	beq.n	8003cdc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003cd0:	4b59      	ldr	r3, [pc, #356]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	4a58      	ldr	r2, [pc, #352]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003cda:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d005      	beq.n	8003cf4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ce8:	4b53      	ldr	r3, [pc, #332]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a52      	ldr	r2, [pc, #328]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cee:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003cf2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003cf4:	4b50      	ldr	r3, [pc, #320]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	689b      	ldr	r3, [r3, #8]
 8003d00:	494d      	ldr	r1, [pc, #308]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d02:	4313      	orrs	r3, r2
 8003d04:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d040      	beq.n	8003d94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d107      	bne.n	8003d2a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d1a:	4b47      	ldr	r3, [pc, #284]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d115      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e07f      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	685b      	ldr	r3, [r3, #4]
 8003d2e:	2b02      	cmp	r3, #2
 8003d30:	d107      	bne.n	8003d42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003d32:	4b41      	ldr	r3, [pc, #260]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d109      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e073      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d42:	4b3d      	ldr	r3, [pc, #244]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d101      	bne.n	8003d52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	e06b      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003d52:	4b39      	ldr	r3, [pc, #228]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f023 0203 	bic.w	r2, r3, #3
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	4936      	ldr	r1, [pc, #216]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d60:	4313      	orrs	r3, r2
 8003d62:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003d64:	f7fe fc84 	bl	8002670 <HAL_GetTick>
 8003d68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d6a:	e00a      	b.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d6c:	f7fe fc80 	bl	8002670 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d901      	bls.n	8003d82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003d7e:	2303      	movs	r3, #3
 8003d80:	e053      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d82:	4b2d      	ldr	r3, [pc, #180]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	f003 020c 	and.w	r2, r3, #12
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	685b      	ldr	r3, [r3, #4]
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	429a      	cmp	r2, r3
 8003d92:	d1eb      	bne.n	8003d6c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003d94:	4b27      	ldr	r3, [pc, #156]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0307 	and.w	r3, r3, #7
 8003d9c:	683a      	ldr	r2, [r7, #0]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d210      	bcs.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003da2:	4b24      	ldr	r3, [pc, #144]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 0207 	bic.w	r2, r3, #7
 8003daa:	4922      	ldr	r1, [pc, #136]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003db2:	4b20      	ldr	r3, [pc, #128]	@ (8003e34 <HAL_RCC_ClockConfig+0x1c0>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 0307 	and.w	r3, r3, #7
 8003dba:	683a      	ldr	r2, [r7, #0]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d001      	beq.n	8003dc4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e032      	b.n	8003e2a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d008      	beq.n	8003de2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003dd0:	4b19      	ldr	r3, [pc, #100]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	68db      	ldr	r3, [r3, #12]
 8003ddc:	4916      	ldr	r1, [pc, #88]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dde:	4313      	orrs	r3, r2
 8003de0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f003 0308 	and.w	r3, r3, #8
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d009      	beq.n	8003e02 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003dee:	4b12      	ldr	r3, [pc, #72]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	691b      	ldr	r3, [r3, #16]
 8003dfa:	00db      	lsls	r3, r3, #3
 8003dfc:	490e      	ldr	r1, [pc, #56]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfe:	4313      	orrs	r3, r2
 8003e00:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003e02:	f000 f821 	bl	8003e48 <HAL_RCC_GetSysClockFreq>
 8003e06:	4602      	mov	r2, r0
 8003e08:	4b0b      	ldr	r3, [pc, #44]	@ (8003e38 <HAL_RCC_ClockConfig+0x1c4>)
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 030f 	and.w	r3, r3, #15
 8003e12:	490a      	ldr	r1, [pc, #40]	@ (8003e3c <HAL_RCC_ClockConfig+0x1c8>)
 8003e14:	5ccb      	ldrb	r3, [r1, r3]
 8003e16:	fa22 f303 	lsr.w	r3, r2, r3
 8003e1a:	4a09      	ldr	r2, [pc, #36]	@ (8003e40 <HAL_RCC_ClockConfig+0x1cc>)
 8003e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003e1e:	4b09      	ldr	r3, [pc, #36]	@ (8003e44 <HAL_RCC_ClockConfig+0x1d0>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fd fe58 	bl	8001ad8 <HAL_InitTick>

  return HAL_OK;
 8003e28:	2300      	movs	r3, #0
}
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	3710      	adds	r7, #16
 8003e2e:	46bd      	mov	sp, r7
 8003e30:	bd80      	pop	{r7, pc}
 8003e32:	bf00      	nop
 8003e34:	40022000 	.word	0x40022000
 8003e38:	40021000 	.word	0x40021000
 8003e3c:	0800beb8 	.word	0x0800beb8
 8003e40:	2000000c 	.word	0x2000000c
 8003e44:	20000014 	.word	0x20000014

08003e48 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b087      	sub	sp, #28
 8003e4c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60fb      	str	r3, [r7, #12]
 8003e52:	2300      	movs	r3, #0
 8003e54:	60bb      	str	r3, [r7, #8]
 8003e56:	2300      	movs	r3, #0
 8003e58:	617b      	str	r3, [r7, #20]
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003e62:	4b1e      	ldr	r3, [pc, #120]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	f003 030c 	and.w	r3, r3, #12
 8003e6e:	2b04      	cmp	r3, #4
 8003e70:	d002      	beq.n	8003e78 <HAL_RCC_GetSysClockFreq+0x30>
 8003e72:	2b08      	cmp	r3, #8
 8003e74:	d003      	beq.n	8003e7e <HAL_RCC_GetSysClockFreq+0x36>
 8003e76:	e027      	b.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003e78:	4b19      	ldr	r3, [pc, #100]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003e7a:	613b      	str	r3, [r7, #16]
      break;
 8003e7c:	e027      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	0c9b      	lsrs	r3, r3, #18
 8003e82:	f003 030f 	and.w	r3, r3, #15
 8003e86:	4a17      	ldr	r2, [pc, #92]	@ (8003ee4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003e88:	5cd3      	ldrb	r3, [r2, r3]
 8003e8a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d010      	beq.n	8003eb8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003e96:	4b11      	ldr	r3, [pc, #68]	@ (8003edc <HAL_RCC_GetSysClockFreq+0x94>)
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	0c5b      	lsrs	r3, r3, #17
 8003e9c:	f003 0301 	and.w	r3, r3, #1
 8003ea0:	4a11      	ldr	r2, [pc, #68]	@ (8003ee8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003ea2:	5cd3      	ldrb	r3, [r2, r3]
 8003ea4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eaa:	fb03 f202 	mul.w	r2, r3, r2
 8003eae:	68bb      	ldr	r3, [r7, #8]
 8003eb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	e004      	b.n	8003ec2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	4a0c      	ldr	r2, [pc, #48]	@ (8003eec <HAL_RCC_GetSysClockFreq+0xa4>)
 8003ebc:	fb02 f303 	mul.w	r3, r2, r3
 8003ec0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003ec2:	697b      	ldr	r3, [r7, #20]
 8003ec4:	613b      	str	r3, [r7, #16]
      break;
 8003ec6:	e002      	b.n	8003ece <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	@ (8003ee0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003eca:	613b      	str	r3, [r7, #16]
      break;
 8003ecc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ece:	693b      	ldr	r3, [r7, #16]
}
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	371c      	adds	r7, #28
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	bc80      	pop	{r7}
 8003ed8:	4770      	bx	lr
 8003eda:	bf00      	nop
 8003edc:	40021000 	.word	0x40021000
 8003ee0:	007a1200 	.word	0x007a1200
 8003ee4:	0800c6d0 	.word	0x0800c6d0
 8003ee8:	0800c6e0 	.word	0x0800c6e0
 8003eec:	003d0900 	.word	0x003d0900

08003ef0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ef4:	4b02      	ldr	r3, [pc, #8]	@ (8003f00 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bc80      	pop	{r7}
 8003efe:	4770      	bx	lr
 8003f00:	2000000c 	.word	0x2000000c

08003f04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003f08:	f7ff fff2 	bl	8003ef0 <HAL_RCC_GetHCLKFreq>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	0a1b      	lsrs	r3, r3, #8
 8003f14:	f003 0307 	and.w	r3, r3, #7
 8003f18:	4903      	ldr	r1, [pc, #12]	@ (8003f28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003f1a:	5ccb      	ldrb	r3, [r1, r3]
 8003f1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003f20:	4618      	mov	r0, r3
 8003f22:	bd80      	pop	{r7, pc}
 8003f24:	40021000 	.word	0x40021000
 8003f28:	0800bec8 	.word	0x0800bec8

08003f2c <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b083      	sub	sp, #12
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	220f      	movs	r2, #15
 8003f3a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003f3c:	4b11      	ldr	r3, [pc, #68]	@ (8003f84 <HAL_RCC_GetClockConfig+0x58>)
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	f003 0203 	and.w	r2, r3, #3
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003f48:	4b0e      	ldr	r3, [pc, #56]	@ (8003f84 <HAL_RCC_GetClockConfig+0x58>)
 8003f4a:	685b      	ldr	r3, [r3, #4]
 8003f4c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003f54:	4b0b      	ldr	r3, [pc, #44]	@ (8003f84 <HAL_RCC_GetClockConfig+0x58>)
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8003f60:	4b08      	ldr	r3, [pc, #32]	@ (8003f84 <HAL_RCC_GetClockConfig+0x58>)
 8003f62:	685b      	ldr	r3, [r3, #4]
 8003f64:	08db      	lsrs	r3, r3, #3
 8003f66:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f6e:	4b06      	ldr	r3, [pc, #24]	@ (8003f88 <HAL_RCC_GetClockConfig+0x5c>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f003 0207 	and.w	r2, r3, #7
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bc80      	pop	{r7}
 8003f82:	4770      	bx	lr
 8003f84:	40021000 	.word	0x40021000
 8003f88:	40022000 	.word	0x40022000

08003f8c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003f94:	4b0a      	ldr	r3, [pc, #40]	@ (8003fc0 <RCC_Delay+0x34>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc4 <RCC_Delay+0x38>)
 8003f9a:	fba2 2303 	umull	r2, r3, r2, r3
 8003f9e:	0a5b      	lsrs	r3, r3, #9
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	fb02 f303 	mul.w	r3, r2, r3
 8003fa6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003fa8:	bf00      	nop
  }
  while (Delay --);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	1e5a      	subs	r2, r3, #1
 8003fae:	60fa      	str	r2, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d1f9      	bne.n	8003fa8 <RCC_Delay+0x1c>
}
 8003fb4:	bf00      	nop
 8003fb6:	bf00      	nop
 8003fb8:	3714      	adds	r7, #20
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bc80      	pop	{r7}
 8003fbe:	4770      	bx	lr
 8003fc0:	2000000c 	.word	0x2000000c
 8003fc4:	10624dd3 	.word	0x10624dd3

08003fc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d101      	bne.n	8003fda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	e076      	b.n	80040c8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d108      	bne.n	8003ff4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003fea:	d009      	beq.n	8004000 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	61da      	str	r2, [r3, #28]
 8003ff2:	e005      	b.n	8004000 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800400c:	b2db      	uxtb	r3, r3
 800400e:	2b00      	cmp	r3, #0
 8004010:	d106      	bne.n	8004020 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f7fd fcc4 	bl	80019a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	2202      	movs	r2, #2
 8004024:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004036:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	685b      	ldr	r3, [r3, #4]
 800403c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004048:	431a      	orrs	r2, r3
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68db      	ldr	r3, [r3, #12]
 800404e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f003 0302 	and.w	r3, r3, #2
 800405c:	431a      	orrs	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	431a      	orrs	r2, r3
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	699b      	ldr	r3, [r3, #24]
 800406c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004070:	431a      	orrs	r2, r3
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	69db      	ldr	r3, [r3, #28]
 8004076:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800407a:	431a      	orrs	r2, r3
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a1b      	ldr	r3, [r3, #32]
 8004080:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004084:	ea42 0103 	orr.w	r1, r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800408c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	430a      	orrs	r2, r1
 8004096:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	699b      	ldr	r3, [r3, #24]
 800409c:	0c1a      	lsrs	r2, r3, #16
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	f002 0204 	and.w	r2, r2, #4
 80040a6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69da      	ldr	r2, [r3, #28]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80040b6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	2200      	movs	r2, #0
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80040c6:	2300      	movs	r3, #0
}
 80040c8:	4618      	mov	r0, r3
 80040ca:	3708      	adds	r7, #8
 80040cc:	46bd      	mov	sp, r7
 80040ce:	bd80      	pop	{r7, pc}

080040d0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b08a      	sub	sp, #40	@ 0x28
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
 80040dc:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80040de:	2301      	movs	r3, #1
 80040e0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80040e2:	f7fe fac5 	bl	8002670 <HAL_GetTick>
 80040e6:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040ee:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	685b      	ldr	r3, [r3, #4]
 80040f4:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80040f6:	887b      	ldrh	r3, [r7, #2]
 80040f8:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80040fa:	7ffb      	ldrb	r3, [r7, #31]
 80040fc:	2b01      	cmp	r3, #1
 80040fe:	d00c      	beq.n	800411a <HAL_SPI_TransmitReceive+0x4a>
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004106:	d106      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	689b      	ldr	r3, [r3, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d102      	bne.n	8004116 <HAL_SPI_TransmitReceive+0x46>
 8004110:	7ffb      	ldrb	r3, [r7, #31]
 8004112:	2b04      	cmp	r3, #4
 8004114:	d001      	beq.n	800411a <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8004116:	2302      	movs	r3, #2
 8004118:	e17f      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d005      	beq.n	800412c <HAL_SPI_TransmitReceive+0x5c>
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d002      	beq.n	800412c <HAL_SPI_TransmitReceive+0x5c>
 8004126:	887b      	ldrh	r3, [r7, #2]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e174      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8004136:	2b01      	cmp	r3, #1
 8004138:	d101      	bne.n	800413e <HAL_SPI_TransmitReceive+0x6e>
 800413a:	2302      	movs	r3, #2
 800413c:	e16d      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b04      	cmp	r3, #4
 8004150:	d003      	beq.n	800415a <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2205      	movs	r2, #5
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2200      	movs	r2, #0
 800415e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	887a      	ldrh	r2, [r7, #2]
 800416a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	887a      	ldrh	r2, [r7, #2]
 8004170:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	68ba      	ldr	r2, [r7, #8]
 8004176:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	887a      	ldrh	r2, [r7, #2]
 800417c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	887a      	ldrh	r2, [r7, #2]
 8004182:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	2200      	movs	r2, #0
 8004188:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2200      	movs	r2, #0
 800418e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800419a:	2b40      	cmp	r3, #64	@ 0x40
 800419c:	d007      	beq.n	80041ae <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	681a      	ldr	r2, [r3, #0]
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80041ac:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80041b6:	d17e      	bne.n	80042b6 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	685b      	ldr	r3, [r3, #4]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d002      	beq.n	80041c6 <HAL_SPI_TransmitReceive+0xf6>
 80041c0:	8afb      	ldrh	r3, [r7, #22]
 80041c2:	2b01      	cmp	r3, #1
 80041c4:	d16c      	bne.n	80042a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041ca:	881a      	ldrh	r2, [r3, #0]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041d6:	1c9a      	adds	r2, r3, #2
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041e0:	b29b      	uxth	r3, r3
 80041e2:	3b01      	subs	r3, #1
 80041e4:	b29a      	uxth	r2, r3
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041ea:	e059      	b.n	80042a0 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	2b02      	cmp	r3, #2
 80041f8:	d11b      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x162>
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80041fe:	b29b      	uxth	r3, r3
 8004200:	2b00      	cmp	r3, #0
 8004202:	d016      	beq.n	8004232 <HAL_SPI_TransmitReceive+0x162>
 8004204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004206:	2b01      	cmp	r3, #1
 8004208:	d113      	bne.n	8004232 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800420e:	881a      	ldrh	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800421a:	1c9a      	adds	r2, r3, #2
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800422e:	2300      	movs	r3, #0
 8004230:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f003 0301 	and.w	r3, r3, #1
 800423c:	2b01      	cmp	r3, #1
 800423e:	d119      	bne.n	8004274 <HAL_SPI_TransmitReceive+0x1a4>
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004244:	b29b      	uxth	r3, r3
 8004246:	2b00      	cmp	r3, #0
 8004248:	d014      	beq.n	8004274 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004254:	b292      	uxth	r2, r2
 8004256:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800425c:	1c9a      	adds	r2, r3, #2
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004266:	b29b      	uxth	r3, r3
 8004268:	3b01      	subs	r3, #1
 800426a:	b29a      	uxth	r2, r3
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004270:	2301      	movs	r3, #1
 8004272:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004274:	f7fe f9fc 	bl	8002670 <HAL_GetTick>
 8004278:	4602      	mov	r2, r0
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	1ad3      	subs	r3, r2, r3
 800427e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004280:	429a      	cmp	r2, r3
 8004282:	d80d      	bhi.n	80042a0 <HAL_SPI_TransmitReceive+0x1d0>
 8004284:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800428a:	d009      	beq.n	80042a0 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2200      	movs	r2, #0
 8004298:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0bc      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042a4:	b29b      	uxth	r3, r3
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d1a0      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x11c>
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d19b      	bne.n	80041ec <HAL_SPI_TransmitReceive+0x11c>
 80042b4:	e082      	b.n	80043bc <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d002      	beq.n	80042c4 <HAL_SPI_TransmitReceive+0x1f4>
 80042be:	8afb      	ldrh	r3, [r7, #22]
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d171      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	7812      	ldrb	r2, [r2, #0]
 80042d0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d6:	1c5a      	adds	r2, r3, #1
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042e0:	b29b      	uxth	r3, r3
 80042e2:	3b01      	subs	r3, #1
 80042e4:	b29a      	uxth	r2, r3
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042ea:	e05d      	b.n	80043a8 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d11c      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x264>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80042fe:	b29b      	uxth	r3, r3
 8004300:	2b00      	cmp	r3, #0
 8004302:	d017      	beq.n	8004334 <HAL_SPI_TransmitReceive+0x264>
 8004304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004306:	2b01      	cmp	r3, #1
 8004308:	d114      	bne.n	8004334 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	330c      	adds	r3, #12
 8004314:	7812      	ldrb	r2, [r2, #0]
 8004316:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800431c:	1c5a      	adds	r2, r3, #1
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004326:	b29b      	uxth	r3, r3
 8004328:	3b01      	subs	r3, #1
 800432a:	b29a      	uxth	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004330:	2300      	movs	r3, #0
 8004332:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b01      	cmp	r3, #1
 8004340:	d119      	bne.n	8004376 <HAL_SPI_TransmitReceive+0x2a6>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004346:	b29b      	uxth	r3, r3
 8004348:	2b00      	cmp	r3, #0
 800434a:	d014      	beq.n	8004376 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	68da      	ldr	r2, [r3, #12]
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004356:	b2d2      	uxtb	r2, r2
 8004358:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800435e:	1c5a      	adds	r2, r3, #1
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004368:	b29b      	uxth	r3, r3
 800436a:	3b01      	subs	r3, #1
 800436c:	b29a      	uxth	r2, r3
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004372:	2301      	movs	r3, #1
 8004374:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004376:	f7fe f97b 	bl	8002670 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004382:	429a      	cmp	r2, r3
 8004384:	d803      	bhi.n	800438e <HAL_SPI_TransmitReceive+0x2be>
 8004386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800438c:	d102      	bne.n	8004394 <HAL_SPI_TransmitReceive+0x2c4>
 800438e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	2201      	movs	r2, #1
 8004398:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	2200      	movs	r2, #0
 80043a0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e038      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80043ac:	b29b      	uxth	r3, r3
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d19c      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x21c>
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80043b6:	b29b      	uxth	r3, r3
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d197      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x21c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f8b7 	bl	8004534 <SPI_EndRxTxTransaction>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d008      	beq.n	80043de <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2220      	movs	r2, #32
 80043d0:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	2200      	movs	r2, #0
 80043d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80043da:	2301      	movs	r3, #1
 80043dc:	e01d      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d10a      	bne.n	80043fc <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043e6:	2300      	movs	r3, #0
 80043e8:	613b      	str	r3, [r7, #16]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	613b      	str	r3, [r7, #16]
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	613b      	str	r3, [r7, #16]
 80043fa:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004410:	2b00      	cmp	r3, #0
 8004412:	d001      	beq.n	8004418 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	e000      	b.n	800441a <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8004418:	2300      	movs	r3, #0
  }
}
 800441a:	4618      	mov	r0, r3
 800441c:	3728      	adds	r7, #40	@ 0x28
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
	...

08004424 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b088      	sub	sp, #32
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	603b      	str	r3, [r7, #0]
 8004430:	4613      	mov	r3, r2
 8004432:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004434:	f7fe f91c 	bl	8002670 <HAL_GetTick>
 8004438:	4602      	mov	r2, r0
 800443a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800443c:	1a9b      	subs	r3, r3, r2
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	4413      	add	r3, r2
 8004442:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004444:	f7fe f914 	bl	8002670 <HAL_GetTick>
 8004448:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800444a:	4b39      	ldr	r3, [pc, #228]	@ (8004530 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	015b      	lsls	r3, r3, #5
 8004450:	0d1b      	lsrs	r3, r3, #20
 8004452:	69fa      	ldr	r2, [r7, #28]
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800445a:	e054      	b.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d050      	beq.n	8004506 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004464:	f7fe f904 	bl	8002670 <HAL_GetTick>
 8004468:	4602      	mov	r2, r0
 800446a:	69bb      	ldr	r3, [r7, #24]
 800446c:	1ad3      	subs	r3, r2, r3
 800446e:	69fa      	ldr	r2, [r7, #28]
 8004470:	429a      	cmp	r2, r3
 8004472:	d902      	bls.n	800447a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d13d      	bne.n	80044f6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	685a      	ldr	r2, [r3, #4]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004488:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004492:	d111      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800449c:	d004      	beq.n	80044a8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044a6:	d107      	bne.n	80044b8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80044b6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044bc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80044c0:	d10f      	bne.n	80044e2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80044d0:	601a      	str	r2, [r3, #0]
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80044e0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e017      	b.n	8004526 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d101      	bne.n	8004500 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004500:	697b      	ldr	r3, [r7, #20]
 8004502:	3b01      	subs	r3, #1
 8004504:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	689a      	ldr	r2, [r3, #8]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	4013      	ands	r3, r2
 8004510:	68ba      	ldr	r2, [r7, #8]
 8004512:	429a      	cmp	r2, r3
 8004514:	bf0c      	ite	eq
 8004516:	2301      	moveq	r3, #1
 8004518:	2300      	movne	r3, #0
 800451a:	b2db      	uxtb	r3, r3
 800451c:	461a      	mov	r2, r3
 800451e:	79fb      	ldrb	r3, [r7, #7]
 8004520:	429a      	cmp	r2, r3
 8004522:	d19b      	bne.n	800445c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3720      	adds	r7, #32
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	2000000c 	.word	0x2000000c

08004534 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004534:	b580      	push	{r7, lr}
 8004536:	b086      	sub	sp, #24
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	2201      	movs	r2, #1
 8004548:	2102      	movs	r1, #2
 800454a:	68f8      	ldr	r0, [r7, #12]
 800454c:	f7ff ff6a 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d007      	beq.n	8004566 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800455a:	f043 0220 	orr.w	r2, r3, #32
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e013      	b.n	800458e <SPI_EndRxTxTransaction+0x5a>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	2200      	movs	r2, #0
 800456e:	2180      	movs	r1, #128	@ 0x80
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f7ff ff57 	bl	8004424 <SPI_WaitFlagStateUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d007      	beq.n	800458c <SPI_EndRxTxTransaction+0x58>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004580:	f043 0220 	orr.w	r2, r3, #32
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004588:	2303      	movs	r3, #3
 800458a:	e000      	b.n	800458e <SPI_EndRxTxTransaction+0x5a>
  }
  return HAL_OK;
 800458c:	2300      	movs	r3, #0
}
 800458e:	4618      	mov	r0, r3
 8004590:	3710      	adds	r7, #16
 8004592:	46bd      	mov	sp, r7
 8004594:	bd80      	pop	{r7, pc}

08004596 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004596:	b580      	push	{r7, lr}
 8004598:	b082      	sub	sp, #8
 800459a:	af00      	add	r7, sp, #0
 800459c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d101      	bne.n	80045a8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e041      	b.n	800462c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d106      	bne.n	80045c2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7fd fa3f 	bl	8001a40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2202      	movs	r2, #2
 80045c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fc17 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2201      	movs	r2, #1
 80045de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2201      	movs	r2, #1
 80045e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2201      	movs	r2, #1
 80045ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2201      	movs	r2, #1
 80045f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	2201      	movs	r2, #1
 80045fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	2201      	movs	r2, #1
 8004606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2201      	movs	r2, #1
 800461e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2201      	movs	r2, #1
 8004626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3708      	adds	r7, #8
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004634:	b480      	push	{r7}
 8004636:	b085      	sub	sp, #20
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b01      	cmp	r3, #1
 8004646:	d001      	beq.n	800464c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e03a      	b.n	80046c2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2202      	movs	r2, #2
 8004650:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f042 0201 	orr.w	r2, r2, #1
 8004662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	4a18      	ldr	r2, [pc, #96]	@ (80046cc <HAL_TIM_Base_Start_IT+0x98>)
 800466a:	4293      	cmp	r3, r2
 800466c:	d00e      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x58>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004676:	d009      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x58>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	4a14      	ldr	r2, [pc, #80]	@ (80046d0 <HAL_TIM_Base_Start_IT+0x9c>)
 800467e:	4293      	cmp	r3, r2
 8004680:	d004      	beq.n	800468c <HAL_TIM_Base_Start_IT+0x58>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a13      	ldr	r2, [pc, #76]	@ (80046d4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004688:	4293      	cmp	r3, r2
 800468a:	d111      	bne.n	80046b0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	f003 0307 	and.w	r3, r3, #7
 8004696:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b06      	cmp	r3, #6
 800469c:	d010      	beq.n	80046c0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f042 0201 	orr.w	r2, r2, #1
 80046ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046ae:	e007      	b.n	80046c0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0201 	orr.w	r2, r2, #1
 80046be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046c0:	2300      	movs	r3, #0
}
 80046c2:	4618      	mov	r0, r3
 80046c4:	3714      	adds	r7, #20
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bc80      	pop	{r7}
 80046ca:	4770      	bx	lr
 80046cc:	40012c00 	.word	0x40012c00
 80046d0:	40000400 	.word	0x40000400
 80046d4:	40000800 	.word	0x40000800

080046d8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b082      	sub	sp, #8
 80046dc:	af00      	add	r7, sp, #0
 80046de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d101      	bne.n	80046ea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80046e6:	2301      	movs	r3, #1
 80046e8:	e041      	b.n	800476e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046f0:	b2db      	uxtb	r3, r3
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d106      	bne.n	8004704 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f000 f839 	bl	8004776 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2202      	movs	r2, #2
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	3304      	adds	r3, #4
 8004714:	4619      	mov	r1, r3
 8004716:	4610      	mov	r0, r2
 8004718:	f000 fb76 	bl	8004e08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2201      	movs	r2, #1
 8004720:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2201      	movs	r2, #1
 8004728:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2201      	movs	r2, #1
 8004738:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2201      	movs	r2, #1
 8004740:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	2201      	movs	r2, #1
 8004748:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2201      	movs	r2, #1
 8004750:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2201      	movs	r2, #1
 8004760:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2201      	movs	r2, #1
 8004768:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800476c:	2300      	movs	r3, #0
}
 800476e:	4618      	mov	r0, r3
 8004770:	3708      	adds	r7, #8
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}

08004776 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800477e:	bf00      	nop
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	bc80      	pop	{r7}
 8004786:	4770      	bx	lr

08004788 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d109      	bne.n	80047ac <HAL_TIM_PWM_Start+0x24>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	2b01      	cmp	r3, #1
 80047a2:	bf14      	ite	ne
 80047a4:	2301      	movne	r3, #1
 80047a6:	2300      	moveq	r3, #0
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	e022      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	2b04      	cmp	r3, #4
 80047b0:	d109      	bne.n	80047c6 <HAL_TIM_PWM_Start+0x3e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80047b8:	b2db      	uxtb	r3, r3
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	bf14      	ite	ne
 80047be:	2301      	movne	r3, #1
 80047c0:	2300      	moveq	r3, #0
 80047c2:	b2db      	uxtb	r3, r3
 80047c4:	e015      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d109      	bne.n	80047e0 <HAL_TIM_PWM_Start+0x58>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80047d2:	b2db      	uxtb	r3, r3
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	bf14      	ite	ne
 80047d8:	2301      	movne	r3, #1
 80047da:	2300      	moveq	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_TIM_PWM_Start+0x6a>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	bf14      	ite	ne
 80047ec:	2301      	movne	r3, #1
 80047ee:	2300      	moveq	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e05e      	b.n	80048b8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d104      	bne.n	800480a <HAL_TIM_PWM_Start+0x82>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004808:	e013      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	2b04      	cmp	r3, #4
 800480e:	d104      	bne.n	800481a <HAL_TIM_PWM_Start+0x92>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2202      	movs	r2, #2
 8004814:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004818:	e00b      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	2b08      	cmp	r3, #8
 800481e:	d104      	bne.n	800482a <HAL_TIM_PWM_Start+0xa2>
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2202      	movs	r2, #2
 8004824:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004828:	e003      	b.n	8004832 <HAL_TIM_PWM_Start+0xaa>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	2202      	movs	r2, #2
 800482e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2201      	movs	r2, #1
 8004838:	6839      	ldr	r1, [r7, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f000 fd70 	bl	8005320 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a1e      	ldr	r2, [pc, #120]	@ (80048c0 <HAL_TIM_PWM_Start+0x138>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d107      	bne.n	800485a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004858:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a18      	ldr	r2, [pc, #96]	@ (80048c0 <HAL_TIM_PWM_Start+0x138>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d00e      	beq.n	8004882 <HAL_TIM_PWM_Start+0xfa>
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800486c:	d009      	beq.n	8004882 <HAL_TIM_PWM_Start+0xfa>
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	4a14      	ldr	r2, [pc, #80]	@ (80048c4 <HAL_TIM_PWM_Start+0x13c>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d004      	beq.n	8004882 <HAL_TIM_PWM_Start+0xfa>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a12      	ldr	r2, [pc, #72]	@ (80048c8 <HAL_TIM_PWM_Start+0x140>)
 800487e:	4293      	cmp	r3, r2
 8004880:	d111      	bne.n	80048a6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	f003 0307 	and.w	r3, r3, #7
 800488c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	2b06      	cmp	r3, #6
 8004892:	d010      	beq.n	80048b6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f042 0201 	orr.w	r2, r2, #1
 80048a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80048a4:	e007      	b.n	80048b6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	681a      	ldr	r2, [r3, #0]
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	f042 0201 	orr.w	r2, r2, #1
 80048b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80048b6:	2300      	movs	r3, #0
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	bd80      	pop	{r7, pc}
 80048c0:	40012c00 	.word	0x40012c00
 80048c4:	40000400 	.word	0x40000400
 80048c8:	40000800 	.word	0x40000800

080048cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b084      	sub	sp, #16
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	68db      	ldr	r3, [r3, #12]
 80048da:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	691b      	ldr	r3, [r3, #16]
 80048e2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048e4:	68bb      	ldr	r3, [r7, #8]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d020      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	f003 0302 	and.w	r3, r3, #2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d01b      	beq.n	8004930 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f06f 0202 	mvn.w	r2, #2
 8004900:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2201      	movs	r2, #1
 8004906:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	699b      	ldr	r3, [r3, #24]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	2b00      	cmp	r3, #0
 8004914:	d003      	beq.n	800491e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f000 fa5a 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 800491c:	e005      	b.n	800492a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f000 fa4d 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 fa5c 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 0304 	and.w	r3, r3, #4
 8004936:	2b00      	cmp	r3, #0
 8004938:	d020      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	f003 0304 	and.w	r3, r3, #4
 8004940:	2b00      	cmp	r3, #0
 8004942:	d01b      	beq.n	800497c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f06f 0204 	mvn.w	r2, #4
 800494c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2202      	movs	r2, #2
 8004952:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	699b      	ldr	r3, [r3, #24]
 800495a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800495e:	2b00      	cmp	r3, #0
 8004960:	d003      	beq.n	800496a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fa34 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004968:	e005      	b.n	8004976 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496a:	6878      	ldr	r0, [r7, #4]
 800496c:	f000 fa27 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	6878      	ldr	r0, [r7, #4]
 8004972:	f000 fa36 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800497c:	68bb      	ldr	r3, [r7, #8]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d020      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f003 0308 	and.w	r3, r3, #8
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01b      	beq.n	80049c8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0208 	mvn.w	r2, #8
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2204      	movs	r2, #4
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	69db      	ldr	r3, [r3, #28]
 80049a6:	f003 0303 	and.w	r3, r3, #3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fa0e 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fa01 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 fa10 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	f003 0310 	and.w	r3, r3, #16
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d020      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f003 0310 	and.w	r3, r3, #16
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d01b      	beq.n	8004a14 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f06f 0210 	mvn.w	r2, #16
 80049e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2208      	movs	r2, #8
 80049ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f9e8 	bl	8004dd0 <HAL_TIM_IC_CaptureCallback>
 8004a00:	e005      	b.n	8004a0e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f9db 	bl	8004dbe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a08:	6878      	ldr	r0, [r7, #4]
 8004a0a:	f000 f9ea 	bl	8004de2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004a14:	68bb      	ldr	r3, [r7, #8]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d00c      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f003 0301 	and.w	r3, r3, #1
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d007      	beq.n	8004a38 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f06f 0201 	mvn.w	r2, #1
 8004a30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	f7fc fa76 	bl	8000f24 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a38:	68bb      	ldr	r3, [r7, #8]
 8004a3a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d00c      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d007      	beq.n	8004a5c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fced 	bl	8005436 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00c      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d007      	beq.n	8004a80 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f9ba 	bl	8004df4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	f003 0320 	and.w	r3, r3, #32
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d00c      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f003 0320 	and.w	r3, r3, #32
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f06f 0220 	mvn.w	r2, #32
 8004a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a9e:	6878      	ldr	r0, [r7, #4]
 8004aa0:	f000 fcc0 	bl	8005424 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004aa4:	bf00      	nop
 8004aa6:	3710      	adds	r7, #16
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}

08004aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004aac:	b580      	push	{r7, lr}
 8004aae:	b086      	sub	sp, #24
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	60f8      	str	r0, [r7, #12]
 8004ab4:	60b9      	str	r1, [r7, #8]
 8004ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ac2:	2b01      	cmp	r3, #1
 8004ac4:	d101      	bne.n	8004aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ac6:	2302      	movs	r3, #2
 8004ac8:	e0ae      	b.n	8004c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2201      	movs	r2, #1
 8004ace:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2b0c      	cmp	r3, #12
 8004ad6:	f200 809f 	bhi.w	8004c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004ada:	a201      	add	r2, pc, #4	@ (adr r2, 8004ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ae0:	08004b15 	.word	0x08004b15
 8004ae4:	08004c19 	.word	0x08004c19
 8004ae8:	08004c19 	.word	0x08004c19
 8004aec:	08004c19 	.word	0x08004c19
 8004af0:	08004b55 	.word	0x08004b55
 8004af4:	08004c19 	.word	0x08004c19
 8004af8:	08004c19 	.word	0x08004c19
 8004afc:	08004c19 	.word	0x08004c19
 8004b00:	08004b97 	.word	0x08004b97
 8004b04:	08004c19 	.word	0x08004c19
 8004b08:	08004c19 	.word	0x08004c19
 8004b0c:	08004c19 	.word	0x08004c19
 8004b10:	08004bd7 	.word	0x08004bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68b9      	ldr	r1, [r7, #8]
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f000 f9e2 	bl	8004ee4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	699a      	ldr	r2, [r3, #24]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f042 0208 	orr.w	r2, r2, #8
 8004b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	699a      	ldr	r2, [r3, #24]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0204 	bic.w	r2, r2, #4
 8004b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6999      	ldr	r1, [r3, #24]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	691a      	ldr	r2, [r3, #16]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	430a      	orrs	r2, r1
 8004b50:	619a      	str	r2, [r3, #24]
      break;
 8004b52:	e064      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68b9      	ldr	r1, [r7, #8]
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	f000 fa28 	bl	8004fb0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	699a      	ldr	r2, [r3, #24]
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	699a      	ldr	r2, [r3, #24]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6999      	ldr	r1, [r3, #24]
 8004b86:	68bb      	ldr	r3, [r7, #8]
 8004b88:	691b      	ldr	r3, [r3, #16]
 8004b8a:	021a      	lsls	r2, r3, #8
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	430a      	orrs	r2, r1
 8004b92:	619a      	str	r2, [r3, #24]
      break;
 8004b94:	e043      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	68b9      	ldr	r1, [r7, #8]
 8004b9c:	4618      	mov	r0, r3
 8004b9e:	f000 fa71 	bl	8005084 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	69da      	ldr	r2, [r3, #28]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f042 0208 	orr.w	r2, r2, #8
 8004bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	69da      	ldr	r2, [r3, #28]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	69d9      	ldr	r1, [r3, #28]
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	691a      	ldr	r2, [r3, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	430a      	orrs	r2, r1
 8004bd2:	61da      	str	r2, [r3, #28]
      break;
 8004bd4:	e023      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fabb 	bl	8005158 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	69da      	ldr	r2, [r3, #28]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69d9      	ldr	r1, [r3, #28]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	61da      	str	r2, [r3, #28]
      break;
 8004c16:	e002      	b.n	8004c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c28:	4618      	mov	r0, r3
 8004c2a:	3718      	adds	r7, #24
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004c30:	b580      	push	{r7, lr}
 8004c32:	b084      	sub	sp, #16
 8004c34:	af00      	add	r7, sp, #0
 8004c36:	6078      	str	r0, [r7, #4]
 8004c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d101      	bne.n	8004c4c <HAL_TIM_ConfigClockSource+0x1c>
 8004c48:	2302      	movs	r3, #2
 8004c4a:	e0b4      	b.n	8004db6 <HAL_TIM_ConfigClockSource+0x186>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2202      	movs	r2, #2
 8004c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68ba      	ldr	r2, [r7, #8]
 8004c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c84:	d03e      	beq.n	8004d04 <HAL_TIM_ConfigClockSource+0xd4>
 8004c86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004c8a:	f200 8087 	bhi.w	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c92:	f000 8086 	beq.w	8004da2 <HAL_TIM_ConfigClockSource+0x172>
 8004c96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c9a:	d87f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004c9c:	2b70      	cmp	r3, #112	@ 0x70
 8004c9e:	d01a      	beq.n	8004cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8004ca0:	2b70      	cmp	r3, #112	@ 0x70
 8004ca2:	d87b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ca4:	2b60      	cmp	r3, #96	@ 0x60
 8004ca6:	d050      	beq.n	8004d4a <HAL_TIM_ConfigClockSource+0x11a>
 8004ca8:	2b60      	cmp	r3, #96	@ 0x60
 8004caa:	d877      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cac:	2b50      	cmp	r3, #80	@ 0x50
 8004cae:	d03c      	beq.n	8004d2a <HAL_TIM_ConfigClockSource+0xfa>
 8004cb0:	2b50      	cmp	r3, #80	@ 0x50
 8004cb2:	d873      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d058      	beq.n	8004d6a <HAL_TIM_ConfigClockSource+0x13a>
 8004cb8:	2b40      	cmp	r3, #64	@ 0x40
 8004cba:	d86f      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cbc:	2b30      	cmp	r3, #48	@ 0x30
 8004cbe:	d064      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc0:	2b30      	cmp	r3, #48	@ 0x30
 8004cc2:	d86b      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004cc4:	2b20      	cmp	r3, #32
 8004cc6:	d060      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cc8:	2b20      	cmp	r3, #32
 8004cca:	d867      	bhi.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d05c      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd0:	2b10      	cmp	r3, #16
 8004cd2:	d05a      	beq.n	8004d8a <HAL_TIM_ConfigClockSource+0x15a>
 8004cd4:	e062      	b.n	8004d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004cde:	683b      	ldr	r3, [r7, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004ce6:	f000 fafc 	bl	80052e2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	609a      	str	r2, [r3, #8]
      break;
 8004d02:	e04f      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d14:	f000 fae5 	bl	80052e2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	689a      	ldr	r2, [r3, #8]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004d26:	609a      	str	r2, [r3, #8]
      break;
 8004d28:	e03c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d36:	461a      	mov	r2, r3
 8004d38:	f000 fa5c 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	2150      	movs	r1, #80	@ 0x50
 8004d42:	4618      	mov	r0, r3
 8004d44:	f000 fab3 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d48:	e02c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004d56:	461a      	mov	r2, r3
 8004d58:	f000 fa7a 	bl	8005250 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	2160      	movs	r1, #96	@ 0x60
 8004d62:	4618      	mov	r0, r3
 8004d64:	f000 faa3 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d68:	e01c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004d72:	683b      	ldr	r3, [r7, #0]
 8004d74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004d76:	461a      	mov	r2, r3
 8004d78:	f000 fa3c 	bl	80051f4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	2140      	movs	r1, #64	@ 0x40
 8004d82:	4618      	mov	r0, r3
 8004d84:	f000 fa93 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d88:	e00c      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4619      	mov	r1, r3
 8004d94:	4610      	mov	r0, r2
 8004d96:	f000 fa8a 	bl	80052ae <TIM_ITRx_SetConfig>
      break;
 8004d9a:	e003      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8004da0:	e000      	b.n	8004da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2201      	movs	r2, #1
 8004da8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3710      	adds	r7, #16
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004dbe:	b480      	push	{r7}
 8004dc0:	b083      	sub	sp, #12
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004dc6:	bf00      	nop
 8004dc8:	370c      	adds	r7, #12
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	bc80      	pop	{r7}
 8004dce:	4770      	bx	lr

08004dd0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004dd0:	b480      	push	{r7}
 8004dd2:	b083      	sub	sp, #12
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004dd8:	bf00      	nop
 8004dda:	370c      	adds	r7, #12
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bc80      	pop	{r7}
 8004de0:	4770      	bx	lr

08004de2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr

08004df4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b083      	sub	sp, #12
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004dfc:	bf00      	nop
 8004dfe:	370c      	adds	r7, #12
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
	...

08004e08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b085      	sub	sp, #20
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e1c:	4293      	cmp	r3, r2
 8004e1e:	d00b      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e26:	d007      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	4a2c      	ldr	r2, [pc, #176]	@ (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e2c:	4293      	cmp	r3, r2
 8004e2e:	d003      	beq.n	8004e38 <TIM_Base_SetConfig+0x30>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	4a2b      	ldr	r2, [pc, #172]	@ (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d108      	bne.n	8004e4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	68fa      	ldr	r2, [r7, #12]
 8004e46:	4313      	orrs	r3, r2
 8004e48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	4a22      	ldr	r2, [pc, #136]	@ (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004e4e:	4293      	cmp	r3, r2
 8004e50:	d00b      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004e58:	d007      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	4a1f      	ldr	r2, [pc, #124]	@ (8004edc <TIM_Base_SetConfig+0xd4>)
 8004e5e:	4293      	cmp	r3, r2
 8004e60:	d003      	beq.n	8004e6a <TIM_Base_SetConfig+0x62>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	4a1e      	ldr	r2, [pc, #120]	@ (8004ee0 <TIM_Base_SetConfig+0xd8>)
 8004e66:	4293      	cmp	r3, r2
 8004e68:	d108      	bne.n	8004e7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004e70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	695b      	ldr	r3, [r3, #20]
 8004e86:	4313      	orrs	r3, r2
 8004e88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68fa      	ldr	r2, [r7, #12]
 8004e8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	689a      	ldr	r2, [r3, #8]
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a0d      	ldr	r2, [pc, #52]	@ (8004ed8 <TIM_Base_SetConfig+0xd0>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d103      	bne.n	8004eb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	691a      	ldr	r2, [r3, #16]
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d005      	beq.n	8004ece <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	691b      	ldr	r3, [r3, #16]
 8004ec6:	f023 0201 	bic.w	r2, r3, #1
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	611a      	str	r2, [r3, #16]
  }
}
 8004ece:	bf00      	nop
 8004ed0:	3714      	adds	r7, #20
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	bc80      	pop	{r7}
 8004ed6:	4770      	bx	lr
 8004ed8:	40012c00 	.word	0x40012c00
 8004edc:	40000400 	.word	0x40000400
 8004ee0:	40000800 	.word	0x40000800

08004ee4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b087      	sub	sp, #28
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6a1b      	ldr	r3, [r3, #32]
 8004ef2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a1b      	ldr	r3, [r3, #32]
 8004ef8:	f023 0201 	bic.w	r2, r3, #1
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	699b      	ldr	r3, [r3, #24]
 8004f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	f023 0303 	bic.w	r3, r3, #3
 8004f1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	4313      	orrs	r3, r2
 8004f24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	f023 0302 	bic.w	r3, r3, #2
 8004f2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	697a      	ldr	r2, [r7, #20]
 8004f34:	4313      	orrs	r3, r2
 8004f36:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	4a1c      	ldr	r2, [pc, #112]	@ (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d10c      	bne.n	8004f5a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	f023 0308 	bic.w	r3, r3, #8
 8004f46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	68db      	ldr	r3, [r3, #12]
 8004f4c:	697a      	ldr	r2, [r7, #20]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f023 0304 	bic.w	r3, r3, #4
 8004f58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a13      	ldr	r2, [pc, #76]	@ (8004fac <TIM_OC1_SetConfig+0xc8>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d111      	bne.n	8004f86 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f62:	693b      	ldr	r3, [r7, #16]
 8004f64:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f68:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004f70:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f72:	683b      	ldr	r3, [r7, #0]
 8004f74:	695b      	ldr	r3, [r3, #20]
 8004f76:	693a      	ldr	r2, [r7, #16]
 8004f78:	4313      	orrs	r3, r2
 8004f7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	699b      	ldr	r3, [r3, #24]
 8004f80:	693a      	ldr	r2, [r7, #16]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	693a      	ldr	r2, [r7, #16]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	bf00      	nop
 8004fa2:	371c      	adds	r7, #28
 8004fa4:	46bd      	mov	sp, r7
 8004fa6:	bc80      	pop	{r7}
 8004fa8:	4770      	bx	lr
 8004faa:	bf00      	nop
 8004fac:	40012c00 	.word	0x40012c00

08004fb0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b087      	sub	sp, #28
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	6a1b      	ldr	r3, [r3, #32]
 8004fbe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6a1b      	ldr	r3, [r3, #32]
 8004fc4:	f023 0210 	bic.w	r2, r3, #16
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004fde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004fe6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	021b      	lsls	r3, r3, #8
 8004fee:	68fa      	ldr	r2, [r7, #12]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0320 	bic.w	r3, r3, #32
 8004ffa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	011b      	lsls	r3, r3, #4
 8005002:	697a      	ldr	r2, [r7, #20]
 8005004:	4313      	orrs	r3, r2
 8005006:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4a1d      	ldr	r2, [pc, #116]	@ (8005080 <TIM_OC2_SetConfig+0xd0>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d10d      	bne.n	800502c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005010:	697b      	ldr	r3, [r7, #20]
 8005012:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005016:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	011b      	lsls	r3, r3, #4
 800501e:	697a      	ldr	r2, [r7, #20]
 8005020:	4313      	orrs	r3, r2
 8005022:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005024:	697b      	ldr	r3, [r7, #20]
 8005026:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800502a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a14      	ldr	r2, [pc, #80]	@ (8005080 <TIM_OC2_SetConfig+0xd0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d113      	bne.n	800505c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800503a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005042:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	695b      	ldr	r3, [r3, #20]
 8005048:	009b      	lsls	r3, r3, #2
 800504a:	693a      	ldr	r2, [r7, #16]
 800504c:	4313      	orrs	r3, r2
 800504e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	699b      	ldr	r3, [r3, #24]
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	4313      	orrs	r3, r2
 800505a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68fa      	ldr	r2, [r7, #12]
 8005066:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005068:	683b      	ldr	r3, [r7, #0]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	621a      	str	r2, [r3, #32]
}
 8005076:	bf00      	nop
 8005078:	371c      	adds	r7, #28
 800507a:	46bd      	mov	sp, r7
 800507c:	bc80      	pop	{r7}
 800507e:	4770      	bx	lr
 8005080:	40012c00 	.word	0x40012c00

08005084 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005084:	b480      	push	{r7}
 8005086:	b087      	sub	sp, #28
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6a1b      	ldr	r3, [r3, #32]
 8005092:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6a1b      	ldr	r3, [r3, #32]
 8005098:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	69db      	ldr	r3, [r3, #28]
 80050aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80050b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	f023 0303 	bic.w	r3, r3, #3
 80050ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	4313      	orrs	r3, r2
 80050c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050c6:	697b      	ldr	r3, [r7, #20]
 80050c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80050cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	021b      	lsls	r3, r3, #8
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	4a1d      	ldr	r2, [pc, #116]	@ (8005154 <TIM_OC3_SetConfig+0xd0>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d10d      	bne.n	80050fe <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80050e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	68db      	ldr	r3, [r3, #12]
 80050ee:	021b      	lsls	r3, r3, #8
 80050f0:	697a      	ldr	r2, [r7, #20]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80050f6:	697b      	ldr	r3, [r7, #20]
 80050f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80050fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a14      	ldr	r2, [pc, #80]	@ (8005154 <TIM_OC3_SetConfig+0xd0>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d113      	bne.n	800512e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005106:	693b      	ldr	r3, [r7, #16]
 8005108:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800510c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005114:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	695b      	ldr	r3, [r3, #20]
 800511a:	011b      	lsls	r3, r3, #4
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	699b      	ldr	r3, [r3, #24]
 8005126:	011b      	lsls	r3, r3, #4
 8005128:	693a      	ldr	r2, [r7, #16]
 800512a:	4313      	orrs	r3, r2
 800512c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	68fa      	ldr	r2, [r7, #12]
 8005138:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	685a      	ldr	r2, [r3, #4]
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	697a      	ldr	r2, [r7, #20]
 8005146:	621a      	str	r2, [r3, #32]
}
 8005148:	bf00      	nop
 800514a:	371c      	adds	r7, #28
 800514c:	46bd      	mov	sp, r7
 800514e:	bc80      	pop	{r7}
 8005150:	4770      	bx	lr
 8005152:	bf00      	nop
 8005154:	40012c00 	.word	0x40012c00

08005158 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005158:	b480      	push	{r7}
 800515a:	b087      	sub	sp, #28
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
 8005160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	6a1b      	ldr	r3, [r3, #32]
 8005166:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6a1b      	ldr	r3, [r3, #32]
 800516c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	685b      	ldr	r3, [r3, #4]
 8005178:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	69db      	ldr	r3, [r3, #28]
 800517e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800518e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	021b      	lsls	r3, r3, #8
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4313      	orrs	r3, r2
 800519a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80051a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80051a4:	683b      	ldr	r3, [r7, #0]
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	031b      	lsls	r3, r3, #12
 80051aa:	693a      	ldr	r2, [r7, #16]
 80051ac:	4313      	orrs	r3, r2
 80051ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	4a0f      	ldr	r2, [pc, #60]	@ (80051f0 <TIM_OC4_SetConfig+0x98>)
 80051b4:	4293      	cmp	r3, r2
 80051b6:	d109      	bne.n	80051cc <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80051b8:	697b      	ldr	r3, [r7, #20]
 80051ba:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80051be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	019b      	lsls	r3, r3, #6
 80051c6:	697a      	ldr	r2, [r7, #20]
 80051c8:	4313      	orrs	r3, r2
 80051ca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	697a      	ldr	r2, [r7, #20]
 80051d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	68fa      	ldr	r2, [r7, #12]
 80051d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80051d8:	683b      	ldr	r3, [r7, #0]
 80051da:	685a      	ldr	r2, [r3, #4]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	621a      	str	r2, [r3, #32]
}
 80051e6:	bf00      	nop
 80051e8:	371c      	adds	r7, #28
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bc80      	pop	{r7}
 80051ee:	4770      	bx	lr
 80051f0:	40012c00 	.word	0x40012c00

080051f4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	6a1b      	ldr	r3, [r3, #32]
 800520a:	f023 0201 	bic.w	r2, r3, #1
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	699b      	ldr	r3, [r3, #24]
 8005216:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800521e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	693a      	ldr	r2, [r7, #16]
 8005226:	4313      	orrs	r3, r2
 8005228:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800522a:	697b      	ldr	r3, [r7, #20]
 800522c:	f023 030a 	bic.w	r3, r3, #10
 8005230:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005232:	697a      	ldr	r2, [r7, #20]
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	4313      	orrs	r3, r2
 8005238:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	693a      	ldr	r2, [r7, #16]
 800523e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	697a      	ldr	r2, [r7, #20]
 8005244:	621a      	str	r2, [r3, #32]
}
 8005246:	bf00      	nop
 8005248:	371c      	adds	r7, #28
 800524a:	46bd      	mov	sp, r7
 800524c:	bc80      	pop	{r7}
 800524e:	4770      	bx	lr

08005250 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005250:	b480      	push	{r7}
 8005252:	b087      	sub	sp, #28
 8005254:	af00      	add	r7, sp, #0
 8005256:	60f8      	str	r0, [r7, #12]
 8005258:	60b9      	str	r1, [r7, #8]
 800525a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6a1b      	ldr	r3, [r3, #32]
 8005260:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6a1b      	ldr	r3, [r3, #32]
 8005266:	f023 0210 	bic.w	r2, r3, #16
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	699b      	ldr	r3, [r3, #24]
 8005272:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800527a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	031b      	lsls	r3, r3, #12
 8005280:	693a      	ldr	r2, [r7, #16]
 8005282:	4313      	orrs	r3, r2
 8005284:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800528c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	011b      	lsls	r3, r3, #4
 8005292:	697a      	ldr	r2, [r7, #20]
 8005294:	4313      	orrs	r3, r2
 8005296:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	697a      	ldr	r2, [r7, #20]
 80052a2:	621a      	str	r2, [r3, #32]
}
 80052a4:	bf00      	nop
 80052a6:	371c      	adds	r7, #28
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bc80      	pop	{r7}
 80052ac:	4770      	bx	lr

080052ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052ae:	b480      	push	{r7}
 80052b0:	b085      	sub	sp, #20
 80052b2:	af00      	add	r7, sp, #0
 80052b4:	6078      	str	r0, [r7, #4]
 80052b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	689b      	ldr	r3, [r3, #8]
 80052bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f043 0307 	orr.w	r3, r3, #7
 80052d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	609a      	str	r2, [r3, #8]
}
 80052d8:	bf00      	nop
 80052da:	3714      	adds	r7, #20
 80052dc:	46bd      	mov	sp, r7
 80052de:	bc80      	pop	{r7}
 80052e0:	4770      	bx	lr

080052e2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052e2:	b480      	push	{r7}
 80052e4:	b087      	sub	sp, #28
 80052e6:	af00      	add	r7, sp, #0
 80052e8:	60f8      	str	r0, [r7, #12]
 80052ea:	60b9      	str	r1, [r7, #8]
 80052ec:	607a      	str	r2, [r7, #4]
 80052ee:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80052fc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	021a      	lsls	r2, r3, #8
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	431a      	orrs	r2, r3
 8005306:	68bb      	ldr	r3, [r7, #8]
 8005308:	4313      	orrs	r3, r2
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	4313      	orrs	r3, r2
 800530e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	697a      	ldr	r2, [r7, #20]
 8005314:	609a      	str	r2, [r3, #8]
}
 8005316:	bf00      	nop
 8005318:	371c      	adds	r7, #28
 800531a:	46bd      	mov	sp, r7
 800531c:	bc80      	pop	{r7}
 800531e:	4770      	bx	lr

08005320 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005320:	b480      	push	{r7}
 8005322:	b087      	sub	sp, #28
 8005324:	af00      	add	r7, sp, #0
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	f003 031f 	and.w	r3, r3, #31
 8005332:	2201      	movs	r2, #1
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	6a1a      	ldr	r2, [r3, #32]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	43db      	mvns	r3, r3
 8005342:	401a      	ands	r2, r3
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	6a1a      	ldr	r2, [r3, #32]
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	f003 031f 	and.w	r3, r3, #31
 8005352:	6879      	ldr	r1, [r7, #4]
 8005354:	fa01 f303 	lsl.w	r3, r1, r3
 8005358:	431a      	orrs	r2, r3
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	621a      	str	r2, [r3, #32]
}
 800535e:	bf00      	nop
 8005360:	371c      	adds	r7, #28
 8005362:	46bd      	mov	sp, r7
 8005364:	bc80      	pop	{r7}
 8005366:	4770      	bx	lr

08005368 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005368:	b480      	push	{r7}
 800536a:	b085      	sub	sp, #20
 800536c:	af00      	add	r7, sp, #0
 800536e:	6078      	str	r0, [r7, #4]
 8005370:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005378:	2b01      	cmp	r3, #1
 800537a:	d101      	bne.n	8005380 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800537c:	2302      	movs	r3, #2
 800537e:	e046      	b.n	800540e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2201      	movs	r2, #1
 8005384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2202      	movs	r2, #2
 800538c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80053a6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053a8:	683b      	ldr	r3, [r7, #0]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68fa      	ldr	r2, [r7, #12]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	4a16      	ldr	r2, [pc, #88]	@ (8005418 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d00e      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80053cc:	d009      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4a12      	ldr	r2, [pc, #72]	@ (800541c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d004      	beq.n	80053e2 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	4a10      	ldr	r2, [pc, #64]	@ (8005420 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d10c      	bne.n	80053fc <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053e2:	68bb      	ldr	r3, [r7, #8]
 80053e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80053e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	68ba      	ldr	r2, [r7, #8]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2201      	movs	r2, #1
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800540c:	2300      	movs	r3, #0
}
 800540e:	4618      	mov	r0, r3
 8005410:	3714      	adds	r7, #20
 8005412:	46bd      	mov	sp, r7
 8005414:	bc80      	pop	{r7}
 8005416:	4770      	bx	lr
 8005418:	40012c00 	.word	0x40012c00
 800541c:	40000400 	.word	0x40000400
 8005420:	40000800 	.word	0x40000800

08005424 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	bc80      	pop	{r7}
 8005434:	4770      	bx	lr

08005436 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005436:	b480      	push	{r7}
 8005438:	b083      	sub	sp, #12
 800543a:	af00      	add	r7, sp, #0
 800543c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800543e:	bf00      	nop
 8005440:	370c      	adds	r7, #12
 8005442:	46bd      	mov	sp, r7
 8005444:	bc80      	pop	{r7}
 8005446:	4770      	bx	lr

08005448 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800544c:	4904      	ldr	r1, [pc, #16]	@ (8005460 <MX_FATFS_Init+0x18>)
 800544e:	4805      	ldr	r0, [pc, #20]	@ (8005464 <MX_FATFS_Init+0x1c>)
 8005450:	f002 fc56 	bl	8007d00 <FATFS_LinkDriver>
 8005454:	4603      	mov	r3, r0
 8005456:	461a      	mov	r2, r3
 8005458:	4b03      	ldr	r3, [pc, #12]	@ (8005468 <MX_FATFS_Init+0x20>)
 800545a:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800545c:	bf00      	nop
 800545e:	bd80      	pop	{r7, pc}
 8005460:	2000061c 	.word	0x2000061c
 8005464:	2000001c 	.word	0x2000001c
 8005468:	20000618 	.word	0x20000618

0800546c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800546c:	b480      	push	{r7}
 800546e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005470:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005472:	4618      	mov	r0, r3
 8005474:	46bd      	mov	sp, r7
 8005476:	bc80      	pop	{r7}
 8005478:	4770      	bx	lr

0800547a <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	4603      	mov	r3, r0
 8005482:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
  return USER_SPI_initialize(pdrv);
 8005484:	79fb      	ldrb	r3, [r7, #7]
 8005486:	4618      	mov	r0, r3
 8005488:	f7fc fd54 	bl	8001f34 <USER_SPI_initialize>
 800548c:	4603      	mov	r3, r0
 800548e:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b082      	sub	sp, #8
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
  return USER_SPI_status(pdrv);
 80054a2:	79fb      	ldrb	r3, [r7, #7]
 80054a4:	4618      	mov	r0, r3
 80054a6:	f7fc fe2f 	bl	8002108 <USER_SPI_status>
 80054aa:	4603      	mov	r3, r0
 80054ac:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3708      	adds	r7, #8
 80054b2:	46bd      	mov	sp, r7
 80054b4:	bd80      	pop	{r7, pc}

080054b6 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 80054b6:	b580      	push	{r7, lr}
 80054b8:	b084      	sub	sp, #16
 80054ba:	af00      	add	r7, sp, #0
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
 80054c2:	4603      	mov	r3, r0
 80054c4:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
  return USER_SPI_read(pdrv, buff, sector, count);
 80054c6:	7bf8      	ldrb	r0, [r7, #15]
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	68b9      	ldr	r1, [r7, #8]
 80054ce:	f7fc fe2f 	bl	8002130 <USER_SPI_read>
 80054d2:	4603      	mov	r3, r0
 80054d4:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}

080054de <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 80054de:	b580      	push	{r7, lr}
 80054e0:	b084      	sub	sp, #16
 80054e2:	af00      	add	r7, sp, #0
 80054e4:	60b9      	str	r1, [r7, #8]
 80054e6:	607a      	str	r2, [r7, #4]
 80054e8:	603b      	str	r3, [r7, #0]
 80054ea:	4603      	mov	r3, r0
 80054ec:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
  return USER_SPI_write(pdrv, buff, sector, count);
 80054ee:	7bf8      	ldrb	r0, [r7, #15]
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	687a      	ldr	r2, [r7, #4]
 80054f4:	68b9      	ldr	r1, [r7, #8]
 80054f6:	f7fc fe81 	bl	80021fc <USER_SPI_write>
 80054fa:	4603      	mov	r3, r0
 80054fc:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3710      	adds	r7, #16
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8005506:	b580      	push	{r7, lr}
 8005508:	b082      	sub	sp, #8
 800550a:	af00      	add	r7, sp, #0
 800550c:	4603      	mov	r3, r0
 800550e:	603a      	str	r2, [r7, #0]
 8005510:	71fb      	strb	r3, [r7, #7]
 8005512:	460b      	mov	r3, r1
 8005514:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
  return USER_SPI_ioctl(pdrv, cmd, buff);
 8005516:	79fb      	ldrb	r3, [r7, #7]
 8005518:	79b9      	ldrb	r1, [r7, #6]
 800551a:	683a      	ldr	r2, [r7, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fc fee9 	bl	80022f4 <USER_SPI_ioctl>
 8005522:	4603      	mov	r3, r0
 8005524:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8005526:	4618      	mov	r0, r3
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
	...

08005530 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	4603      	mov	r3, r0
 8005538:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800553a:	79fb      	ldrb	r3, [r7, #7]
 800553c:	4a08      	ldr	r2, [pc, #32]	@ (8005560 <disk_status+0x30>)
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	4413      	add	r3, r2
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	79fa      	ldrb	r2, [r7, #7]
 8005548:	4905      	ldr	r1, [pc, #20]	@ (8005560 <disk_status+0x30>)
 800554a:	440a      	add	r2, r1
 800554c:	7a12      	ldrb	r2, [r2, #8]
 800554e:	4610      	mov	r0, r2
 8005550:	4798      	blx	r3
 8005552:	4603      	mov	r3, r0
 8005554:	73fb      	strb	r3, [r7, #15]
  return stat;
 8005556:	7bfb      	ldrb	r3, [r7, #15]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20000640 	.word	0x20000640

08005564 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b084      	sub	sp, #16
 8005568:	af00      	add	r7, sp, #0
 800556a:	4603      	mov	r3, r0
 800556c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800556e:	2300      	movs	r3, #0
 8005570:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8005572:	79fb      	ldrb	r3, [r7, #7]
 8005574:	4a0d      	ldr	r2, [pc, #52]	@ (80055ac <disk_initialize+0x48>)
 8005576:	5cd3      	ldrb	r3, [r2, r3]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d111      	bne.n	80055a0 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 800557c:	79fb      	ldrb	r3, [r7, #7]
 800557e:	4a0b      	ldr	r2, [pc, #44]	@ (80055ac <disk_initialize+0x48>)
 8005580:	2101      	movs	r1, #1
 8005582:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005584:	79fb      	ldrb	r3, [r7, #7]
 8005586:	4a09      	ldr	r2, [pc, #36]	@ (80055ac <disk_initialize+0x48>)
 8005588:	009b      	lsls	r3, r3, #2
 800558a:	4413      	add	r3, r2
 800558c:	685b      	ldr	r3, [r3, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	79fa      	ldrb	r2, [r7, #7]
 8005592:	4906      	ldr	r1, [pc, #24]	@ (80055ac <disk_initialize+0x48>)
 8005594:	440a      	add	r2, r1
 8005596:	7a12      	ldrb	r2, [r2, #8]
 8005598:	4610      	mov	r0, r2
 800559a:	4798      	blx	r3
 800559c:	4603      	mov	r3, r0
 800559e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 80055a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	20000640 	.word	0x20000640

080055b0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 80055b0:	b590      	push	{r4, r7, lr}
 80055b2:	b087      	sub	sp, #28
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	603b      	str	r3, [r7, #0]
 80055bc:	4603      	mov	r3, r0
 80055be:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 80055c0:	7bfb      	ldrb	r3, [r7, #15]
 80055c2:	4a0a      	ldr	r2, [pc, #40]	@ (80055ec <disk_read+0x3c>)
 80055c4:	009b      	lsls	r3, r3, #2
 80055c6:	4413      	add	r3, r2
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	689c      	ldr	r4, [r3, #8]
 80055cc:	7bfb      	ldrb	r3, [r7, #15]
 80055ce:	4a07      	ldr	r2, [pc, #28]	@ (80055ec <disk_read+0x3c>)
 80055d0:	4413      	add	r3, r2
 80055d2:	7a18      	ldrb	r0, [r3, #8]
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	687a      	ldr	r2, [r7, #4]
 80055d8:	68b9      	ldr	r1, [r7, #8]
 80055da:	47a0      	blx	r4
 80055dc:	4603      	mov	r3, r0
 80055de:	75fb      	strb	r3, [r7, #23]
  return res;
 80055e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	371c      	adds	r7, #28
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000640 	.word	0x20000640

080055f0 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 80055f0:	b590      	push	{r4, r7, lr}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	60b9      	str	r1, [r7, #8]
 80055f8:	607a      	str	r2, [r7, #4]
 80055fa:	603b      	str	r3, [r7, #0]
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8005600:	7bfb      	ldrb	r3, [r7, #15]
 8005602:	4a0a      	ldr	r2, [pc, #40]	@ (800562c <disk_write+0x3c>)
 8005604:	009b      	lsls	r3, r3, #2
 8005606:	4413      	add	r3, r2
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	68dc      	ldr	r4, [r3, #12]
 800560c:	7bfb      	ldrb	r3, [r7, #15]
 800560e:	4a07      	ldr	r2, [pc, #28]	@ (800562c <disk_write+0x3c>)
 8005610:	4413      	add	r3, r2
 8005612:	7a18      	ldrb	r0, [r3, #8]
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	68b9      	ldr	r1, [r7, #8]
 800561a:	47a0      	blx	r4
 800561c:	4603      	mov	r3, r0
 800561e:	75fb      	strb	r3, [r7, #23]
  return res;
 8005620:	7dfb      	ldrb	r3, [r7, #23]
}
 8005622:	4618      	mov	r0, r3
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	bd90      	pop	{r4, r7, pc}
 800562a:	bf00      	nop
 800562c:	20000640 	.word	0x20000640

08005630 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	4603      	mov	r3, r0
 8005638:	603a      	str	r2, [r7, #0]
 800563a:	71fb      	strb	r3, [r7, #7]
 800563c:	460b      	mov	r3, r1
 800563e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8005640:	79fb      	ldrb	r3, [r7, #7]
 8005642:	4a09      	ldr	r2, [pc, #36]	@ (8005668 <disk_ioctl+0x38>)
 8005644:	009b      	lsls	r3, r3, #2
 8005646:	4413      	add	r3, r2
 8005648:	685b      	ldr	r3, [r3, #4]
 800564a:	691b      	ldr	r3, [r3, #16]
 800564c:	79fa      	ldrb	r2, [r7, #7]
 800564e:	4906      	ldr	r1, [pc, #24]	@ (8005668 <disk_ioctl+0x38>)
 8005650:	440a      	add	r2, r1
 8005652:	7a10      	ldrb	r0, [r2, #8]
 8005654:	79b9      	ldrb	r1, [r7, #6]
 8005656:	683a      	ldr	r2, [r7, #0]
 8005658:	4798      	blx	r3
 800565a:	4603      	mov	r3, r0
 800565c:	73fb      	strb	r3, [r7, #15]
  return res;
 800565e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005660:	4618      	mov	r0, r3
 8005662:	3710      	adds	r7, #16
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}
 8005668:	20000640 	.word	0x20000640

0800566c <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800566c:	b480      	push	{r7}
 800566e:	b087      	sub	sp, #28
 8005670:	af00      	add	r7, sp, #0
 8005672:	60f8      	str	r0, [r7, #12]
 8005674:	60b9      	str	r1, [r7, #8]
 8005676:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800567c:	68bb      	ldr	r3, [r7, #8]
 800567e:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8005680:	e007      	b.n	8005692 <mem_cpy+0x26>
		*d++ = *s++;
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	1c53      	adds	r3, r2, #1
 8005686:	613b      	str	r3, [r7, #16]
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	1c59      	adds	r1, r3, #1
 800568c:	6179      	str	r1, [r7, #20]
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	1e5a      	subs	r2, r3, #1
 8005696:	607a      	str	r2, [r7, #4]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d1f2      	bne.n	8005682 <mem_cpy+0x16>
}
 800569c:	bf00      	nop
 800569e:	bf00      	nop
 80056a0:	371c      	adds	r7, #28
 80056a2:	46bd      	mov	sp, r7
 80056a4:	bc80      	pop	{r7}
 80056a6:	4770      	bx	lr

080056a8 <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 80056a8:	b480      	push	{r7}
 80056aa:	b087      	sub	sp, #28
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	60f8      	str	r0, [r7, #12]
 80056b0:	60b9      	str	r1, [r7, #8]
 80056b2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	617b      	str	r3, [r7, #20]

	while (cnt--)
 80056b8:	e005      	b.n	80056c6 <mem_set+0x1e>
		*d++ = (BYTE)val;
 80056ba:	697b      	ldr	r3, [r7, #20]
 80056bc:	1c5a      	adds	r2, r3, #1
 80056be:	617a      	str	r2, [r7, #20]
 80056c0:	68ba      	ldr	r2, [r7, #8]
 80056c2:	b2d2      	uxtb	r2, r2
 80056c4:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	1e5a      	subs	r2, r3, #1
 80056ca:	607a      	str	r2, [r7, #4]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d1f4      	bne.n	80056ba <mem_set+0x12>
}
 80056d0:	bf00      	nop
 80056d2:	bf00      	nop
 80056d4:	371c      	adds	r7, #28
 80056d6:	46bd      	mov	sp, r7
 80056d8:	bc80      	pop	{r7}
 80056da:	4770      	bx	lr

080056dc <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 80056dc:	b480      	push	{r7}
 80056de:	b089      	sub	sp, #36	@ 0x24
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	60f8      	str	r0, [r7, #12]
 80056e4:	60b9      	str	r1, [r7, #8]
 80056e6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	61bb      	str	r3, [r7, #24]
	int r = 0;
 80056f0:	2300      	movs	r3, #0
 80056f2:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 80056f4:	bf00      	nop
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	1e5a      	subs	r2, r3, #1
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d00d      	beq.n	800571c <mem_cmp+0x40>
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	1c5a      	adds	r2, r3, #1
 8005704:	61fa      	str	r2, [r7, #28]
 8005706:	781b      	ldrb	r3, [r3, #0]
 8005708:	4619      	mov	r1, r3
 800570a:	69bb      	ldr	r3, [r7, #24]
 800570c:	1c5a      	adds	r2, r3, #1
 800570e:	61ba      	str	r2, [r7, #24]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	1acb      	subs	r3, r1, r3
 8005714:	617b      	str	r3, [r7, #20]
 8005716:	697b      	ldr	r3, [r7, #20]
 8005718:	2b00      	cmp	r3, #0
 800571a:	d0ec      	beq.n	80056f6 <mem_cmp+0x1a>
	return r;
 800571c:	697b      	ldr	r3, [r7, #20]
}
 800571e:	4618      	mov	r0, r3
 8005720:	3724      	adds	r7, #36	@ 0x24
 8005722:	46bd      	mov	sp, r7
 8005724:	bc80      	pop	{r7}
 8005726:	4770      	bx	lr

08005728 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005732:	e002      	b.n	800573a <chk_chr+0x12>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	3301      	adds	r3, #1
 8005738:	607b      	str	r3, [r7, #4]
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <chk_chr+0x26>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	461a      	mov	r2, r3
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	4293      	cmp	r3, r2
 800574c:	d1f2      	bne.n	8005734 <chk_chr+0xc>
	return *str;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	781b      	ldrb	r3, [r3, #0]
}
 8005752:	4618      	mov	r0, r3
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	bc80      	pop	{r7}
 800575a:	4770      	bx	lr

0800575c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
 8005764:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005766:	2300      	movs	r3, #0
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	e038      	b.n	80057e2 <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8005770:	492f      	ldr	r1, [pc, #188]	@ (8005830 <chk_lock+0xd4>)
 8005772:	68fa      	ldr	r2, [r7, #12]
 8005774:	4613      	mov	r3, r2
 8005776:	005b      	lsls	r3, r3, #1
 8005778:	4413      	add	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	440b      	add	r3, r1
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	2b00      	cmp	r3, #0
 8005782:	d029      	beq.n	80057d8 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8005784:	492a      	ldr	r1, [pc, #168]	@ (8005830 <chk_lock+0xd4>)
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	4613      	mov	r3, r2
 800578a:	005b      	lsls	r3, r3, #1
 800578c:	4413      	add	r3, r2
 800578e:	009b      	lsls	r3, r3, #2
 8005790:	440b      	add	r3, r1
 8005792:	681a      	ldr	r2, [r3, #0]
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800579a:	429a      	cmp	r2, r3
 800579c:	d11e      	bne.n	80057dc <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 800579e:	4924      	ldr	r1, [pc, #144]	@ (8005830 <chk_lock+0xd4>)
 80057a0:	68fa      	ldr	r2, [r7, #12]
 80057a2:	4613      	mov	r3, r2
 80057a4:	005b      	lsls	r3, r3, #1
 80057a6:	4413      	add	r3, r2
 80057a8:	009b      	lsls	r3, r3, #2
 80057aa:	440b      	add	r3, r1
 80057ac:	3304      	adds	r3, #4
 80057ae:	681a      	ldr	r2, [r3, #0]
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d110      	bne.n	80057dc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80057ba:	491d      	ldr	r1, [pc, #116]	@ (8005830 <chk_lock+0xd4>)
 80057bc:	68fa      	ldr	r2, [r7, #12]
 80057be:	4613      	mov	r3, r2
 80057c0:	005b      	lsls	r3, r3, #1
 80057c2:	4413      	add	r3, r2
 80057c4:	009b      	lsls	r3, r3, #2
 80057c6:	440b      	add	r3, r1
 80057c8:	3308      	adds	r3, #8
 80057ca:	881a      	ldrh	r2, [r3, #0]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
				Files[i].clu == dp->sclust &&
 80057d2:	429a      	cmp	r2, r3
 80057d4:	d102      	bne.n	80057dc <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 80057d6:	e007      	b.n	80057e8 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 80057d8:	2301      	movs	r3, #1
 80057da:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	3301      	adds	r3, #1
 80057e0:	60fb      	str	r3, [r7, #12]
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d9c3      	bls.n	8005770 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d109      	bne.n	8005802 <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d102      	bne.n	80057fa <chk_lock+0x9e>
 80057f4:	683b      	ldr	r3, [r7, #0]
 80057f6:	2b02      	cmp	r3, #2
 80057f8:	d101      	bne.n	80057fe <chk_lock+0xa2>
 80057fa:	2300      	movs	r3, #0
 80057fc:	e013      	b.n	8005826 <chk_lock+0xca>
 80057fe:	2312      	movs	r3, #18
 8005800:	e011      	b.n	8005826 <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10b      	bne.n	8005820 <chk_lock+0xc4>
 8005808:	4909      	ldr	r1, [pc, #36]	@ (8005830 <chk_lock+0xd4>)
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4613      	mov	r3, r2
 800580e:	005b      	lsls	r3, r3, #1
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	440b      	add	r3, r1
 8005816:	330a      	adds	r3, #10
 8005818:	881b      	ldrh	r3, [r3, #0]
 800581a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800581e:	d101      	bne.n	8005824 <chk_lock+0xc8>
 8005820:	2310      	movs	r3, #16
 8005822:	e000      	b.n	8005826 <chk_lock+0xca>
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3714      	adds	r7, #20
 800582a:	46bd      	mov	sp, r7
 800582c:	bc80      	pop	{r7}
 800582e:	4770      	bx	lr
 8005830:	20000628 	.word	0x20000628

08005834 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800583a:	2300      	movs	r3, #0
 800583c:	607b      	str	r3, [r7, #4]
 800583e:	e002      	b.n	8005846 <enq_lock+0x12>
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	3301      	adds	r3, #1
 8005844:	607b      	str	r3, [r7, #4]
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	2b01      	cmp	r3, #1
 800584a:	d809      	bhi.n	8005860 <enq_lock+0x2c>
 800584c:	490a      	ldr	r1, [pc, #40]	@ (8005878 <enq_lock+0x44>)
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	4613      	mov	r3, r2
 8005852:	005b      	lsls	r3, r3, #1
 8005854:	4413      	add	r3, r2
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	440b      	add	r3, r1
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	2b00      	cmp	r3, #0
 800585e:	d1ef      	bne.n	8005840 <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2b02      	cmp	r3, #2
 8005864:	bf14      	ite	ne
 8005866:	2301      	movne	r3, #1
 8005868:	2300      	moveq	r3, #0
 800586a:	b2db      	uxtb	r3, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	370c      	adds	r7, #12
 8005870:	46bd      	mov	sp, r7
 8005872:	bc80      	pop	{r7}
 8005874:	4770      	bx	lr
 8005876:	bf00      	nop
 8005878:	20000628 	.word	0x20000628

0800587c <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005886:	2300      	movs	r3, #0
 8005888:	60fb      	str	r3, [r7, #12]
 800588a:	e02b      	b.n	80058e4 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 800588c:	4955      	ldr	r1, [pc, #340]	@ (80059e4 <inc_lock+0x168>)
 800588e:	68fa      	ldr	r2, [r7, #12]
 8005890:	4613      	mov	r3, r2
 8005892:	005b      	lsls	r3, r3, #1
 8005894:	4413      	add	r3, r2
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	440b      	add	r3, r1
 800589a:	681a      	ldr	r2, [r3, #0]
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d11b      	bne.n	80058de <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 80058a6:	494f      	ldr	r1, [pc, #316]	@ (80059e4 <inc_lock+0x168>)
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	4613      	mov	r3, r2
 80058ac:	005b      	lsls	r3, r3, #1
 80058ae:	4413      	add	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	440b      	add	r3, r1
 80058b4:	3304      	adds	r3, #4
 80058b6:	681a      	ldr	r2, [r3, #0]
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
		if (Files[i].fs == dp->fs &&
 80058be:	429a      	cmp	r2, r3
 80058c0:	d10d      	bne.n	80058de <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 80058c2:	4948      	ldr	r1, [pc, #288]	@ (80059e4 <inc_lock+0x168>)
 80058c4:	68fa      	ldr	r2, [r7, #12]
 80058c6:	4613      	mov	r3, r2
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	4413      	add	r3, r2
 80058cc:	009b      	lsls	r3, r3, #2
 80058ce:	440b      	add	r3, r1
 80058d0:	3308      	adds	r3, #8
 80058d2:	881a      	ldrh	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
			Files[i].clu == dp->sclust &&
 80058da:	429a      	cmp	r2, r3
 80058dc:	d006      	beq.n	80058ec <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3301      	adds	r3, #1
 80058e2:	60fb      	str	r3, [r7, #12]
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	d9d0      	bls.n	800588c <inc_lock+0x10>
 80058ea:	e000      	b.n	80058ee <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 80058ec:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	2b02      	cmp	r3, #2
 80058f2:	d145      	bne.n	8005980 <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 80058f4:	2300      	movs	r3, #0
 80058f6:	60fb      	str	r3, [r7, #12]
 80058f8:	e002      	b.n	8005900 <inc_lock+0x84>
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	3301      	adds	r3, #1
 80058fe:	60fb      	str	r3, [r7, #12]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b01      	cmp	r3, #1
 8005904:	d809      	bhi.n	800591a <inc_lock+0x9e>
 8005906:	4937      	ldr	r1, [pc, #220]	@ (80059e4 <inc_lock+0x168>)
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	4613      	mov	r3, r2
 800590c:	005b      	lsls	r3, r3, #1
 800590e:	4413      	add	r3, r2
 8005910:	009b      	lsls	r3, r3, #2
 8005912:	440b      	add	r3, r1
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d1ef      	bne.n	80058fa <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	2b02      	cmp	r3, #2
 800591e:	d101      	bne.n	8005924 <inc_lock+0xa8>
 8005920:	2300      	movs	r3, #0
 8005922:	e05a      	b.n	80059da <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 1200 	ldr.w	r1, [r3, #512]	@ 0x200
 800592a:	482e      	ldr	r0, [pc, #184]	@ (80059e4 <inc_lock+0x168>)
 800592c:	68fa      	ldr	r2, [r7, #12]
 800592e:	4613      	mov	r3, r2
 8005930:	005b      	lsls	r3, r3, #1
 8005932:	4413      	add	r3, r2
 8005934:	009b      	lsls	r3, r3, #2
 8005936:	4403      	add	r3, r0
 8005938:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8d3 1208 	ldr.w	r1, [r3, #520]	@ 0x208
 8005940:	4828      	ldr	r0, [pc, #160]	@ (80059e4 <inc_lock+0x168>)
 8005942:	68fa      	ldr	r2, [r7, #12]
 8005944:	4613      	mov	r3, r2
 8005946:	005b      	lsls	r3, r3, #1
 8005948:	4413      	add	r3, r2
 800594a:	009b      	lsls	r3, r3, #2
 800594c:	4403      	add	r3, r0
 800594e:	3304      	adds	r3, #4
 8005950:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f8b3 0206 	ldrh.w	r0, [r3, #518]	@ 0x206
 8005958:	4922      	ldr	r1, [pc, #136]	@ (80059e4 <inc_lock+0x168>)
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	4613      	mov	r3, r2
 800595e:	005b      	lsls	r3, r3, #1
 8005960:	4413      	add	r3, r2
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	440b      	add	r3, r1
 8005966:	3308      	adds	r3, #8
 8005968:	4602      	mov	r2, r0
 800596a:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 800596c:	491d      	ldr	r1, [pc, #116]	@ (80059e4 <inc_lock+0x168>)
 800596e:	68fa      	ldr	r2, [r7, #12]
 8005970:	4613      	mov	r3, r2
 8005972:	005b      	lsls	r3, r3, #1
 8005974:	4413      	add	r3, r2
 8005976:	009b      	lsls	r3, r3, #2
 8005978:	440b      	add	r3, r1
 800597a:	330a      	adds	r3, #10
 800597c:	2200      	movs	r2, #0
 800597e:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d00c      	beq.n	80059a0 <inc_lock+0x124>
 8005986:	4917      	ldr	r1, [pc, #92]	@ (80059e4 <inc_lock+0x168>)
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4613      	mov	r3, r2
 800598c:	005b      	lsls	r3, r3, #1
 800598e:	4413      	add	r3, r2
 8005990:	009b      	lsls	r3, r3, #2
 8005992:	440b      	add	r3, r1
 8005994:	330a      	adds	r3, #10
 8005996:	881b      	ldrh	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d001      	beq.n	80059a0 <inc_lock+0x124>
 800599c:	2300      	movs	r3, #0
 800599e:	e01c      	b.n	80059da <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <inc_lock+0x142>
 80059a6:	490f      	ldr	r1, [pc, #60]	@ (80059e4 <inc_lock+0x168>)
 80059a8:	68fa      	ldr	r2, [r7, #12]
 80059aa:	4613      	mov	r3, r2
 80059ac:	005b      	lsls	r3, r3, #1
 80059ae:	4413      	add	r3, r2
 80059b0:	009b      	lsls	r3, r3, #2
 80059b2:	440b      	add	r3, r1
 80059b4:	330a      	adds	r3, #10
 80059b6:	881b      	ldrh	r3, [r3, #0]
 80059b8:	3301      	adds	r3, #1
 80059ba:	b299      	uxth	r1, r3
 80059bc:	e001      	b.n	80059c2 <inc_lock+0x146>
 80059be:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80059c2:	4808      	ldr	r0, [pc, #32]	@ (80059e4 <inc_lock+0x168>)
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4613      	mov	r3, r2
 80059c8:	005b      	lsls	r3, r3, #1
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4403      	add	r3, r0
 80059d0:	330a      	adds	r3, #10
 80059d2:	460a      	mov	r2, r1
 80059d4:	801a      	strh	r2, [r3, #0]

	return i + 1;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	3301      	adds	r3, #1
}
 80059da:	4618      	mov	r0, r3
 80059dc:	3714      	adds	r7, #20
 80059de:	46bd      	mov	sp, r7
 80059e0:	bc80      	pop	{r7}
 80059e2:	4770      	bx	lr
 80059e4:	20000628 	.word	0x20000628

080059e8 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 80059e8:	b480      	push	{r7}
 80059ea:	b085      	sub	sp, #20
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	3b01      	subs	r3, #1
 80059f4:	607b      	str	r3, [r7, #4]
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2b01      	cmp	r3, #1
 80059fa:	d82e      	bhi.n	8005a5a <dec_lock+0x72>
		n = Files[i].ctr;
 80059fc:	491b      	ldr	r1, [pc, #108]	@ (8005a6c <dec_lock+0x84>)
 80059fe:	687a      	ldr	r2, [r7, #4]
 8005a00:	4613      	mov	r3, r2
 8005a02:	005b      	lsls	r3, r3, #1
 8005a04:	4413      	add	r3, r2
 8005a06:	009b      	lsls	r3, r3, #2
 8005a08:	440b      	add	r3, r1
 8005a0a:	330a      	adds	r3, #10
 8005a0c:	881b      	ldrh	r3, [r3, #0]
 8005a0e:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005a10:	89fb      	ldrh	r3, [r7, #14]
 8005a12:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005a16:	d101      	bne.n	8005a1c <dec_lock+0x34>
 8005a18:	2300      	movs	r3, #0
 8005a1a:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8005a1c:	89fb      	ldrh	r3, [r7, #14]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d002      	beq.n	8005a28 <dec_lock+0x40>
 8005a22:	89fb      	ldrh	r3, [r7, #14]
 8005a24:	3b01      	subs	r3, #1
 8005a26:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005a28:	4910      	ldr	r1, [pc, #64]	@ (8005a6c <dec_lock+0x84>)
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	4613      	mov	r3, r2
 8005a2e:	005b      	lsls	r3, r3, #1
 8005a30:	4413      	add	r3, r2
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	440b      	add	r3, r1
 8005a36:	330a      	adds	r3, #10
 8005a38:	89fa      	ldrh	r2, [r7, #14]
 8005a3a:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005a3c:	89fb      	ldrh	r3, [r7, #14]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d108      	bne.n	8005a54 <dec_lock+0x6c>
 8005a42:	490a      	ldr	r1, [pc, #40]	@ (8005a6c <dec_lock+0x84>)
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	4613      	mov	r3, r2
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	4413      	add	r3, r2
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	440b      	add	r3, r1
 8005a50:	2200      	movs	r2, #0
 8005a52:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005a54:	2300      	movs	r3, #0
 8005a56:	737b      	strb	r3, [r7, #13]
 8005a58:	e001      	b.n	8005a5e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005a5a:	2302      	movs	r3, #2
 8005a5c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005a5e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005a60:	4618      	mov	r0, r3
 8005a62:	3714      	adds	r7, #20
 8005a64:	46bd      	mov	sp, r7
 8005a66:	bc80      	pop	{r7}
 8005a68:	4770      	bx	lr
 8005a6a:	bf00      	nop
 8005a6c:	20000628 	.word	0x20000628

08005a70 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005a78:	2300      	movs	r3, #0
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e016      	b.n	8005aac <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005a7e:	4910      	ldr	r1, [pc, #64]	@ (8005ac0 <clear_lock+0x50>)
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	4613      	mov	r3, r2
 8005a84:	005b      	lsls	r3, r3, #1
 8005a86:	4413      	add	r3, r2
 8005a88:	009b      	lsls	r3, r3, #2
 8005a8a:	440b      	add	r3, r1
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	687a      	ldr	r2, [r7, #4]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d108      	bne.n	8005aa6 <clear_lock+0x36>
 8005a94:	490a      	ldr	r1, [pc, #40]	@ (8005ac0 <clear_lock+0x50>)
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4613      	mov	r3, r2
 8005a9a:	005b      	lsls	r3, r3, #1
 8005a9c:	4413      	add	r3, r2
 8005a9e:	009b      	lsls	r3, r3, #2
 8005aa0:	440b      	add	r3, r1
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	3301      	adds	r3, #1
 8005aaa:	60fb      	str	r3, [r7, #12]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d9e5      	bls.n	8005a7e <clear_lock+0xe>
	}
}
 8005ab2:	bf00      	nop
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bc80      	pop	{r7}
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000628 	.word	0x20000628

08005ac4 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005acc:	2300      	movs	r3, #0
 8005ace:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	f893 3204 	ldrb.w	r3, [r3, #516]	@ 0x204
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d038      	beq.n	8005b4c <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8005ae0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005ae8:	6879      	ldr	r1, [r7, #4]
 8005aea:	2301      	movs	r3, #1
 8005aec:	697a      	ldr	r2, [r7, #20]
 8005aee:	f7ff fd7f 	bl	80055f0 <disk_write>
 8005af2:	4603      	mov	r3, r0
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d002      	beq.n	8005afe <sync_window+0x3a>
			res = FR_DISK_ERR;
 8005af8:	2301      	movs	r3, #1
 8005afa:	73fb      	strb	r3, [r7, #15]
 8005afc:	e026      	b.n	8005b4c <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2200      	movs	r2, #0
 8005b02:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8005b0c:	697a      	ldr	r2, [r7, #20]
 8005b0e:	1ad2      	subs	r2, r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d218      	bcs.n	8005b4c <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8005b20:	613b      	str	r3, [r7, #16]
 8005b22:	e010      	b.n	8005b46 <sync_window+0x82>
					wsect += fs->fsize;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8005b2a:	697a      	ldr	r2, [r7, #20]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005b36:	6879      	ldr	r1, [r7, #4]
 8005b38:	2301      	movs	r3, #1
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	f7ff fd58 	bl	80055f0 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	3b01      	subs	r3, #1
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	693b      	ldr	r3, [r7, #16]
 8005b48:	2b01      	cmp	r3, #1
 8005b4a:	d8eb      	bhi.n	8005b24 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8005b4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3718      	adds	r7, #24
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}

08005b56 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8005b56:	b580      	push	{r7, lr}
 8005b58:	b084      	sub	sp, #16
 8005b5a:	af00      	add	r7, sp, #0
 8005b5c:	6078      	str	r0, [r7, #4]
 8005b5e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005b60:	2300      	movs	r3, #0
 8005b62:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 8005b6a:	683a      	ldr	r2, [r7, #0]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d01b      	beq.n	8005ba8 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005b70:	6878      	ldr	r0, [r7, #4]
 8005b72:	f7ff ffa7 	bl	8005ac4 <sync_window>
 8005b76:	4603      	mov	r3, r0
 8005b78:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d113      	bne.n	8005ba8 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005b86:	6879      	ldr	r1, [r7, #4]
 8005b88:	2301      	movs	r3, #1
 8005b8a:	683a      	ldr	r2, [r7, #0]
 8005b8c:	f7ff fd10 	bl	80055b0 <disk_read>
 8005b90:	4603      	mov	r3, r0
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d004      	beq.n	8005ba0 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005b96:	f04f 33ff 	mov.w	r3, #4294967295
 8005b9a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	683a      	ldr	r2, [r7, #0]
 8005ba4:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
		}
	}
	return res;
 8005ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}

08005bb2 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8005bb2:	b580      	push	{r7, lr}
 8005bb4:	b084      	sub	sp, #16
 8005bb6:	af00      	add	r7, sp, #0
 8005bb8:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f7ff ff82 	bl	8005ac4 <sync_window>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005bc4:	7bfb      	ldrb	r3, [r7, #15]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	f040 809b 	bne.w	8005d02 <sync_fs+0x150>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005bd2:	2b03      	cmp	r3, #3
 8005bd4:	f040 8088 	bne.w	8005ce8 <sync_fs+0x136>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8005bde:	2b01      	cmp	r3, #1
 8005be0:	f040 8082 	bne.w	8005ce8 <sync_fs+0x136>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bea:	2100      	movs	r1, #0
 8005bec:	4618      	mov	r0, r3
 8005bee:	f7ff fd5b 	bl	80056a8 <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	2255      	movs	r2, #85	@ 0x55
 8005bf6:	f883 21fe 	strb.w	r2, [r3, #510]	@ 0x1fe
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	22aa      	movs	r2, #170	@ 0xaa
 8005bfe:	f883 21ff 	strb.w	r2, [r3, #511]	@ 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	2252      	movs	r2, #82	@ 0x52
 8005c06:	701a      	strb	r2, [r3, #0]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2252      	movs	r2, #82	@ 0x52
 8005c0c:	705a      	strb	r2, [r3, #1]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2261      	movs	r2, #97	@ 0x61
 8005c12:	709a      	strb	r2, [r3, #2]
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2241      	movs	r2, #65	@ 0x41
 8005c18:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2272      	movs	r2, #114	@ 0x72
 8005c1e:	f883 21e4 	strb.w	r2, [r3, #484]	@ 0x1e4
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2272      	movs	r2, #114	@ 0x72
 8005c26:	f883 21e5 	strb.w	r2, [r3, #485]	@ 0x1e5
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2241      	movs	r2, #65	@ 0x41
 8005c2e:	f883 21e6 	strb.w	r2, [r3, #486]	@ 0x1e6
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2261      	movs	r2, #97	@ 0x61
 8005c36:	f883 21e7 	strb.w	r2, [r3, #487]	@ 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005c40:	b2da      	uxtb	r2, r3
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f883 21e8 	strb.w	r2, [r3, #488]	@ 0x1e8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	0a1b      	lsrs	r3, r3, #8
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	b2da      	uxtb	r2, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	f883 21e9 	strb.w	r2, [r3, #489]	@ 0x1e9
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005c62:	0c1b      	lsrs	r3, r3, #16
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f883 21ea 	strb.w	r2, [r3, #490]	@ 0x1ea
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8005c72:	0e1b      	lsrs	r3, r3, #24
 8005c74:	b2da      	uxtb	r2, r3
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f883 21eb 	strb.w	r2, [r3, #491]	@ 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f883 21ec 	strb.w	r2, [r3, #492]	@ 0x1ec
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	0a1b      	lsrs	r3, r3, #8
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	b2da      	uxtb	r2, r3
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	f883 21ed 	strb.w	r2, [r3, #493]	@ 0x1ed
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005ca4:	0c1b      	lsrs	r3, r3, #16
 8005ca6:	b2da      	uxtb	r2, r3
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	f883 21ee 	strb.w	r2, [r3, #494]	@ 0x1ee
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8005cb4:	0e1b      	lsrs	r3, r3, #24
 8005cb6:	b2da      	uxtb	r2, r3
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f883 21ef 	strb.w	r2, [r3, #495]	@ 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8005cc4:	1c5a      	adds	r2, r3, #1
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8005cd2:	6879      	ldr	r1, [r7, #4]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8005cda:	2301      	movs	r3, #1
 8005cdc:	f7ff fc88 	bl	80055f0 <disk_write>
			fs->fsi_flag = 0;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2200      	movs	r2, #0
 8005ce4:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005cee:	2200      	movs	r2, #0
 8005cf0:	2100      	movs	r1, #0
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fc9c 	bl	8005630 <disk_ioctl>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d001      	beq.n	8005d02 <sync_fs+0x150>
			res = FR_DISK_ERR;
 8005cfe:	2301      	movs	r3, #1
 8005d00:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005d02:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3710      	adds	r7, #16
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}

08005d0c <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b083      	sub	sp, #12
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	3b02      	subs	r3, #2
 8005d1a:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d22:	3b02      	subs	r3, #2
 8005d24:	683a      	ldr	r2, [r7, #0]
 8005d26:	429a      	cmp	r2, r3
 8005d28:	d301      	bcc.n	8005d2e <clust2sect+0x22>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e00a      	b.n	8005d44 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8005d34:	461a      	mov	r2, r3
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	fb03 f202 	mul.w	r2, r3, r2
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8005d42:	4413      	add	r3, r2
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	370c      	adds	r7, #12
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bc80      	pop	{r7}
 8005d4c:	4770      	bx	lr

08005d4e <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8005d4e:	b580      	push	{r7, lr}
 8005d50:	b086      	sub	sp, #24
 8005d52:	af00      	add	r7, sp, #0
 8005d54:	6078      	str	r0, [r7, #4]
 8005d56:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d905      	bls.n	8005d6a <get_fat+0x1c>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005d64:	683a      	ldr	r2, [r7, #0]
 8005d66:	429a      	cmp	r2, r3
 8005d68:	d302      	bcc.n	8005d70 <get_fat+0x22>
		val = 1;	/* Internal error */
 8005d6a:	2301      	movs	r3, #1
 8005d6c:	617b      	str	r3, [r7, #20]
 8005d6e:	e0a3      	b.n	8005eb8 <get_fat+0x16a>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005d70:	f04f 33ff 	mov.w	r3, #4294967295
 8005d74:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005d7c:	2b03      	cmp	r3, #3
 8005d7e:	d068      	beq.n	8005e52 <get_fat+0x104>
 8005d80:	2b03      	cmp	r3, #3
 8005d82:	f300 808f 	bgt.w	8005ea4 <get_fat+0x156>
 8005d86:	2b01      	cmp	r3, #1
 8005d88:	d002      	beq.n	8005d90 <get_fat+0x42>
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d03f      	beq.n	8005e0e <get_fat+0xc0>
 8005d8e:	e089      	b.n	8005ea4 <get_fat+0x156>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	60fb      	str	r3, [r7, #12]
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	085b      	lsrs	r3, r3, #1
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	4413      	add	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	0a5b      	lsrs	r3, r3, #9
 8005da8:	4413      	add	r3, r2
 8005daa:	4619      	mov	r1, r3
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f7ff fed2 	bl	8005b56 <move_window>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d178      	bne.n	8005eaa <get_fat+0x15c>
			wc = fs->win.d8[bc++ % SS(fs)];
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	1c5a      	adds	r2, r3, #1
 8005dbc:	60fa      	str	r2, [r7, #12]
 8005dbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dc2:	687a      	ldr	r2, [r7, #4]
 8005dc4:	5cd3      	ldrb	r3, [r2, r3]
 8005dc6:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	0a5b      	lsrs	r3, r3, #9
 8005dd2:	4413      	add	r3, r2
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f7ff febd 	bl	8005b56 <move_window>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d165      	bne.n	8005eae <get_fat+0x160>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005de8:	687a      	ldr	r2, [r7, #4]
 8005dea:	5cd3      	ldrb	r3, [r2, r3]
 8005dec:	021b      	lsls	r3, r3, #8
 8005dee:	68ba      	ldr	r2, [r7, #8]
 8005df0:	4313      	orrs	r3, r2
 8005df2:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d002      	beq.n	8005e04 <get_fat+0xb6>
 8005dfe:	68bb      	ldr	r3, [r7, #8]
 8005e00:	091b      	lsrs	r3, r3, #4
 8005e02:	e002      	b.n	8005e0a <get_fat+0xbc>
 8005e04:	68bb      	ldr	r3, [r7, #8]
 8005e06:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005e0a:	617b      	str	r3, [r7, #20]
			break;
 8005e0c:	e054      	b.n	8005eb8 <get_fat+0x16a>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	0a1b      	lsrs	r3, r3, #8
 8005e18:	4413      	add	r3, r2
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7ff fe9a 	bl	8005b56 <move_window>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d144      	bne.n	8005eb2 <get_fat+0x164>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	005b      	lsls	r3, r3, #1
 8005e2c:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8005e30:	687a      	ldr	r2, [r7, #4]
 8005e32:	4413      	add	r3, r2
 8005e34:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	3301      	adds	r3, #1
 8005e3a:	781b      	ldrb	r3, [r3, #0]
 8005e3c:	b21b      	sxth	r3, r3
 8005e3e:	021b      	lsls	r3, r3, #8
 8005e40:	b21a      	sxth	r2, r3
 8005e42:	693b      	ldr	r3, [r7, #16]
 8005e44:	781b      	ldrb	r3, [r3, #0]
 8005e46:	b21b      	sxth	r3, r3
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	b21b      	sxth	r3, r3
 8005e4c:	b29b      	uxth	r3, r3
 8005e4e:	617b      	str	r3, [r7, #20]
			break;
 8005e50:	e032      	b.n	8005eb8 <get_fat+0x16a>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	09db      	lsrs	r3, r3, #7
 8005e5c:	4413      	add	r3, r2
 8005e5e:	4619      	mov	r1, r3
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fe78 	bl	8005b56 <move_window>
 8005e66:	4603      	mov	r3, r0
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d124      	bne.n	8005eb6 <get_fat+0x168>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8005e74:	687a      	ldr	r2, [r7, #4]
 8005e76:	4413      	add	r3, r2
 8005e78:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	3303      	adds	r3, #3
 8005e7e:	781b      	ldrb	r3, [r3, #0]
 8005e80:	061a      	lsls	r2, r3, #24
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	3302      	adds	r3, #2
 8005e86:	781b      	ldrb	r3, [r3, #0]
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	431a      	orrs	r2, r3
 8005e8c:	693b      	ldr	r3, [r7, #16]
 8005e8e:	3301      	adds	r3, #1
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	021b      	lsls	r3, r3, #8
 8005e94:	4313      	orrs	r3, r2
 8005e96:	693a      	ldr	r2, [r7, #16]
 8005e98:	7812      	ldrb	r2, [r2, #0]
 8005e9a:	4313      	orrs	r3, r2
 8005e9c:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8005ea0:	617b      	str	r3, [r7, #20]
			break;
 8005ea2:	e009      	b.n	8005eb8 <get_fat+0x16a>

		default:
			val = 1;	/* Internal error */
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	617b      	str	r3, [r7, #20]
 8005ea8:	e006      	b.n	8005eb8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eaa:	bf00      	nop
 8005eac:	e004      	b.n	8005eb8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8005eae:	bf00      	nop
 8005eb0:	e002      	b.n	8005eb8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 8005eb2:	bf00      	nop
 8005eb4:	e000      	b.n	8005eb8 <get_fat+0x16a>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8005eb6:	bf00      	nop
		}
	}

	return val;
 8005eb8:	697b      	ldr	r3, [r7, #20]
}
 8005eba:	4618      	mov	r0, r3
 8005ebc:	3718      	adds	r7, #24
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}

08005ec2 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8005ec2:	b580      	push	{r7, lr}
 8005ec4:	b088      	sub	sp, #32
 8005ec6:	af00      	add	r7, sp, #0
 8005ec8:	60f8      	str	r0, [r7, #12]
 8005eca:	60b9      	str	r1, [r7, #8]
 8005ecc:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8005ece:	68bb      	ldr	r3, [r7, #8]
 8005ed0:	2b01      	cmp	r3, #1
 8005ed2:	d905      	bls.n	8005ee0 <put_fat+0x1e>
 8005ed4:	68fb      	ldr	r3, [r7, #12]
 8005ed6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d302      	bcc.n	8005ee6 <put_fat+0x24>
		res = FR_INT_ERR;
 8005ee0:	2302      	movs	r3, #2
 8005ee2:	77fb      	strb	r3, [r7, #31]
 8005ee4:	e0f6      	b.n	80060d4 <put_fat+0x212>

	} else {
		switch (fs->fs_type) {
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8005eec:	2b03      	cmp	r3, #3
 8005eee:	f000 809e 	beq.w	800602e <put_fat+0x16c>
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f300 80e4 	bgt.w	80060c0 <put_fat+0x1fe>
 8005ef8:	2b01      	cmp	r3, #1
 8005efa:	d002      	beq.n	8005f02 <put_fat+0x40>
 8005efc:	2b02      	cmp	r3, #2
 8005efe:	d06f      	beq.n	8005fe0 <put_fat+0x11e>
 8005f00:	e0de      	b.n	80060c0 <put_fat+0x1fe>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	617b      	str	r3, [r7, #20]
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	085b      	lsrs	r3, r3, #1
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4413      	add	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005f16:	697b      	ldr	r3, [r7, #20]
 8005f18:	0a5b      	lsrs	r3, r3, #9
 8005f1a:	4413      	add	r3, r2
 8005f1c:	4619      	mov	r1, r3
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7ff fe19 	bl	8005b56 <move_window>
 8005f24:	4603      	mov	r3, r0
 8005f26:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f28:	7ffb      	ldrb	r3, [r7, #31]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	f040 80cb 	bne.w	80060c6 <put_fat+0x204>
			p = &fs->win.d8[bc++ % SS(fs)];
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	1c5a      	adds	r2, r3, #1
 8005f34:	617a      	str	r2, [r7, #20]
 8005f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f3a:	68fa      	ldr	r2, [r7, #12]
 8005f3c:	4413      	add	r3, r2
 8005f3e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	f003 0301 	and.w	r3, r3, #1
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d00d      	beq.n	8005f66 <put_fat+0xa4>
 8005f4a:	69bb      	ldr	r3, [r7, #24]
 8005f4c:	781b      	ldrb	r3, [r3, #0]
 8005f4e:	b25b      	sxtb	r3, r3
 8005f50:	f003 030f 	and.w	r3, r3, #15
 8005f54:	b25a      	sxtb	r2, r3
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	b25b      	sxtb	r3, r3
 8005f5a:	011b      	lsls	r3, r3, #4
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	b25b      	sxtb	r3, r3
 8005f62:	b2db      	uxtb	r3, r3
 8005f64:	e001      	b.n	8005f6a <put_fat+0xa8>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	69ba      	ldr	r2, [r7, #24]
 8005f6c:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005f7c:	697b      	ldr	r3, [r7, #20]
 8005f7e:	0a5b      	lsrs	r3, r3, #9
 8005f80:	4413      	add	r3, r2
 8005f82:	4619      	mov	r1, r3
 8005f84:	68f8      	ldr	r0, [r7, #12]
 8005f86:	f7ff fde6 	bl	8005b56 <move_window>
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005f8e:	7ffb      	ldrb	r3, [r7, #31]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	f040 809a 	bne.w	80060ca <put_fat+0x208>
			p = &fs->win.d8[bc % SS(fs)];
 8005f96:	697b      	ldr	r3, [r7, #20]
 8005f98:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f9c:	68fa      	ldr	r2, [r7, #12]
 8005f9e:	4413      	add	r3, r2
 8005fa0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d003      	beq.n	8005fb4 <put_fat+0xf2>
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	091b      	lsrs	r3, r3, #4
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	e00e      	b.n	8005fd2 <put_fat+0x110>
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b25b      	sxtb	r3, r3
 8005fba:	f023 030f 	bic.w	r3, r3, #15
 8005fbe:	b25a      	sxtb	r2, r3
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	0a1b      	lsrs	r3, r3, #8
 8005fc4:	b25b      	sxtb	r3, r3
 8005fc6:	f003 030f 	and.w	r3, r3, #15
 8005fca:	b25b      	sxtb	r3, r3
 8005fcc:	4313      	orrs	r3, r2
 8005fce:	b25b      	sxtb	r3, r3
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2201      	movs	r2, #1
 8005fda:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 8005fde:	e079      	b.n	80060d4 <put_fat+0x212>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	0a1b      	lsrs	r3, r3, #8
 8005fea:	4413      	add	r3, r2
 8005fec:	4619      	mov	r1, r3
 8005fee:	68f8      	ldr	r0, [r7, #12]
 8005ff0:	f7ff fdb1 	bl	8005b56 <move_window>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8005ff8:	7ffb      	ldrb	r3, [r7, #31]
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d167      	bne.n	80060ce <put_fat+0x20c>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	005b      	lsls	r3, r3, #1
 8006002:	f403 73ff 	and.w	r3, r3, #510	@ 0x1fe
 8006006:	68fa      	ldr	r2, [r7, #12]
 8006008:	4413      	add	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	b2da      	uxtb	r2, r3
 8006010:	69bb      	ldr	r3, [r7, #24]
 8006012:	701a      	strb	r2, [r3, #0]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	b29b      	uxth	r3, r3
 8006018:	0a1b      	lsrs	r3, r3, #8
 800601a:	b29a      	uxth	r2, r3
 800601c:	69bb      	ldr	r3, [r7, #24]
 800601e:	3301      	adds	r3, #1
 8006020:	b2d2      	uxtb	r2, r2
 8006022:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 800602c:	e052      	b.n	80060d4 <put_fat+0x212>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	09db      	lsrs	r3, r3, #7
 8006038:	4413      	add	r3, r2
 800603a:	4619      	mov	r1, r3
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7ff fd8a 	bl	8005b56 <move_window>
 8006042:	4603      	mov	r3, r0
 8006044:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006046:	7ffb      	ldrb	r3, [r7, #31]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d142      	bne.n	80060d2 <put_fat+0x210>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	009b      	lsls	r3, r3, #2
 8006050:	f403 73fe 	and.w	r3, r3, #508	@ 0x1fc
 8006054:	68fa      	ldr	r2, [r7, #12]
 8006056:	4413      	add	r3, r2
 8006058:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	3303      	adds	r3, #3
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	061a      	lsls	r2, r3, #24
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	3302      	adds	r3, #2
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	041b      	lsls	r3, r3, #16
 800606a:	431a      	orrs	r2, r3
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	3301      	adds	r3, #1
 8006070:	781b      	ldrb	r3, [r3, #0]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	4313      	orrs	r3, r2
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	7812      	ldrb	r2, [r2, #0]
 800607a:	4313      	orrs	r3, r2
 800607c:	f003 4370 	and.w	r3, r3, #4026531840	@ 0xf0000000
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4313      	orrs	r3, r2
 8006084:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	b2da      	uxtb	r2, r3
 800608a:	69bb      	ldr	r3, [r7, #24]
 800608c:	701a      	strb	r2, [r3, #0]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	b29b      	uxth	r3, r3
 8006092:	0a1b      	lsrs	r3, r3, #8
 8006094:	b29a      	uxth	r2, r3
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	3301      	adds	r3, #1
 800609a:	b2d2      	uxtb	r2, r2
 800609c:	701a      	strb	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	0c1a      	lsrs	r2, r3, #16
 80060a2:	69bb      	ldr	r3, [r7, #24]
 80060a4:	3302      	adds	r3, #2
 80060a6:	b2d2      	uxtb	r2, r2
 80060a8:	701a      	strb	r2, [r3, #0]
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	0e1a      	lsrs	r2, r3, #24
 80060ae:	69bb      	ldr	r3, [r7, #24]
 80060b0:	3303      	adds	r3, #3
 80060b2:	b2d2      	uxtb	r2, r2
 80060b4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	2201      	movs	r2, #1
 80060ba:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
			break;
 80060be:	e009      	b.n	80060d4 <put_fat+0x212>

		default :
			res = FR_INT_ERR;
 80060c0:	2302      	movs	r3, #2
 80060c2:	77fb      	strb	r3, [r7, #31]
 80060c4:	e006      	b.n	80060d4 <put_fat+0x212>
			if (res != FR_OK) break;
 80060c6:	bf00      	nop
 80060c8:	e004      	b.n	80060d4 <put_fat+0x212>
			if (res != FR_OK) break;
 80060ca:	bf00      	nop
 80060cc:	e002      	b.n	80060d4 <put_fat+0x212>
			if (res != FR_OK) break;
 80060ce:	bf00      	nop
 80060d0:	e000      	b.n	80060d4 <put_fat+0x212>
			if (res != FR_OK) break;
 80060d2:	bf00      	nop
		}
	}

	return res;
 80060d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3720      	adds	r7, #32
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}

080060de <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 80060de:	b580      	push	{r7, lr}
 80060e0:	b084      	sub	sp, #16
 80060e2:	af00      	add	r7, sp, #0
 80060e4:	6078      	str	r0, [r7, #4]
 80060e6:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	2b01      	cmp	r3, #1
 80060ec:	d905      	bls.n	80060fa <remove_chain+0x1c>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80060f4:	683a      	ldr	r2, [r7, #0]
 80060f6:	429a      	cmp	r2, r3
 80060f8:	d302      	bcc.n	8006100 <remove_chain+0x22>
		res = FR_INT_ERR;
 80060fa:	2302      	movs	r3, #2
 80060fc:	73fb      	strb	r3, [r7, #15]
 80060fe:	e043      	b.n	8006188 <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8006100:	2300      	movs	r3, #0
 8006102:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006104:	e036      	b.n	8006174 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8006106:	6839      	ldr	r1, [r7, #0]
 8006108:	6878      	ldr	r0, [r7, #4]
 800610a:	f7ff fe20 	bl	8005d4e <get_fat>
 800610e:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8006110:	68bb      	ldr	r3, [r7, #8]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d035      	beq.n	8006182 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8006116:	68bb      	ldr	r3, [r7, #8]
 8006118:	2b01      	cmp	r3, #1
 800611a:	d102      	bne.n	8006122 <remove_chain+0x44>
 800611c:	2302      	movs	r3, #2
 800611e:	73fb      	strb	r3, [r7, #15]
 8006120:	e032      	b.n	8006188 <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8006122:	68bb      	ldr	r3, [r7, #8]
 8006124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006128:	d102      	bne.n	8006130 <remove_chain+0x52>
 800612a:	2301      	movs	r3, #1
 800612c:	73fb      	strb	r3, [r7, #15]
 800612e:	e02b      	b.n	8006188 <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 8006130:	2200      	movs	r2, #0
 8006132:	6839      	ldr	r1, [r7, #0]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff fec4 	bl	8005ec2 <put_fat>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d120      	bne.n	8006186 <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800614a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800614e:	d00f      	beq.n	8006170 <remove_chain+0x92>
				fs->free_clust++;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006156:	1c5a      	adds	r2, r3, #1
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
				fs->fsi_flag |= 1;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 8006164:	f043 0301 	orr.w	r3, r3, #1
 8006168:	b2da      	uxtb	r2, r3
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800617a:	683a      	ldr	r2, [r7, #0]
 800617c:	429a      	cmp	r2, r3
 800617e:	d3c2      	bcc.n	8006106 <remove_chain+0x28>
 8006180:	e002      	b.n	8006188 <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 8006182:	bf00      	nop
 8006184:	e000      	b.n	8006188 <remove_chain+0xaa>
			if (res != FR_OK) break;
 8006186:	bf00      	nop
		}
	}

	return res;
 8006188:	7bfb      	ldrb	r3, [r7, #15]
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b086      	sub	sp, #24
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
 800619a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10f      	bne.n	80061c2 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80061a8:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80061aa:	693b      	ldr	r3, [r7, #16]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d005      	beq.n	80061bc <create_chain+0x2a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061b6:	693a      	ldr	r2, [r7, #16]
 80061b8:	429a      	cmp	r2, r3
 80061ba:	d31c      	bcc.n	80061f6 <create_chain+0x64>
 80061bc:	2301      	movs	r3, #1
 80061be:	613b      	str	r3, [r7, #16]
 80061c0:	e019      	b.n	80061f6 <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80061c2:	6839      	ldr	r1, [r7, #0]
 80061c4:	6878      	ldr	r0, [r7, #4]
 80061c6:	f7ff fdc2 	bl	8005d4e <get_fat>
 80061ca:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d801      	bhi.n	80061d6 <create_chain+0x44>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e076      	b.n	80062c4 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061dc:	d101      	bne.n	80061e2 <create_chain+0x50>
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	e070      	b.n	80062c4 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80061e8:	68ba      	ldr	r2, [r7, #8]
 80061ea:	429a      	cmp	r2, r3
 80061ec:	d201      	bcs.n	80061f2 <create_chain+0x60>
 80061ee:	68bb      	ldr	r3, [r7, #8]
 80061f0:	e068      	b.n	80062c4 <create_chain+0x132>
		scl = clst;
 80061f2:	683b      	ldr	r3, [r7, #0]
 80061f4:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	3301      	adds	r3, #1
 80061fe:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	429a      	cmp	r2, r3
 800620a:	d307      	bcc.n	800621c <create_chain+0x8a>
			ncl = 2;
 800620c:	2302      	movs	r3, #2
 800620e:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	429a      	cmp	r2, r3
 8006216:	d901      	bls.n	800621c <create_chain+0x8a>
 8006218:	2300      	movs	r3, #0
 800621a:	e053      	b.n	80062c4 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f7ff fd95 	bl	8005d4e <get_fat>
 8006224:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	2b00      	cmp	r3, #0
 800622a:	d00e      	beq.n	800624a <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006232:	d002      	beq.n	800623a <create_chain+0xa8>
 8006234:	68bb      	ldr	r3, [r7, #8]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d101      	bne.n	800623e <create_chain+0xac>
			return cs;
 800623a:	68bb      	ldr	r3, [r7, #8]
 800623c:	e042      	b.n	80062c4 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 800623e:	697a      	ldr	r2, [r7, #20]
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	429a      	cmp	r2, r3
 8006244:	d1d9      	bne.n	80061fa <create_chain+0x68>
 8006246:	2300      	movs	r3, #0
 8006248:	e03c      	b.n	80062c4 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 800624a:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 800624c:	f06f 4270 	mvn.w	r2, #4026531840	@ 0xf0000000
 8006250:	6979      	ldr	r1, [r7, #20]
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f7ff fe35 	bl	8005ec2 <put_fat>
 8006258:	4603      	mov	r3, r0
 800625a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 800625c:	7bfb      	ldrb	r3, [r7, #15]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d109      	bne.n	8006276 <create_chain+0xe4>
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	2b00      	cmp	r3, #0
 8006266:	d006      	beq.n	8006276 <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8006268:	697a      	ldr	r2, [r7, #20]
 800626a:	6839      	ldr	r1, [r7, #0]
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7ff fe28 	bl	8005ec2 <put_fat>
 8006272:	4603      	mov	r3, r0
 8006274:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 8006276:	7bfb      	ldrb	r3, [r7, #15]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d11a      	bne.n	80062b2 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	697a      	ldr	r2, [r7, #20]
 8006280:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
		if (fs->free_clust != 0xFFFFFFFF) {
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800628a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800628e:	d018      	beq.n	80062c2 <create_chain+0x130>
			fs->free_clust--;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006296:	1e5a      	subs	r2, r3, #1
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fs->fsi_flag |= 1;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 3205 	ldrb.w	r3, [r3, #517]	@ 0x205
 80062a4:	f043 0301 	orr.w	r3, r3, #1
 80062a8:	b2da      	uxtb	r2, r3
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
 80062b0:	e007      	b.n	80062c2 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80062b2:	7bfb      	ldrb	r3, [r7, #15]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d102      	bne.n	80062be <create_chain+0x12c>
 80062b8:	f04f 33ff 	mov.w	r3, #4294967295
 80062bc:	e000      	b.n	80062c0 <create_chain+0x12e>
 80062be:	2301      	movs	r3, #1
 80062c0:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80062c2:	697b      	ldr	r3, [r7, #20]
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}

080062cc <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 80062cc:	b480      	push	{r7}
 80062ce:	b087      	sub	sp, #28
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	6078      	str	r0, [r7, #4]
 80062d4:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80062dc:	3304      	adds	r3, #4
 80062de:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	0a5b      	lsrs	r3, r3, #9
 80062e4:	687a      	ldr	r2, [r7, #4]
 80062e6:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80062ea:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80062ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80062f2:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	1d1a      	adds	r2, r3, #4
 80062f8:	613a      	str	r2, [r7, #16]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	2b00      	cmp	r3, #0
 8006302:	d101      	bne.n	8006308 <clmt_clust+0x3c>
 8006304:	2300      	movs	r3, #0
 8006306:	e010      	b.n	800632a <clmt_clust+0x5e>
		if (cl < ncl) break;	/* In this fragment? */
 8006308:	697a      	ldr	r2, [r7, #20]
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	429a      	cmp	r2, r3
 800630e:	d307      	bcc.n	8006320 <clmt_clust+0x54>
		cl -= ncl; tbl++;		/* Next fragment */
 8006310:	697a      	ldr	r2, [r7, #20]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1ad3      	subs	r3, r2, r3
 8006316:	617b      	str	r3, [r7, #20]
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	3304      	adds	r3, #4
 800631c:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800631e:	e7e9      	b.n	80062f4 <clmt_clust+0x28>
		if (cl < ncl) break;	/* In this fragment? */
 8006320:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	4413      	add	r3, r2
}
 800632a:	4618      	mov	r0, r3
 800632c:	371c      	adds	r7, #28
 800632e:	46bd      	mov	sp, r7
 8006330:	bc80      	pop	{r7}
 8006332:	4770      	bx	lr

08006334 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
 800633c:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	b29a      	uxth	r2, r3
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	clst = dp->sclust;		/* Table start cluster (0:root) */
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800634e:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8006350:	697b      	ldr	r3, [r7, #20]
 8006352:	2b01      	cmp	r3, #1
 8006354:	d007      	beq.n	8006366 <dir_sdi+0x32>
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800635c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006360:	697a      	ldr	r2, [r7, #20]
 8006362:	429a      	cmp	r2, r3
 8006364:	d301      	bcc.n	800636a <dir_sdi+0x36>
		return FR_INT_ERR;
 8006366:	2302      	movs	r3, #2
 8006368:	e074      	b.n	8006454 <dir_sdi+0x120>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10c      	bne.n	800638a <dir_sdi+0x56>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006376:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800637a:	2b03      	cmp	r3, #3
 800637c:	d105      	bne.n	800638a <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006384:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 8006388:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d111      	bne.n	80063b4 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006396:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800639a:	461a      	mov	r2, r3
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	4293      	cmp	r3, r2
 80063a0:	d301      	bcc.n	80063a6 <dir_sdi+0x72>
			return FR_INT_ERR;
 80063a2:	2302      	movs	r3, #2
 80063a4:	e056      	b.n	8006454 <dir_sdi+0x120>
		sect = dp->fs->dirbase;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80063ac:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 80063b0:	613b      	str	r3, [r7, #16]
 80063b2:	e032      	b.n	800641a <dir_sdi+0xe6>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80063ba:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80063be:	011b      	lsls	r3, r3, #4
 80063c0:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 80063c2:	e01e      	b.n	8006402 <dir_sdi+0xce>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80063ca:	6979      	ldr	r1, [r7, #20]
 80063cc:	4618      	mov	r0, r3
 80063ce:	f7ff fcbe 	bl	8005d4e <get_fat>
 80063d2:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063da:	d101      	bne.n	80063e0 <dir_sdi+0xac>
 80063dc:	2301      	movs	r3, #1
 80063de:	e039      	b.n	8006454 <dir_sdi+0x120>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2b01      	cmp	r3, #1
 80063e4:	d907      	bls.n	80063f6 <dir_sdi+0xc2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80063ec:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	429a      	cmp	r2, r3
 80063f4:	d301      	bcc.n	80063fa <dir_sdi+0xc6>
				return FR_INT_ERR;
 80063f6:	2302      	movs	r3, #2
 80063f8:	e02c      	b.n	8006454 <dir_sdi+0x120>
			idx -= ic;
 80063fa:	683a      	ldr	r2, [r7, #0]
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	1ad3      	subs	r3, r2, r3
 8006400:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8006402:	683a      	ldr	r2, [r7, #0]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	429a      	cmp	r2, r3
 8006408:	d2dc      	bcs.n	80063c4 <dir_sdi+0x90>
		}
		sect = clust2sect(dp->fs, clst);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006410:	6979      	ldr	r1, [r7, #20]
 8006412:	4618      	mov	r0, r3
 8006414:	f7ff fc7a 	bl	8005d0c <clust2sect>
 8006418:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
	if (!sect) return FR_INT_ERR;
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d101      	bne.n	800642c <dir_sdi+0xf8>
 8006428:	2302      	movs	r3, #2
 800642a:	e013      	b.n	8006454 <dir_sdi+0x120>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	091a      	lsrs	r2, r3, #4
 8006430:	693b      	ldr	r3, [r7, #16]
 8006432:	441a      	add	r2, r3
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006440:	461a      	mov	r2, r3
 8006442:	683b      	ldr	r3, [r7, #0]
 8006444:	f003 030f 	and.w	r3, r3, #15
 8006448:	015b      	lsls	r3, r3, #5
 800644a:	441a      	add	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8006452:	2300      	movs	r3, #0
}
 8006454:	4618      	mov	r0, r3
 8006456:	3718      	adds	r7, #24
 8006458:	46bd      	mov	sp, r7
 800645a:	bd80      	pop	{r7, pc}

0800645c <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800645c:	b590      	push	{r4, r7, lr}
 800645e:	b087      	sub	sp, #28
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f8b3 3206 	ldrh.w	r3, [r3, #518]	@ 0x206
 800646c:	3301      	adds	r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	b29b      	uxth	r3, r3
 8006474:	2b00      	cmp	r3, #0
 8006476:	d004      	beq.n	8006482 <dir_next+0x26>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800647e:	2b00      	cmp	r3, #0
 8006480:	d101      	bne.n	8006486 <dir_next+0x2a>
		return FR_NO_FILE;
 8006482:	2304      	movs	r3, #4
 8006484:	e0dd      	b.n	8006642 <dir_next+0x1e6>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	f003 030f 	and.w	r3, r3, #15
 800648c:	2b00      	cmp	r3, #0
 800648e:	f040 80c6 	bne.w	800661e <dir_next+0x1c2>
		dp->sect++;					/* Next sector */
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006498:	1c5a      	adds	r2, r3, #1
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

		if (!dp->clust) {		/* Static table */
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80064a6:	2b00      	cmp	r3, #0
 80064a8:	d10b      	bne.n	80064c2 <dir_next+0x66>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80064b0:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 80064b4:	461a      	mov	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	4293      	cmp	r3, r2
 80064ba:	f0c0 80b0 	bcc.w	800661e <dir_next+0x1c2>
				return FR_NO_FILE;
 80064be:	2304      	movs	r3, #4
 80064c0:	e0bf      	b.n	8006642 <dir_next+0x1e6>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	091b      	lsrs	r3, r3, #4
 80064c6:	687a      	ldr	r2, [r7, #4]
 80064c8:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 80064cc:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 80064d0:	3a01      	subs	r2, #1
 80064d2:	4013      	ands	r3, r2
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	f040 80a2 	bne.w	800661e <dir_next+0x1c2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 80064e6:	4619      	mov	r1, r3
 80064e8:	4610      	mov	r0, r2
 80064ea:	f7ff fc30 	bl	8005d4e <get_fat>
 80064ee:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	2b01      	cmp	r3, #1
 80064f4:	d801      	bhi.n	80064fa <dir_next+0x9e>
 80064f6:	2302      	movs	r3, #2
 80064f8:	e0a3      	b.n	8006642 <dir_next+0x1e6>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006500:	d101      	bne.n	8006506 <dir_next+0xaa>
 8006502:	2301      	movs	r3, #1
 8006504:	e09d      	b.n	8006642 <dir_next+0x1e6>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800650c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	429a      	cmp	r2, r3
 8006514:	d374      	bcc.n	8006600 <dir_next+0x1a4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8006516:	683b      	ldr	r3, [r7, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d101      	bne.n	8006520 <dir_next+0xc4>
 800651c:	2304      	movs	r3, #4
 800651e:	e090      	b.n	8006642 <dir_next+0x1e6>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 800652c:	4619      	mov	r1, r3
 800652e:	4610      	mov	r0, r2
 8006530:	f7ff fe2f 	bl	8006192 <create_chain>
 8006534:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	2b00      	cmp	r3, #0
 800653a:	d101      	bne.n	8006540 <dir_next+0xe4>
 800653c:	2307      	movs	r3, #7
 800653e:	e080      	b.n	8006642 <dir_next+0x1e6>
					if (clst == 1) return FR_INT_ERR;
 8006540:	697b      	ldr	r3, [r7, #20]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d101      	bne.n	800654a <dir_next+0xee>
 8006546:	2302      	movs	r3, #2
 8006548:	e07b      	b.n	8006642 <dir_next+0x1e6>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800654a:	697b      	ldr	r3, [r7, #20]
 800654c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006550:	d101      	bne.n	8006556 <dir_next+0xfa>
 8006552:	2301      	movs	r3, #1
 8006554:	e075      	b.n	8006642 <dir_next+0x1e6>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800655c:	4618      	mov	r0, r3
 800655e:	f7ff fab1 	bl	8005ac4 <sync_window>
 8006562:	4603      	mov	r3, r0
 8006564:	2b00      	cmp	r3, #0
 8006566:	d001      	beq.n	800656c <dir_next+0x110>
 8006568:	2301      	movs	r3, #1
 800656a:	e06a      	b.n	8006642 <dir_next+0x1e6>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006572:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006576:	2100      	movs	r1, #0
 8006578:	4618      	mov	r0, r3
 800657a:	f7ff f895 	bl	80056a8 <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	f8d3 4200 	ldr.w	r4, [r3, #512]	@ 0x200
 800658a:	6979      	ldr	r1, [r7, #20]
 800658c:	4610      	mov	r0, r2
 800658e:	f7ff fbbd 	bl	8005d0c <clust2sect>
 8006592:	4603      	mov	r3, r0
 8006594:	f8c4 322c 	str.w	r3, [r4, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8006598:	2300      	movs	r3, #0
 800659a:	613b      	str	r3, [r7, #16]
 800659c:	e01b      	b.n	80065d6 <dir_next+0x17a>
						dp->fs->wflag = 1;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065a4:	2201      	movs	r2, #1
 80065a6:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065b0:	4618      	mov	r0, r3
 80065b2:	f7ff fa87 	bl	8005ac4 <sync_window>
 80065b6:	4603      	mov	r3, r0
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d001      	beq.n	80065c0 <dir_next+0x164>
 80065bc:	2301      	movs	r3, #1
 80065be:	e040      	b.n	8006642 <dir_next+0x1e6>
						dp->fs->winsect++;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065c6:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 80065ca:	3201      	adds	r2, #1
 80065cc:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80065d0:	693b      	ldr	r3, [r7, #16]
 80065d2:	3301      	adds	r3, #1
 80065d4:	613b      	str	r3, [r7, #16]
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065dc:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 80065e0:	461a      	mov	r2, r3
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d3da      	bcc.n	800659e <dir_next+0x142>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065ee:	f8d3 122c 	ldr.w	r1, [r3, #556]	@ 0x22c
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80065f8:	693a      	ldr	r2, [r7, #16]
 80065fa:	1a8a      	subs	r2, r1, r2
 80065fc:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	697a      	ldr	r2, [r7, #20]
 8006604:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
				dp->sect = clust2sect(dp->fs, clst);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800660e:	6979      	ldr	r1, [r7, #20]
 8006610:	4618      	mov	r0, r3
 8006612:	f7ff fb7b 	bl	8005d0c <clust2sect>
 8006616:	4602      	mov	r2, r0
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	b29a      	uxth	r2, r3
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800662e:	461a      	mov	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f003 030f 	and.w	r3, r3, #15
 8006636:	015b      	lsls	r3, r3, #5
 8006638:	441a      	add	r2, r3
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

	return FR_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	371c      	adds	r7, #28
 8006646:	46bd      	mov	sp, r7
 8006648:	bd90      	pop	{r4, r7, pc}

0800664a <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800664a:	b580      	push	{r7, lr}
 800664c:	b084      	sub	sp, #16
 800664e:	af00      	add	r7, sp, #0
 8006650:	6078      	str	r0, [r7, #4]
 8006652:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8006654:	2100      	movs	r1, #0
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f7ff fe6c 	bl	8006334 <dir_sdi>
 800665c:	4603      	mov	r3, r0
 800665e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006660:	7bfb      	ldrb	r3, [r7, #15]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d131      	bne.n	80066ca <dir_alloc+0x80>
		n = 0;
 8006666:	2300      	movs	r3, #0
 8006668:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8006676:	4619      	mov	r1, r3
 8006678:	4610      	mov	r0, r2
 800667a:	f7ff fa6c 	bl	8005b56 <move_window>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006682:	7bfb      	ldrb	r3, [r7, #15]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d11f      	bne.n	80066c8 <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	2be5      	cmp	r3, #229	@ 0xe5
 8006692:	d005      	beq.n	80066a0 <dir_alloc+0x56>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d107      	bne.n	80066b0 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80066a0:	68bb      	ldr	r3, [r7, #8]
 80066a2:	3301      	adds	r3, #1
 80066a4:	60bb      	str	r3, [r7, #8]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	429a      	cmp	r2, r3
 80066ac:	d102      	bne.n	80066b4 <dir_alloc+0x6a>
 80066ae:	e00c      	b.n	80066ca <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80066b0:	2300      	movs	r3, #0
 80066b2:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80066b4:	2101      	movs	r1, #1
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f7ff fed0 	bl	800645c <dir_next>
 80066bc:	4603      	mov	r3, r0
 80066be:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80066c0:	7bfb      	ldrb	r3, [r7, #15]
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d0d1      	beq.n	800666a <dir_alloc+0x20>
 80066c6:	e000      	b.n	80066ca <dir_alloc+0x80>
			if (res != FR_OK) break;
 80066c8:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80066ca:	7bfb      	ldrb	r3, [r7, #15]
 80066cc:	2b04      	cmp	r3, #4
 80066ce:	d101      	bne.n	80066d4 <dir_alloc+0x8a>
 80066d0:	2307      	movs	r3, #7
 80066d2:	73fb      	strb	r3, [r7, #15]
	return res;
 80066d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3710      	adds	r7, #16
 80066da:	46bd      	mov	sp, r7
 80066dc:	bd80      	pop	{r7, pc}

080066de <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 80066de:	b480      	push	{r7}
 80066e0:	b085      	sub	sp, #20
 80066e2:	af00      	add	r7, sp, #0
 80066e4:	6078      	str	r0, [r7, #4]
 80066e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 80066e8:	683b      	ldr	r3, [r7, #0]
 80066ea:	331b      	adds	r3, #27
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b21b      	sxth	r3, r3
 80066f0:	021b      	lsls	r3, r3, #8
 80066f2:	b21a      	sxth	r2, r3
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	331a      	adds	r3, #26
 80066f8:	781b      	ldrb	r3, [r3, #0]
 80066fa:	b21b      	sxth	r3, r3
 80066fc:	4313      	orrs	r3, r2
 80066fe:	b21b      	sxth	r3, r3
 8006700:	b29b      	uxth	r3, r3
 8006702:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800670a:	2b03      	cmp	r3, #3
 800670c:	d110      	bne.n	8006730 <ld_clust+0x52>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	3315      	adds	r3, #21
 8006712:	781b      	ldrb	r3, [r3, #0]
 8006714:	b21b      	sxth	r3, r3
 8006716:	021b      	lsls	r3, r3, #8
 8006718:	b21a      	sxth	r2, r3
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	3314      	adds	r3, #20
 800671e:	781b      	ldrb	r3, [r3, #0]
 8006720:	b21b      	sxth	r3, r3
 8006722:	4313      	orrs	r3, r2
 8006724:	b21b      	sxth	r3, r3
 8006726:	b29b      	uxth	r3, r3
 8006728:	041b      	lsls	r3, r3, #16
 800672a:	68fa      	ldr	r2, [r7, #12]
 800672c:	4313      	orrs	r3, r2
 800672e:	60fb      	str	r3, [r7, #12]

	return cl;
 8006730:	68fb      	ldr	r3, [r7, #12]
}
 8006732:	4618      	mov	r0, r3
 8006734:	3714      	adds	r7, #20
 8006736:	46bd      	mov	sp, r7
 8006738:	bc80      	pop	{r7}
 800673a:	4770      	bx	lr

0800673c <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	331a      	adds	r3, #26
 800674a:	683a      	ldr	r2, [r7, #0]
 800674c:	b2d2      	uxtb	r2, r2
 800674e:	701a      	strb	r2, [r3, #0]
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	b29b      	uxth	r3, r3
 8006754:	0a1b      	lsrs	r3, r3, #8
 8006756:	b29a      	uxth	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	331b      	adds	r3, #27
 800675c:	b2d2      	uxtb	r2, r2
 800675e:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8006760:	683b      	ldr	r3, [r7, #0]
 8006762:	0c1a      	lsrs	r2, r3, #16
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3314      	adds	r3, #20
 8006768:	b2d2      	uxtb	r2, r2
 800676a:	701a      	strb	r2, [r3, #0]
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	0c1b      	lsrs	r3, r3, #16
 8006770:	b29b      	uxth	r3, r3
 8006772:	0a1b      	lsrs	r3, r3, #8
 8006774:	b29a      	uxth	r2, r3
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	3315      	adds	r3, #21
 800677a:	b2d2      	uxtb	r2, r2
 800677c:	701a      	strb	r2, [r3, #0]
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	bc80      	pop	{r7}
 8006786:	4770      	bx	lr

08006788 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b086      	sub	sp, #24
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006790:	2100      	movs	r1, #0
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f7ff fdce 	bl	8006334 <dir_sdi>
 8006798:	4603      	mov	r3, r0
 800679a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800679c:	7dfb      	ldrb	r3, [r7, #23]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d001      	beq.n	80067a6 <dir_find+0x1e>
 80067a2:	7dfb      	ldrb	r3, [r7, #23]
 80067a4:	e03b      	b.n	800681e <dir_find+0x96>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 80067b2:	4619      	mov	r1, r3
 80067b4:	4610      	mov	r0, r2
 80067b6:	f7ff f9ce 	bl	8005b56 <move_window>
 80067ba:	4603      	mov	r3, r0
 80067bc:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80067be:	7dfb      	ldrb	r3, [r7, #23]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d128      	bne.n	8006816 <dir_find+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80067ca:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	781b      	ldrb	r3, [r3, #0]
 80067d0:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 80067d2:	7bfb      	ldrb	r3, [r7, #15]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d102      	bne.n	80067de <dir_find+0x56>
 80067d8:	2304      	movs	r3, #4
 80067da:	75fb      	strb	r3, [r7, #23]
 80067dc:	e01e      	b.n	800681c <dir_find+0x94>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	330b      	adds	r3, #11
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	f003 0308 	and.w	r3, r3, #8
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d10a      	bne.n	8006802 <dir_find+0x7a>
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80067f2:	220b      	movs	r2, #11
 80067f4:	4619      	mov	r1, r3
 80067f6:	6938      	ldr	r0, [r7, #16]
 80067f8:	f7fe ff70 	bl	80056dc <mem_cmp>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00b      	beq.n	800681a <dir_find+0x92>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8006802:	2100      	movs	r1, #0
 8006804:	6878      	ldr	r0, [r7, #4]
 8006806:	f7ff fe29 	bl	800645c <dir_next>
 800680a:	4603      	mov	r3, r0
 800680c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800680e:	7dfb      	ldrb	r3, [r7, #23]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d0c8      	beq.n	80067a6 <dir_find+0x1e>
 8006814:	e002      	b.n	800681c <dir_find+0x94>
		if (res != FR_OK) break;
 8006816:	bf00      	nop
 8006818:	e000      	b.n	800681c <dir_find+0x94>
			break;
 800681a:	bf00      	nop

	return res;
 800681c:	7dfb      	ldrb	r3, [r7, #23]
}
 800681e:	4618      	mov	r0, r3
 8006820:	3718      	adds	r7, #24
 8006822:	46bd      	mov	sp, r7
 8006824:	bd80      	pop	{r7, pc}

08006826 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006826:	b580      	push	{r7, lr}
 8006828:	b084      	sub	sp, #16
 800682a:	af00      	add	r7, sp, #0
 800682c:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 800682e:	2101      	movs	r1, #1
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f7ff ff0a 	bl	800664a <dir_alloc>
 8006836:	4603      	mov	r3, r0
 8006838:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 800683a:	7bfb      	ldrb	r3, [r7, #15]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d126      	bne.n	800688e <dir_register+0x68>
		res = move_window(dp->fs, dp->sect);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7ff f981 	bl	8005b56 <move_window>
 8006854:	4603      	mov	r3, r0
 8006856:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8006858:	7bfb      	ldrb	r3, [r7, #15]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d117      	bne.n	800688e <dir_register+0x68>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006864:	2220      	movs	r2, #32
 8006866:	2100      	movs	r1, #0
 8006868:	4618      	mov	r0, r3
 800686a:	f7fe ff1d 	bl	80056a8 <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	f8d3 0214 	ldr.w	r0, [r3, #532]	@ 0x214
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 800687a:	220b      	movs	r2, #11
 800687c:	4619      	mov	r1, r3
 800687e:	f7fe fef5 	bl	800566c <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006888:	2201      	movs	r2, #1
 800688a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
		}
	}

	return res;
 800688e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006890:	4618      	mov	r0, r3
 8006892:	3710      	adds	r7, #16
 8006894:	46bd      	mov	sp, r7
 8006896:	bd80      	pop	{r7, pc}

08006898 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b088      	sub	sp, #32
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]
 80068a8:	e002      	b.n	80068b0 <create_name+0x18>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	60fb      	str	r3, [r7, #12]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	2b2f      	cmp	r3, #47	@ 0x2f
 80068b6:	d0f8      	beq.n	80068aa <create_name+0x12>
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	781b      	ldrb	r3, [r3, #0]
 80068bc:	2b5c      	cmp	r3, #92	@ 0x5c
 80068be:	d0f4      	beq.n	80068aa <create_name+0x12>
	sfn = dp->fn;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80068c6:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 80068c8:	220b      	movs	r2, #11
 80068ca:	2120      	movs	r1, #32
 80068cc:	68b8      	ldr	r0, [r7, #8]
 80068ce:	f7fe feeb 	bl	80056a8 <mem_set>
	si = i = b = 0; ni = 8;
 80068d2:	2300      	movs	r3, #0
 80068d4:	77fb      	strb	r3, [r7, #31]
 80068d6:	2300      	movs	r3, #0
 80068d8:	613b      	str	r3, [r7, #16]
 80068da:	693b      	ldr	r3, [r7, #16]
 80068dc:	617b      	str	r3, [r7, #20]
 80068de:	2308      	movs	r3, #8
 80068e0:	61bb      	str	r3, [r7, #24]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
		return FR_OK;
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	1c5a      	adds	r2, r3, #1
 80068e6:	617a      	str	r2, [r7, #20]
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4413      	add	r3, r2
 80068ec:	781b      	ldrb	r3, [r3, #0]
 80068ee:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 80068f0:	7fbb      	ldrb	r3, [r7, #30]
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	d953      	bls.n	800699e <create_name+0x106>
 80068f6:	7fbb      	ldrb	r3, [r7, #30]
 80068f8:	2b2f      	cmp	r3, #47	@ 0x2f
 80068fa:	d050      	beq.n	800699e <create_name+0x106>
 80068fc:	7fbb      	ldrb	r3, [r7, #30]
 80068fe:	2b5c      	cmp	r3, #92	@ 0x5c
 8006900:	d04d      	beq.n	800699e <create_name+0x106>
		if (c == '.' || i >= ni) {
 8006902:	7fbb      	ldrb	r3, [r7, #30]
 8006904:	2b2e      	cmp	r3, #46	@ 0x2e
 8006906:	d003      	beq.n	8006910 <create_name+0x78>
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	69bb      	ldr	r3, [r7, #24]
 800690c:	429a      	cmp	r2, r3
 800690e:	d30f      	bcc.n	8006930 <create_name+0x98>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8006910:	69bb      	ldr	r3, [r7, #24]
 8006912:	2b08      	cmp	r3, #8
 8006914:	d102      	bne.n	800691c <create_name+0x84>
 8006916:	7fbb      	ldrb	r3, [r7, #30]
 8006918:	2b2e      	cmp	r3, #46	@ 0x2e
 800691a:	d001      	beq.n	8006920 <create_name+0x88>
 800691c:	2306      	movs	r3, #6
 800691e:	e073      	b.n	8006a08 <create_name+0x170>
			i = 8; ni = 11;
 8006920:	2308      	movs	r3, #8
 8006922:	613b      	str	r3, [r7, #16]
 8006924:	230b      	movs	r3, #11
 8006926:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8006928:	7ffb      	ldrb	r3, [r7, #31]
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e035      	b.n	800699c <create_name+0x104>
		}
		if (c >= 0x80) {				/* Extended character? */
 8006930:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8006934:	2b00      	cmp	r3, #0
 8006936:	da08      	bge.n	800694a <create_name+0xb2>
			b |= 3;						/* Eliminate NT flag */
 8006938:	7ffb      	ldrb	r3, [r7, #31]
 800693a:	f043 0303 	orr.w	r3, r3, #3
 800693e:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8006940:	7fbb      	ldrb	r3, [r7, #30]
 8006942:	3b80      	subs	r3, #128	@ 0x80
 8006944:	4a32      	ldr	r2, [pc, #200]	@ (8006a10 <create_name+0x178>)
 8006946:	5cd3      	ldrb	r3, [r2, r3]
 8006948:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 800694a:	7fbb      	ldrb	r3, [r7, #30]
 800694c:	4619      	mov	r1, r3
 800694e:	4831      	ldr	r0, [pc, #196]	@ (8006a14 <create_name+0x17c>)
 8006950:	f7fe feea 	bl	8005728 <chk_chr>
 8006954:	4603      	mov	r3, r0
 8006956:	2b00      	cmp	r3, #0
 8006958:	d001      	beq.n	800695e <create_name+0xc6>
				return FR_INVALID_NAME;
 800695a:	2306      	movs	r3, #6
 800695c:	e054      	b.n	8006a08 <create_name+0x170>
			if (IsUpper(c)) {			/* ASCII large capital? */
 800695e:	7fbb      	ldrb	r3, [r7, #30]
 8006960:	2b40      	cmp	r3, #64	@ 0x40
 8006962:	d907      	bls.n	8006974 <create_name+0xdc>
 8006964:	7fbb      	ldrb	r3, [r7, #30]
 8006966:	2b5a      	cmp	r3, #90	@ 0x5a
 8006968:	d804      	bhi.n	8006974 <create_name+0xdc>
				b |= 2;
 800696a:	7ffb      	ldrb	r3, [r7, #31]
 800696c:	f043 0302 	orr.w	r3, r3, #2
 8006970:	77fb      	strb	r3, [r7, #31]
 8006972:	e00c      	b.n	800698e <create_name+0xf6>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8006974:	7fbb      	ldrb	r3, [r7, #30]
 8006976:	2b60      	cmp	r3, #96	@ 0x60
 8006978:	d909      	bls.n	800698e <create_name+0xf6>
 800697a:	7fbb      	ldrb	r3, [r7, #30]
 800697c:	2b7a      	cmp	r3, #122	@ 0x7a
 800697e:	d806      	bhi.n	800698e <create_name+0xf6>
					b |= 1; c -= 0x20;
 8006980:	7ffb      	ldrb	r3, [r7, #31]
 8006982:	f043 0301 	orr.w	r3, r3, #1
 8006986:	77fb      	strb	r3, [r7, #31]
 8006988:	7fbb      	ldrb	r3, [r7, #30]
 800698a:	3b20      	subs	r3, #32
 800698c:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	1c5a      	adds	r2, r3, #1
 8006992:	613a      	str	r2, [r7, #16]
 8006994:	68ba      	ldr	r2, [r7, #8]
 8006996:	4413      	add	r3, r2
 8006998:	7fba      	ldrb	r2, [r7, #30]
 800699a:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 800699c:	e7a1      	b.n	80068e2 <create_name+0x4a>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	441a      	add	r2, r3
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 80069a8:	7fbb      	ldrb	r3, [r7, #30]
 80069aa:	2b20      	cmp	r3, #32
 80069ac:	d801      	bhi.n	80069b2 <create_name+0x11a>
 80069ae:	2304      	movs	r3, #4
 80069b0:	e000      	b.n	80069b4 <create_name+0x11c>
 80069b2:	2300      	movs	r3, #0
 80069b4:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d101      	bne.n	80069c0 <create_name+0x128>
 80069bc:	2306      	movs	r3, #6
 80069be:	e023      	b.n	8006a08 <create_name+0x170>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 80069c0:	68bb      	ldr	r3, [r7, #8]
 80069c2:	781b      	ldrb	r3, [r3, #0]
 80069c4:	2be5      	cmp	r3, #229	@ 0xe5
 80069c6:	d102      	bne.n	80069ce <create_name+0x136>
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	2205      	movs	r2, #5
 80069cc:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	2b08      	cmp	r3, #8
 80069d2:	d102      	bne.n	80069da <create_name+0x142>
 80069d4:	7ffb      	ldrb	r3, [r7, #31]
 80069d6:	009b      	lsls	r3, r3, #2
 80069d8:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 80069da:	7ffb      	ldrb	r3, [r7, #31]
 80069dc:	f003 0303 	and.w	r3, r3, #3
 80069e0:	2b01      	cmp	r3, #1
 80069e2:	d103      	bne.n	80069ec <create_name+0x154>
 80069e4:	7fbb      	ldrb	r3, [r7, #30]
 80069e6:	f043 0310 	orr.w	r3, r3, #16
 80069ea:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 80069ec:	7ffb      	ldrb	r3, [r7, #31]
 80069ee:	f003 030c 	and.w	r3, r3, #12
 80069f2:	2b04      	cmp	r3, #4
 80069f4:	d103      	bne.n	80069fe <create_name+0x166>
 80069f6:	7fbb      	ldrb	r3, [r7, #30]
 80069f8:	f043 0308 	orr.w	r3, r3, #8
 80069fc:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	330b      	adds	r3, #11
 8006a02:	7fba      	ldrb	r2, [r7, #30]
 8006a04:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8006a06:	2300      	movs	r3, #0
#endif
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3720      	adds	r7, #32
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	0800c6e4 	.word	0x0800c6e4
 8006a14:	0800aacc 	.word	0x0800aacc

08006a18 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b084      	sub	sp, #16
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	6078      	str	r0, [r7, #4]
 8006a20:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	781b      	ldrb	r3, [r3, #0]
 8006a26:	2b2f      	cmp	r3, #47	@ 0x2f
 8006a28:	d003      	beq.n	8006a32 <follow_path+0x1a>
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b5c      	cmp	r3, #92	@ 0x5c
 8006a30:	d102      	bne.n	8006a38 <follow_path+0x20>
		path++;
 8006a32:	683b      	ldr	r3, [r7, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	2200      	movs	r2, #0
 8006a3c:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	781b      	ldrb	r3, [r3, #0]
 8006a44:	2b1f      	cmp	r3, #31
 8006a46:	d80a      	bhi.n	8006a5e <follow_path+0x46>
		res = dir_sdi(dp, 0);
 8006a48:	2100      	movs	r1, #0
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f7ff fc72 	bl	8006334 <dir_sdi>
 8006a50:	4603      	mov	r3, r0
 8006a52:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	2200      	movs	r2, #0
 8006a58:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006a5c:	e045      	b.n	8006aea <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006a5e:	463b      	mov	r3, r7
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7ff ff18 	bl	8006898 <create_name>
 8006a68:	4603      	mov	r3, r0
 8006a6a:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8006a6c:	7bfb      	ldrb	r3, [r7, #15]
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d136      	bne.n	8006ae0 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f7ff fe88 	bl	8006788 <dir_find>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 8006a82:	7adb      	ldrb	r3, [r3, #11]
 8006a84:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8006a86:	7bfb      	ldrb	r3, [r7, #15]
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d00a      	beq.n	8006aa2 <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8006a8c:	7bfb      	ldrb	r3, [r7, #15]
 8006a8e:	2b04      	cmp	r3, #4
 8006a90:	d128      	bne.n	8006ae4 <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	f003 0304 	and.w	r3, r3, #4
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d123      	bne.n	8006ae4 <follow_path+0xcc>
 8006a9c:	2305      	movs	r3, #5
 8006a9e:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8006aa0:	e020      	b.n	8006ae4 <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006aa2:	7bbb      	ldrb	r3, [r7, #14]
 8006aa4:	f003 0304 	and.w	r3, r3, #4
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d11d      	bne.n	8006ae8 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8006ab2:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 8006ab4:	68bb      	ldr	r3, [r7, #8]
 8006ab6:	330b      	adds	r3, #11
 8006ab8:	781b      	ldrb	r3, [r3, #0]
 8006aba:	f003 0310 	and.w	r3, r3, #16
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d102      	bne.n	8006ac8 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 8006ac2:	2305      	movs	r3, #5
 8006ac4:	73fb      	strb	r3, [r7, #15]
 8006ac6:	e010      	b.n	8006aea <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006ace:	68b9      	ldr	r1, [r7, #8]
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	f7ff fe04 	bl	80066de <ld_clust>
 8006ad6:	4602      	mov	r2, r0
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8006ade:	e7be      	b.n	8006a5e <follow_path+0x46>
			if (res != FR_OK) break;
 8006ae0:	bf00      	nop
 8006ae2:	e002      	b.n	8006aea <follow_path+0xd2>
				break;
 8006ae4:	bf00      	nop
 8006ae6:	e000      	b.n	8006aea <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8006ae8:	bf00      	nop
		}
	}

	return res;
 8006aea:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aec:	4618      	mov	r0, r3
 8006aee:	3710      	adds	r7, #16
 8006af0:	46bd      	mov	sp, r7
 8006af2:	bd80      	pop	{r7, pc}

08006af4 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b087      	sub	sp, #28
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 8006afc:	f04f 33ff 	mov.w	r3, #4294967295
 8006b00:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	2b00      	cmp	r3, #0
 8006b08:	d031      	beq.n	8006b6e <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	617b      	str	r3, [r7, #20]
 8006b10:	e002      	b.n	8006b18 <get_ldnumber+0x24>
 8006b12:	697b      	ldr	r3, [r7, #20]
 8006b14:	3301      	adds	r3, #1
 8006b16:	617b      	str	r3, [r7, #20]
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	2b20      	cmp	r3, #32
 8006b1e:	d903      	bls.n	8006b28 <get_ldnumber+0x34>
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	781b      	ldrb	r3, [r3, #0]
 8006b24:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b26:	d1f4      	bne.n	8006b12 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8006b28:	697b      	ldr	r3, [r7, #20]
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	2b3a      	cmp	r3, #58	@ 0x3a
 8006b2e:	d11c      	bne.n	8006b6a <get_ldnumber+0x76>
			tp = *path;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	1c5a      	adds	r2, r3, #1
 8006b3a:	60fa      	str	r2, [r7, #12]
 8006b3c:	781b      	ldrb	r3, [r3, #0]
 8006b3e:	3b30      	subs	r3, #48	@ 0x30
 8006b40:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	2b09      	cmp	r3, #9
 8006b46:	d80e      	bhi.n	8006b66 <get_ldnumber+0x72>
 8006b48:	68fa      	ldr	r2, [r7, #12]
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d10a      	bne.n	8006b66 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d107      	bne.n	8006b66 <get_ldnumber+0x72>
					vol = (int)i;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	3301      	adds	r3, #1
 8006b5e:	617b      	str	r3, [r7, #20]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	e002      	b.n	8006b70 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8006b6e:	693b      	ldr	r3, [r7, #16]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	371c      	adds	r7, #28
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bc80      	pop	{r7}
 8006b78:	4770      	bx	lr
	...

08006b7c <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	6078      	str	r0, [r7, #4]
 8006b84:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f04f 32ff 	mov.w	r2, #4294967295
 8006b94:	f8c3 222c 	str.w	r2, [r3, #556]	@ 0x22c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8006b98:	6839      	ldr	r1, [r7, #0]
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f7fe ffdb 	bl	8005b56 <move_window>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d001      	beq.n	8006baa <check_fs+0x2e>
		return 3;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e04b      	b.n	8006c42 <check_fs+0xc6>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f503 73ff 	add.w	r3, r3, #510	@ 0x1fe
 8006bb0:	3301      	adds	r3, #1
 8006bb2:	781b      	ldrb	r3, [r3, #0]
 8006bb4:	b21b      	sxth	r3, r3
 8006bb6:	021b      	lsls	r3, r3, #8
 8006bb8:	b21a      	sxth	r2, r3
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8006bc0:	b21b      	sxth	r3, r3
 8006bc2:	4313      	orrs	r3, r2
 8006bc4:	b21b      	sxth	r3, r3
 8006bc6:	4a21      	ldr	r2, [pc, #132]	@ (8006c4c <check_fs+0xd0>)
 8006bc8:	4293      	cmp	r3, r2
 8006bca:	d001      	beq.n	8006bd0 <check_fs+0x54>
		return 2;
 8006bcc:	2302      	movs	r3, #2
 8006bce:	e038      	b.n	8006c42 <check_fs+0xc6>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	3336      	adds	r3, #54	@ 0x36
 8006bd4:	3303      	adds	r3, #3
 8006bd6:	781b      	ldrb	r3, [r3, #0]
 8006bd8:	061a      	lsls	r2, r3, #24
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	3336      	adds	r3, #54	@ 0x36
 8006bde:	3302      	adds	r3, #2
 8006be0:	781b      	ldrb	r3, [r3, #0]
 8006be2:	041b      	lsls	r3, r3, #16
 8006be4:	431a      	orrs	r2, r3
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	3336      	adds	r3, #54	@ 0x36
 8006bea:	3301      	adds	r3, #1
 8006bec:	781b      	ldrb	r3, [r3, #0]
 8006bee:	021b      	lsls	r3, r3, #8
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	687a      	ldr	r2, [r7, #4]
 8006bf4:	f892 2036 	ldrb.w	r2, [r2, #54]	@ 0x36
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006bfe:	4a14      	ldr	r2, [pc, #80]	@ (8006c50 <check_fs+0xd4>)
 8006c00:	4293      	cmp	r3, r2
 8006c02:	d101      	bne.n	8006c08 <check_fs+0x8c>
		return 0;
 8006c04:	2300      	movs	r3, #0
 8006c06:	e01c      	b.n	8006c42 <check_fs+0xc6>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	3352      	adds	r3, #82	@ 0x52
 8006c0c:	3303      	adds	r3, #3
 8006c0e:	781b      	ldrb	r3, [r3, #0]
 8006c10:	061a      	lsls	r2, r3, #24
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	3352      	adds	r3, #82	@ 0x52
 8006c16:	3302      	adds	r3, #2
 8006c18:	781b      	ldrb	r3, [r3, #0]
 8006c1a:	041b      	lsls	r3, r3, #16
 8006c1c:	431a      	orrs	r2, r3
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	3352      	adds	r3, #82	@ 0x52
 8006c22:	3301      	adds	r3, #1
 8006c24:	781b      	ldrb	r3, [r3, #0]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	687a      	ldr	r2, [r7, #4]
 8006c2c:	f892 2052 	ldrb.w	r2, [r2, #82]	@ 0x52
 8006c30:	4313      	orrs	r3, r2
 8006c32:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8006c36:	4a06      	ldr	r2, [pc, #24]	@ (8006c50 <check_fs+0xd4>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d101      	bne.n	8006c40 <check_fs+0xc4>
		return 0;
 8006c3c:	2300      	movs	r3, #0
 8006c3e:	e000      	b.n	8006c42 <check_fs+0xc6>

	return 1;
 8006c40:	2301      	movs	r3, #1
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	3708      	adds	r7, #8
 8006c46:	46bd      	mov	sp, r7
 8006c48:	bd80      	pop	{r7, pc}
 8006c4a:	bf00      	nop
 8006c4c:	ffffaa55 	.word	0xffffaa55
 8006c50:	00544146 	.word	0x00544146

08006c54 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b096      	sub	sp, #88	@ 0x58
 8006c58:	af00      	add	r7, sp, #0
 8006c5a:	60f8      	str	r0, [r7, #12]
 8006c5c:	60b9      	str	r1, [r7, #8]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	2200      	movs	r2, #0
 8006c66:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8006c68:	68b8      	ldr	r0, [r7, #8]
 8006c6a:	f7ff ff43 	bl	8006af4 <get_ldnumber>
 8006c6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8006c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	da01      	bge.n	8006c7a <find_volume+0x26>
 8006c76:	230b      	movs	r3, #11
 8006c78:	e2ae      	b.n	80071d8 <find_volume+0x584>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8006c7a:	4a9e      	ldr	r2, [pc, #632]	@ (8006ef4 <find_volume+0x2a0>)
 8006c7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006c82:	63bb      	str	r3, [r7, #56]	@ 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8006c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d101      	bne.n	8006c8e <find_volume+0x3a>
 8006c8a:	230c      	movs	r3, #12
 8006c8c:	e2a4      	b.n	80071d8 <find_volume+0x584>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006c92:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8006c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006c96:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d01b      	beq.n	8006cd6 <find_volume+0x82>
		stat = disk_status(fs->drv);
 8006c9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca0:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7fe fc43 	bl	8005530 <disk_status>
 8006caa:	4603      	mov	r3, r0
 8006cac:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8006cb0:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cb4:	f003 0301 	and.w	r3, r3, #1
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d10c      	bne.n	8006cd6 <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8006cbc:	79fb      	ldrb	r3, [r7, #7]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d007      	beq.n	8006cd2 <find_volume+0x7e>
 8006cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cc6:	f003 0304 	and.w	r3, r3, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d001      	beq.n	8006cd2 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8006cce:	230a      	movs	r3, #10
 8006cd0:	e282      	b.n	80071d8 <find_volume+0x584>
			return FR_OK;				/* The file system object is valid */
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	e280      	b.n	80071d8 <find_volume+0x584>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8006cd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8006cde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006ce0:	b2da      	uxtb	r2, r3
 8006ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ce4:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8006ce8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cea:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8006cee:	4618      	mov	r0, r3
 8006cf0:	f7fe fc38 	bl	8005564 <disk_initialize>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8006cfa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006cfe:	f003 0301 	and.w	r3, r3, #1
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8006d06:	2303      	movs	r3, #3
 8006d08:	e266      	b.n	80071d8 <find_volume+0x584>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8006d0a:	79fb      	ldrb	r3, [r7, #7]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d007      	beq.n	8006d20 <find_volume+0xcc>
 8006d10:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d001      	beq.n	8006d20 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8006d1c:	230a      	movs	r3, #10
 8006d1e:	e25b      	b.n	80071d8 <find_volume+0x584>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8006d20:	2300      	movs	r3, #0
 8006d22:	653b      	str	r3, [r7, #80]	@ 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8006d24:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006d26:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006d28:	f7ff ff28 	bl	8006b7c <check_fs>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8006d32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d153      	bne.n	8006de2 <find_volume+0x18e>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d3e:	e028      	b.n	8006d92 <find_volume+0x13e>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8006d40:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006d42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d44:	011b      	lsls	r3, r3, #4
 8006d46:	f503 73df 	add.w	r3, r3, #446	@ 0x1be
 8006d4a:	4413      	add	r3, r2
 8006d4c:	633b      	str	r3, [r7, #48]	@ 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8006d4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d50:	3304      	adds	r3, #4
 8006d52:	781b      	ldrb	r3, [r3, #0]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d012      	beq.n	8006d7e <find_volume+0x12a>
 8006d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d5a:	330b      	adds	r3, #11
 8006d5c:	781b      	ldrb	r3, [r3, #0]
 8006d5e:	061a      	lsls	r2, r3, #24
 8006d60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d62:	330a      	adds	r3, #10
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	041b      	lsls	r3, r3, #16
 8006d68:	431a      	orrs	r2, r3
 8006d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006d6c:	3309      	adds	r3, #9
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	021b      	lsls	r3, r3, #8
 8006d72:	4313      	orrs	r3, r2
 8006d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006d76:	3208      	adds	r2, #8
 8006d78:	7812      	ldrb	r2, [r2, #0]
 8006d7a:	431a      	orrs	r2, r3
 8006d7c:	e000      	b.n	8006d80 <find_volume+0x12c>
 8006d7e:	2200      	movs	r2, #0
 8006d80:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	3358      	adds	r3, #88	@ 0x58
 8006d86:	443b      	add	r3, r7
 8006d88:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8006d8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d8e:	3301      	adds	r3, #1
 8006d90:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d9d3      	bls.n	8006d40 <find_volume+0xec>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8006d98:	2300      	movs	r3, #0
 8006d9a:	643b      	str	r3, [r7, #64]	@ 0x40
		if (i) i--;
 8006d9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d002      	beq.n	8006da8 <find_volume+0x154>
 8006da2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006da4:	3b01      	subs	r3, #1
 8006da6:	643b      	str	r3, [r7, #64]	@ 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8006da8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006daa:	009b      	lsls	r3, r3, #2
 8006dac:	3358      	adds	r3, #88	@ 0x58
 8006dae:	443b      	add	r3, r7
 8006db0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8006db4:	653b      	str	r3, [r7, #80]	@ 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8006db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d005      	beq.n	8006dc8 <find_volume+0x174>
 8006dbc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8006dbe:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006dc0:	f7ff fedc 	bl	8006b7c <check_fs>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	e000      	b.n	8006dca <find_volume+0x176>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8006dce:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d005      	beq.n	8006de2 <find_volume+0x18e>
 8006dd6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dd8:	3301      	adds	r3, #1
 8006dda:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ddc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006dde:	2b03      	cmp	r3, #3
 8006de0:	d9e2      	bls.n	8006da8 <find_volume+0x154>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8006de2:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006de6:	2b03      	cmp	r3, #3
 8006de8:	d101      	bne.n	8006dee <find_volume+0x19a>
 8006dea:	2301      	movs	r3, #1
 8006dec:	e1f4      	b.n	80071d8 <find_volume+0x584>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8006dee:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d001      	beq.n	8006dfa <find_volume+0x1a6>
 8006df6:	230d      	movs	r3, #13
 8006df8:	e1ee      	b.n	80071d8 <find_volume+0x584>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8006dfa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dfc:	7b1b      	ldrb	r3, [r3, #12]
 8006dfe:	b21b      	sxth	r3, r3
 8006e00:	021b      	lsls	r3, r3, #8
 8006e02:	b21a      	sxth	r2, r3
 8006e04:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e06:	7adb      	ldrb	r3, [r3, #11]
 8006e08:	b21b      	sxth	r3, r3
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	b21b      	sxth	r3, r3
 8006e0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e12:	d001      	beq.n	8006e18 <find_volume+0x1c4>
		return FR_NO_FILESYSTEM;
 8006e14:	230d      	movs	r3, #13
 8006e16:	e1df      	b.n	80071d8 <find_volume+0x584>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8006e18:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e1a:	7ddb      	ldrb	r3, [r3, #23]
 8006e1c:	b21b      	sxth	r3, r3
 8006e1e:	021b      	lsls	r3, r3, #8
 8006e20:	b21a      	sxth	r2, r3
 8006e22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e24:	7d9b      	ldrb	r3, [r3, #22]
 8006e26:	b21b      	sxth	r3, r3
 8006e28:	4313      	orrs	r3, r2
 8006e2a:	b21b      	sxth	r3, r3
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8006e30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d112      	bne.n	8006e5c <find_volume+0x208>
 8006e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e38:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8006e3c:	061a      	lsls	r2, r3, #24
 8006e3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e40:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
 8006e44:	041b      	lsls	r3, r3, #16
 8006e46:	431a      	orrs	r2, r3
 8006e48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e4a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8006e4e:	021b      	lsls	r3, r3, #8
 8006e50:	4313      	orrs	r3, r2
 8006e52:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006e54:	f892 2024 	ldrb.w	r2, [r2, #36]	@ 0x24
 8006e58:	4313      	orrs	r3, r2
 8006e5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	fs->fsize = fasize;
 8006e5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e5e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e60:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8006e64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e66:	7c1a      	ldrb	r2, [r3, #16]
 8006e68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e6a:	f883 2203 	strb.w	r2, [r3, #515]	@ 0x203
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8006e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e70:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006e74:	2b01      	cmp	r3, #1
 8006e76:	d006      	beq.n	8006e86 <find_volume+0x232>
 8006e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e7a:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d001      	beq.n	8006e86 <find_volume+0x232>
		return FR_NO_FILESYSTEM;
 8006e82:	230d      	movs	r3, #13
 8006e84:	e1a8      	b.n	80071d8 <find_volume+0x584>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8006e86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e88:	f893 3203 	ldrb.w	r3, [r3, #515]	@ 0x203
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e90:	fb02 f303 	mul.w	r3, r2, r3
 8006e94:	64fb      	str	r3, [r7, #76]	@ 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8006e96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e98:	7b5a      	ldrb	r2, [r3, #13]
 8006e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e9c:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8006ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ea2:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d00a      	beq.n	8006ec0 <find_volume+0x26c>
 8006eaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eac:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006eb0:	461a      	mov	r2, r3
 8006eb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eb4:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	4013      	ands	r3, r2
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d001      	beq.n	8006ec4 <find_volume+0x270>
		return FR_NO_FILESYSTEM;
 8006ec0:	230d      	movs	r3, #13
 8006ec2:	e189      	b.n	80071d8 <find_volume+0x584>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8006ec4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ec6:	7c9b      	ldrb	r3, [r3, #18]
 8006ec8:	b21b      	sxth	r3, r3
 8006eca:	021b      	lsls	r3, r3, #8
 8006ecc:	b21a      	sxth	r2, r3
 8006ece:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ed0:	7c5b      	ldrb	r3, [r3, #17]
 8006ed2:	b21b      	sxth	r3, r3
 8006ed4:	4313      	orrs	r3, r2
 8006ed6:	b21b      	sxth	r3, r3
 8006ed8:	b29a      	uxth	r2, r3
 8006eda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006edc:	f8a3 2208 	strh.w	r2, [r3, #520]	@ 0x208
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8006ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ee2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8006ee6:	f003 030f 	and.w	r3, r3, #15
 8006eea:	b29b      	uxth	r3, r3
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d003      	beq.n	8006ef8 <find_volume+0x2a4>
		return FR_NO_FILESYSTEM;
 8006ef0:	230d      	movs	r3, #13
 8006ef2:	e171      	b.n	80071d8 <find_volume+0x584>
 8006ef4:	20000620 	.word	0x20000620

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8006ef8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006efa:	7d1b      	ldrb	r3, [r3, #20]
 8006efc:	b21b      	sxth	r3, r3
 8006efe:	021b      	lsls	r3, r3, #8
 8006f00:	b21a      	sxth	r2, r3
 8006f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f04:	7cdb      	ldrb	r3, [r3, #19]
 8006f06:	b21b      	sxth	r3, r3
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	b21b      	sxth	r3, r3
 8006f0c:	b29b      	uxth	r3, r3
 8006f0e:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8006f10:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d112      	bne.n	8006f3c <find_volume+0x2e8>
 8006f16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f18:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8006f1c:	061a      	lsls	r2, r3, #24
 8006f1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f20:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 8006f24:	041b      	lsls	r3, r3, #16
 8006f26:	431a      	orrs	r2, r3
 8006f28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	4313      	orrs	r3, r2
 8006f32:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f34:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	64bb      	str	r3, [r7, #72]	@ 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8006f3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f3e:	7bdb      	ldrb	r3, [r3, #15]
 8006f40:	b21b      	sxth	r3, r3
 8006f42:	021b      	lsls	r3, r3, #8
 8006f44:	b21a      	sxth	r2, r3
 8006f46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f48:	7b9b      	ldrb	r3, [r3, #14]
 8006f4a:	b21b      	sxth	r3, r3
 8006f4c:	4313      	orrs	r3, r2
 8006f4e:	b21b      	sxth	r3, r3
 8006f50:	85fb      	strh	r3, [r7, #46]	@ 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8006f52:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d101      	bne.n	8006f5c <find_volume+0x308>
 8006f58:	230d      	movs	r3, #13
 8006f5a:	e13d      	b.n	80071d8 <find_volume+0x584>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8006f5c:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006f5e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006f60:	4413      	add	r3, r2
 8006f62:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f64:	f8b2 2208 	ldrh.w	r2, [r2, #520]	@ 0x208
 8006f68:	0912      	lsrs	r2, r2, #4
 8006f6a:	b292      	uxth	r2, r2
 8006f6c:	4413      	add	r3, r2
 8006f6e:	62bb      	str	r3, [r7, #40]	@ 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8006f70:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d201      	bcs.n	8006f7c <find_volume+0x328>
 8006f78:	230d      	movs	r3, #13
 8006f7a:	e12d      	b.n	80071d8 <find_volume+0x584>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8006f7c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f80:	1ad3      	subs	r3, r2, r3
 8006f82:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006f84:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8006f88:	fbb3 f3f2 	udiv	r3, r3, r2
 8006f8c:	627b      	str	r3, [r7, #36]	@ 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8006f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d101      	bne.n	8006f98 <find_volume+0x344>
 8006f94:	230d      	movs	r3, #13
 8006f96:	e11f      	b.n	80071d8 <find_volume+0x584>
	fmt = FS_FAT12;
 8006f98:	2301      	movs	r3, #1
 8006f9a:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8006f9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fa0:	f640 72f5 	movw	r2, #4085	@ 0xff5
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d902      	bls.n	8006fae <find_volume+0x35a>
 8006fa8:	2302      	movs	r3, #2
 8006faa:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8006fae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb0:	f64f 72f5 	movw	r2, #65525	@ 0xfff5
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	d902      	bls.n	8006fbe <find_volume+0x36a>
 8006fb8:	2303      	movs	r3, #3
 8006fba:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	1c9a      	adds	r2, r3, #2
 8006fc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fc4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
	fs->volbase = bsect;								/* Volume start sector */
 8006fc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fcc:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8006fd0:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006fd4:	441a      	add	r2, r3
 8006fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fd8:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
	fs->database = bsect + sysect;						/* Data start sector */
 8006fdc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	441a      	add	r2, r3
 8006fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006fe4:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
	if (fmt == FS_FAT32) {
 8006fe8:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8006fec:	2b03      	cmp	r3, #3
 8006fee:	d121      	bne.n	8007034 <find_volume+0x3e0>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ff2:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d001      	beq.n	8006ffe <find_volume+0x3aa>
 8006ffa:	230d      	movs	r3, #13
 8006ffc:	e0ec      	b.n	80071d8 <find_volume+0x584>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8006ffe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007000:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8007004:	061a      	lsls	r2, r3, #24
 8007006:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007008:	f893 302e 	ldrb.w	r3, [r3, #46]	@ 0x2e
 800700c:	041b      	lsls	r3, r3, #16
 800700e:	431a      	orrs	r2, r3
 8007010:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007012:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 8007016:	021b      	lsls	r3, r3, #8
 8007018:	4313      	orrs	r3, r2
 800701a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800701c:	f892 202c 	ldrb.w	r2, [r2, #44]	@ 0x2c
 8007020:	431a      	orrs	r2, r3
 8007022:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007024:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8007028:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800702a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	647b      	str	r3, [r7, #68]	@ 0x44
 8007032:	e025      	b.n	8007080 <find_volume+0x42c>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8007034:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007036:	f8b3 3208 	ldrh.w	r3, [r3, #520]	@ 0x208
 800703a:	2b00      	cmp	r3, #0
 800703c:	d101      	bne.n	8007042 <find_volume+0x3ee>
 800703e:	230d      	movs	r3, #13
 8007040:	e0ca      	b.n	80071d8 <find_volume+0x584>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8007042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007044:	f8d3 2220 	ldr.w	r2, [r3, #544]	@ 0x220
 8007048:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800704a:	441a      	add	r2, r3
 800704c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800704e:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8007052:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8007056:	2b02      	cmp	r3, #2
 8007058:	d104      	bne.n	8007064 <find_volume+0x410>
 800705a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800705c:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007060:	005b      	lsls	r3, r3, #1
 8007062:	e00c      	b.n	800707e <find_volume+0x42a>
 8007064:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007066:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800706a:	4613      	mov	r3, r2
 800706c:	005b      	lsls	r3, r3, #1
 800706e:	4413      	add	r3, r2
 8007070:	085a      	lsrs	r2, r3, #1
 8007072:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007074:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 8007078:	f003 0301 	and.w	r3, r3, #1
 800707c:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 800707e:	647b      	str	r3, [r7, #68]	@ 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8007080:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007082:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007086:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007088:	f203 13ff 	addw	r3, r3, #511	@ 0x1ff
 800708c:	0a5b      	lsrs	r3, r3, #9
 800708e:	429a      	cmp	r2, r3
 8007090:	d201      	bcs.n	8007096 <find_volume+0x442>
		return FR_NO_FILESYSTEM;
 8007092:	230d      	movs	r3, #13
 8007094:	e0a0      	b.n	80071d8 <find_volume+0x584>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8007096:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007098:	f04f 32ff 	mov.w	r2, #4294967295
 800709c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
 80070a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a2:	f8d3 2210 	ldr.w	r2, [r3, #528]	@ 0x210
 80070a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070a8:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 80070ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ae:	2280      	movs	r2, #128	@ 0x80
 80070b0:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80070b4:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 80070b8:	2b03      	cmp	r3, #3
 80070ba:	d179      	bne.n	80071b0 <find_volume+0x55c>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 80070bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070be:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80070c2:	b21b      	sxth	r3, r3
 80070c4:	021b      	lsls	r3, r3, #8
 80070c6:	b21a      	sxth	r2, r3
 80070c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ca:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80070ce:	b21b      	sxth	r3, r3
 80070d0:	4313      	orrs	r3, r2
 80070d2:	b21b      	sxth	r3, r3
 80070d4:	2b01      	cmp	r3, #1
 80070d6:	d16b      	bne.n	80071b0 <find_volume+0x55c>
		&& move_window(fs, bsect + 1) == FR_OK)
 80070d8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80070da:	3301      	adds	r3, #1
 80070dc:	4619      	mov	r1, r3
 80070de:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80070e0:	f7fe fd39 	bl	8005b56 <move_window>
 80070e4:	4603      	mov	r3, r0
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d162      	bne.n	80071b0 <find_volume+0x55c>
	{
		fs->fsi_flag = 0;
 80070ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2205 	strb.w	r2, [r3, #517]	@ 0x205
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80070f2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80070f4:	f893 31ff 	ldrb.w	r3, [r3, #511]	@ 0x1ff
 80070f8:	b21b      	sxth	r3, r3
 80070fa:	021b      	lsls	r3, r3, #8
 80070fc:	b21a      	sxth	r2, r3
 80070fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007100:	f893 31fe 	ldrb.w	r3, [r3, #510]	@ 0x1fe
 8007104:	b21b      	sxth	r3, r3
 8007106:	4313      	orrs	r3, r2
 8007108:	b21b      	sxth	r3, r3
 800710a:	4a35      	ldr	r2, [pc, #212]	@ (80071e0 <find_volume+0x58c>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d14f      	bne.n	80071b0 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8007110:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007112:	78db      	ldrb	r3, [r3, #3]
 8007114:	061a      	lsls	r2, r3, #24
 8007116:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007118:	789b      	ldrb	r3, [r3, #2]
 800711a:	041b      	lsls	r3, r3, #16
 800711c:	431a      	orrs	r2, r3
 800711e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007120:	785b      	ldrb	r3, [r3, #1]
 8007122:	021b      	lsls	r3, r3, #8
 8007124:	4313      	orrs	r3, r2
 8007126:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007128:	7812      	ldrb	r2, [r2, #0]
 800712a:	4313      	orrs	r3, r2
 800712c:	4a2d      	ldr	r2, [pc, #180]	@ (80071e4 <find_volume+0x590>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d13e      	bne.n	80071b0 <find_volume+0x55c>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8007132:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007134:	f893 31e7 	ldrb.w	r3, [r3, #487]	@ 0x1e7
 8007138:	061a      	lsls	r2, r3, #24
 800713a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800713c:	f893 31e6 	ldrb.w	r3, [r3, #486]	@ 0x1e6
 8007140:	041b      	lsls	r3, r3, #16
 8007142:	431a      	orrs	r2, r3
 8007144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007146:	f893 31e5 	ldrb.w	r3, [r3, #485]	@ 0x1e5
 800714a:	021b      	lsls	r3, r3, #8
 800714c:	4313      	orrs	r3, r2
 800714e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007150:	f892 21e4 	ldrb.w	r2, [r2, #484]	@ 0x1e4
 8007154:	4313      	orrs	r3, r2
 8007156:	4a24      	ldr	r2, [pc, #144]	@ (80071e8 <find_volume+0x594>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d129      	bne.n	80071b0 <find_volume+0x55c>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 800715c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800715e:	f893 31eb 	ldrb.w	r3, [r3, #491]	@ 0x1eb
 8007162:	061a      	lsls	r2, r3, #24
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	f893 31ea 	ldrb.w	r3, [r3, #490]	@ 0x1ea
 800716a:	041b      	lsls	r3, r3, #16
 800716c:	431a      	orrs	r2, r3
 800716e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007170:	f893 31e9 	ldrb.w	r3, [r3, #489]	@ 0x1e9
 8007174:	021b      	lsls	r3, r3, #8
 8007176:	4313      	orrs	r3, r2
 8007178:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800717a:	f892 21e8 	ldrb.w	r2, [r2, #488]	@ 0x1e8
 800717e:	431a      	orrs	r2, r3
 8007180:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007182:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8007186:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007188:	f893 31ef 	ldrb.w	r3, [r3, #495]	@ 0x1ef
 800718c:	061a      	lsls	r2, r3, #24
 800718e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007190:	f893 31ee 	ldrb.w	r3, [r3, #494]	@ 0x1ee
 8007194:	041b      	lsls	r3, r3, #16
 8007196:	431a      	orrs	r2, r3
 8007198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800719a:	f893 31ed 	ldrb.w	r3, [r3, #493]	@ 0x1ed
 800719e:	021b      	lsls	r3, r3, #8
 80071a0:	4313      	orrs	r3, r2
 80071a2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80071a4:	f892 21ec 	ldrb.w	r2, [r2, #492]	@ 0x1ec
 80071a8:	431a      	orrs	r2, r3
 80071aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071ac:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 80071b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071b2:	f897 2057 	ldrb.w	r2, [r7, #87]	@ 0x57
 80071b6:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	fs->id = ++Fsid;	/* File system mount ID */
 80071ba:	4b0c      	ldr	r3, [pc, #48]	@ (80071ec <find_volume+0x598>)
 80071bc:	881b      	ldrh	r3, [r3, #0]
 80071be:	3301      	adds	r3, #1
 80071c0:	b29a      	uxth	r2, r3
 80071c2:	4b0a      	ldr	r3, [pc, #40]	@ (80071ec <find_volume+0x598>)
 80071c4:	801a      	strh	r2, [r3, #0]
 80071c6:	4b09      	ldr	r3, [pc, #36]	@ (80071ec <find_volume+0x598>)
 80071c8:	881a      	ldrh	r2, [r3, #0]
 80071ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80071cc:	f8a3 2206 	strh.w	r2, [r3, #518]	@ 0x206
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 80071d0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80071d2:	f7fe fc4d 	bl	8005a70 <clear_lock>
#endif

	return FR_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3758      	adds	r7, #88	@ 0x58
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	ffffaa55 	.word	0xffffaa55
 80071e4:	41615252 	.word	0x41615252
 80071e8:	61417272 	.word	0x61417272
 80071ec:	20000624 	.word	0x20000624

080071f0 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b084      	sub	sp, #16
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d022      	beq.n	8007248 <validate+0x58>
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007208:	2b00      	cmp	r3, #0
 800720a:	d01d      	beq.n	8007248 <validate+0x58>
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007212:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8007216:	2b00      	cmp	r3, #0
 8007218:	d016      	beq.n	8007248 <validate+0x58>
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007220:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f8b3 3204 	ldrh.w	r3, [r3, #516]	@ 0x204
 800722a:	429a      	cmp	r2, r3
 800722c:	d10c      	bne.n	8007248 <validate+0x58>
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007234:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8007238:	4618      	mov	r0, r3
 800723a:	f7fe f979 	bl	8005530 <disk_status>
 800723e:	4603      	mov	r3, r0
 8007240:	f003 0301 	and.w	r3, r3, #1
 8007244:	2b00      	cmp	r3, #0
 8007246:	d001      	beq.n	800724c <validate+0x5c>
		return FR_INVALID_OBJECT;
 8007248:	2309      	movs	r3, #9
 800724a:	e000      	b.n	800724e <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 800724c:	2300      	movs	r3, #0
}
 800724e:	4618      	mov	r0, r3
 8007250:	3710      	adds	r7, #16
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007258:	b580      	push	{r7, lr}
 800725a:	b088      	sub	sp, #32
 800725c:	af00      	add	r7, sp, #0
 800725e:	60f8      	str	r0, [r7, #12]
 8007260:	60b9      	str	r1, [r7, #8]
 8007262:	4613      	mov	r3, r2
 8007264:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800726a:	f107 0310 	add.w	r3, r7, #16
 800726e:	4618      	mov	r0, r3
 8007270:	f7ff fc40 	bl	8006af4 <get_ldnumber>
 8007274:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007276:	69fb      	ldr	r3, [r7, #28]
 8007278:	2b00      	cmp	r3, #0
 800727a:	da01      	bge.n	8007280 <f_mount+0x28>
 800727c:	230b      	movs	r3, #11
 800727e:	e02d      	b.n	80072dc <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8007280:	4a18      	ldr	r2, [pc, #96]	@ (80072e4 <f_mount+0x8c>)
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007288:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d006      	beq.n	800729e <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8007290:	69b8      	ldr	r0, [r7, #24]
 8007292:	f7fe fbed 	bl	8005a70 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8007296:	69bb      	ldr	r3, [r7, #24]
 8007298:	2200      	movs	r2, #0
 800729a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
	}

	if (fs) {
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	2b00      	cmp	r3, #0
 80072a2:	d003      	beq.n	80072ac <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	2200      	movs	r2, #0
 80072a8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	490d      	ldr	r1, [pc, #52]	@ (80072e4 <f_mount+0x8c>)
 80072b0:	69fb      	ldr	r3, [r7, #28]
 80072b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d002      	beq.n	80072c2 <f_mount+0x6a>
 80072bc:	79fb      	ldrb	r3, [r7, #7]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d001      	beq.n	80072c6 <f_mount+0x6e>
 80072c2:	2300      	movs	r3, #0
 80072c4:	e00a      	b.n	80072dc <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80072c6:	f107 0108 	add.w	r1, r7, #8
 80072ca:	f107 030c 	add.w	r3, r7, #12
 80072ce:	2200      	movs	r2, #0
 80072d0:	4618      	mov	r0, r3
 80072d2:	f7ff fcbf 	bl	8006c54 <find_volume>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80072da:	7dfb      	ldrb	r3, [r7, #23]
}
 80072dc:	4618      	mov	r0, r3
 80072de:	3720      	adds	r7, #32
 80072e0:	46bd      	mov	sp, r7
 80072e2:	bd80      	pop	{r7, pc}
 80072e4:	20000620 	.word	0x20000620

080072e8 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	f5ad 7d14 	sub.w	sp, sp, #592	@ 0x250
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072f4:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80072f8:	6018      	str	r0, [r3, #0]
 80072fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80072fe:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007302:	6019      	str	r1, [r3, #0]
 8007304:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007308:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800730c:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 800730e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007312:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d101      	bne.n	8007320 <f_open+0x38>
 800731c:	2309      	movs	r3, #9
 800731e:	e253      	b.n	80077c8 <f_open+0x4e0>
	fp->fs = 0;			/* Clear file object */
 8007320:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007324:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	2200      	movs	r2, #0
 800732c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 8007330:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007334:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007338:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 800733c:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8007340:	7812      	ldrb	r2, [r2, #0]
 8007342:	f002 021f 	and.w	r2, r2, #31
 8007346:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 8007348:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800734c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	f023 0301 	bic.w	r3, r3, #1
 8007356:	b2da      	uxtb	r2, r3
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	f107 0320 	add.w	r3, r7, #32
 8007360:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8007364:	4618      	mov	r0, r3
 8007366:	f7ff fc75 	bl	8006c54 <find_volume>
 800736a:	4603      	mov	r3, r0
 800736c:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8007370:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007374:	2b00      	cmp	r3, #0
 8007376:	f040 8225 	bne.w	80077c4 <f_open+0x4dc>
		INIT_BUF(dj);
 800737a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800737e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007382:	f107 0214 	add.w	r2, r7, #20
 8007386:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		res = follow_path(&dj, path);	/* Follow the file path */
 800738a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800738e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8007392:	681a      	ldr	r2, [r3, #0]
 8007394:	f107 0320 	add.w	r3, r7, #32
 8007398:	4611      	mov	r1, r2
 800739a:	4618      	mov	r0, r3
 800739c:	f7ff fb3c 	bl	8006a18 <follow_path>
 80073a0:	4603      	mov	r3, r0
 80073a2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
		dir = dj.dir;
 80073a6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073aa:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80073ae:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80073b2:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 80073b6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d11b      	bne.n	80073f6 <f_open+0x10e>
			if (!dir)	/* Default directory itself */
 80073be:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d103      	bne.n	80073ce <f_open+0xe6>
				res = FR_INVALID_NAME;
 80073c6:	2306      	movs	r3, #6
 80073c8:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80073cc:	e013      	b.n	80073f6 <f_open+0x10e>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80073ce:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073d2:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b01      	cmp	r3, #1
 80073da:	bf8c      	ite	hi
 80073dc:	2301      	movhi	r3, #1
 80073de:	2300      	movls	r3, #0
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	461a      	mov	r2, r3
 80073e4:	f107 0320 	add.w	r3, r7, #32
 80073e8:	4611      	mov	r1, r2
 80073ea:	4618      	mov	r0, r3
 80073ec:	f7fe f9b6 	bl	800575c <chk_lock>
 80073f0:	4603      	mov	r3, r0
 80073f2:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80073f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80073fa:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	f003 031c 	and.w	r3, r3, #28
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 80e6 	beq.w	80075d6 <f_open+0x2ee>
			if (res != FR_OK) {					/* No file, create new */
 800740a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800740e:	2b00      	cmp	r3, #0
 8007410:	d027      	beq.n	8007462 <f_open+0x17a>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8007412:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007416:	2b04      	cmp	r3, #4
 8007418:	d10e      	bne.n	8007438 <f_open+0x150>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 800741a:	f7fe fa0b 	bl	8005834 <enq_lock>
 800741e:	4603      	mov	r3, r0
 8007420:	2b00      	cmp	r3, #0
 8007422:	d006      	beq.n	8007432 <f_open+0x14a>
 8007424:	f107 0320 	add.w	r3, r7, #32
 8007428:	4618      	mov	r0, r3
 800742a:	f7ff f9fc 	bl	8006826 <dir_register>
 800742e:	4603      	mov	r3, r0
 8007430:	e000      	b.n	8007434 <f_open+0x14c>
 8007432:	2312      	movs	r3, #18
 8007434:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007438:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800743c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007440:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007444:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8007448:	7812      	ldrb	r2, [r2, #0]
 800744a:	f042 0208 	orr.w	r2, r2, #8
 800744e:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8007450:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007454:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007458:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800745c:	f8c7 3248 	str.w	r3, [r7, #584]	@ 0x248
 8007460:	e017      	b.n	8007492 <f_open+0x1aa>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007462:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007466:	330b      	adds	r3, #11
 8007468:	781b      	ldrb	r3, [r3, #0]
 800746a:	f003 0311 	and.w	r3, r3, #17
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <f_open+0x192>
					res = FR_DENIED;
 8007472:	2307      	movs	r3, #7
 8007474:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 8007478:	e00b      	b.n	8007492 <f_open+0x1aa>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800747a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800747e:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	f003 0304 	and.w	r3, r3, #4
 8007488:	2b00      	cmp	r3, #0
 800748a:	d002      	beq.n	8007492 <f_open+0x1aa>
						res = FR_EXIST;
 800748c:	2308      	movs	r3, #8
 800748e:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007492:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007496:	2b00      	cmp	r3, #0
 8007498:	f040 80c1 	bne.w	800761e <f_open+0x336>
 800749c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80074a0:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80074a4:	781b      	ldrb	r3, [r3, #0]
 80074a6:	f003 0308 	and.w	r3, r3, #8
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	f000 80b7 	beq.w	800761e <f_open+0x336>
				dw = GET_FATTIME();				/* Created time */
 80074b0:	f7fd ffdc 	bl	800546c <get_fattime>
 80074b4:	f8c7 0244 	str.w	r0, [r7, #580]	@ 0x244
				ST_DWORD(dir + DIR_CrtTime, dw);
 80074b8:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80074bc:	330e      	adds	r3, #14
 80074be:	f8d7 2244 	ldr.w	r2, [r7, #580]	@ 0x244
 80074c2:	b2d2      	uxtb	r2, r2
 80074c4:	701a      	strb	r2, [r3, #0]
 80074c6:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80074ca:	b29b      	uxth	r3, r3
 80074cc:	0a1b      	lsrs	r3, r3, #8
 80074ce:	b29a      	uxth	r2, r3
 80074d0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80074d4:	330f      	adds	r3, #15
 80074d6:	b2d2      	uxtb	r2, r2
 80074d8:	701a      	strb	r2, [r3, #0]
 80074da:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80074de:	0c1a      	lsrs	r2, r3, #16
 80074e0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80074e4:	3310      	adds	r3, #16
 80074e6:	b2d2      	uxtb	r2, r2
 80074e8:	701a      	strb	r2, [r3, #0]
 80074ea:	f8d7 3244 	ldr.w	r3, [r7, #580]	@ 0x244
 80074ee:	0e1a      	lsrs	r2, r3, #24
 80074f0:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80074f4:	3311      	adds	r3, #17
 80074f6:	b2d2      	uxtb	r2, r2
 80074f8:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80074fa:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80074fe:	330b      	adds	r3, #11
 8007500:	2200      	movs	r2, #0
 8007502:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 8007504:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007508:	331c      	adds	r3, #28
 800750a:	2200      	movs	r2, #0
 800750c:	701a      	strb	r2, [r3, #0]
 800750e:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007512:	331d      	adds	r3, #29
 8007514:	2200      	movs	r2, #0
 8007516:	701a      	strb	r2, [r3, #0]
 8007518:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800751c:	331e      	adds	r3, #30
 800751e:	2200      	movs	r2, #0
 8007520:	701a      	strb	r2, [r3, #0]
 8007522:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007526:	331f      	adds	r3, #31
 8007528:	2200      	movs	r2, #0
 800752a:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 800752c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007530:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007534:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007538:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800753c:	4618      	mov	r0, r3
 800753e:	f7ff f8ce 	bl	80066de <ld_clust>
 8007542:	f8c7 0240 	str.w	r0, [r7, #576]	@ 0x240
				st_clust(dir, 0);				/* cluster = 0 */
 8007546:	2100      	movs	r1, #0
 8007548:	f8d7 0248 	ldr.w	r0, [r7, #584]	@ 0x248
 800754c:	f7ff f8f6 	bl	800673c <st_clust>
				dj.fs->wflag = 1;
 8007550:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007554:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007558:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800755c:	2201      	movs	r2, #1
 800755e:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				if (cl) {						/* Remove the cluster chain if exist */
 8007562:	f8d7 3240 	ldr.w	r3, [r7, #576]	@ 0x240
 8007566:	2b00      	cmp	r3, #0
 8007568:	d059      	beq.n	800761e <f_open+0x336>
					dw = dj.fs->winsect;
 800756a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800756e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007572:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007576:	f8d3 322c 	ldr.w	r3, [r3, #556]	@ 0x22c
 800757a:	f8c7 3244 	str.w	r3, [r7, #580]	@ 0x244
					res = remove_chain(dj.fs, cl);
 800757e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007582:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007586:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800758a:	f8d7 1240 	ldr.w	r1, [r7, #576]	@ 0x240
 800758e:	4618      	mov	r0, r3
 8007590:	f7fe fda5 	bl	80060de <remove_chain>
 8007594:	4603      	mov	r3, r0
 8007596:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
					if (res == FR_OK) {
 800759a:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d13d      	bne.n	800761e <f_open+0x336>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 80075a2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075a6:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80075aa:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80075ae:	f8d7 2240 	ldr.w	r2, [r7, #576]	@ 0x240
 80075b2:	3a01      	subs	r2, #1
 80075b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
						res = move_window(dj.fs, dw);
 80075b8:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075bc:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 80075c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80075c4:	f8d7 1244 	ldr.w	r1, [r7, #580]	@ 0x244
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fe fac4 	bl	8005b56 <move_window>
 80075ce:	4603      	mov	r3, r0
 80075d0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80075d4:	e023      	b.n	800761e <f_open+0x336>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 80075d6:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d11f      	bne.n	800761e <f_open+0x336>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 80075de:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 80075e2:	330b      	adds	r3, #11
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	f003 0310 	and.w	r3, r3, #16
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d003      	beq.n	80075f6 <f_open+0x30e>
					res = FR_NO_FILE;
 80075ee:	2304      	movs	r3, #4
 80075f0:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
 80075f4:	e013      	b.n	800761e <f_open+0x336>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 80075f6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80075fa:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 80075fe:	781b      	ldrb	r3, [r3, #0]
 8007600:	f003 0302 	and.w	r3, r3, #2
 8007604:	2b00      	cmp	r3, #0
 8007606:	d00a      	beq.n	800761e <f_open+0x336>
 8007608:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800760c:	330b      	adds	r3, #11
 800760e:	781b      	ldrb	r3, [r3, #0]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <f_open+0x336>
						res = FR_DENIED;
 8007618:	2307      	movs	r3, #7
 800761a:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
				}
			}
		}
		if (res == FR_OK) {
 800761e:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 8007622:	2b00      	cmp	r3, #0
 8007624:	d151      	bne.n	80076ca <f_open+0x3e2>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007626:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800762a:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	f003 0308 	and.w	r3, r3, #8
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00b      	beq.n	8007650 <f_open+0x368>
				mode |= FA__WRITTEN;
 8007638:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800763c:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007640:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 8007644:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 8007648:	7812      	ldrb	r2, [r2, #0]
 800764a:	f042 0220 	orr.w	r2, r2, #32
 800764e:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8007650:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007654:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007658:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800765c:	f8d3 222c 	ldr.w	r2, [r3, #556]	@ 0x22c
 8007660:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007664:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
			fp->dir_ptr = dir;
 800766e:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007672:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 800767c:	f8c3 2220 	str.w	r2, [r3, #544]	@ 0x220
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007680:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007684:	f2a3 2349 	subw	r3, r3, #585	@ 0x249
 8007688:	781b      	ldrb	r3, [r3, #0]
 800768a:	2b01      	cmp	r3, #1
 800768c:	bf8c      	ite	hi
 800768e:	2301      	movhi	r3, #1
 8007690:	2300      	movls	r3, #0
 8007692:	b2db      	uxtb	r3, r3
 8007694:	461a      	mov	r2, r3
 8007696:	f107 0320 	add.w	r3, r7, #32
 800769a:	4611      	mov	r1, r2
 800769c:	4618      	mov	r0, r3
 800769e:	f7fe f8ed 	bl	800587c <inc_lock>
 80076a2:	4602      	mov	r2, r0
 80076a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076a8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f8c3 2228 	str.w	r2, [r3, #552]	@ 0x228
			if (!fp->lockid) res = FR_INT_ERR;
 80076b2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076b6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d102      	bne.n	80076ca <f_open+0x3e2>
 80076c4:	2302      	movs	r3, #2
 80076c6:	f887 324f 	strb.w	r3, [r7, #591]	@ 0x24f
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 80076ca:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d178      	bne.n	80077c4 <f_open+0x4dc>
			fp->flag = mode;					/* File access mode */
 80076d2:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076d6:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80076da:	681b      	ldr	r3, [r3, #0]
 80076dc:	f507 7214 	add.w	r2, r7, #592	@ 0x250
 80076e0:	f2a2 2249 	subw	r2, r2, #585	@ 0x249
 80076e4:	7812      	ldrb	r2, [r2, #0]
 80076e6:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			fp->err = 0;						/* Clear error flag */
 80076ea:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076ee:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 80076fa:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80076fe:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007702:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007706:	f8d7 1248 	ldr.w	r1, [r7, #584]	@ 0x248
 800770a:	4618      	mov	r0, r3
 800770c:	f7fe ffe7 	bl	80066de <ld_clust>
 8007710:	4602      	mov	r2, r0
 8007712:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007716:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8007720:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 8007724:	331f      	adds	r3, #31
 8007726:	781b      	ldrb	r3, [r3, #0]
 8007728:	061a      	lsls	r2, r3, #24
 800772a:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800772e:	331e      	adds	r3, #30
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	041b      	lsls	r3, r3, #16
 8007734:	431a      	orrs	r2, r3
 8007736:	f8d7 3248 	ldr.w	r3, [r7, #584]	@ 0x248
 800773a:	331d      	adds	r3, #29
 800773c:	781b      	ldrb	r3, [r3, #0]
 800773e:	021b      	lsls	r3, r3, #8
 8007740:	4313      	orrs	r3, r2
 8007742:	f8d7 2248 	ldr.w	r2, [r7, #584]	@ 0x248
 8007746:	321c      	adds	r2, #28
 8007748:	7812      	ldrb	r2, [r2, #0]
 800774a:	431a      	orrs	r2, r3
 800774c:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 8007750:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c
			fp->fptr = 0;						/* File pointer */
 800775a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800775e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	2200      	movs	r2, #0
 8007766:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
			fp->dsect = 0;
 800776a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800776e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2200      	movs	r2, #0
 8007776:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 800777a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800777e:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	2200      	movs	r2, #0
 8007786:	f8c3 2224 	str.w	r2, [r3, #548]	@ 0x224
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 800778a:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800778e:	f5a3 730c 	sub.w	r3, r3, #560	@ 0x230
 8007792:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007796:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 800779a:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
			fp->id = fp->fs->id;
 80077a4:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077a8:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80077b2:	f8b3 2206 	ldrh.w	r2, [r3, #518]	@ 0x206
 80077b6:	f507 7314 	add.w	r3, r7, #592	@ 0x250
 80077ba:	f5a3 7311 	sub.w	r3, r3, #580	@ 0x244
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f8a3 2204 	strh.w	r2, [r3, #516]	@ 0x204
		}
	}

	LEAVE_FF(dj.fs, res);
 80077c4:	f897 324f 	ldrb.w	r3, [r7, #591]	@ 0x24f
}
 80077c8:	4618      	mov	r0, r3
 80077ca:	f507 7714 	add.w	r7, r7, #592	@ 0x250
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b08c      	sub	sp, #48	@ 0x30
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	60f8      	str	r0, [r7, #12]
 80077da:	60b9      	str	r1, [r7, #8]
 80077dc:	607a      	str	r2, [r7, #4]
 80077de:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2200      	movs	r2, #0
 80077e8:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f7ff fd00 	bl	80071f0 <validate>
 80077f0:	4603      	mov	r3, r0
 80077f2:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 80077f4:	7ffb      	ldrb	r3, [r7, #31]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d001      	beq.n	80077fe <f_read+0x2c>
 80077fa:	7ffb      	ldrb	r3, [r7, #31]
 80077fc:	e150      	b.n	8007aa0 <f_read+0x2ce>
	if (fp->err)								/* Check error */
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 8007804:	2b00      	cmp	r3, #0
 8007806:	d003      	beq.n	8007810 <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f893 3207 	ldrb.w	r3, [r3, #519]	@ 0x207
 800780e:	e147      	b.n	8007aa0 <f_read+0x2ce>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007816:	f003 0301 	and.w	r3, r3, #1
 800781a:	2b00      	cmp	r3, #0
 800781c:	d101      	bne.n	8007822 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800781e:	2307      	movs	r3, #7
 8007820:	e13e      	b.n	8007aa0 <f_read+0x2ce>
	remain = fp->fsize - fp->fptr;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800782e:	1ad3      	subs	r3, r2, r3
 8007830:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8007832:	687a      	ldr	r2, [r7, #4]
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	429a      	cmp	r2, r3
 8007838:	f240 812d 	bls.w	8007a96 <f_read+0x2c4>
 800783c:	69bb      	ldr	r3, [r7, #24]
 800783e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8007840:	e129      	b.n	8007a96 <f_read+0x2c4>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007848:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800784c:	2b00      	cmp	r3, #0
 800784e:	f040 80f2 	bne.w	8007a36 <f_read+0x264>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007858:	0a5b      	lsrs	r3, r3, #9
 800785a:	b2da      	uxtb	r2, r3
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007862:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007866:	3b01      	subs	r3, #1
 8007868:	b2db      	uxtb	r3, r3
 800786a:	4013      	ands	r3, r2
 800786c:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 800786e:	7dfb      	ldrb	r3, [r7, #23]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d139      	bne.n	80078e8 <f_read+0x116>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 800787a:	2b00      	cmp	r3, #0
 800787c:	d104      	bne.n	8007888 <f_read+0xb6>
					clst = fp->sclust;			/* Follow from the origin */
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007884:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007886:	e018      	b.n	80078ba <f_read+0xe8>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3224 	ldr.w	r3, [r3, #548]	@ 0x224
 800788e:	2b00      	cmp	r3, #0
 8007890:	d008      	beq.n	80078a4 <f_read+0xd2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007898:	4619      	mov	r1, r3
 800789a:	68f8      	ldr	r0, [r7, #12]
 800789c:	f7fe fd16 	bl	80062cc <clmt_clust>
 80078a0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80078a2:	e00a      	b.n	80078ba <f_read+0xe8>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fe fa4b 	bl	8005d4e <get_fat>
 80078b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 80078ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078bc:	2b01      	cmp	r3, #1
 80078be:	d805      	bhi.n	80078cc <f_read+0xfa>
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2202      	movs	r2, #2
 80078c4:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80078c8:	2302      	movs	r3, #2
 80078ca:	e0e9      	b.n	8007aa0 <f_read+0x2ce>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80078cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80078d2:	d105      	bne.n	80078e0 <f_read+0x10e>
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80078dc:	2301      	movs	r3, #1
 80078de:	e0df      	b.n	8007aa0 <f_read+0x2ce>
				fp->clust = clst;				/* Update current cluster */
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80078e4:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 80078f4:	4619      	mov	r1, r3
 80078f6:	4610      	mov	r0, r2
 80078f8:	f7fe fa08 	bl	8005d0c <clust2sect>
 80078fc:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	2b00      	cmp	r3, #0
 8007902:	d105      	bne.n	8007910 <f_read+0x13e>
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2202      	movs	r2, #2
 8007908:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800790c:	2302      	movs	r3, #2
 800790e:	e0c7      	b.n	8007aa0 <f_read+0x2ce>
			sect += csect;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
 8007912:	693a      	ldr	r2, [r7, #16]
 8007914:	4413      	add	r3, r2
 8007916:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	0a5b      	lsrs	r3, r3, #9
 800791c:	627b      	str	r3, [r7, #36]	@ 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 800791e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007920:	2b00      	cmp	r3, #0
 8007922:	d046      	beq.n	80079b2 <f_read+0x1e0>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8007924:	7dfa      	ldrb	r2, [r7, #23]
 8007926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007928:	4413      	add	r3, r2
 800792a:	68fa      	ldr	r2, [r7, #12]
 800792c:	f8d2 2200 	ldr.w	r2, [r2, #512]	@ 0x200
 8007930:	f892 2202 	ldrb.w	r2, [r2, #514]	@ 0x202
 8007934:	4293      	cmp	r3, r2
 8007936:	d908      	bls.n	800794a <f_read+0x178>
					cc = fp->fs->csize - csect;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800793e:	f893 3202 	ldrb.w	r3, [r3, #514]	@ 0x202
 8007942:	461a      	mov	r2, r3
 8007944:	7dfb      	ldrb	r3, [r7, #23]
 8007946:	1ad3      	subs	r3, r2, r3
 8007948:	627b      	str	r3, [r7, #36]	@ 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007950:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007956:	693a      	ldr	r2, [r7, #16]
 8007958:	6a39      	ldr	r1, [r7, #32]
 800795a:	f7fd fe29 	bl	80055b0 <disk_read>
 800795e:	4603      	mov	r3, r0
 8007960:	2b00      	cmp	r3, #0
 8007962:	d005      	beq.n	8007970 <f_read+0x19e>
					ABORT(fp->fs, FR_DISK_ERR);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2201      	movs	r2, #1
 8007968:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 800796c:	2301      	movs	r3, #1
 800796e:	e097      	b.n	8007aa0 <f_read+0x2ce>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007976:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800797a:	2b00      	cmp	r3, #0
 800797c:	d015      	beq.n	80079aa <f_read+0x1d8>
 800797e:	68fb      	ldr	r3, [r7, #12]
 8007980:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007984:	693b      	ldr	r3, [r7, #16]
 8007986:	1ad3      	subs	r3, r2, r3
 8007988:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800798a:	429a      	cmp	r2, r3
 800798c:	d90d      	bls.n	80079aa <f_read+0x1d8>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007994:	693b      	ldr	r3, [r7, #16]
 8007996:	1ad3      	subs	r3, r2, r3
 8007998:	025b      	lsls	r3, r3, #9
 800799a:	6a3a      	ldr	r2, [r7, #32]
 800799c:	4413      	add	r3, r2
 800799e:	68f9      	ldr	r1, [r7, #12]
 80079a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7fd fe61 	bl	800566c <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 80079aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079ac:	025b      	lsls	r3, r3, #9
 80079ae:	62bb      	str	r3, [r7, #40]	@ 0x28
				continue;
 80079b0:	e05b      	b.n	8007a6a <f_read+0x298>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	f8d3 3218 	ldr.w	r3, [r3, #536]	@ 0x218
 80079b8:	693a      	ldr	r2, [r7, #16]
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d037      	beq.n	8007a2e <f_read+0x25c>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80079c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d01d      	beq.n	8007a08 <f_read+0x236>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80079d2:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 80079d6:	68f9      	ldr	r1, [r7, #12]
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 80079de:	2301      	movs	r3, #1
 80079e0:	f7fd fe06 	bl	80055f0 <disk_write>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d005      	beq.n	80079f6 <f_read+0x224>
						ABORT(fp->fs, FR_DISK_ERR);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	2201      	movs	r2, #1
 80079ee:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 80079f2:	2301      	movs	r3, #1
 80079f4:	e054      	b.n	8007aa0 <f_read+0x2ce>
					fp->flag &= ~FA__DIRTY;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 80079fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a00:	b2da      	uxtb	r2, r3
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007a0e:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007a12:	68f9      	ldr	r1, [r7, #12]
 8007a14:	2301      	movs	r3, #1
 8007a16:	693a      	ldr	r2, [r7, #16]
 8007a18:	f7fd fdca 	bl	80055b0 <disk_read>
 8007a1c:	4603      	mov	r3, r0
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d005      	beq.n	8007a2e <f_read+0x25c>
					ABORT(fp->fs, FR_DISK_ERR);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2201      	movs	r2, #1
 8007a26:	f883 2207 	strb.w	r2, [r3, #519]	@ 0x207
 8007a2a:	2301      	movs	r3, #1
 8007a2c:	e038      	b.n	8007aa0 <f_read+0x2ce>
			}
#endif
			fp->dsect = sect;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a40:	f5c3 7300 	rsb	r3, r3, #512	@ 0x200
 8007a44:	62bb      	str	r3, [r7, #40]	@ 0x28
		if (rcnt > btr) rcnt = btr;
 8007a46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	429a      	cmp	r2, r3
 8007a4c:	d901      	bls.n	8007a52 <f_read+0x280>
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	62bb      	str	r3, [r7, #40]	@ 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f8d3 3208 	ldr.w	r3, [r3, #520]	@ 0x208
 8007a58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a5c:	68fa      	ldr	r2, [r7, #12]
 8007a5e:	4413      	add	r3, r2
 8007a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007a62:	4619      	mov	r1, r3
 8007a64:	6a38      	ldr	r0, [r7, #32]
 8007a66:	f7fd fe01 	bl	800566c <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8007a6a:	6a3a      	ldr	r2, [r7, #32]
 8007a6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a6e:	4413      	add	r3, r2
 8007a70:	623b      	str	r3, [r7, #32]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 8007a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a7a:	441a      	add	r2, r3
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	681a      	ldr	r2, [r3, #0]
 8007a86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a88:	441a      	add	r2, r3
 8007a8a:	683b      	ldr	r3, [r7, #0]
 8007a8c:	601a      	str	r2, [r3, #0]
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	f47f aed2 	bne.w	8007842 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3730      	adds	r7, #48	@ 0x30
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b086      	sub	sp, #24
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8007ab0:	6878      	ldr	r0, [r7, #4]
 8007ab2:	f7ff fb9d 	bl	80071f0 <validate>
 8007ab6:	4603      	mov	r3, r0
 8007ab8:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007aba:	7dfb      	ldrb	r3, [r7, #23]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	f040 80a8 	bne.w	8007c12 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007ac8:	f003 0320 	and.w	r3, r3, #32
 8007acc:	2b00      	cmp	r3, #0
 8007ace:	f000 80a0 	beq.w	8007c12 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007ad8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d019      	beq.n	8007b14 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007ae6:	f893 0201 	ldrb.w	r0, [r3, #513]	@ 0x201
 8007aea:	6879      	ldr	r1, [r7, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f8d3 2218 	ldr.w	r2, [r3, #536]	@ 0x218
 8007af2:	2301      	movs	r3, #1
 8007af4:	f7fd fd7c 	bl	80055f0 <disk_write>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8007afe:	2301      	movs	r3, #1
 8007b00:	e088      	b.n	8007c14 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007b08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007b0c:	b2da      	uxtb	r2, r3
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8d3 321c 	ldr.w	r3, [r3, #540]	@ 0x21c
 8007b20:	4619      	mov	r1, r3
 8007b22:	4610      	mov	r0, r2
 8007b24:	f7fe f817 	bl	8005b56 <move_window>
 8007b28:	4603      	mov	r3, r0
 8007b2a:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8007b2c:	7dfb      	ldrb	r3, [r7, #23]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d16f      	bne.n	8007c12 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f8d3 3220 	ldr.w	r3, [r3, #544]	@ 0x220
 8007b38:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8007b3a:	693b      	ldr	r3, [r7, #16]
 8007b3c:	330b      	adds	r3, #11
 8007b3e:	781a      	ldrb	r2, [r3, #0]
 8007b40:	693b      	ldr	r3, [r7, #16]
 8007b42:	330b      	adds	r3, #11
 8007b44:	f042 0220 	orr.w	r2, r2, #32
 8007b48:	b2d2      	uxtb	r2, r2
 8007b4a:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	331c      	adds	r3, #28
 8007b56:	b2d2      	uxtb	r2, r2
 8007b58:	701a      	strb	r2, [r3, #0]
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007b60:	b29b      	uxth	r3, r3
 8007b62:	0a1b      	lsrs	r3, r3, #8
 8007b64:	b29a      	uxth	r2, r3
 8007b66:	693b      	ldr	r3, [r7, #16]
 8007b68:	331d      	adds	r3, #29
 8007b6a:	b2d2      	uxtb	r2, r2
 8007b6c:	701a      	strb	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007b74:	0c1a      	lsrs	r2, r3, #16
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	331e      	adds	r3, #30
 8007b7a:	b2d2      	uxtb	r2, r2
 8007b7c:	701a      	strb	r2, [r3, #0]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 320c 	ldr.w	r3, [r3, #524]	@ 0x20c
 8007b84:	0e1a      	lsrs	r2, r3, #24
 8007b86:	693b      	ldr	r3, [r7, #16]
 8007b88:	331f      	adds	r3, #31
 8007b8a:	b2d2      	uxtb	r2, r2
 8007b8c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 8007b94:	4619      	mov	r1, r3
 8007b96:	6938      	ldr	r0, [r7, #16]
 8007b98:	f7fe fdd0 	bl	800673c <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8007b9c:	f7fd fc66 	bl	800546c <get_fattime>
 8007ba0:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	3316      	adds	r3, #22
 8007ba6:	68fa      	ldr	r2, [r7, #12]
 8007ba8:	b2d2      	uxtb	r2, r2
 8007baa:	701a      	strb	r2, [r3, #0]
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	b29b      	uxth	r3, r3
 8007bb0:	0a1b      	lsrs	r3, r3, #8
 8007bb2:	b29a      	uxth	r2, r3
 8007bb4:	693b      	ldr	r3, [r7, #16]
 8007bb6:	3317      	adds	r3, #23
 8007bb8:	b2d2      	uxtb	r2, r2
 8007bba:	701a      	strb	r2, [r3, #0]
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	0c1a      	lsrs	r2, r3, #16
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	3318      	adds	r3, #24
 8007bc4:	b2d2      	uxtb	r2, r2
 8007bc6:	701a      	strb	r2, [r3, #0]
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	0e1a      	lsrs	r2, r3, #24
 8007bcc:	693b      	ldr	r3, [r7, #16]
 8007bce:	3319      	adds	r3, #25
 8007bd0:	b2d2      	uxtb	r2, r2
 8007bd2:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8007bd4:	693b      	ldr	r3, [r7, #16]
 8007bd6:	3312      	adds	r3, #18
 8007bd8:	2200      	movs	r2, #0
 8007bda:	701a      	strb	r2, [r3, #0]
 8007bdc:	693b      	ldr	r3, [r7, #16]
 8007bde:	3313      	adds	r3, #19
 8007be0:	2200      	movs	r2, #0
 8007be2:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3206 	ldrb.w	r3, [r3, #518]	@ 0x206
 8007bea:	f023 0320 	bic.w	r3, r3, #32
 8007bee:	b2da      	uxtb	r2, r3
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f883 2206 	strb.w	r2, [r3, #518]	@ 0x206
				fp->fs->wflag = 1;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007bfc:	2201      	movs	r2, #1
 8007bfe:	f883 2204 	strb.w	r2, [r3, #516]	@ 0x204
				res = sync_fs(fp->fs);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8007c08:	4618      	mov	r0, r3
 8007c0a:	f7fd ffd2 	bl	8005bb2 <sync_fs>
 8007c0e:	4603      	mov	r3, r0
 8007c10:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8007c12:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3718      	adds	r7, #24
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b084      	sub	sp, #16
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f7ff ff3f 	bl	8007aa8 <f_sync>
 8007c2a:	4603      	mov	r3, r0
 8007c2c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007c2e:	7bfb      	ldrb	r3, [r7, #15]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d116      	bne.n	8007c62 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8007c34:	6878      	ldr	r0, [r7, #4]
 8007c36:	f7ff fadb 	bl	80071f0 <validate>
 8007c3a:	4603      	mov	r3, r0
 8007c3c:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007c3e:	7bfb      	ldrb	r3, [r7, #15]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d10e      	bne.n	8007c62 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8d3 3228 	ldr.w	r3, [r3, #552]	@ 0x228
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	f7fd fecc 	bl	80059e8 <dec_lock>
 8007c50:	4603      	mov	r3, r0
 8007c52:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007c54:	7bfb      	ldrb	r3, [r7, #15]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d103      	bne.n	8007c62 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007c62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3710      	adds	r7, #16
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b087      	sub	sp, #28
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	4613      	mov	r3, r2
 8007c78:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007c7a:	2301      	movs	r3, #1
 8007c7c:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007c7e:	2300      	movs	r3, #0
 8007c80:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 8007c82:	4b1e      	ldr	r3, [pc, #120]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007c84:	7a5b      	ldrb	r3, [r3, #9]
 8007c86:	b2db      	uxtb	r3, r3
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d831      	bhi.n	8007cf0 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007c8e:	7a5b      	ldrb	r3, [r3, #9]
 8007c90:	b2db      	uxtb	r3, r3
 8007c92:	461a      	mov	r2, r3
 8007c94:	4b19      	ldr	r3, [pc, #100]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007c96:	2100      	movs	r1, #0
 8007c98:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8007c9a:	4b18      	ldr	r3, [pc, #96]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007c9c:	7a5b      	ldrb	r3, [r3, #9]
 8007c9e:	b2db      	uxtb	r3, r3
 8007ca0:	4a16      	ldr	r2, [pc, #88]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	4413      	add	r3, r2
 8007ca6:	68fa      	ldr	r2, [r7, #12]
 8007ca8:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8007caa:	4b14      	ldr	r3, [pc, #80]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007cac:	7a5b      	ldrb	r3, [r3, #9]
 8007cae:	b2db      	uxtb	r3, r3
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	4b12      	ldr	r3, [pc, #72]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007cb4:	4413      	add	r3, r2
 8007cb6:	79fa      	ldrb	r2, [r7, #7]
 8007cb8:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007cba:	4b10      	ldr	r3, [pc, #64]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007cbc:	7a5b      	ldrb	r3, [r3, #9]
 8007cbe:	b2db      	uxtb	r3, r3
 8007cc0:	1c5a      	adds	r2, r3, #1
 8007cc2:	b2d1      	uxtb	r1, r2
 8007cc4:	4a0d      	ldr	r2, [pc, #52]	@ (8007cfc <FATFS_LinkDriverEx+0x90>)
 8007cc6:	7251      	strb	r1, [r2, #9]
 8007cc8:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007cca:	7dbb      	ldrb	r3, [r7, #22]
 8007ccc:	3330      	adds	r3, #48	@ 0x30
 8007cce:	b2da      	uxtb	r2, r3
 8007cd0:	68bb      	ldr	r3, [r7, #8]
 8007cd2:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007cd4:	68bb      	ldr	r3, [r7, #8]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	223a      	movs	r2, #58	@ 0x3a
 8007cda:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007cdc:	68bb      	ldr	r3, [r7, #8]
 8007cde:	3302      	adds	r3, #2
 8007ce0:	222f      	movs	r2, #47	@ 0x2f
 8007ce2:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	3303      	adds	r3, #3
 8007ce8:	2200      	movs	r2, #0
 8007cea:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007cec:	2300      	movs	r3, #0
 8007cee:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8007cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	371c      	adds	r7, #28
 8007cf6:	46bd      	mov	sp, r7
 8007cf8:	bc80      	pop	{r7}
 8007cfa:	4770      	bx	lr
 8007cfc:	20000640 	.word	0x20000640

08007d00 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	6839      	ldr	r1, [r7, #0]
 8007d0e:	6878      	ldr	r0, [r7, #4]
 8007d10:	f7ff ffac 	bl	8007c6c <FATFS_LinkDriverEx>
 8007d14:	4603      	mov	r3, r0
}
 8007d16:	4618      	mov	r0, r3
 8007d18:	3708      	adds	r7, #8
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
	...

08007d20 <__NVIC_SetPriority>:
{
 8007d20:	b480      	push	{r7}
 8007d22:	b083      	sub	sp, #12
 8007d24:	af00      	add	r7, sp, #0
 8007d26:	4603      	mov	r3, r0
 8007d28:	6039      	str	r1, [r7, #0]
 8007d2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007d2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	db0a      	blt.n	8007d4a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	490c      	ldr	r1, [pc, #48]	@ (8007d6c <__NVIC_SetPriority+0x4c>)
 8007d3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007d3e:	0112      	lsls	r2, r2, #4
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	440b      	add	r3, r1
 8007d44:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8007d48:	e00a      	b.n	8007d60 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	b2da      	uxtb	r2, r3
 8007d4e:	4908      	ldr	r1, [pc, #32]	@ (8007d70 <__NVIC_SetPriority+0x50>)
 8007d50:	79fb      	ldrb	r3, [r7, #7]
 8007d52:	f003 030f 	and.w	r3, r3, #15
 8007d56:	3b04      	subs	r3, #4
 8007d58:	0112      	lsls	r2, r2, #4
 8007d5a:	b2d2      	uxtb	r2, r2
 8007d5c:	440b      	add	r3, r1
 8007d5e:	761a      	strb	r2, [r3, #24]
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	bc80      	pop	{r7}
 8007d68:	4770      	bx	lr
 8007d6a:	bf00      	nop
 8007d6c:	e000e100 	.word	0xe000e100
 8007d70:	e000ed00 	.word	0xe000ed00

08007d74 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8007d74:	b580      	push	{r7, lr}
 8007d76:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8007d78:	4b05      	ldr	r3, [pc, #20]	@ (8007d90 <SysTick_Handler+0x1c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8007d7c:	f001 fd38 	bl	80097f0 <xTaskGetSchedulerState>
 8007d80:	4603      	mov	r3, r0
 8007d82:	2b01      	cmp	r3, #1
 8007d84:	d001      	beq.n	8007d8a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8007d86:	f002 fadf 	bl	800a348 <xPortSysTickHandler>
  }
}
 8007d8a:	bf00      	nop
 8007d8c:	bd80      	pop	{r7, pc}
 8007d8e:	bf00      	nop
 8007d90:	e000e010 	.word	0xe000e010

08007d94 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8007d94:	b580      	push	{r7, lr}
 8007d96:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8007d98:	2100      	movs	r1, #0
 8007d9a:	f06f 0004 	mvn.w	r0, #4
 8007d9e:	f7ff ffbf 	bl	8007d20 <__NVIC_SetPriority>
#endif
}
 8007da2:	bf00      	nop
 8007da4:	bd80      	pop	{r7, pc}
	...

08007da8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007dae:	f3ef 8305 	mrs	r3, IPSR
 8007db2:	603b      	str	r3, [r7, #0]
  return(result);
 8007db4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d003      	beq.n	8007dc2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8007dba:	f06f 0305 	mvn.w	r3, #5
 8007dbe:	607b      	str	r3, [r7, #4]
 8007dc0:	e00c      	b.n	8007ddc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8007dc2:	4b09      	ldr	r3, [pc, #36]	@ (8007de8 <osKernelInitialize+0x40>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d105      	bne.n	8007dd6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8007dca:	4b07      	ldr	r3, [pc, #28]	@ (8007de8 <osKernelInitialize+0x40>)
 8007dcc:	2201      	movs	r2, #1
 8007dce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	607b      	str	r3, [r7, #4]
 8007dd4:	e002      	b.n	8007ddc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8007dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8007dda:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007ddc:	687b      	ldr	r3, [r7, #4]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	370c      	adds	r7, #12
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bc80      	pop	{r7}
 8007de6:	4770      	bx	lr
 8007de8:	2000064c 	.word	0x2000064c

08007dec <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007df2:	f3ef 8305 	mrs	r3, IPSR
 8007df6:	603b      	str	r3, [r7, #0]
  return(result);
 8007df8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <osKernelStart+0x1a>
    stat = osErrorISR;
 8007dfe:	f06f 0305 	mvn.w	r3, #5
 8007e02:	607b      	str	r3, [r7, #4]
 8007e04:	e010      	b.n	8007e28 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8007e06:	4b0b      	ldr	r3, [pc, #44]	@ (8007e34 <osKernelStart+0x48>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d109      	bne.n	8007e22 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8007e0e:	f7ff ffc1 	bl	8007d94 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8007e12:	4b08      	ldr	r3, [pc, #32]	@ (8007e34 <osKernelStart+0x48>)
 8007e14:	2202      	movs	r2, #2
 8007e16:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8007e18:	f001 f88a 	bl	8008f30 <vTaskStartScheduler>
      stat = osOK;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	607b      	str	r3, [r7, #4]
 8007e20:	e002      	b.n	8007e28 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8007e22:	f04f 33ff 	mov.w	r3, #4294967295
 8007e26:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8007e28:	687b      	ldr	r3, [r7, #4]
}
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	3708      	adds	r7, #8
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	bd80      	pop	{r7, pc}
 8007e32:	bf00      	nop
 8007e34:	2000064c 	.word	0x2000064c

08007e38 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b08e      	sub	sp, #56	@ 0x38
 8007e3c:	af04      	add	r7, sp, #16
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8007e44:	2300      	movs	r3, #0
 8007e46:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007e48:	f3ef 8305 	mrs	r3, IPSR
 8007e4c:	617b      	str	r3, [r7, #20]
  return(result);
 8007e4e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d17e      	bne.n	8007f52 <osThreadNew+0x11a>
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d07b      	beq.n	8007f52 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8007e5a:	2380      	movs	r3, #128	@ 0x80
 8007e5c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8007e5e:	2318      	movs	r3, #24
 8007e60:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8007e62:	2300      	movs	r3, #0
 8007e64:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8007e66:	f04f 33ff 	mov.w	r3, #4294967295
 8007e6a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	d045      	beq.n	8007efe <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d002      	beq.n	8007e80 <osThreadNew+0x48>
        name = attr->name;
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d002      	beq.n	8007e8e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	699b      	ldr	r3, [r3, #24]
 8007e8c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d008      	beq.n	8007ea6 <osThreadNew+0x6e>
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	2b38      	cmp	r3, #56	@ 0x38
 8007e98:	d805      	bhi.n	8007ea6 <osThreadNew+0x6e>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	f003 0301 	and.w	r3, r3, #1
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	d001      	beq.n	8007eaa <osThreadNew+0x72>
        return (NULL);
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	e054      	b.n	8007f54 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	695b      	ldr	r3, [r3, #20]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d003      	beq.n	8007eba <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	695b      	ldr	r3, [r3, #20]
 8007eb6:	089b      	lsrs	r3, r3, #2
 8007eb8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00e      	beq.n	8007ee0 <osThreadNew+0xa8>
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	68db      	ldr	r3, [r3, #12]
 8007ec6:	2ba7      	cmp	r3, #167	@ 0xa7
 8007ec8:	d90a      	bls.n	8007ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d006      	beq.n	8007ee0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d002      	beq.n	8007ee0 <osThreadNew+0xa8>
        mem = 1;
 8007eda:	2301      	movs	r3, #1
 8007edc:	61bb      	str	r3, [r7, #24]
 8007ede:	e010      	b.n	8007f02 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d10c      	bne.n	8007f02 <osThreadNew+0xca>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d108      	bne.n	8007f02 <osThreadNew+0xca>
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	691b      	ldr	r3, [r3, #16]
 8007ef4:	2b00      	cmp	r3, #0
 8007ef6:	d104      	bne.n	8007f02 <osThreadNew+0xca>
          mem = 0;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61bb      	str	r3, [r7, #24]
 8007efc:	e001      	b.n	8007f02 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8007efe:	2300      	movs	r3, #0
 8007f00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8007f02:	69bb      	ldr	r3, [r7, #24]
 8007f04:	2b01      	cmp	r3, #1
 8007f06:	d110      	bne.n	8007f2a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8007f0c:	687a      	ldr	r2, [r7, #4]
 8007f0e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8007f10:	9202      	str	r2, [sp, #8]
 8007f12:	9301      	str	r3, [sp, #4]
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	6a3a      	ldr	r2, [r7, #32]
 8007f1c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f1e:	68f8      	ldr	r0, [r7, #12]
 8007f20:	f000 fe12 	bl	8008b48 <xTaskCreateStatic>
 8007f24:	4603      	mov	r3, r0
 8007f26:	613b      	str	r3, [r7, #16]
 8007f28:	e013      	b.n	8007f52 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	2b00      	cmp	r3, #0
 8007f2e:	d110      	bne.n	8007f52 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8007f30:	6a3b      	ldr	r3, [r7, #32]
 8007f32:	b29a      	uxth	r2, r3
 8007f34:	f107 0310 	add.w	r3, r7, #16
 8007f38:	9301      	str	r3, [sp, #4]
 8007f3a:	69fb      	ldr	r3, [r7, #28]
 8007f3c:	9300      	str	r3, [sp, #0]
 8007f3e:	68bb      	ldr	r3, [r7, #8]
 8007f40:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8007f42:	68f8      	ldr	r0, [r7, #12]
 8007f44:	f000 fe60 	bl	8008c08 <xTaskCreate>
 8007f48:	4603      	mov	r3, r0
 8007f4a:	2b01      	cmp	r3, #1
 8007f4c:	d001      	beq.n	8007f52 <osThreadNew+0x11a>
            hTask = NULL;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8007f52:	693b      	ldr	r3, [r7, #16]
}
 8007f54:	4618      	mov	r0, r3
 8007f56:	3728      	adds	r7, #40	@ 0x28
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8007f64:	f3ef 8305 	mrs	r3, IPSR
 8007f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8007f6a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d003      	beq.n	8007f78 <osDelay+0x1c>
    stat = osErrorISR;
 8007f70:	f06f 0305 	mvn.w	r3, #5
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	e007      	b.n	8007f88 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8007f78:	2300      	movs	r3, #0
 8007f7a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d002      	beq.n	8007f88 <osDelay+0x2c>
      vTaskDelay(ticks);
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 ff9e 	bl	8008ec4 <vTaskDelay>
    }
  }

  return (stat);
 8007f88:	68fb      	ldr	r3, [r7, #12]
}
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	3710      	adds	r7, #16
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
	...

08007f94 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8007f94:	b480      	push	{r7}
 8007f96:	b085      	sub	sp, #20
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	60f8      	str	r0, [r7, #12]
 8007f9c:	60b9      	str	r1, [r7, #8]
 8007f9e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	4a06      	ldr	r2, [pc, #24]	@ (8007fbc <vApplicationGetIdleTaskMemory+0x28>)
 8007fa4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8007fa6:	68bb      	ldr	r3, [r7, #8]
 8007fa8:	4a05      	ldr	r2, [pc, #20]	@ (8007fc0 <vApplicationGetIdleTaskMemory+0x2c>)
 8007faa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2280      	movs	r2, #128	@ 0x80
 8007fb0:	601a      	str	r2, [r3, #0]
}
 8007fb2:	bf00      	nop
 8007fb4:	3714      	adds	r7, #20
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	bc80      	pop	{r7}
 8007fba:	4770      	bx	lr
 8007fbc:	20000650 	.word	0x20000650
 8007fc0:	200006f8 	.word	0x200006f8

08007fc4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	60f8      	str	r0, [r7, #12]
 8007fcc:	60b9      	str	r1, [r7, #8]
 8007fce:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	4a07      	ldr	r2, [pc, #28]	@ (8007ff0 <vApplicationGetTimerTaskMemory+0x2c>)
 8007fd4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	4a06      	ldr	r2, [pc, #24]	@ (8007ff4 <vApplicationGetTimerTaskMemory+0x30>)
 8007fda:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007fe2:	601a      	str	r2, [r3, #0]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bc80      	pop	{r7}
 8007fec:	4770      	bx	lr
 8007fee:	bf00      	nop
 8007ff0:	200008f8 	.word	0x200008f8
 8007ff4:	200009a0 	.word	0x200009a0

08007ff8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b083      	sub	sp, #12
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f103 0208 	add.w	r2, r3, #8
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f04f 32ff 	mov.w	r2, #4294967295
 8008010:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f103 0208 	add.w	r2, r3, #8
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f103 0208 	add.w	r2, r3, #8
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800802c:	bf00      	nop
 800802e:	370c      	adds	r7, #12
 8008030:	46bd      	mov	sp, r7
 8008032:	bc80      	pop	{r7}
 8008034:	4770      	bx	lr

08008036 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008036:	b480      	push	{r7}
 8008038:	b083      	sub	sp, #12
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	2200      	movs	r2, #0
 8008042:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008044:	bf00      	nop
 8008046:	370c      	adds	r7, #12
 8008048:	46bd      	mov	sp, r7
 800804a:	bc80      	pop	{r7}
 800804c:	4770      	bx	lr

0800804e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800804e:	b480      	push	{r7}
 8008050:	b085      	sub	sp, #20
 8008052:	af00      	add	r7, sp, #0
 8008054:	6078      	str	r0, [r7, #4]
 8008056:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	685b      	ldr	r3, [r3, #4]
 800805c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800805e:	683b      	ldr	r3, [r7, #0]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	689a      	ldr	r2, [r3, #8]
 8008068:	683b      	ldr	r3, [r7, #0]
 800806a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	689b      	ldr	r3, [r3, #8]
 8008070:	683a      	ldr	r2, [r7, #0]
 8008072:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	683a      	ldr	r2, [r7, #0]
 8008078:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	687a      	ldr	r2, [r7, #4]
 800807e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	1c5a      	adds	r2, r3, #1
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	601a      	str	r2, [r3, #0]
}
 800808a:	bf00      	nop
 800808c:	3714      	adds	r7, #20
 800808e:	46bd      	mov	sp, r7
 8008090:	bc80      	pop	{r7}
 8008092:	4770      	bx	lr

08008094 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008094:	b480      	push	{r7}
 8008096:	b085      	sub	sp, #20
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
 800809c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800809e:	683b      	ldr	r3, [r7, #0]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80080a4:	68bb      	ldr	r3, [r7, #8]
 80080a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080aa:	d103      	bne.n	80080b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	691b      	ldr	r3, [r3, #16]
 80080b0:	60fb      	str	r3, [r7, #12]
 80080b2:	e00c      	b.n	80080ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	3308      	adds	r3, #8
 80080b8:	60fb      	str	r3, [r7, #12]
 80080ba:	e002      	b.n	80080c2 <vListInsert+0x2e>
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	60fb      	str	r3, [r7, #12]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	685b      	ldr	r3, [r3, #4]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	68ba      	ldr	r2, [r7, #8]
 80080ca:	429a      	cmp	r2, r3
 80080cc:	d2f6      	bcs.n	80080bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	685a      	ldr	r2, [r3, #4]
 80080d2:	683b      	ldr	r3, [r7, #0]
 80080d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	685b      	ldr	r3, [r3, #4]
 80080da:	683a      	ldr	r2, [r7, #0]
 80080dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80080de:	683b      	ldr	r3, [r7, #0]
 80080e0:	68fa      	ldr	r2, [r7, #12]
 80080e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	683a      	ldr	r2, [r7, #0]
 80080e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80080ea:	683b      	ldr	r3, [r7, #0]
 80080ec:	687a      	ldr	r2, [r7, #4]
 80080ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	1c5a      	adds	r2, r3, #1
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	601a      	str	r2, [r3, #0]
}
 80080fa:	bf00      	nop
 80080fc:	3714      	adds	r7, #20
 80080fe:	46bd      	mov	sp, r7
 8008100:	bc80      	pop	{r7}
 8008102:	4770      	bx	lr

08008104 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	691b      	ldr	r3, [r3, #16]
 8008110:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	687a      	ldr	r2, [r7, #4]
 8008118:	6892      	ldr	r2, [r2, #8]
 800811a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	689b      	ldr	r3, [r3, #8]
 8008120:	687a      	ldr	r2, [r7, #4]
 8008122:	6852      	ldr	r2, [r2, #4]
 8008124:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	687a      	ldr	r2, [r7, #4]
 800812c:	429a      	cmp	r2, r3
 800812e:	d103      	bne.n	8008138 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	689a      	ldr	r2, [r3, #8]
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2200      	movs	r2, #0
 800813c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	1e5a      	subs	r2, r3, #1
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3714      	adds	r7, #20
 8008150:	46bd      	mov	sp, r7
 8008152:	bc80      	pop	{r7}
 8008154:	4770      	bx	lr
	...

08008158 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b084      	sub	sp, #16
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	2b00      	cmp	r3, #0
 800816a:	d10b      	bne.n	8008184 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800816c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008170:	f383 8811 	msr	BASEPRI, r3
 8008174:	f3bf 8f6f 	isb	sy
 8008178:	f3bf 8f4f 	dsb	sy
 800817c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800817e:	bf00      	nop
 8008180:	bf00      	nop
 8008182:	e7fd      	b.n	8008180 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008184:	f002 f862 	bl	800a24c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681a      	ldr	r2, [r3, #0]
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008190:	68f9      	ldr	r1, [r7, #12]
 8008192:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008194:	fb01 f303 	mul.w	r3, r1, r3
 8008198:	441a      	add	r2, r3
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	2200      	movs	r2, #0
 80081a2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681a      	ldr	r2, [r3, #0]
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681a      	ldr	r2, [r3, #0]
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80081b4:	3b01      	subs	r3, #1
 80081b6:	68f9      	ldr	r1, [r7, #12]
 80081b8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80081ba:	fb01 f303 	mul.w	r3, r1, r3
 80081be:	441a      	add	r2, r3
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	22ff      	movs	r2, #255	@ 0xff
 80081c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	22ff      	movs	r2, #255	@ 0xff
 80081d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d114      	bne.n	8008204 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	691b      	ldr	r3, [r3, #16]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d01a      	beq.n	8008218 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	3310      	adds	r3, #16
 80081e6:	4618      	mov	r0, r3
 80081e8:	f001 f93c 	bl	8009464 <xTaskRemoveFromEventList>
 80081ec:	4603      	mov	r3, r0
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d012      	beq.n	8008218 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80081f2:	4b0d      	ldr	r3, [pc, #52]	@ (8008228 <xQueueGenericReset+0xd0>)
 80081f4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80081f8:	601a      	str	r2, [r3, #0]
 80081fa:	f3bf 8f4f 	dsb	sy
 80081fe:	f3bf 8f6f 	isb	sy
 8008202:	e009      	b.n	8008218 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	3310      	adds	r3, #16
 8008208:	4618      	mov	r0, r3
 800820a:	f7ff fef5 	bl	8007ff8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800820e:	68fb      	ldr	r3, [r7, #12]
 8008210:	3324      	adds	r3, #36	@ 0x24
 8008212:	4618      	mov	r0, r3
 8008214:	f7ff fef0 	bl	8007ff8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008218:	f002 f848 	bl	800a2ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800821c:	2301      	movs	r3, #1
}
 800821e:	4618      	mov	r0, r3
 8008220:	3710      	adds	r7, #16
 8008222:	46bd      	mov	sp, r7
 8008224:	bd80      	pop	{r7, pc}
 8008226:	bf00      	nop
 8008228:	e000ed04 	.word	0xe000ed04

0800822c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800822c:	b580      	push	{r7, lr}
 800822e:	b08e      	sub	sp, #56	@ 0x38
 8008230:	af02      	add	r7, sp, #8
 8008232:	60f8      	str	r0, [r7, #12]
 8008234:	60b9      	str	r1, [r7, #8]
 8008236:	607a      	str	r2, [r7, #4]
 8008238:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d10b      	bne.n	8008258 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008240:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008244:	f383 8811 	msr	BASEPRI, r3
 8008248:	f3bf 8f6f 	isb	sy
 800824c:	f3bf 8f4f 	dsb	sy
 8008250:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008252:	bf00      	nop
 8008254:	bf00      	nop
 8008256:	e7fd      	b.n	8008254 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d10b      	bne.n	8008276 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800825e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008262:	f383 8811 	msr	BASEPRI, r3
 8008266:	f3bf 8f6f 	isb	sy
 800826a:	f3bf 8f4f 	dsb	sy
 800826e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008270:	bf00      	nop
 8008272:	bf00      	nop
 8008274:	e7fd      	b.n	8008272 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	2b00      	cmp	r3, #0
 800827a:	d002      	beq.n	8008282 <xQueueGenericCreateStatic+0x56>
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <xQueueGenericCreateStatic+0x5a>
 8008282:	2301      	movs	r3, #1
 8008284:	e000      	b.n	8008288 <xQueueGenericCreateStatic+0x5c>
 8008286:	2300      	movs	r3, #0
 8008288:	2b00      	cmp	r3, #0
 800828a:	d10b      	bne.n	80082a4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800828c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008290:	f383 8811 	msr	BASEPRI, r3
 8008294:	f3bf 8f6f 	isb	sy
 8008298:	f3bf 8f4f 	dsb	sy
 800829c:	623b      	str	r3, [r7, #32]
}
 800829e:	bf00      	nop
 80082a0:	bf00      	nop
 80082a2:	e7fd      	b.n	80082a0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d102      	bne.n	80082b0 <xQueueGenericCreateStatic+0x84>
 80082aa:	68bb      	ldr	r3, [r7, #8]
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d101      	bne.n	80082b4 <xQueueGenericCreateStatic+0x88>
 80082b0:	2301      	movs	r3, #1
 80082b2:	e000      	b.n	80082b6 <xQueueGenericCreateStatic+0x8a>
 80082b4:	2300      	movs	r3, #0
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d10b      	bne.n	80082d2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80082ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082be:	f383 8811 	msr	BASEPRI, r3
 80082c2:	f3bf 8f6f 	isb	sy
 80082c6:	f3bf 8f4f 	dsb	sy
 80082ca:	61fb      	str	r3, [r7, #28]
}
 80082cc:	bf00      	nop
 80082ce:	bf00      	nop
 80082d0:	e7fd      	b.n	80082ce <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80082d2:	2350      	movs	r3, #80	@ 0x50
 80082d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80082d6:	697b      	ldr	r3, [r7, #20]
 80082d8:	2b50      	cmp	r3, #80	@ 0x50
 80082da:	d00b      	beq.n	80082f4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80082dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082e0:	f383 8811 	msr	BASEPRI, r3
 80082e4:	f3bf 8f6f 	isb	sy
 80082e8:	f3bf 8f4f 	dsb	sy
 80082ec:	61bb      	str	r3, [r7, #24]
}
 80082ee:	bf00      	nop
 80082f0:	bf00      	nop
 80082f2:	e7fd      	b.n	80082f0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80082f4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80082f6:	683b      	ldr	r3, [r7, #0]
 80082f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80082fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00d      	beq.n	800831c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008302:	2201      	movs	r2, #1
 8008304:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008308:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800830c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	4613      	mov	r3, r2
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 f805 	bl	8008326 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800831c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800831e:	4618      	mov	r0, r3
 8008320:	3730      	adds	r7, #48	@ 0x30
 8008322:	46bd      	mov	sp, r7
 8008324:	bd80      	pop	{r7, pc}

08008326 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008326:	b580      	push	{r7, lr}
 8008328:	b084      	sub	sp, #16
 800832a:	af00      	add	r7, sp, #0
 800832c:	60f8      	str	r0, [r7, #12]
 800832e:	60b9      	str	r1, [r7, #8]
 8008330:	607a      	str	r2, [r7, #4]
 8008332:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008334:	68bb      	ldr	r3, [r7, #8]
 8008336:	2b00      	cmp	r3, #0
 8008338:	d103      	bne.n	8008342 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800833a:	69bb      	ldr	r3, [r7, #24]
 800833c:	69ba      	ldr	r2, [r7, #24]
 800833e:	601a      	str	r2, [r3, #0]
 8008340:	e002      	b.n	8008348 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008342:	69bb      	ldr	r3, [r7, #24]
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008348:	69bb      	ldr	r3, [r7, #24]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800834e:	69bb      	ldr	r3, [r7, #24]
 8008350:	68ba      	ldr	r2, [r7, #8]
 8008352:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008354:	2101      	movs	r1, #1
 8008356:	69b8      	ldr	r0, [r7, #24]
 8008358:	f7ff fefe 	bl	8008158 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800835c:	69bb      	ldr	r3, [r7, #24]
 800835e:	78fa      	ldrb	r2, [r7, #3]
 8008360:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008364:	bf00      	nop
 8008366:	3710      	adds	r7, #16
 8008368:	46bd      	mov	sp, r7
 800836a:	bd80      	pop	{r7, pc}

0800836c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800836c:	b580      	push	{r7, lr}
 800836e:	b08e      	sub	sp, #56	@ 0x38
 8008370:	af00      	add	r7, sp, #0
 8008372:	60f8      	str	r0, [r7, #12]
 8008374:	60b9      	str	r1, [r7, #8]
 8008376:	607a      	str	r2, [r7, #4]
 8008378:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800837a:	2300      	movs	r3, #0
 800837c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008382:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10b      	bne.n	80083a0 <xQueueGenericSend+0x34>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800839a:	bf00      	nop
 800839c:	bf00      	nop
 800839e:	e7fd      	b.n	800839c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d103      	bne.n	80083ae <xQueueGenericSend+0x42>
 80083a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	d101      	bne.n	80083b2 <xQueueGenericSend+0x46>
 80083ae:	2301      	movs	r3, #1
 80083b0:	e000      	b.n	80083b4 <xQueueGenericSend+0x48>
 80083b2:	2300      	movs	r3, #0
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d10b      	bne.n	80083d0 <xQueueGenericSend+0x64>
	__asm volatile
 80083b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083bc:	f383 8811 	msr	BASEPRI, r3
 80083c0:	f3bf 8f6f 	isb	sy
 80083c4:	f3bf 8f4f 	dsb	sy
 80083c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80083ca:	bf00      	nop
 80083cc:	bf00      	nop
 80083ce:	e7fd      	b.n	80083cc <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80083d0:	683b      	ldr	r3, [r7, #0]
 80083d2:	2b02      	cmp	r3, #2
 80083d4:	d103      	bne.n	80083de <xQueueGenericSend+0x72>
 80083d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80083d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80083da:	2b01      	cmp	r3, #1
 80083dc:	d101      	bne.n	80083e2 <xQueueGenericSend+0x76>
 80083de:	2301      	movs	r3, #1
 80083e0:	e000      	b.n	80083e4 <xQueueGenericSend+0x78>
 80083e2:	2300      	movs	r3, #0
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xQueueGenericSend+0x94>
	__asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	623b      	str	r3, [r7, #32]
}
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008400:	f001 f9f6 	bl	80097f0 <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b00      	cmp	r3, #0
 8008408:	d102      	bne.n	8008410 <xQueueGenericSend+0xa4>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	2b00      	cmp	r3, #0
 800840e:	d101      	bne.n	8008414 <xQueueGenericSend+0xa8>
 8008410:	2301      	movs	r3, #1
 8008412:	e000      	b.n	8008416 <xQueueGenericSend+0xaa>
 8008414:	2300      	movs	r3, #0
 8008416:	2b00      	cmp	r3, #0
 8008418:	d10b      	bne.n	8008432 <xQueueGenericSend+0xc6>
	__asm volatile
 800841a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800841e:	f383 8811 	msr	BASEPRI, r3
 8008422:	f3bf 8f6f 	isb	sy
 8008426:	f3bf 8f4f 	dsb	sy
 800842a:	61fb      	str	r3, [r7, #28]
}
 800842c:	bf00      	nop
 800842e:	bf00      	nop
 8008430:	e7fd      	b.n	800842e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008432:	f001 ff0b 	bl	800a24c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008438:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800843a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800843c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800843e:	429a      	cmp	r2, r3
 8008440:	d302      	bcc.n	8008448 <xQueueGenericSend+0xdc>
 8008442:	683b      	ldr	r3, [r7, #0]
 8008444:	2b02      	cmp	r3, #2
 8008446:	d129      	bne.n	800849c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008448:	683a      	ldr	r2, [r7, #0]
 800844a:	68b9      	ldr	r1, [r7, #8]
 800844c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800844e:	f000 fa0f 	bl	8008870 <prvCopyDataToQueue>
 8008452:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008456:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008458:	2b00      	cmp	r3, #0
 800845a:	d010      	beq.n	800847e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800845c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800845e:	3324      	adds	r3, #36	@ 0x24
 8008460:	4618      	mov	r0, r3
 8008462:	f000 ffff 	bl	8009464 <xTaskRemoveFromEventList>
 8008466:	4603      	mov	r3, r0
 8008468:	2b00      	cmp	r3, #0
 800846a:	d013      	beq.n	8008494 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800846c:	4b3f      	ldr	r3, [pc, #252]	@ (800856c <xQueueGenericSend+0x200>)
 800846e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008472:	601a      	str	r2, [r3, #0]
 8008474:	f3bf 8f4f 	dsb	sy
 8008478:	f3bf 8f6f 	isb	sy
 800847c:	e00a      	b.n	8008494 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800847e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008480:	2b00      	cmp	r3, #0
 8008482:	d007      	beq.n	8008494 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008484:	4b39      	ldr	r3, [pc, #228]	@ (800856c <xQueueGenericSend+0x200>)
 8008486:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800848a:	601a      	str	r2, [r3, #0]
 800848c:	f3bf 8f4f 	dsb	sy
 8008490:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008494:	f001 ff0a 	bl	800a2ac <vPortExitCritical>
				return pdPASS;
 8008498:	2301      	movs	r3, #1
 800849a:	e063      	b.n	8008564 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d103      	bne.n	80084aa <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80084a2:	f001 ff03 	bl	800a2ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80084a6:	2300      	movs	r3, #0
 80084a8:	e05c      	b.n	8008564 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80084aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d106      	bne.n	80084be <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80084b0:	f107 0314 	add.w	r3, r7, #20
 80084b4:	4618      	mov	r0, r3
 80084b6:	f001 f839 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80084ba:	2301      	movs	r3, #1
 80084bc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80084be:	f001 fef5 	bl	800a2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80084c2:	f000 fda5 	bl	8009010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80084c6:	f001 fec1 	bl	800a24c <vPortEnterCritical>
 80084ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084d0:	b25b      	sxtb	r3, r3
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d103      	bne.n	80084e0 <xQueueGenericSend+0x174>
 80084d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084da:	2200      	movs	r2, #0
 80084dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084e6:	b25b      	sxtb	r3, r3
 80084e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ec:	d103      	bne.n	80084f6 <xQueueGenericSend+0x18a>
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084f6:	f001 fed9 	bl	800a2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084fa:	1d3a      	adds	r2, r7, #4
 80084fc:	f107 0314 	add.w	r3, r7, #20
 8008500:	4611      	mov	r1, r2
 8008502:	4618      	mov	r0, r3
 8008504:	f001 f828 	bl	8009558 <xTaskCheckForTimeOut>
 8008508:	4603      	mov	r3, r0
 800850a:	2b00      	cmp	r3, #0
 800850c:	d124      	bne.n	8008558 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800850e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008510:	f000 faa6 	bl	8008a60 <prvIsQueueFull>
 8008514:	4603      	mov	r3, r0
 8008516:	2b00      	cmp	r3, #0
 8008518:	d018      	beq.n	800854c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800851a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800851c:	3310      	adds	r3, #16
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	4611      	mov	r1, r2
 8008522:	4618      	mov	r0, r3
 8008524:	f000 ff4c 	bl	80093c0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008528:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800852a:	f000 fa31 	bl	8008990 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800852e:	f000 fd7d 	bl	800902c <xTaskResumeAll>
 8008532:	4603      	mov	r3, r0
 8008534:	2b00      	cmp	r3, #0
 8008536:	f47f af7c 	bne.w	8008432 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800853a:	4b0c      	ldr	r3, [pc, #48]	@ (800856c <xQueueGenericSend+0x200>)
 800853c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008540:	601a      	str	r2, [r3, #0]
 8008542:	f3bf 8f4f 	dsb	sy
 8008546:	f3bf 8f6f 	isb	sy
 800854a:	e772      	b.n	8008432 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800854c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800854e:	f000 fa1f 	bl	8008990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008552:	f000 fd6b 	bl	800902c <xTaskResumeAll>
 8008556:	e76c      	b.n	8008432 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800855a:	f000 fa19 	bl	8008990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800855e:	f000 fd65 	bl	800902c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008562:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008564:	4618      	mov	r0, r3
 8008566:	3738      	adds	r7, #56	@ 0x38
 8008568:	46bd      	mov	sp, r7
 800856a:	bd80      	pop	{r7, pc}
 800856c:	e000ed04 	.word	0xe000ed04

08008570 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b090      	sub	sp, #64	@ 0x40
 8008574:	af00      	add	r7, sp, #0
 8008576:	60f8      	str	r0, [r7, #12]
 8008578:	60b9      	str	r1, [r7, #8]
 800857a:	607a      	str	r2, [r7, #4]
 800857c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008584:	2b00      	cmp	r3, #0
 8008586:	d10b      	bne.n	80085a0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8008588:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800858c:	f383 8811 	msr	BASEPRI, r3
 8008590:	f3bf 8f6f 	isb	sy
 8008594:	f3bf 8f4f 	dsb	sy
 8008598:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800859a:	bf00      	nop
 800859c:	bf00      	nop
 800859e:	e7fd      	b.n	800859c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d103      	bne.n	80085ae <xQueueGenericSendFromISR+0x3e>
 80085a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <xQueueGenericSendFromISR+0x42>
 80085ae:	2301      	movs	r3, #1
 80085b0:	e000      	b.n	80085b4 <xQueueGenericSendFromISR+0x44>
 80085b2:	2300      	movs	r3, #0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d10b      	bne.n	80085d0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80085b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085bc:	f383 8811 	msr	BASEPRI, r3
 80085c0:	f3bf 8f6f 	isb	sy
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80085ca:	bf00      	nop
 80085cc:	bf00      	nop
 80085ce:	e7fd      	b.n	80085cc <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80085d0:	683b      	ldr	r3, [r7, #0]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d103      	bne.n	80085de <xQueueGenericSendFromISR+0x6e>
 80085d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80085d8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085da:	2b01      	cmp	r3, #1
 80085dc:	d101      	bne.n	80085e2 <xQueueGenericSendFromISR+0x72>
 80085de:	2301      	movs	r3, #1
 80085e0:	e000      	b.n	80085e4 <xQueueGenericSendFromISR+0x74>
 80085e2:	2300      	movs	r3, #0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d10b      	bne.n	8008600 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80085e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ec:	f383 8811 	msr	BASEPRI, r3
 80085f0:	f3bf 8f6f 	isb	sy
 80085f4:	f3bf 8f4f 	dsb	sy
 80085f8:	623b      	str	r3, [r7, #32]
}
 80085fa:	bf00      	nop
 80085fc:	bf00      	nop
 80085fe:	e7fd      	b.n	80085fc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008600:	f001 fee6 	bl	800a3d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008604:	f3ef 8211 	mrs	r2, BASEPRI
 8008608:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860c:	f383 8811 	msr	BASEPRI, r3
 8008610:	f3bf 8f6f 	isb	sy
 8008614:	f3bf 8f4f 	dsb	sy
 8008618:	61fa      	str	r2, [r7, #28]
 800861a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800861c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800861e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008622:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008624:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008626:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008628:	429a      	cmp	r2, r3
 800862a:	d302      	bcc.n	8008632 <xQueueGenericSendFromISR+0xc2>
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	2b02      	cmp	r3, #2
 8008630:	d12f      	bne.n	8008692 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008634:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008638:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800863c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800863e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008640:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008642:	683a      	ldr	r2, [r7, #0]
 8008644:	68b9      	ldr	r1, [r7, #8]
 8008646:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008648:	f000 f912 	bl	8008870 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800864c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008654:	d112      	bne.n	800867c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008656:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008658:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800865a:	2b00      	cmp	r3, #0
 800865c:	d016      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800865e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008660:	3324      	adds	r3, #36	@ 0x24
 8008662:	4618      	mov	r0, r3
 8008664:	f000 fefe 	bl	8009464 <xTaskRemoveFromEventList>
 8008668:	4603      	mov	r3, r0
 800866a:	2b00      	cmp	r3, #0
 800866c:	d00e      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d00b      	beq.n	800868c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	601a      	str	r2, [r3, #0]
 800867a:	e007      	b.n	800868c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800867c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008680:	3301      	adds	r3, #1
 8008682:	b2db      	uxtb	r3, r3
 8008684:	b25a      	sxtb	r2, r3
 8008686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008688:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800868c:	2301      	movs	r3, #1
 800868e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008690:	e001      	b.n	8008696 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008692:	2300      	movs	r3, #0
 8008694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008696:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008698:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80086a0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80086a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80086a4:	4618      	mov	r0, r3
 80086a6:	3740      	adds	r7, #64	@ 0x40
 80086a8:	46bd      	mov	sp, r7
 80086aa:	bd80      	pop	{r7, pc}

080086ac <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80086ac:	b580      	push	{r7, lr}
 80086ae:	b08c      	sub	sp, #48	@ 0x30
 80086b0:	af00      	add	r7, sp, #0
 80086b2:	60f8      	str	r0, [r7, #12]
 80086b4:	60b9      	str	r1, [r7, #8]
 80086b6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80086b8:	2300      	movs	r3, #0
 80086ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d10b      	bne.n	80086de <xQueueReceive+0x32>
	__asm volatile
 80086c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ca:	f383 8811 	msr	BASEPRI, r3
 80086ce:	f3bf 8f6f 	isb	sy
 80086d2:	f3bf 8f4f 	dsb	sy
 80086d6:	623b      	str	r3, [r7, #32]
}
 80086d8:	bf00      	nop
 80086da:	bf00      	nop
 80086dc:	e7fd      	b.n	80086da <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d103      	bne.n	80086ec <xQueueReceive+0x40>
 80086e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d101      	bne.n	80086f0 <xQueueReceive+0x44>
 80086ec:	2301      	movs	r3, #1
 80086ee:	e000      	b.n	80086f2 <xQueueReceive+0x46>
 80086f0:	2300      	movs	r3, #0
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d10b      	bne.n	800870e <xQueueReceive+0x62>
	__asm volatile
 80086f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086fa:	f383 8811 	msr	BASEPRI, r3
 80086fe:	f3bf 8f6f 	isb	sy
 8008702:	f3bf 8f4f 	dsb	sy
 8008706:	61fb      	str	r3, [r7, #28]
}
 8008708:	bf00      	nop
 800870a:	bf00      	nop
 800870c:	e7fd      	b.n	800870a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800870e:	f001 f86f 	bl	80097f0 <xTaskGetSchedulerState>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d102      	bne.n	800871e <xQueueReceive+0x72>
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2b00      	cmp	r3, #0
 800871c:	d101      	bne.n	8008722 <xQueueReceive+0x76>
 800871e:	2301      	movs	r3, #1
 8008720:	e000      	b.n	8008724 <xQueueReceive+0x78>
 8008722:	2300      	movs	r3, #0
 8008724:	2b00      	cmp	r3, #0
 8008726:	d10b      	bne.n	8008740 <xQueueReceive+0x94>
	__asm volatile
 8008728:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800872c:	f383 8811 	msr	BASEPRI, r3
 8008730:	f3bf 8f6f 	isb	sy
 8008734:	f3bf 8f4f 	dsb	sy
 8008738:	61bb      	str	r3, [r7, #24]
}
 800873a:	bf00      	nop
 800873c:	bf00      	nop
 800873e:	e7fd      	b.n	800873c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008740:	f001 fd84 	bl	800a24c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008744:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008746:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008748:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800874a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800874c:	2b00      	cmp	r3, #0
 800874e:	d01f      	beq.n	8008790 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008750:	68b9      	ldr	r1, [r7, #8]
 8008752:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008754:	f000 f8f6 	bl	8008944 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800875a:	1e5a      	subs	r2, r3, #1
 800875c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800875e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008760:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008762:	691b      	ldr	r3, [r3, #16]
 8008764:	2b00      	cmp	r3, #0
 8008766:	d00f      	beq.n	8008788 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800876a:	3310      	adds	r3, #16
 800876c:	4618      	mov	r0, r3
 800876e:	f000 fe79 	bl	8009464 <xTaskRemoveFromEventList>
 8008772:	4603      	mov	r3, r0
 8008774:	2b00      	cmp	r3, #0
 8008776:	d007      	beq.n	8008788 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008778:	4b3c      	ldr	r3, [pc, #240]	@ (800886c <xQueueReceive+0x1c0>)
 800877a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800877e:	601a      	str	r2, [r3, #0]
 8008780:	f3bf 8f4f 	dsb	sy
 8008784:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008788:	f001 fd90 	bl	800a2ac <vPortExitCritical>
				return pdPASS;
 800878c:	2301      	movs	r3, #1
 800878e:	e069      	b.n	8008864 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2b00      	cmp	r3, #0
 8008794:	d103      	bne.n	800879e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008796:	f001 fd89 	bl	800a2ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800879a:	2300      	movs	r3, #0
 800879c:	e062      	b.n	8008864 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800879e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d106      	bne.n	80087b2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80087a4:	f107 0310 	add.w	r3, r7, #16
 80087a8:	4618      	mov	r0, r3
 80087aa:	f000 febf 	bl	800952c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80087ae:	2301      	movs	r3, #1
 80087b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80087b2:	f001 fd7b 	bl	800a2ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80087b6:	f000 fc2b 	bl	8009010 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80087ba:	f001 fd47 	bl	800a24c <vPortEnterCritical>
 80087be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80087c4:	b25b      	sxtb	r3, r3
 80087c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087ca:	d103      	bne.n	80087d4 <xQueueReceive+0x128>
 80087cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087ce:	2200      	movs	r2, #0
 80087d0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80087d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087d6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80087da:	b25b      	sxtb	r3, r3
 80087dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80087e0:	d103      	bne.n	80087ea <xQueueReceive+0x13e>
 80087e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80087ea:	f001 fd5f 	bl	800a2ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80087ee:	1d3a      	adds	r2, r7, #4
 80087f0:	f107 0310 	add.w	r3, r7, #16
 80087f4:	4611      	mov	r1, r2
 80087f6:	4618      	mov	r0, r3
 80087f8:	f000 feae 	bl	8009558 <xTaskCheckForTimeOut>
 80087fc:	4603      	mov	r3, r0
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d123      	bne.n	800884a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008802:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008804:	f000 f916 	bl	8008a34 <prvIsQueueEmpty>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d017      	beq.n	800883e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800880e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008810:	3324      	adds	r3, #36	@ 0x24
 8008812:	687a      	ldr	r2, [r7, #4]
 8008814:	4611      	mov	r1, r2
 8008816:	4618      	mov	r0, r3
 8008818:	f000 fdd2 	bl	80093c0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800881c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800881e:	f000 f8b7 	bl	8008990 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008822:	f000 fc03 	bl	800902c <xTaskResumeAll>
 8008826:	4603      	mov	r3, r0
 8008828:	2b00      	cmp	r3, #0
 800882a:	d189      	bne.n	8008740 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800882c:	4b0f      	ldr	r3, [pc, #60]	@ (800886c <xQueueReceive+0x1c0>)
 800882e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008832:	601a      	str	r2, [r3, #0]
 8008834:	f3bf 8f4f 	dsb	sy
 8008838:	f3bf 8f6f 	isb	sy
 800883c:	e780      	b.n	8008740 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800883e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008840:	f000 f8a6 	bl	8008990 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008844:	f000 fbf2 	bl	800902c <xTaskResumeAll>
 8008848:	e77a      	b.n	8008740 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800884a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800884c:	f000 f8a0 	bl	8008990 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008850:	f000 fbec 	bl	800902c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008854:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008856:	f000 f8ed 	bl	8008a34 <prvIsQueueEmpty>
 800885a:	4603      	mov	r3, r0
 800885c:	2b00      	cmp	r3, #0
 800885e:	f43f af6f 	beq.w	8008740 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008862:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008864:	4618      	mov	r0, r3
 8008866:	3730      	adds	r7, #48	@ 0x30
 8008868:	46bd      	mov	sp, r7
 800886a:	bd80      	pop	{r7, pc}
 800886c:	e000ed04 	.word	0xe000ed04

08008870 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008870:	b580      	push	{r7, lr}
 8008872:	b086      	sub	sp, #24
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008884:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800888a:	2b00      	cmp	r3, #0
 800888c:	d10d      	bne.n	80088aa <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d14d      	bne.n	8008932 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	4618      	mov	r0, r3
 800889c:	f000 ffc6 	bl	800982c <xTaskPriorityDisinherit>
 80088a0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	609a      	str	r2, [r3, #8]
 80088a8:	e043      	b.n	8008932 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d119      	bne.n	80088e4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	6858      	ldr	r0, [r3, #4]
 80088b4:	68fb      	ldr	r3, [r7, #12]
 80088b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088b8:	461a      	mov	r2, r3
 80088ba:	68b9      	ldr	r1, [r7, #8]
 80088bc:	f002 f840 	bl	800a940 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	685a      	ldr	r2, [r3, #4]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088c8:	441a      	add	r2, r3
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	685a      	ldr	r2, [r3, #4]
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	429a      	cmp	r2, r3
 80088d8:	d32b      	bcc.n	8008932 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681a      	ldr	r2, [r3, #0]
 80088de:	68fb      	ldr	r3, [r7, #12]
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	e026      	b.n	8008932 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	68d8      	ldr	r0, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088ec:	461a      	mov	r2, r3
 80088ee:	68b9      	ldr	r1, [r7, #8]
 80088f0:	f002 f826 	bl	800a940 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	68da      	ldr	r2, [r3, #12]
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80088fc:	425b      	negs	r3, r3
 80088fe:	441a      	add	r2, r3
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	68da      	ldr	r2, [r3, #12]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	429a      	cmp	r2, r3
 800890e:	d207      	bcs.n	8008920 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008918:	425b      	negs	r3, r3
 800891a:	441a      	add	r2, r3
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d105      	bne.n	8008932 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d002      	beq.n	8008932 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	3b01      	subs	r3, #1
 8008930:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008932:	693b      	ldr	r3, [r7, #16]
 8008934:	1c5a      	adds	r2, r3, #1
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800893a:	697b      	ldr	r3, [r7, #20]
}
 800893c:	4618      	mov	r0, r3
 800893e:	3718      	adds	r7, #24
 8008940:	46bd      	mov	sp, r7
 8008942:	bd80      	pop	{r7, pc}

08008944 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008944:	b580      	push	{r7, lr}
 8008946:	b082      	sub	sp, #8
 8008948:	af00      	add	r7, sp, #0
 800894a:	6078      	str	r0, [r7, #4]
 800894c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008952:	2b00      	cmp	r3, #0
 8008954:	d018      	beq.n	8008988 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	68da      	ldr	r2, [r3, #12]
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800895e:	441a      	add	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008964:	687b      	ldr	r3, [r7, #4]
 8008966:	68da      	ldr	r2, [r3, #12]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	429a      	cmp	r2, r3
 800896e:	d303      	bcc.n	8008978 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	681a      	ldr	r2, [r3, #0]
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	68d9      	ldr	r1, [r3, #12]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008980:	461a      	mov	r2, r3
 8008982:	6838      	ldr	r0, [r7, #0]
 8008984:	f001 ffdc 	bl	800a940 <memcpy>
	}
}
 8008988:	bf00      	nop
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008990:	b580      	push	{r7, lr}
 8008992:	b084      	sub	sp, #16
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008998:	f001 fc58 	bl	800a24c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80089a2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089a4:	e011      	b.n	80089ca <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d012      	beq.n	80089d4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	3324      	adds	r3, #36	@ 0x24
 80089b2:	4618      	mov	r0, r3
 80089b4:	f000 fd56 	bl	8009464 <xTaskRemoveFromEventList>
 80089b8:	4603      	mov	r3, r0
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d001      	beq.n	80089c2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80089be:	f000 fe2f 	bl	8009620 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80089c2:	7bfb      	ldrb	r3, [r7, #15]
 80089c4:	3b01      	subs	r3, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80089ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	dce9      	bgt.n	80089a6 <prvUnlockQueue+0x16>
 80089d2:	e000      	b.n	80089d6 <prvUnlockQueue+0x46>
					break;
 80089d4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	22ff      	movs	r2, #255	@ 0xff
 80089da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80089de:	f001 fc65 	bl	800a2ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80089e2:	f001 fc33 	bl	800a24c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80089ec:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80089ee:	e011      	b.n	8008a14 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	691b      	ldr	r3, [r3, #16]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	d012      	beq.n	8008a1e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	3310      	adds	r3, #16
 80089fc:	4618      	mov	r0, r3
 80089fe:	f000 fd31 	bl	8009464 <xTaskRemoveFromEventList>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d001      	beq.n	8008a0c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008a08:	f000 fe0a 	bl	8009620 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008a0c:	7bbb      	ldrb	r3, [r7, #14]
 8008a0e:	3b01      	subs	r3, #1
 8008a10:	b2db      	uxtb	r3, r3
 8008a12:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008a14:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008a18:	2b00      	cmp	r3, #0
 8008a1a:	dce9      	bgt.n	80089f0 <prvUnlockQueue+0x60>
 8008a1c:	e000      	b.n	8008a20 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008a1e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	22ff      	movs	r2, #255	@ 0xff
 8008a24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008a28:	f001 fc40 	bl	800a2ac <vPortExitCritical>
}
 8008a2c:	bf00      	nop
 8008a2e:	3710      	adds	r7, #16
 8008a30:	46bd      	mov	sp, r7
 8008a32:	bd80      	pop	{r7, pc}

08008a34 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
 8008a3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a3c:	f001 fc06 	bl	800a24c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d102      	bne.n	8008a4e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008a48:	2301      	movs	r3, #1
 8008a4a:	60fb      	str	r3, [r7, #12]
 8008a4c:	e001      	b.n	8008a52 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a52:	f001 fc2b 	bl	800a2ac <vPortExitCritical>

	return xReturn;
 8008a56:	68fb      	ldr	r3, [r7, #12]
}
 8008a58:	4618      	mov	r0, r3
 8008a5a:	3710      	adds	r7, #16
 8008a5c:	46bd      	mov	sp, r7
 8008a5e:	bd80      	pop	{r7, pc}

08008a60 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008a60:	b580      	push	{r7, lr}
 8008a62:	b084      	sub	sp, #16
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008a68:	f001 fbf0 	bl	800a24c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a74:	429a      	cmp	r2, r3
 8008a76:	d102      	bne.n	8008a7e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008a78:	2301      	movs	r3, #1
 8008a7a:	60fb      	str	r3, [r7, #12]
 8008a7c:	e001      	b.n	8008a82 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008a7e:	2300      	movs	r3, #0
 8008a80:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008a82:	f001 fc13 	bl	800a2ac <vPortExitCritical>

	return xReturn;
 8008a86:	68fb      	ldr	r3, [r7, #12]
}
 8008a88:	4618      	mov	r0, r3
 8008a8a:	3710      	adds	r7, #16
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	bd80      	pop	{r7, pc}

08008a90 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008a90:	b480      	push	{r7}
 8008a92:	b085      	sub	sp, #20
 8008a94:	af00      	add	r7, sp, #0
 8008a96:	6078      	str	r0, [r7, #4]
 8008a98:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	60fb      	str	r3, [r7, #12]
 8008a9e:	e014      	b.n	8008aca <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008aa0:	4a0e      	ldr	r2, [pc, #56]	@ (8008adc <vQueueAddToRegistry+0x4c>)
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d10b      	bne.n	8008ac4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008aac:	490b      	ldr	r1, [pc, #44]	@ (8008adc <vQueueAddToRegistry+0x4c>)
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	683a      	ldr	r2, [r7, #0]
 8008ab2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008ab6:	4a09      	ldr	r2, [pc, #36]	@ (8008adc <vQueueAddToRegistry+0x4c>)
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	00db      	lsls	r3, r3, #3
 8008abc:	4413      	add	r3, r2
 8008abe:	687a      	ldr	r2, [r7, #4]
 8008ac0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ac2:	e006      	b.n	8008ad2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	60fb      	str	r3, [r7, #12]
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	2b07      	cmp	r3, #7
 8008ace:	d9e7      	bls.n	8008aa0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ad0:	bf00      	nop
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bc80      	pop	{r7}
 8008ada:	4770      	bx	lr
 8008adc:	20000da0 	.word	0x20000da0

08008ae0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	b086      	sub	sp, #24
 8008ae4:	af00      	add	r7, sp, #0
 8008ae6:	60f8      	str	r0, [r7, #12]
 8008ae8:	60b9      	str	r1, [r7, #8]
 8008aea:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008aec:	68fb      	ldr	r3, [r7, #12]
 8008aee:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008af0:	f001 fbac 	bl	800a24c <vPortEnterCritical>
 8008af4:	697b      	ldr	r3, [r7, #20]
 8008af6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008afa:	b25b      	sxtb	r3, r3
 8008afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b00:	d103      	bne.n	8008b0a <vQueueWaitForMessageRestricted+0x2a>
 8008b02:	697b      	ldr	r3, [r7, #20]
 8008b04:	2200      	movs	r2, #0
 8008b06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008b10:	b25b      	sxtb	r3, r3
 8008b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b16:	d103      	bne.n	8008b20 <vQueueWaitForMessageRestricted+0x40>
 8008b18:	697b      	ldr	r3, [r7, #20]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008b20:	f001 fbc4 	bl	800a2ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008b24:	697b      	ldr	r3, [r7, #20]
 8008b26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d106      	bne.n	8008b3a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008b2c:	697b      	ldr	r3, [r7, #20]
 8008b2e:	3324      	adds	r3, #36	@ 0x24
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	68b9      	ldr	r1, [r7, #8]
 8008b34:	4618      	mov	r0, r3
 8008b36:	f000 fc69 	bl	800940c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008b3a:	6978      	ldr	r0, [r7, #20]
 8008b3c:	f7ff ff28 	bl	8008990 <prvUnlockQueue>
	}
 8008b40:	bf00      	nop
 8008b42:	3718      	adds	r7, #24
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b08e      	sub	sp, #56	@ 0x38
 8008b4c:	af04      	add	r7, sp, #16
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
 8008b54:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008b56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d10b      	bne.n	8008b74 <xTaskCreateStatic+0x2c>
	__asm volatile
 8008b5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b60:	f383 8811 	msr	BASEPRI, r3
 8008b64:	f3bf 8f6f 	isb	sy
 8008b68:	f3bf 8f4f 	dsb	sy
 8008b6c:	623b      	str	r3, [r7, #32]
}
 8008b6e:	bf00      	nop
 8008b70:	bf00      	nop
 8008b72:	e7fd      	b.n	8008b70 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d10b      	bne.n	8008b92 <xTaskCreateStatic+0x4a>
	__asm volatile
 8008b7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b7e:	f383 8811 	msr	BASEPRI, r3
 8008b82:	f3bf 8f6f 	isb	sy
 8008b86:	f3bf 8f4f 	dsb	sy
 8008b8a:	61fb      	str	r3, [r7, #28]
}
 8008b8c:	bf00      	nop
 8008b8e:	bf00      	nop
 8008b90:	e7fd      	b.n	8008b8e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008b92:	23a8      	movs	r3, #168	@ 0xa8
 8008b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008b96:	693b      	ldr	r3, [r7, #16]
 8008b98:	2ba8      	cmp	r3, #168	@ 0xa8
 8008b9a:	d00b      	beq.n	8008bb4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8008b9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ba0:	f383 8811 	msr	BASEPRI, r3
 8008ba4:	f3bf 8f6f 	isb	sy
 8008ba8:	f3bf 8f4f 	dsb	sy
 8008bac:	61bb      	str	r3, [r7, #24]
}
 8008bae:	bf00      	nop
 8008bb0:	bf00      	nop
 8008bb2:	e7fd      	b.n	8008bb0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008bb4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008bb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bb8:	2b00      	cmp	r3, #0
 8008bba:	d01e      	beq.n	8008bfa <xTaskCreateStatic+0xb2>
 8008bbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d01b      	beq.n	8008bfa <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008bc2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008bc4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bc8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008bca:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008bcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bce:	2202      	movs	r2, #2
 8008bd0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	9303      	str	r3, [sp, #12]
 8008bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bda:	9302      	str	r3, [sp, #8]
 8008bdc:	f107 0314 	add.w	r3, r7, #20
 8008be0:	9301      	str	r3, [sp, #4]
 8008be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008be4:	9300      	str	r3, [sp, #0]
 8008be6:	683b      	ldr	r3, [r7, #0]
 8008be8:	687a      	ldr	r2, [r7, #4]
 8008bea:	68b9      	ldr	r1, [r7, #8]
 8008bec:	68f8      	ldr	r0, [r7, #12]
 8008bee:	f000 f851 	bl	8008c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008bf2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008bf4:	f000 f8f6 	bl	8008de4 <prvAddNewTaskToReadyList>
 8008bf8:	e001      	b.n	8008bfe <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8008bfe:	697b      	ldr	r3, [r7, #20]
	}
 8008c00:	4618      	mov	r0, r3
 8008c02:	3728      	adds	r7, #40	@ 0x28
 8008c04:	46bd      	mov	sp, r7
 8008c06:	bd80      	pop	{r7, pc}

08008c08 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b08c      	sub	sp, #48	@ 0x30
 8008c0c:	af04      	add	r7, sp, #16
 8008c0e:	60f8      	str	r0, [r7, #12]
 8008c10:	60b9      	str	r1, [r7, #8]
 8008c12:	603b      	str	r3, [r7, #0]
 8008c14:	4613      	mov	r3, r2
 8008c16:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008c18:	88fb      	ldrh	r3, [r7, #6]
 8008c1a:	009b      	lsls	r3, r3, #2
 8008c1c:	4618      	mov	r0, r3
 8008c1e:	f001 fc17 	bl	800a450 <pvPortMalloc>
 8008c22:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8008c24:	697b      	ldr	r3, [r7, #20]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d00e      	beq.n	8008c48 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008c2a:	20a8      	movs	r0, #168	@ 0xa8
 8008c2c:	f001 fc10 	bl	800a450 <pvPortMalloc>
 8008c30:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	d003      	beq.n	8008c40 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008c38:	69fb      	ldr	r3, [r7, #28]
 8008c3a:	697a      	ldr	r2, [r7, #20]
 8008c3c:	631a      	str	r2, [r3, #48]	@ 0x30
 8008c3e:	e005      	b.n	8008c4c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008c40:	6978      	ldr	r0, [r7, #20]
 8008c42:	f001 fcd3 	bl	800a5ec <vPortFree>
 8008c46:	e001      	b.n	8008c4c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008c48:	2300      	movs	r3, #0
 8008c4a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008c4c:	69fb      	ldr	r3, [r7, #28]
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d017      	beq.n	8008c82 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8008c52:	69fb      	ldr	r3, [r7, #28]
 8008c54:	2200      	movs	r2, #0
 8008c56:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008c5a:	88fa      	ldrh	r2, [r7, #6]
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	9303      	str	r3, [sp, #12]
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	9302      	str	r3, [sp, #8]
 8008c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008c66:	9301      	str	r3, [sp, #4]
 8008c68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c6a:	9300      	str	r3, [sp, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
 8008c6e:	68b9      	ldr	r1, [r7, #8]
 8008c70:	68f8      	ldr	r0, [r7, #12]
 8008c72:	f000 f80f 	bl	8008c94 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008c76:	69f8      	ldr	r0, [r7, #28]
 8008c78:	f000 f8b4 	bl	8008de4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	61bb      	str	r3, [r7, #24]
 8008c80:	e002      	b.n	8008c88 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008c82:	f04f 33ff 	mov.w	r3, #4294967295
 8008c86:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008c88:	69bb      	ldr	r3, [r7, #24]
	}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b088      	sub	sp, #32
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
 8008ca0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8008ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ca4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	009b      	lsls	r3, r3, #2
 8008caa:	461a      	mov	r2, r3
 8008cac:	21a5      	movs	r1, #165	@ 0xa5
 8008cae:	f001 fdbb 	bl	800a828 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008cb4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008cbc:	3b01      	subs	r3, #1
 8008cbe:	009b      	lsls	r3, r3, #2
 8008cc0:	4413      	add	r3, r2
 8008cc2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008cc4:	69bb      	ldr	r3, [r7, #24]
 8008cc6:	f023 0307 	bic.w	r3, r3, #7
 8008cca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008ccc:	69bb      	ldr	r3, [r7, #24]
 8008cce:	f003 0307 	and.w	r3, r3, #7
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d00b      	beq.n	8008cee <prvInitialiseNewTask+0x5a>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	617b      	str	r3, [r7, #20]
}
 8008ce8:	bf00      	nop
 8008cea:	bf00      	nop
 8008cec:	e7fd      	b.n	8008cea <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008cee:	68bb      	ldr	r3, [r7, #8]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d01f      	beq.n	8008d34 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	61fb      	str	r3, [r7, #28]
 8008cf8:	e012      	b.n	8008d20 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008cfa:	68ba      	ldr	r2, [r7, #8]
 8008cfc:	69fb      	ldr	r3, [r7, #28]
 8008cfe:	4413      	add	r3, r2
 8008d00:	7819      	ldrb	r1, [r3, #0]
 8008d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	4413      	add	r3, r2
 8008d08:	3334      	adds	r3, #52	@ 0x34
 8008d0a:	460a      	mov	r2, r1
 8008d0c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008d0e:	68ba      	ldr	r2, [r7, #8]
 8008d10:	69fb      	ldr	r3, [r7, #28]
 8008d12:	4413      	add	r3, r2
 8008d14:	781b      	ldrb	r3, [r3, #0]
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d006      	beq.n	8008d28 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	3301      	adds	r3, #1
 8008d1e:	61fb      	str	r3, [r7, #28]
 8008d20:	69fb      	ldr	r3, [r7, #28]
 8008d22:	2b0f      	cmp	r3, #15
 8008d24:	d9e9      	bls.n	8008cfa <prvInitialiseNewTask+0x66>
 8008d26:	e000      	b.n	8008d2a <prvInitialiseNewTask+0x96>
			{
				break;
 8008d28:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d2c:	2200      	movs	r2, #0
 8008d2e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d32:	e003      	b.n	8008d3c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008d34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d36:	2200      	movs	r2, #0
 8008d38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d3e:	2b37      	cmp	r3, #55	@ 0x37
 8008d40:	d901      	bls.n	8008d46 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008d42:	2337      	movs	r3, #55	@ 0x37
 8008d44:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d48:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d4a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008d4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d4e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008d50:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8008d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d54:	2200      	movs	r2, #0
 8008d56:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d5a:	3304      	adds	r3, #4
 8008d5c:	4618      	mov	r0, r3
 8008d5e:	f7ff f96a 	bl	8008036 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008d62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d64:	3318      	adds	r3, #24
 8008d66:	4618      	mov	r0, r3
 8008d68:	f7ff f965 	bl	8008036 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d70:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008d72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008d74:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8008d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008d7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008d80:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008d82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d84:	2200      	movs	r2, #0
 8008d86:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008d8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8008d92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008d94:	3354      	adds	r3, #84	@ 0x54
 8008d96:	224c      	movs	r2, #76	@ 0x4c
 8008d98:	2100      	movs	r1, #0
 8008d9a:	4618      	mov	r0, r3
 8008d9c:	f001 fd44 	bl	800a828 <memset>
 8008da0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da2:	4a0d      	ldr	r2, [pc, #52]	@ (8008dd8 <prvInitialiseNewTask+0x144>)
 8008da4:	659a      	str	r2, [r3, #88]	@ 0x58
 8008da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008da8:	4a0c      	ldr	r2, [pc, #48]	@ (8008ddc <prvInitialiseNewTask+0x148>)
 8008daa:	65da      	str	r2, [r3, #92]	@ 0x5c
 8008dac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dae:	4a0c      	ldr	r2, [pc, #48]	@ (8008de0 <prvInitialiseNewTask+0x14c>)
 8008db0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008db2:	683a      	ldr	r2, [r7, #0]
 8008db4:	68f9      	ldr	r1, [r7, #12]
 8008db6:	69b8      	ldr	r0, [r7, #24]
 8008db8:	f001 f954 	bl	800a064 <pxPortInitialiseStack>
 8008dbc:	4602      	mov	r2, r0
 8008dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008dc0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008dc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d002      	beq.n	8008dce <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008dca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008dce:	bf00      	nop
 8008dd0:	3720      	adds	r7, #32
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	20002bb0 	.word	0x20002bb0
 8008ddc:	20002c18 	.word	0x20002c18
 8008de0:	20002c80 	.word	0x20002c80

08008de4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b082      	sub	sp, #8
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008dec:	f001 fa2e 	bl	800a24c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008df0:	4b2d      	ldr	r3, [pc, #180]	@ (8008ea8 <prvAddNewTaskToReadyList+0xc4>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	3301      	adds	r3, #1
 8008df6:	4a2c      	ldr	r2, [pc, #176]	@ (8008ea8 <prvAddNewTaskToReadyList+0xc4>)
 8008df8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008dfa:	4b2c      	ldr	r3, [pc, #176]	@ (8008eac <prvAddNewTaskToReadyList+0xc8>)
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d109      	bne.n	8008e16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008e02:	4a2a      	ldr	r2, [pc, #168]	@ (8008eac <prvAddNewTaskToReadyList+0xc8>)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008e08:	4b27      	ldr	r3, [pc, #156]	@ (8008ea8 <prvAddNewTaskToReadyList+0xc4>)
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	2b01      	cmp	r3, #1
 8008e0e:	d110      	bne.n	8008e32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008e10:	f000 fc2a 	bl	8009668 <prvInitialiseTaskLists>
 8008e14:	e00d      	b.n	8008e32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008e16:	4b26      	ldr	r3, [pc, #152]	@ (8008eb0 <prvAddNewTaskToReadyList+0xcc>)
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	d109      	bne.n	8008e32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008e1e:	4b23      	ldr	r3, [pc, #140]	@ (8008eac <prvAddNewTaskToReadyList+0xc8>)
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d802      	bhi.n	8008e32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008e2c:	4a1f      	ldr	r2, [pc, #124]	@ (8008eac <prvAddNewTaskToReadyList+0xc8>)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008e32:	4b20      	ldr	r3, [pc, #128]	@ (8008eb4 <prvAddNewTaskToReadyList+0xd0>)
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	3301      	adds	r3, #1
 8008e38:	4a1e      	ldr	r2, [pc, #120]	@ (8008eb4 <prvAddNewTaskToReadyList+0xd0>)
 8008e3a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008e3c:	4b1d      	ldr	r3, [pc, #116]	@ (8008eb4 <prvAddNewTaskToReadyList+0xd0>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e48:	4b1b      	ldr	r3, [pc, #108]	@ (8008eb8 <prvAddNewTaskToReadyList+0xd4>)
 8008e4a:	681b      	ldr	r3, [r3, #0]
 8008e4c:	429a      	cmp	r2, r3
 8008e4e:	d903      	bls.n	8008e58 <prvAddNewTaskToReadyList+0x74>
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e54:	4a18      	ldr	r2, [pc, #96]	@ (8008eb8 <prvAddNewTaskToReadyList+0xd4>)
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e5c:	4613      	mov	r3, r2
 8008e5e:	009b      	lsls	r3, r3, #2
 8008e60:	4413      	add	r3, r2
 8008e62:	009b      	lsls	r3, r3, #2
 8008e64:	4a15      	ldr	r2, [pc, #84]	@ (8008ebc <prvAddNewTaskToReadyList+0xd8>)
 8008e66:	441a      	add	r2, r3
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	3304      	adds	r3, #4
 8008e6c:	4619      	mov	r1, r3
 8008e6e:	4610      	mov	r0, r2
 8008e70:	f7ff f8ed 	bl	800804e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008e74:	f001 fa1a 	bl	800a2ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008e78:	4b0d      	ldr	r3, [pc, #52]	@ (8008eb0 <prvAddNewTaskToReadyList+0xcc>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00e      	beq.n	8008e9e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008e80:	4b0a      	ldr	r3, [pc, #40]	@ (8008eac <prvAddNewTaskToReadyList+0xc8>)
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	d207      	bcs.n	8008e9e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008e8e:	4b0c      	ldr	r3, [pc, #48]	@ (8008ec0 <prvAddNewTaskToReadyList+0xdc>)
 8008e90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008e94:	601a      	str	r2, [r3, #0]
 8008e96:	f3bf 8f4f 	dsb	sy
 8008e9a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008e9e:	bf00      	nop
 8008ea0:	3708      	adds	r7, #8
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	200012b4 	.word	0x200012b4
 8008eac:	20000de0 	.word	0x20000de0
 8008eb0:	200012c0 	.word	0x200012c0
 8008eb4:	200012d0 	.word	0x200012d0
 8008eb8:	200012bc 	.word	0x200012bc
 8008ebc:	20000de4 	.word	0x20000de4
 8008ec0:	e000ed04 	.word	0xe000ed04

08008ec4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8008ec4:	b580      	push	{r7, lr}
 8008ec6:	b084      	sub	sp, #16
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008ecc:	2300      	movs	r3, #0
 8008ece:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	2b00      	cmp	r3, #0
 8008ed4:	d018      	beq.n	8008f08 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008ed6:	4b14      	ldr	r3, [pc, #80]	@ (8008f28 <vTaskDelay+0x64>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d00b      	beq.n	8008ef6 <vTaskDelay+0x32>
	__asm volatile
 8008ede:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ee2:	f383 8811 	msr	BASEPRI, r3
 8008ee6:	f3bf 8f6f 	isb	sy
 8008eea:	f3bf 8f4f 	dsb	sy
 8008eee:	60bb      	str	r3, [r7, #8]
}
 8008ef0:	bf00      	nop
 8008ef2:	bf00      	nop
 8008ef4:	e7fd      	b.n	8008ef2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008ef6:	f000 f88b 	bl	8009010 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008efa:	2100      	movs	r1, #0
 8008efc:	6878      	ldr	r0, [r7, #4]
 8008efe:	f000 fd05 	bl	800990c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008f02:	f000 f893 	bl	800902c <xTaskResumeAll>
 8008f06:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008f08:	68fb      	ldr	r3, [r7, #12]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d107      	bne.n	8008f1e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8008f0e:	4b07      	ldr	r3, [pc, #28]	@ (8008f2c <vTaskDelay+0x68>)
 8008f10:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f14:	601a      	str	r2, [r3, #0]
 8008f16:	f3bf 8f4f 	dsb	sy
 8008f1a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008f1e:	bf00      	nop
 8008f20:	3710      	adds	r7, #16
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}
 8008f26:	bf00      	nop
 8008f28:	200012dc 	.word	0x200012dc
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b08a      	sub	sp, #40	@ 0x28
 8008f34:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8008f36:	2300      	movs	r3, #0
 8008f38:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8008f3e:	463a      	mov	r2, r7
 8008f40:	1d39      	adds	r1, r7, #4
 8008f42:	f107 0308 	add.w	r3, r7, #8
 8008f46:	4618      	mov	r0, r3
 8008f48:	f7ff f824 	bl	8007f94 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	68ba      	ldr	r2, [r7, #8]
 8008f52:	9202      	str	r2, [sp, #8]
 8008f54:	9301      	str	r3, [sp, #4]
 8008f56:	2300      	movs	r3, #0
 8008f58:	9300      	str	r3, [sp, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	460a      	mov	r2, r1
 8008f5e:	4924      	ldr	r1, [pc, #144]	@ (8008ff0 <vTaskStartScheduler+0xc0>)
 8008f60:	4824      	ldr	r0, [pc, #144]	@ (8008ff4 <vTaskStartScheduler+0xc4>)
 8008f62:	f7ff fdf1 	bl	8008b48 <xTaskCreateStatic>
 8008f66:	4603      	mov	r3, r0
 8008f68:	4a23      	ldr	r2, [pc, #140]	@ (8008ff8 <vTaskStartScheduler+0xc8>)
 8008f6a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8008f6c:	4b22      	ldr	r3, [pc, #136]	@ (8008ff8 <vTaskStartScheduler+0xc8>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d002      	beq.n	8008f7a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8008f74:	2301      	movs	r3, #1
 8008f76:	617b      	str	r3, [r7, #20]
 8008f78:	e001      	b.n	8008f7e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8008f7a:	2300      	movs	r3, #0
 8008f7c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8008f7e:	697b      	ldr	r3, [r7, #20]
 8008f80:	2b01      	cmp	r3, #1
 8008f82:	d102      	bne.n	8008f8a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8008f84:	f000 fd16 	bl	80099b4 <xTimerCreateTimerTask>
 8008f88:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008f8a:	697b      	ldr	r3, [r7, #20]
 8008f8c:	2b01      	cmp	r3, #1
 8008f8e:	d11b      	bne.n	8008fc8 <vTaskStartScheduler+0x98>
	__asm volatile
 8008f90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f94:	f383 8811 	msr	BASEPRI, r3
 8008f98:	f3bf 8f6f 	isb	sy
 8008f9c:	f3bf 8f4f 	dsb	sy
 8008fa0:	613b      	str	r3, [r7, #16]
}
 8008fa2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8008fa4:	4b15      	ldr	r3, [pc, #84]	@ (8008ffc <vTaskStartScheduler+0xcc>)
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	3354      	adds	r3, #84	@ 0x54
 8008faa:	4a15      	ldr	r2, [pc, #84]	@ (8009000 <vTaskStartScheduler+0xd0>)
 8008fac:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008fae:	4b15      	ldr	r3, [pc, #84]	@ (8009004 <vTaskStartScheduler+0xd4>)
 8008fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8008fb4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008fb6:	4b14      	ldr	r3, [pc, #80]	@ (8009008 <vTaskStartScheduler+0xd8>)
 8008fb8:	2201      	movs	r2, #1
 8008fba:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008fbc:	4b13      	ldr	r3, [pc, #76]	@ (800900c <vTaskStartScheduler+0xdc>)
 8008fbe:	2200      	movs	r2, #0
 8008fc0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8008fc2:	f001 f8d1 	bl	800a168 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008fc6:	e00f      	b.n	8008fe8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008fc8:	697b      	ldr	r3, [r7, #20]
 8008fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008fce:	d10b      	bne.n	8008fe8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8008fd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fd4:	f383 8811 	msr	BASEPRI, r3
 8008fd8:	f3bf 8f6f 	isb	sy
 8008fdc:	f3bf 8f4f 	dsb	sy
 8008fe0:	60fb      	str	r3, [r7, #12]
}
 8008fe2:	bf00      	nop
 8008fe4:	bf00      	nop
 8008fe6:	e7fd      	b.n	8008fe4 <vTaskStartScheduler+0xb4>
}
 8008fe8:	bf00      	nop
 8008fea:	3718      	adds	r7, #24
 8008fec:	46bd      	mov	sp, r7
 8008fee:	bd80      	pop	{r7, pc}
 8008ff0:	0800ab10 	.word	0x0800ab10
 8008ff4:	08009639 	.word	0x08009639
 8008ff8:	200012d8 	.word	0x200012d8
 8008ffc:	20000de0 	.word	0x20000de0
 8009000:	20000034 	.word	0x20000034
 8009004:	200012d4 	.word	0x200012d4
 8009008:	200012c0 	.word	0x200012c0
 800900c:	200012b8 	.word	0x200012b8

08009010 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009010:	b480      	push	{r7}
 8009012:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009014:	4b04      	ldr	r3, [pc, #16]	@ (8009028 <vTaskSuspendAll+0x18>)
 8009016:	681b      	ldr	r3, [r3, #0]
 8009018:	3301      	adds	r3, #1
 800901a:	4a03      	ldr	r2, [pc, #12]	@ (8009028 <vTaskSuspendAll+0x18>)
 800901c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800901e:	bf00      	nop
 8009020:	46bd      	mov	sp, r7
 8009022:	bc80      	pop	{r7}
 8009024:	4770      	bx	lr
 8009026:	bf00      	nop
 8009028:	200012dc 	.word	0x200012dc

0800902c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800902c:	b580      	push	{r7, lr}
 800902e:	b084      	sub	sp, #16
 8009030:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009032:	2300      	movs	r3, #0
 8009034:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009036:	2300      	movs	r3, #0
 8009038:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800903a:	4b42      	ldr	r3, [pc, #264]	@ (8009144 <xTaskResumeAll+0x118>)
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d10b      	bne.n	800905a <xTaskResumeAll+0x2e>
	__asm volatile
 8009042:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009046:	f383 8811 	msr	BASEPRI, r3
 800904a:	f3bf 8f6f 	isb	sy
 800904e:	f3bf 8f4f 	dsb	sy
 8009052:	603b      	str	r3, [r7, #0]
}
 8009054:	bf00      	nop
 8009056:	bf00      	nop
 8009058:	e7fd      	b.n	8009056 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800905a:	f001 f8f7 	bl	800a24c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800905e:	4b39      	ldr	r3, [pc, #228]	@ (8009144 <xTaskResumeAll+0x118>)
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	3b01      	subs	r3, #1
 8009064:	4a37      	ldr	r2, [pc, #220]	@ (8009144 <xTaskResumeAll+0x118>)
 8009066:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009068:	4b36      	ldr	r3, [pc, #216]	@ (8009144 <xTaskResumeAll+0x118>)
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d162      	bne.n	8009136 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009070:	4b35      	ldr	r3, [pc, #212]	@ (8009148 <xTaskResumeAll+0x11c>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d05e      	beq.n	8009136 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009078:	e02f      	b.n	80090da <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800907a:	4b34      	ldr	r3, [pc, #208]	@ (800914c <xTaskResumeAll+0x120>)
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	3318      	adds	r3, #24
 8009086:	4618      	mov	r0, r3
 8009088:	f7ff f83c 	bl	8008104 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	3304      	adds	r3, #4
 8009090:	4618      	mov	r0, r3
 8009092:	f7ff f837 	bl	8008104 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800909a:	4b2d      	ldr	r3, [pc, #180]	@ (8009150 <xTaskResumeAll+0x124>)
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	429a      	cmp	r2, r3
 80090a0:	d903      	bls.n	80090aa <xTaskResumeAll+0x7e>
 80090a2:	68fb      	ldr	r3, [r7, #12]
 80090a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090a6:	4a2a      	ldr	r2, [pc, #168]	@ (8009150 <xTaskResumeAll+0x124>)
 80090a8:	6013      	str	r3, [r2, #0]
 80090aa:	68fb      	ldr	r3, [r7, #12]
 80090ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ae:	4613      	mov	r3, r2
 80090b0:	009b      	lsls	r3, r3, #2
 80090b2:	4413      	add	r3, r2
 80090b4:	009b      	lsls	r3, r3, #2
 80090b6:	4a27      	ldr	r2, [pc, #156]	@ (8009154 <xTaskResumeAll+0x128>)
 80090b8:	441a      	add	r2, r3
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	3304      	adds	r3, #4
 80090be:	4619      	mov	r1, r3
 80090c0:	4610      	mov	r0, r2
 80090c2:	f7fe ffc4 	bl	800804e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090ca:	4b23      	ldr	r3, [pc, #140]	@ (8009158 <xTaskResumeAll+0x12c>)
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d302      	bcc.n	80090da <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80090d4:	4b21      	ldr	r3, [pc, #132]	@ (800915c <xTaskResumeAll+0x130>)
 80090d6:	2201      	movs	r2, #1
 80090d8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80090da:	4b1c      	ldr	r3, [pc, #112]	@ (800914c <xTaskResumeAll+0x120>)
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d1cb      	bne.n	800907a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	2b00      	cmp	r3, #0
 80090e6:	d001      	beq.n	80090ec <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80090e8:	f000 fb62 	bl	80097b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80090ec:	4b1c      	ldr	r3, [pc, #112]	@ (8009160 <xTaskResumeAll+0x134>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d010      	beq.n	800911a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80090f8:	f000 f844 	bl	8009184 <xTaskIncrementTick>
 80090fc:	4603      	mov	r3, r0
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d002      	beq.n	8009108 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8009102:	4b16      	ldr	r3, [pc, #88]	@ (800915c <xTaskResumeAll+0x130>)
 8009104:	2201      	movs	r2, #1
 8009106:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	3b01      	subs	r3, #1
 800910c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1f1      	bne.n	80090f8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8009114:	4b12      	ldr	r3, [pc, #72]	@ (8009160 <xTaskResumeAll+0x134>)
 8009116:	2200      	movs	r2, #0
 8009118:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800911a:	4b10      	ldr	r3, [pc, #64]	@ (800915c <xTaskResumeAll+0x130>)
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d009      	beq.n	8009136 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009122:	2301      	movs	r3, #1
 8009124:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009126:	4b0f      	ldr	r3, [pc, #60]	@ (8009164 <xTaskResumeAll+0x138>)
 8009128:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800912c:	601a      	str	r2, [r3, #0]
 800912e:	f3bf 8f4f 	dsb	sy
 8009132:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009136:	f001 f8b9 	bl	800a2ac <vPortExitCritical>

	return xAlreadyYielded;
 800913a:	68bb      	ldr	r3, [r7, #8]
}
 800913c:	4618      	mov	r0, r3
 800913e:	3710      	adds	r7, #16
 8009140:	46bd      	mov	sp, r7
 8009142:	bd80      	pop	{r7, pc}
 8009144:	200012dc 	.word	0x200012dc
 8009148:	200012b4 	.word	0x200012b4
 800914c:	20001274 	.word	0x20001274
 8009150:	200012bc 	.word	0x200012bc
 8009154:	20000de4 	.word	0x20000de4
 8009158:	20000de0 	.word	0x20000de0
 800915c:	200012c8 	.word	0x200012c8
 8009160:	200012c4 	.word	0x200012c4
 8009164:	e000ed04 	.word	0xe000ed04

08009168 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009168:	b480      	push	{r7}
 800916a:	b083      	sub	sp, #12
 800916c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800916e:	4b04      	ldr	r3, [pc, #16]	@ (8009180 <xTaskGetTickCount+0x18>)
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009174:	687b      	ldr	r3, [r7, #4]
}
 8009176:	4618      	mov	r0, r3
 8009178:	370c      	adds	r7, #12
 800917a:	46bd      	mov	sp, r7
 800917c:	bc80      	pop	{r7}
 800917e:	4770      	bx	lr
 8009180:	200012b8 	.word	0x200012b8

08009184 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009184:	b580      	push	{r7, lr}
 8009186:	b086      	sub	sp, #24
 8009188:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800918a:	2300      	movs	r3, #0
 800918c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800918e:	4b4f      	ldr	r3, [pc, #316]	@ (80092cc <xTaskIncrementTick+0x148>)
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	2b00      	cmp	r3, #0
 8009194:	f040 8090 	bne.w	80092b8 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009198:	4b4d      	ldr	r3, [pc, #308]	@ (80092d0 <xTaskIncrementTick+0x14c>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	3301      	adds	r3, #1
 800919e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80091a0:	4a4b      	ldr	r2, [pc, #300]	@ (80092d0 <xTaskIncrementTick+0x14c>)
 80091a2:	693b      	ldr	r3, [r7, #16]
 80091a4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d121      	bne.n	80091f0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80091ac:	4b49      	ldr	r3, [pc, #292]	@ (80092d4 <xTaskIncrementTick+0x150>)
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d00b      	beq.n	80091ce <xTaskIncrementTick+0x4a>
	__asm volatile
 80091b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80091ba:	f383 8811 	msr	BASEPRI, r3
 80091be:	f3bf 8f6f 	isb	sy
 80091c2:	f3bf 8f4f 	dsb	sy
 80091c6:	603b      	str	r3, [r7, #0]
}
 80091c8:	bf00      	nop
 80091ca:	bf00      	nop
 80091cc:	e7fd      	b.n	80091ca <xTaskIncrementTick+0x46>
 80091ce:	4b41      	ldr	r3, [pc, #260]	@ (80092d4 <xTaskIncrementTick+0x150>)
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60fb      	str	r3, [r7, #12]
 80091d4:	4b40      	ldr	r3, [pc, #256]	@ (80092d8 <xTaskIncrementTick+0x154>)
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	4a3e      	ldr	r2, [pc, #248]	@ (80092d4 <xTaskIncrementTick+0x150>)
 80091da:	6013      	str	r3, [r2, #0]
 80091dc:	4a3e      	ldr	r2, [pc, #248]	@ (80092d8 <xTaskIncrementTick+0x154>)
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	6013      	str	r3, [r2, #0]
 80091e2:	4b3e      	ldr	r3, [pc, #248]	@ (80092dc <xTaskIncrementTick+0x158>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	3301      	adds	r3, #1
 80091e8:	4a3c      	ldr	r2, [pc, #240]	@ (80092dc <xTaskIncrementTick+0x158>)
 80091ea:	6013      	str	r3, [r2, #0]
 80091ec:	f000 fae0 	bl	80097b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80091f0:	4b3b      	ldr	r3, [pc, #236]	@ (80092e0 <xTaskIncrementTick+0x15c>)
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	693a      	ldr	r2, [r7, #16]
 80091f6:	429a      	cmp	r2, r3
 80091f8:	d349      	bcc.n	800928e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80091fa:	4b36      	ldr	r3, [pc, #216]	@ (80092d4 <xTaskIncrementTick+0x150>)
 80091fc:	681b      	ldr	r3, [r3, #0]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	2b00      	cmp	r3, #0
 8009202:	d104      	bne.n	800920e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009204:	4b36      	ldr	r3, [pc, #216]	@ (80092e0 <xTaskIncrementTick+0x15c>)
 8009206:	f04f 32ff 	mov.w	r2, #4294967295
 800920a:	601a      	str	r2, [r3, #0]
					break;
 800920c:	e03f      	b.n	800928e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800920e:	4b31      	ldr	r3, [pc, #196]	@ (80092d4 <xTaskIncrementTick+0x150>)
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	68db      	ldr	r3, [r3, #12]
 8009214:	68db      	ldr	r3, [r3, #12]
 8009216:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009218:	68bb      	ldr	r3, [r7, #8]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800921e:	693a      	ldr	r2, [r7, #16]
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	429a      	cmp	r2, r3
 8009224:	d203      	bcs.n	800922e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009226:	4a2e      	ldr	r2, [pc, #184]	@ (80092e0 <xTaskIncrementTick+0x15c>)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800922c:	e02f      	b.n	800928e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	3304      	adds	r3, #4
 8009232:	4618      	mov	r0, r3
 8009234:	f7fe ff66 	bl	8008104 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009238:	68bb      	ldr	r3, [r7, #8]
 800923a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800923c:	2b00      	cmp	r3, #0
 800923e:	d004      	beq.n	800924a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	3318      	adds	r3, #24
 8009244:	4618      	mov	r0, r3
 8009246:	f7fe ff5d 	bl	8008104 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800924a:	68bb      	ldr	r3, [r7, #8]
 800924c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800924e:	4b25      	ldr	r3, [pc, #148]	@ (80092e4 <xTaskIncrementTick+0x160>)
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	429a      	cmp	r2, r3
 8009254:	d903      	bls.n	800925e <xTaskIncrementTick+0xda>
 8009256:	68bb      	ldr	r3, [r7, #8]
 8009258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800925a:	4a22      	ldr	r2, [pc, #136]	@ (80092e4 <xTaskIncrementTick+0x160>)
 800925c:	6013      	str	r3, [r2, #0]
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009262:	4613      	mov	r3, r2
 8009264:	009b      	lsls	r3, r3, #2
 8009266:	4413      	add	r3, r2
 8009268:	009b      	lsls	r3, r3, #2
 800926a:	4a1f      	ldr	r2, [pc, #124]	@ (80092e8 <xTaskIncrementTick+0x164>)
 800926c:	441a      	add	r2, r3
 800926e:	68bb      	ldr	r3, [r7, #8]
 8009270:	3304      	adds	r3, #4
 8009272:	4619      	mov	r1, r3
 8009274:	4610      	mov	r0, r2
 8009276:	f7fe feea 	bl	800804e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800927e:	4b1b      	ldr	r3, [pc, #108]	@ (80092ec <xTaskIncrementTick+0x168>)
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009284:	429a      	cmp	r2, r3
 8009286:	d3b8      	bcc.n	80091fa <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009288:	2301      	movs	r3, #1
 800928a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800928c:	e7b5      	b.n	80091fa <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800928e:	4b17      	ldr	r3, [pc, #92]	@ (80092ec <xTaskIncrementTick+0x168>)
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009294:	4914      	ldr	r1, [pc, #80]	@ (80092e8 <xTaskIncrementTick+0x164>)
 8009296:	4613      	mov	r3, r2
 8009298:	009b      	lsls	r3, r3, #2
 800929a:	4413      	add	r3, r2
 800929c:	009b      	lsls	r3, r3, #2
 800929e:	440b      	add	r3, r1
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	2b01      	cmp	r3, #1
 80092a4:	d901      	bls.n	80092aa <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80092a6:	2301      	movs	r3, #1
 80092a8:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80092aa:	4b11      	ldr	r3, [pc, #68]	@ (80092f0 <xTaskIncrementTick+0x16c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d007      	beq.n	80092c2 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80092b2:	2301      	movs	r3, #1
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	e004      	b.n	80092c2 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80092b8:	4b0e      	ldr	r3, [pc, #56]	@ (80092f4 <xTaskIncrementTick+0x170>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	3301      	adds	r3, #1
 80092be:	4a0d      	ldr	r2, [pc, #52]	@ (80092f4 <xTaskIncrementTick+0x170>)
 80092c0:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80092c2:	697b      	ldr	r3, [r7, #20]
}
 80092c4:	4618      	mov	r0, r3
 80092c6:	3718      	adds	r7, #24
 80092c8:	46bd      	mov	sp, r7
 80092ca:	bd80      	pop	{r7, pc}
 80092cc:	200012dc 	.word	0x200012dc
 80092d0:	200012b8 	.word	0x200012b8
 80092d4:	2000126c 	.word	0x2000126c
 80092d8:	20001270 	.word	0x20001270
 80092dc:	200012cc 	.word	0x200012cc
 80092e0:	200012d4 	.word	0x200012d4
 80092e4:	200012bc 	.word	0x200012bc
 80092e8:	20000de4 	.word	0x20000de4
 80092ec:	20000de0 	.word	0x20000de0
 80092f0:	200012c8 	.word	0x200012c8
 80092f4:	200012c4 	.word	0x200012c4

080092f8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80092f8:	b480      	push	{r7}
 80092fa:	b085      	sub	sp, #20
 80092fc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80092fe:	4b2a      	ldr	r3, [pc, #168]	@ (80093a8 <vTaskSwitchContext+0xb0>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	2b00      	cmp	r3, #0
 8009304:	d003      	beq.n	800930e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009306:	4b29      	ldr	r3, [pc, #164]	@ (80093ac <vTaskSwitchContext+0xb4>)
 8009308:	2201      	movs	r2, #1
 800930a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800930c:	e047      	b.n	800939e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800930e:	4b27      	ldr	r3, [pc, #156]	@ (80093ac <vTaskSwitchContext+0xb4>)
 8009310:	2200      	movs	r2, #0
 8009312:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009314:	4b26      	ldr	r3, [pc, #152]	@ (80093b0 <vTaskSwitchContext+0xb8>)
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	60fb      	str	r3, [r7, #12]
 800931a:	e011      	b.n	8009340 <vTaskSwitchContext+0x48>
 800931c:	68fb      	ldr	r3, [r7, #12]
 800931e:	2b00      	cmp	r3, #0
 8009320:	d10b      	bne.n	800933a <vTaskSwitchContext+0x42>
	__asm volatile
 8009322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009326:	f383 8811 	msr	BASEPRI, r3
 800932a:	f3bf 8f6f 	isb	sy
 800932e:	f3bf 8f4f 	dsb	sy
 8009332:	607b      	str	r3, [r7, #4]
}
 8009334:	bf00      	nop
 8009336:	bf00      	nop
 8009338:	e7fd      	b.n	8009336 <vTaskSwitchContext+0x3e>
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	3b01      	subs	r3, #1
 800933e:	60fb      	str	r3, [r7, #12]
 8009340:	491c      	ldr	r1, [pc, #112]	@ (80093b4 <vTaskSwitchContext+0xbc>)
 8009342:	68fa      	ldr	r2, [r7, #12]
 8009344:	4613      	mov	r3, r2
 8009346:	009b      	lsls	r3, r3, #2
 8009348:	4413      	add	r3, r2
 800934a:	009b      	lsls	r3, r3, #2
 800934c:	440b      	add	r3, r1
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	2b00      	cmp	r3, #0
 8009352:	d0e3      	beq.n	800931c <vTaskSwitchContext+0x24>
 8009354:	68fa      	ldr	r2, [r7, #12]
 8009356:	4613      	mov	r3, r2
 8009358:	009b      	lsls	r3, r3, #2
 800935a:	4413      	add	r3, r2
 800935c:	009b      	lsls	r3, r3, #2
 800935e:	4a15      	ldr	r2, [pc, #84]	@ (80093b4 <vTaskSwitchContext+0xbc>)
 8009360:	4413      	add	r3, r2
 8009362:	60bb      	str	r3, [r7, #8]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	685b      	ldr	r3, [r3, #4]
 8009368:	685a      	ldr	r2, [r3, #4]
 800936a:	68bb      	ldr	r3, [r7, #8]
 800936c:	605a      	str	r2, [r3, #4]
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	68bb      	ldr	r3, [r7, #8]
 8009374:	3308      	adds	r3, #8
 8009376:	429a      	cmp	r2, r3
 8009378:	d104      	bne.n	8009384 <vTaskSwitchContext+0x8c>
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	685b      	ldr	r3, [r3, #4]
 800937e:	685a      	ldr	r2, [r3, #4]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	605a      	str	r2, [r3, #4]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	68db      	ldr	r3, [r3, #12]
 800938a:	4a0b      	ldr	r2, [pc, #44]	@ (80093b8 <vTaskSwitchContext+0xc0>)
 800938c:	6013      	str	r3, [r2, #0]
 800938e:	4a08      	ldr	r2, [pc, #32]	@ (80093b0 <vTaskSwitchContext+0xb8>)
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009394:	4b08      	ldr	r3, [pc, #32]	@ (80093b8 <vTaskSwitchContext+0xc0>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3354      	adds	r3, #84	@ 0x54
 800939a:	4a08      	ldr	r2, [pc, #32]	@ (80093bc <vTaskSwitchContext+0xc4>)
 800939c:	6013      	str	r3, [r2, #0]
}
 800939e:	bf00      	nop
 80093a0:	3714      	adds	r7, #20
 80093a2:	46bd      	mov	sp, r7
 80093a4:	bc80      	pop	{r7}
 80093a6:	4770      	bx	lr
 80093a8:	200012dc 	.word	0x200012dc
 80093ac:	200012c8 	.word	0x200012c8
 80093b0:	200012bc 	.word	0x200012bc
 80093b4:	20000de4 	.word	0x20000de4
 80093b8:	20000de0 	.word	0x20000de0
 80093bc:	20000034 	.word	0x20000034

080093c0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80093c0:	b580      	push	{r7, lr}
 80093c2:	b084      	sub	sp, #16
 80093c4:	af00      	add	r7, sp, #0
 80093c6:	6078      	str	r0, [r7, #4]
 80093c8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d10b      	bne.n	80093e8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80093d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093d4:	f383 8811 	msr	BASEPRI, r3
 80093d8:	f3bf 8f6f 	isb	sy
 80093dc:	f3bf 8f4f 	dsb	sy
 80093e0:	60fb      	str	r3, [r7, #12]
}
 80093e2:	bf00      	nop
 80093e4:	bf00      	nop
 80093e6:	e7fd      	b.n	80093e4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80093e8:	4b07      	ldr	r3, [pc, #28]	@ (8009408 <vTaskPlaceOnEventList+0x48>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	3318      	adds	r3, #24
 80093ee:	4619      	mov	r1, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7fe fe4f 	bl	8008094 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80093f6:	2101      	movs	r1, #1
 80093f8:	6838      	ldr	r0, [r7, #0]
 80093fa:	f000 fa87 	bl	800990c <prvAddCurrentTaskToDelayedList>
}
 80093fe:	bf00      	nop
 8009400:	3710      	adds	r7, #16
 8009402:	46bd      	mov	sp, r7
 8009404:	bd80      	pop	{r7, pc}
 8009406:	bf00      	nop
 8009408:	20000de0 	.word	0x20000de0

0800940c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	60f8      	str	r0, [r7, #12]
 8009414:	60b9      	str	r1, [r7, #8]
 8009416:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	2b00      	cmp	r3, #0
 800941c:	d10b      	bne.n	8009436 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800941e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009422:	f383 8811 	msr	BASEPRI, r3
 8009426:	f3bf 8f6f 	isb	sy
 800942a:	f3bf 8f4f 	dsb	sy
 800942e:	617b      	str	r3, [r7, #20]
}
 8009430:	bf00      	nop
 8009432:	bf00      	nop
 8009434:	e7fd      	b.n	8009432 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8009436:	4b0a      	ldr	r3, [pc, #40]	@ (8009460 <vTaskPlaceOnEventListRestricted+0x54>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	3318      	adds	r3, #24
 800943c:	4619      	mov	r1, r3
 800943e:	68f8      	ldr	r0, [r7, #12]
 8009440:	f7fe fe05 	bl	800804e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	2b00      	cmp	r3, #0
 8009448:	d002      	beq.n	8009450 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800944a:	f04f 33ff 	mov.w	r3, #4294967295
 800944e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009450:	6879      	ldr	r1, [r7, #4]
 8009452:	68b8      	ldr	r0, [r7, #8]
 8009454:	f000 fa5a 	bl	800990c <prvAddCurrentTaskToDelayedList>
	}
 8009458:	bf00      	nop
 800945a:	3718      	adds	r7, #24
 800945c:	46bd      	mov	sp, r7
 800945e:	bd80      	pop	{r7, pc}
 8009460:	20000de0 	.word	0x20000de0

08009464 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009464:	b580      	push	{r7, lr}
 8009466:	b086      	sub	sp, #24
 8009468:	af00      	add	r7, sp, #0
 800946a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	68db      	ldr	r3, [r3, #12]
 8009470:	68db      	ldr	r3, [r3, #12]
 8009472:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	2b00      	cmp	r3, #0
 8009478:	d10b      	bne.n	8009492 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800947a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800947e:	f383 8811 	msr	BASEPRI, r3
 8009482:	f3bf 8f6f 	isb	sy
 8009486:	f3bf 8f4f 	dsb	sy
 800948a:	60fb      	str	r3, [r7, #12]
}
 800948c:	bf00      	nop
 800948e:	bf00      	nop
 8009490:	e7fd      	b.n	800948e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009492:	693b      	ldr	r3, [r7, #16]
 8009494:	3318      	adds	r3, #24
 8009496:	4618      	mov	r0, r3
 8009498:	f7fe fe34 	bl	8008104 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800949c:	4b1d      	ldr	r3, [pc, #116]	@ (8009514 <xTaskRemoveFromEventList+0xb0>)
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d11d      	bne.n	80094e0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80094a4:	693b      	ldr	r3, [r7, #16]
 80094a6:	3304      	adds	r3, #4
 80094a8:	4618      	mov	r0, r3
 80094aa:	f7fe fe2b 	bl	8008104 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094b2:	4b19      	ldr	r3, [pc, #100]	@ (8009518 <xTaskRemoveFromEventList+0xb4>)
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	429a      	cmp	r2, r3
 80094b8:	d903      	bls.n	80094c2 <xTaskRemoveFromEventList+0x5e>
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094be:	4a16      	ldr	r2, [pc, #88]	@ (8009518 <xTaskRemoveFromEventList+0xb4>)
 80094c0:	6013      	str	r3, [r2, #0]
 80094c2:	693b      	ldr	r3, [r7, #16]
 80094c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094c6:	4613      	mov	r3, r2
 80094c8:	009b      	lsls	r3, r3, #2
 80094ca:	4413      	add	r3, r2
 80094cc:	009b      	lsls	r3, r3, #2
 80094ce:	4a13      	ldr	r2, [pc, #76]	@ (800951c <xTaskRemoveFromEventList+0xb8>)
 80094d0:	441a      	add	r2, r3
 80094d2:	693b      	ldr	r3, [r7, #16]
 80094d4:	3304      	adds	r3, #4
 80094d6:	4619      	mov	r1, r3
 80094d8:	4610      	mov	r0, r2
 80094da:	f7fe fdb8 	bl	800804e <vListInsertEnd>
 80094de:	e005      	b.n	80094ec <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80094e0:	693b      	ldr	r3, [r7, #16]
 80094e2:	3318      	adds	r3, #24
 80094e4:	4619      	mov	r1, r3
 80094e6:	480e      	ldr	r0, [pc, #56]	@ (8009520 <xTaskRemoveFromEventList+0xbc>)
 80094e8:	f7fe fdb1 	bl	800804e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80094ec:	693b      	ldr	r3, [r7, #16]
 80094ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094f0:	4b0c      	ldr	r3, [pc, #48]	@ (8009524 <xTaskRemoveFromEventList+0xc0>)
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094f6:	429a      	cmp	r2, r3
 80094f8:	d905      	bls.n	8009506 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80094fa:	2301      	movs	r3, #1
 80094fc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80094fe:	4b0a      	ldr	r3, [pc, #40]	@ (8009528 <xTaskRemoveFromEventList+0xc4>)
 8009500:	2201      	movs	r2, #1
 8009502:	601a      	str	r2, [r3, #0]
 8009504:	e001      	b.n	800950a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8009506:	2300      	movs	r3, #0
 8009508:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800950a:	697b      	ldr	r3, [r7, #20]
}
 800950c:	4618      	mov	r0, r3
 800950e:	3718      	adds	r7, #24
 8009510:	46bd      	mov	sp, r7
 8009512:	bd80      	pop	{r7, pc}
 8009514:	200012dc 	.word	0x200012dc
 8009518:	200012bc 	.word	0x200012bc
 800951c:	20000de4 	.word	0x20000de4
 8009520:	20001274 	.word	0x20001274
 8009524:	20000de0 	.word	0x20000de0
 8009528:	200012c8 	.word	0x200012c8

0800952c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800952c:	b480      	push	{r7}
 800952e:	b083      	sub	sp, #12
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009534:	4b06      	ldr	r3, [pc, #24]	@ (8009550 <vTaskInternalSetTimeOutState+0x24>)
 8009536:	681a      	ldr	r2, [r3, #0]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800953c:	4b05      	ldr	r3, [pc, #20]	@ (8009554 <vTaskInternalSetTimeOutState+0x28>)
 800953e:	681a      	ldr	r2, [r3, #0]
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	605a      	str	r2, [r3, #4]
}
 8009544:	bf00      	nop
 8009546:	370c      	adds	r7, #12
 8009548:	46bd      	mov	sp, r7
 800954a:	bc80      	pop	{r7}
 800954c:	4770      	bx	lr
 800954e:	bf00      	nop
 8009550:	200012cc 	.word	0x200012cc
 8009554:	200012b8 	.word	0x200012b8

08009558 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009558:	b580      	push	{r7, lr}
 800955a:	b088      	sub	sp, #32
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
 8009560:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	2b00      	cmp	r3, #0
 8009566:	d10b      	bne.n	8009580 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009568:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800956c:	f383 8811 	msr	BASEPRI, r3
 8009570:	f3bf 8f6f 	isb	sy
 8009574:	f3bf 8f4f 	dsb	sy
 8009578:	613b      	str	r3, [r7, #16]
}
 800957a:	bf00      	nop
 800957c:	bf00      	nop
 800957e:	e7fd      	b.n	800957c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	2b00      	cmp	r3, #0
 8009584:	d10b      	bne.n	800959e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009586:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800958a:	f383 8811 	msr	BASEPRI, r3
 800958e:	f3bf 8f6f 	isb	sy
 8009592:	f3bf 8f4f 	dsb	sy
 8009596:	60fb      	str	r3, [r7, #12]
}
 8009598:	bf00      	nop
 800959a:	bf00      	nop
 800959c:	e7fd      	b.n	800959a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800959e:	f000 fe55 	bl	800a24c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80095a2:	4b1d      	ldr	r3, [pc, #116]	@ (8009618 <xTaskCheckForTimeOut+0xc0>)
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	685b      	ldr	r3, [r3, #4]
 80095ac:	69ba      	ldr	r2, [r7, #24]
 80095ae:	1ad3      	subs	r3, r2, r3
 80095b0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095ba:	d102      	bne.n	80095c2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80095bc:	2300      	movs	r3, #0
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e023      	b.n	800960a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	681a      	ldr	r2, [r3, #0]
 80095c6:	4b15      	ldr	r3, [pc, #84]	@ (800961c <xTaskCheckForTimeOut+0xc4>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	429a      	cmp	r2, r3
 80095cc:	d007      	beq.n	80095de <xTaskCheckForTimeOut+0x86>
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	685b      	ldr	r3, [r3, #4]
 80095d2:	69ba      	ldr	r2, [r7, #24]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	d302      	bcc.n	80095de <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80095d8:	2301      	movs	r3, #1
 80095da:	61fb      	str	r3, [r7, #28]
 80095dc:	e015      	b.n	800960a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80095de:	683b      	ldr	r3, [r7, #0]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	697a      	ldr	r2, [r7, #20]
 80095e4:	429a      	cmp	r2, r3
 80095e6:	d20b      	bcs.n	8009600 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80095e8:	683b      	ldr	r3, [r7, #0]
 80095ea:	681a      	ldr	r2, [r3, #0]
 80095ec:	697b      	ldr	r3, [r7, #20]
 80095ee:	1ad2      	subs	r2, r2, r3
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80095f4:	6878      	ldr	r0, [r7, #4]
 80095f6:	f7ff ff99 	bl	800952c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80095fa:	2300      	movs	r3, #0
 80095fc:	61fb      	str	r3, [r7, #28]
 80095fe:	e004      	b.n	800960a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8009600:	683b      	ldr	r3, [r7, #0]
 8009602:	2200      	movs	r2, #0
 8009604:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8009606:	2301      	movs	r3, #1
 8009608:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800960a:	f000 fe4f 	bl	800a2ac <vPortExitCritical>

	return xReturn;
 800960e:	69fb      	ldr	r3, [r7, #28]
}
 8009610:	4618      	mov	r0, r3
 8009612:	3720      	adds	r7, #32
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}
 8009618:	200012b8 	.word	0x200012b8
 800961c:	200012cc 	.word	0x200012cc

08009620 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009620:	b480      	push	{r7}
 8009622:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8009624:	4b03      	ldr	r3, [pc, #12]	@ (8009634 <vTaskMissedYield+0x14>)
 8009626:	2201      	movs	r2, #1
 8009628:	601a      	str	r2, [r3, #0]
}
 800962a:	bf00      	nop
 800962c:	46bd      	mov	sp, r7
 800962e:	bc80      	pop	{r7}
 8009630:	4770      	bx	lr
 8009632:	bf00      	nop
 8009634:	200012c8 	.word	0x200012c8

08009638 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009638:	b580      	push	{r7, lr}
 800963a:	b082      	sub	sp, #8
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009640:	f000 f852 	bl	80096e8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009644:	4b06      	ldr	r3, [pc, #24]	@ (8009660 <prvIdleTask+0x28>)
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	2b01      	cmp	r3, #1
 800964a:	d9f9      	bls.n	8009640 <prvIdleTask+0x8>
			{
				taskYIELD();
 800964c:	4b05      	ldr	r3, [pc, #20]	@ (8009664 <prvIdleTask+0x2c>)
 800964e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009652:	601a      	str	r2, [r3, #0]
 8009654:	f3bf 8f4f 	dsb	sy
 8009658:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800965c:	e7f0      	b.n	8009640 <prvIdleTask+0x8>
 800965e:	bf00      	nop
 8009660:	20000de4 	.word	0x20000de4
 8009664:	e000ed04 	.word	0xe000ed04

08009668 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009668:	b580      	push	{r7, lr}
 800966a:	b082      	sub	sp, #8
 800966c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800966e:	2300      	movs	r3, #0
 8009670:	607b      	str	r3, [r7, #4]
 8009672:	e00c      	b.n	800968e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009674:	687a      	ldr	r2, [r7, #4]
 8009676:	4613      	mov	r3, r2
 8009678:	009b      	lsls	r3, r3, #2
 800967a:	4413      	add	r3, r2
 800967c:	009b      	lsls	r3, r3, #2
 800967e:	4a12      	ldr	r2, [pc, #72]	@ (80096c8 <prvInitialiseTaskLists+0x60>)
 8009680:	4413      	add	r3, r2
 8009682:	4618      	mov	r0, r3
 8009684:	f7fe fcb8 	bl	8007ff8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	3301      	adds	r3, #1
 800968c:	607b      	str	r3, [r7, #4]
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	2b37      	cmp	r3, #55	@ 0x37
 8009692:	d9ef      	bls.n	8009674 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009694:	480d      	ldr	r0, [pc, #52]	@ (80096cc <prvInitialiseTaskLists+0x64>)
 8009696:	f7fe fcaf 	bl	8007ff8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800969a:	480d      	ldr	r0, [pc, #52]	@ (80096d0 <prvInitialiseTaskLists+0x68>)
 800969c:	f7fe fcac 	bl	8007ff8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80096a0:	480c      	ldr	r0, [pc, #48]	@ (80096d4 <prvInitialiseTaskLists+0x6c>)
 80096a2:	f7fe fca9 	bl	8007ff8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80096a6:	480c      	ldr	r0, [pc, #48]	@ (80096d8 <prvInitialiseTaskLists+0x70>)
 80096a8:	f7fe fca6 	bl	8007ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80096ac:	480b      	ldr	r0, [pc, #44]	@ (80096dc <prvInitialiseTaskLists+0x74>)
 80096ae:	f7fe fca3 	bl	8007ff8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80096b2:	4b0b      	ldr	r3, [pc, #44]	@ (80096e0 <prvInitialiseTaskLists+0x78>)
 80096b4:	4a05      	ldr	r2, [pc, #20]	@ (80096cc <prvInitialiseTaskLists+0x64>)
 80096b6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80096b8:	4b0a      	ldr	r3, [pc, #40]	@ (80096e4 <prvInitialiseTaskLists+0x7c>)
 80096ba:	4a05      	ldr	r2, [pc, #20]	@ (80096d0 <prvInitialiseTaskLists+0x68>)
 80096bc:	601a      	str	r2, [r3, #0]
}
 80096be:	bf00      	nop
 80096c0:	3708      	adds	r7, #8
 80096c2:	46bd      	mov	sp, r7
 80096c4:	bd80      	pop	{r7, pc}
 80096c6:	bf00      	nop
 80096c8:	20000de4 	.word	0x20000de4
 80096cc:	20001244 	.word	0x20001244
 80096d0:	20001258 	.word	0x20001258
 80096d4:	20001274 	.word	0x20001274
 80096d8:	20001288 	.word	0x20001288
 80096dc:	200012a0 	.word	0x200012a0
 80096e0:	2000126c 	.word	0x2000126c
 80096e4:	20001270 	.word	0x20001270

080096e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80096e8:	b580      	push	{r7, lr}
 80096ea:	b082      	sub	sp, #8
 80096ec:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80096ee:	e019      	b.n	8009724 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80096f0:	f000 fdac 	bl	800a24c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096f4:	4b10      	ldr	r3, [pc, #64]	@ (8009738 <prvCheckTasksWaitingTermination+0x50>)
 80096f6:	68db      	ldr	r3, [r3, #12]
 80096f8:	68db      	ldr	r3, [r3, #12]
 80096fa:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	3304      	adds	r3, #4
 8009700:	4618      	mov	r0, r3
 8009702:	f7fe fcff 	bl	8008104 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009706:	4b0d      	ldr	r3, [pc, #52]	@ (800973c <prvCheckTasksWaitingTermination+0x54>)
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	3b01      	subs	r3, #1
 800970c:	4a0b      	ldr	r2, [pc, #44]	@ (800973c <prvCheckTasksWaitingTermination+0x54>)
 800970e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009710:	4b0b      	ldr	r3, [pc, #44]	@ (8009740 <prvCheckTasksWaitingTermination+0x58>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	3b01      	subs	r3, #1
 8009716:	4a0a      	ldr	r2, [pc, #40]	@ (8009740 <prvCheckTasksWaitingTermination+0x58>)
 8009718:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800971a:	f000 fdc7 	bl	800a2ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800971e:	6878      	ldr	r0, [r7, #4]
 8009720:	f000 f810 	bl	8009744 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009724:	4b06      	ldr	r3, [pc, #24]	@ (8009740 <prvCheckTasksWaitingTermination+0x58>)
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2b00      	cmp	r3, #0
 800972a:	d1e1      	bne.n	80096f0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800972c:	bf00      	nop
 800972e:	bf00      	nop
 8009730:	3708      	adds	r7, #8
 8009732:	46bd      	mov	sp, r7
 8009734:	bd80      	pop	{r7, pc}
 8009736:	bf00      	nop
 8009738:	20001288 	.word	0x20001288
 800973c:	200012b4 	.word	0x200012b4
 8009740:	2000129c 	.word	0x2000129c

08009744 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b084      	sub	sp, #16
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	3354      	adds	r3, #84	@ 0x54
 8009750:	4618      	mov	r0, r3
 8009752:	f001 f871 	bl	800a838 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800975c:	2b00      	cmp	r3, #0
 800975e:	d108      	bne.n	8009772 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009764:	4618      	mov	r0, r3
 8009766:	f000 ff41 	bl	800a5ec <vPortFree>
				vPortFree( pxTCB );
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 ff3e 	bl	800a5ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009770:	e019      	b.n	80097a6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8009778:	2b01      	cmp	r3, #1
 800977a:	d103      	bne.n	8009784 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800977c:	6878      	ldr	r0, [r7, #4]
 800977e:	f000 ff35 	bl	800a5ec <vPortFree>
	}
 8009782:	e010      	b.n	80097a6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800978a:	2b02      	cmp	r3, #2
 800978c:	d00b      	beq.n	80097a6 <prvDeleteTCB+0x62>
	__asm volatile
 800978e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009792:	f383 8811 	msr	BASEPRI, r3
 8009796:	f3bf 8f6f 	isb	sy
 800979a:	f3bf 8f4f 	dsb	sy
 800979e:	60fb      	str	r3, [r7, #12]
}
 80097a0:	bf00      	nop
 80097a2:	bf00      	nop
 80097a4:	e7fd      	b.n	80097a2 <prvDeleteTCB+0x5e>
	}
 80097a6:	bf00      	nop
 80097a8:	3710      	adds	r7, #16
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}
	...

080097b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80097b0:	b480      	push	{r7}
 80097b2:	b083      	sub	sp, #12
 80097b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80097b6:	4b0c      	ldr	r3, [pc, #48]	@ (80097e8 <prvResetNextTaskUnblockTime+0x38>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d104      	bne.n	80097ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80097c0:	4b0a      	ldr	r3, [pc, #40]	@ (80097ec <prvResetNextTaskUnblockTime+0x3c>)
 80097c2:	f04f 32ff 	mov.w	r2, #4294967295
 80097c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80097c8:	e008      	b.n	80097dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80097ca:	4b07      	ldr	r3, [pc, #28]	@ (80097e8 <prvResetNextTaskUnblockTime+0x38>)
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	68db      	ldr	r3, [r3, #12]
 80097d0:	68db      	ldr	r3, [r3, #12]
 80097d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	685b      	ldr	r3, [r3, #4]
 80097d8:	4a04      	ldr	r2, [pc, #16]	@ (80097ec <prvResetNextTaskUnblockTime+0x3c>)
 80097da:	6013      	str	r3, [r2, #0]
}
 80097dc:	bf00      	nop
 80097de:	370c      	adds	r7, #12
 80097e0:	46bd      	mov	sp, r7
 80097e2:	bc80      	pop	{r7}
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	2000126c 	.word	0x2000126c
 80097ec:	200012d4 	.word	0x200012d4

080097f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80097f0:	b480      	push	{r7}
 80097f2:	b083      	sub	sp, #12
 80097f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80097f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009824 <xTaskGetSchedulerState+0x34>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d102      	bne.n	8009804 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80097fe:	2301      	movs	r3, #1
 8009800:	607b      	str	r3, [r7, #4]
 8009802:	e008      	b.n	8009816 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009804:	4b08      	ldr	r3, [pc, #32]	@ (8009828 <xTaskGetSchedulerState+0x38>)
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	2b00      	cmp	r3, #0
 800980a:	d102      	bne.n	8009812 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800980c:	2302      	movs	r3, #2
 800980e:	607b      	str	r3, [r7, #4]
 8009810:	e001      	b.n	8009816 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009812:	2300      	movs	r3, #0
 8009814:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009816:	687b      	ldr	r3, [r7, #4]
	}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	bc80      	pop	{r7}
 8009820:	4770      	bx	lr
 8009822:	bf00      	nop
 8009824:	200012c0 	.word	0x200012c0
 8009828:	200012dc 	.word	0x200012dc

0800982c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800982c:	b580      	push	{r7, lr}
 800982e:	b086      	sub	sp, #24
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009838:	2300      	movs	r3, #0
 800983a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d058      	beq.n	80098f4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009842:	4b2f      	ldr	r3, [pc, #188]	@ (8009900 <xTaskPriorityDisinherit+0xd4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	693a      	ldr	r2, [r7, #16]
 8009848:	429a      	cmp	r2, r3
 800984a:	d00b      	beq.n	8009864 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800984c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009850:	f383 8811 	msr	BASEPRI, r3
 8009854:	f3bf 8f6f 	isb	sy
 8009858:	f3bf 8f4f 	dsb	sy
 800985c:	60fb      	str	r3, [r7, #12]
}
 800985e:	bf00      	nop
 8009860:	bf00      	nop
 8009862:	e7fd      	b.n	8009860 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009868:	2b00      	cmp	r3, #0
 800986a:	d10b      	bne.n	8009884 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800986c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009870:	f383 8811 	msr	BASEPRI, r3
 8009874:	f3bf 8f6f 	isb	sy
 8009878:	f3bf 8f4f 	dsb	sy
 800987c:	60bb      	str	r3, [r7, #8]
}
 800987e:	bf00      	nop
 8009880:	bf00      	nop
 8009882:	e7fd      	b.n	8009880 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009884:	693b      	ldr	r3, [r7, #16]
 8009886:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009888:	1e5a      	subs	r2, r3, #1
 800988a:	693b      	ldr	r3, [r7, #16]
 800988c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800988e:	693b      	ldr	r3, [r7, #16]
 8009890:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009896:	429a      	cmp	r2, r3
 8009898:	d02c      	beq.n	80098f4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800989a:	693b      	ldr	r3, [r7, #16]
 800989c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d128      	bne.n	80098f4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	3304      	adds	r3, #4
 80098a6:	4618      	mov	r0, r3
 80098a8:	f7fe fc2c 	bl	8008104 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80098b0:	693b      	ldr	r3, [r7, #16]
 80098b2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098b4:	693b      	ldr	r3, [r7, #16]
 80098b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80098c0:	693b      	ldr	r3, [r7, #16]
 80098c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098c4:	4b0f      	ldr	r3, [pc, #60]	@ (8009904 <xTaskPriorityDisinherit+0xd8>)
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	429a      	cmp	r2, r3
 80098ca:	d903      	bls.n	80098d4 <xTaskPriorityDisinherit+0xa8>
 80098cc:	693b      	ldr	r3, [r7, #16]
 80098ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098d0:	4a0c      	ldr	r2, [pc, #48]	@ (8009904 <xTaskPriorityDisinherit+0xd8>)
 80098d2:	6013      	str	r3, [r2, #0]
 80098d4:	693b      	ldr	r3, [r7, #16]
 80098d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	009b      	lsls	r3, r3, #2
 80098e0:	4a09      	ldr	r2, [pc, #36]	@ (8009908 <xTaskPriorityDisinherit+0xdc>)
 80098e2:	441a      	add	r2, r3
 80098e4:	693b      	ldr	r3, [r7, #16]
 80098e6:	3304      	adds	r3, #4
 80098e8:	4619      	mov	r1, r3
 80098ea:	4610      	mov	r0, r2
 80098ec:	f7fe fbaf 	bl	800804e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80098f0:	2301      	movs	r3, #1
 80098f2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80098f4:	697b      	ldr	r3, [r7, #20]
	}
 80098f6:	4618      	mov	r0, r3
 80098f8:	3718      	adds	r7, #24
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	bf00      	nop
 8009900:	20000de0 	.word	0x20000de0
 8009904:	200012bc 	.word	0x200012bc
 8009908:	20000de4 	.word	0x20000de4

0800990c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009916:	4b21      	ldr	r3, [pc, #132]	@ (800999c <prvAddCurrentTaskToDelayedList+0x90>)
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800991c:	4b20      	ldr	r3, [pc, #128]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800991e:	681b      	ldr	r3, [r3, #0]
 8009920:	3304      	adds	r3, #4
 8009922:	4618      	mov	r0, r3
 8009924:	f7fe fbee 	bl	8008104 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800992e:	d10a      	bne.n	8009946 <prvAddCurrentTaskToDelayedList+0x3a>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	2b00      	cmp	r3, #0
 8009934:	d007      	beq.n	8009946 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009936:	4b1a      	ldr	r3, [pc, #104]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	3304      	adds	r3, #4
 800993c:	4619      	mov	r1, r3
 800993e:	4819      	ldr	r0, [pc, #100]	@ (80099a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009940:	f7fe fb85 	bl	800804e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009944:	e026      	b.n	8009994 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009946:	68fa      	ldr	r2, [r7, #12]
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	4413      	add	r3, r2
 800994c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800994e:	4b14      	ldr	r3, [pc, #80]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	68ba      	ldr	r2, [r7, #8]
 8009954:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009956:	68ba      	ldr	r2, [r7, #8]
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	429a      	cmp	r2, r3
 800995c:	d209      	bcs.n	8009972 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800995e:	4b12      	ldr	r3, [pc, #72]	@ (80099a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	4b0f      	ldr	r3, [pc, #60]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	3304      	adds	r3, #4
 8009968:	4619      	mov	r1, r3
 800996a:	4610      	mov	r0, r2
 800996c:	f7fe fb92 	bl	8008094 <vListInsert>
}
 8009970:	e010      	b.n	8009994 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009972:	4b0e      	ldr	r3, [pc, #56]	@ (80099ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8009974:	681a      	ldr	r2, [r3, #0]
 8009976:	4b0a      	ldr	r3, [pc, #40]	@ (80099a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009978:	681b      	ldr	r3, [r3, #0]
 800997a:	3304      	adds	r3, #4
 800997c:	4619      	mov	r1, r3
 800997e:	4610      	mov	r0, r2
 8009980:	f7fe fb88 	bl	8008094 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009984:	4b0a      	ldr	r3, [pc, #40]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68ba      	ldr	r2, [r7, #8]
 800998a:	429a      	cmp	r2, r3
 800998c:	d202      	bcs.n	8009994 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800998e:	4a08      	ldr	r2, [pc, #32]	@ (80099b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	6013      	str	r3, [r2, #0]
}
 8009994:	bf00      	nop
 8009996:	3710      	adds	r7, #16
 8009998:	46bd      	mov	sp, r7
 800999a:	bd80      	pop	{r7, pc}
 800999c:	200012b8 	.word	0x200012b8
 80099a0:	20000de0 	.word	0x20000de0
 80099a4:	200012a0 	.word	0x200012a0
 80099a8:	20001270 	.word	0x20001270
 80099ac:	2000126c 	.word	0x2000126c
 80099b0:	200012d4 	.word	0x200012d4

080099b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b08a      	sub	sp, #40	@ 0x28
 80099b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80099ba:	2300      	movs	r3, #0
 80099bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80099be:	f000 fb11 	bl	8009fe4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80099c2:	4b1d      	ldr	r3, [pc, #116]	@ (8009a38 <xTimerCreateTimerTask+0x84>)
 80099c4:	681b      	ldr	r3, [r3, #0]
 80099c6:	2b00      	cmp	r3, #0
 80099c8:	d021      	beq.n	8009a0e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80099ca:	2300      	movs	r3, #0
 80099cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80099ce:	2300      	movs	r3, #0
 80099d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80099d2:	1d3a      	adds	r2, r7, #4
 80099d4:	f107 0108 	add.w	r1, r7, #8
 80099d8:	f107 030c 	add.w	r3, r7, #12
 80099dc:	4618      	mov	r0, r3
 80099de:	f7fe faf1 	bl	8007fc4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80099e2:	6879      	ldr	r1, [r7, #4]
 80099e4:	68bb      	ldr	r3, [r7, #8]
 80099e6:	68fa      	ldr	r2, [r7, #12]
 80099e8:	9202      	str	r2, [sp, #8]
 80099ea:	9301      	str	r3, [sp, #4]
 80099ec:	2302      	movs	r3, #2
 80099ee:	9300      	str	r3, [sp, #0]
 80099f0:	2300      	movs	r3, #0
 80099f2:	460a      	mov	r2, r1
 80099f4:	4911      	ldr	r1, [pc, #68]	@ (8009a3c <xTimerCreateTimerTask+0x88>)
 80099f6:	4812      	ldr	r0, [pc, #72]	@ (8009a40 <xTimerCreateTimerTask+0x8c>)
 80099f8:	f7ff f8a6 	bl	8008b48 <xTaskCreateStatic>
 80099fc:	4603      	mov	r3, r0
 80099fe:	4a11      	ldr	r2, [pc, #68]	@ (8009a44 <xTimerCreateTimerTask+0x90>)
 8009a00:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009a02:	4b10      	ldr	r3, [pc, #64]	@ (8009a44 <xTimerCreateTimerTask+0x90>)
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	2b00      	cmp	r3, #0
 8009a08:	d001      	beq.n	8009a0e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009a0e:	697b      	ldr	r3, [r7, #20]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10b      	bne.n	8009a2c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	613b      	str	r3, [r7, #16]
}
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	e7fd      	b.n	8009a28 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009a2c:	697b      	ldr	r3, [r7, #20]
}
 8009a2e:	4618      	mov	r0, r3
 8009a30:	3718      	adds	r7, #24
 8009a32:	46bd      	mov	sp, r7
 8009a34:	bd80      	pop	{r7, pc}
 8009a36:	bf00      	nop
 8009a38:	20001310 	.word	0x20001310
 8009a3c:	0800ab18 	.word	0x0800ab18
 8009a40:	08009b81 	.word	0x08009b81
 8009a44:	20001314 	.word	0x20001314

08009a48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b08a      	sub	sp, #40	@ 0x28
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	60f8      	str	r0, [r7, #12]
 8009a50:	60b9      	str	r1, [r7, #8]
 8009a52:	607a      	str	r2, [r7, #4]
 8009a54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009a56:	2300      	movs	r3, #0
 8009a58:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d10b      	bne.n	8009a78 <xTimerGenericCommand+0x30>
	__asm volatile
 8009a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a64:	f383 8811 	msr	BASEPRI, r3
 8009a68:	f3bf 8f6f 	isb	sy
 8009a6c:	f3bf 8f4f 	dsb	sy
 8009a70:	623b      	str	r3, [r7, #32]
}
 8009a72:	bf00      	nop
 8009a74:	bf00      	nop
 8009a76:	e7fd      	b.n	8009a74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009a78:	4b19      	ldr	r3, [pc, #100]	@ (8009ae0 <xTimerGenericCommand+0x98>)
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	2b00      	cmp	r3, #0
 8009a7e:	d02a      	beq.n	8009ad6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b05      	cmp	r3, #5
 8009a90:	dc18      	bgt.n	8009ac4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009a92:	f7ff fead 	bl	80097f0 <xTaskGetSchedulerState>
 8009a96:	4603      	mov	r3, r0
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d109      	bne.n	8009ab0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009a9c:	4b10      	ldr	r3, [pc, #64]	@ (8009ae0 <xTimerGenericCommand+0x98>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	f107 0110 	add.w	r1, r7, #16
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009aa8:	f7fe fc60 	bl	800836c <xQueueGenericSend>
 8009aac:	6278      	str	r0, [r7, #36]	@ 0x24
 8009aae:	e012      	b.n	8009ad6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009ab0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ae0 <xTimerGenericCommand+0x98>)
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	f107 0110 	add.w	r1, r7, #16
 8009ab8:	2300      	movs	r3, #0
 8009aba:	2200      	movs	r2, #0
 8009abc:	f7fe fc56 	bl	800836c <xQueueGenericSend>
 8009ac0:	6278      	str	r0, [r7, #36]	@ 0x24
 8009ac2:	e008      	b.n	8009ad6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009ac4:	4b06      	ldr	r3, [pc, #24]	@ (8009ae0 <xTimerGenericCommand+0x98>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	f107 0110 	add.w	r1, r7, #16
 8009acc:	2300      	movs	r3, #0
 8009ace:	683a      	ldr	r2, [r7, #0]
 8009ad0:	f7fe fd4e 	bl	8008570 <xQueueGenericSendFromISR>
 8009ad4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009ad8:	4618      	mov	r0, r3
 8009ada:	3728      	adds	r7, #40	@ 0x28
 8009adc:	46bd      	mov	sp, r7
 8009ade:	bd80      	pop	{r7, pc}
 8009ae0:	20001310 	.word	0x20001310

08009ae4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b088      	sub	sp, #32
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	6078      	str	r0, [r7, #4]
 8009aec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009aee:	4b23      	ldr	r3, [pc, #140]	@ (8009b7c <prvProcessExpiredTimer+0x98>)
 8009af0:	681b      	ldr	r3, [r3, #0]
 8009af2:	68db      	ldr	r3, [r3, #12]
 8009af4:	68db      	ldr	r3, [r3, #12]
 8009af6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009af8:	697b      	ldr	r3, [r7, #20]
 8009afa:	3304      	adds	r3, #4
 8009afc:	4618      	mov	r0, r3
 8009afe:	f7fe fb01 	bl	8008104 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009b02:	697b      	ldr	r3, [r7, #20]
 8009b04:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b08:	f003 0304 	and.w	r3, r3, #4
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d023      	beq.n	8009b58 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009b10:	697b      	ldr	r3, [r7, #20]
 8009b12:	699a      	ldr	r2, [r3, #24]
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	18d1      	adds	r1, r2, r3
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	683a      	ldr	r2, [r7, #0]
 8009b1c:	6978      	ldr	r0, [r7, #20]
 8009b1e:	f000 f8d3 	bl	8009cc8 <prvInsertTimerInActiveList>
 8009b22:	4603      	mov	r3, r0
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d020      	beq.n	8009b6a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009b28:	2300      	movs	r3, #0
 8009b2a:	9300      	str	r3, [sp, #0]
 8009b2c:	2300      	movs	r3, #0
 8009b2e:	687a      	ldr	r2, [r7, #4]
 8009b30:	2100      	movs	r1, #0
 8009b32:	6978      	ldr	r0, [r7, #20]
 8009b34:	f7ff ff88 	bl	8009a48 <xTimerGenericCommand>
 8009b38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009b3a:	693b      	ldr	r3, [r7, #16]
 8009b3c:	2b00      	cmp	r3, #0
 8009b3e:	d114      	bne.n	8009b6a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009b40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b44:	f383 8811 	msr	BASEPRI, r3
 8009b48:	f3bf 8f6f 	isb	sy
 8009b4c:	f3bf 8f4f 	dsb	sy
 8009b50:	60fb      	str	r3, [r7, #12]
}
 8009b52:	bf00      	nop
 8009b54:	bf00      	nop
 8009b56:	e7fd      	b.n	8009b54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009b58:	697b      	ldr	r3, [r7, #20]
 8009b5a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009b5e:	f023 0301 	bic.w	r3, r3, #1
 8009b62:	b2da      	uxtb	r2, r3
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009b6a:	697b      	ldr	r3, [r7, #20]
 8009b6c:	6a1b      	ldr	r3, [r3, #32]
 8009b6e:	6978      	ldr	r0, [r7, #20]
 8009b70:	4798      	blx	r3
}
 8009b72:	bf00      	nop
 8009b74:	3718      	adds	r7, #24
 8009b76:	46bd      	mov	sp, r7
 8009b78:	bd80      	pop	{r7, pc}
 8009b7a:	bf00      	nop
 8009b7c:	20001308 	.word	0x20001308

08009b80 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009b80:	b580      	push	{r7, lr}
 8009b82:	b084      	sub	sp, #16
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009b88:	f107 0308 	add.w	r3, r7, #8
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f000 f859 	bl	8009c44 <prvGetNextExpireTime>
 8009b92:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	4619      	mov	r1, r3
 8009b98:	68f8      	ldr	r0, [r7, #12]
 8009b9a:	f000 f805 	bl	8009ba8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009b9e:	f000 f8d5 	bl	8009d4c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009ba2:	bf00      	nop
 8009ba4:	e7f0      	b.n	8009b88 <prvTimerTask+0x8>
	...

08009ba8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b084      	sub	sp, #16
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	6078      	str	r0, [r7, #4]
 8009bb0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009bb2:	f7ff fa2d 	bl	8009010 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009bb6:	f107 0308 	add.w	r3, r7, #8
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 f864 	bl	8009c88 <prvSampleTimeNow>
 8009bc0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009bc2:	68bb      	ldr	r3, [r7, #8]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d130      	bne.n	8009c2a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d10a      	bne.n	8009be4 <prvProcessTimerOrBlockTask+0x3c>
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	429a      	cmp	r2, r3
 8009bd4:	d806      	bhi.n	8009be4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009bd6:	f7ff fa29 	bl	800902c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009bda:	68f9      	ldr	r1, [r7, #12]
 8009bdc:	6878      	ldr	r0, [r7, #4]
 8009bde:	f7ff ff81 	bl	8009ae4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009be2:	e024      	b.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009be4:	683b      	ldr	r3, [r7, #0]
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d008      	beq.n	8009bfc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009bea:	4b13      	ldr	r3, [pc, #76]	@ (8009c38 <prvProcessTimerOrBlockTask+0x90>)
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d101      	bne.n	8009bf8 <prvProcessTimerOrBlockTask+0x50>
 8009bf4:	2301      	movs	r3, #1
 8009bf6:	e000      	b.n	8009bfa <prvProcessTimerOrBlockTask+0x52>
 8009bf8:	2300      	movs	r3, #0
 8009bfa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009bfc:	4b0f      	ldr	r3, [pc, #60]	@ (8009c3c <prvProcessTimerOrBlockTask+0x94>)
 8009bfe:	6818      	ldr	r0, [r3, #0]
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	68fb      	ldr	r3, [r7, #12]
 8009c04:	1ad3      	subs	r3, r2, r3
 8009c06:	683a      	ldr	r2, [r7, #0]
 8009c08:	4619      	mov	r1, r3
 8009c0a:	f7fe ff69 	bl	8008ae0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009c0e:	f7ff fa0d 	bl	800902c <xTaskResumeAll>
 8009c12:	4603      	mov	r3, r0
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d10a      	bne.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009c18:	4b09      	ldr	r3, [pc, #36]	@ (8009c40 <prvProcessTimerOrBlockTask+0x98>)
 8009c1a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009c1e:	601a      	str	r2, [r3, #0]
 8009c20:	f3bf 8f4f 	dsb	sy
 8009c24:	f3bf 8f6f 	isb	sy
}
 8009c28:	e001      	b.n	8009c2e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009c2a:	f7ff f9ff 	bl	800902c <xTaskResumeAll>
}
 8009c2e:	bf00      	nop
 8009c30:	3710      	adds	r7, #16
 8009c32:	46bd      	mov	sp, r7
 8009c34:	bd80      	pop	{r7, pc}
 8009c36:	bf00      	nop
 8009c38:	2000130c 	.word	0x2000130c
 8009c3c:	20001310 	.word	0x20001310
 8009c40:	e000ed04 	.word	0xe000ed04

08009c44 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009c44:	b480      	push	{r7}
 8009c46:	b085      	sub	sp, #20
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8009c4c:	4b0d      	ldr	r3, [pc, #52]	@ (8009c84 <prvGetNextExpireTime+0x40>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <prvGetNextExpireTime+0x16>
 8009c56:	2201      	movs	r2, #1
 8009c58:	e000      	b.n	8009c5c <prvGetNextExpireTime+0x18>
 8009c5a:	2200      	movs	r2, #0
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	2b00      	cmp	r3, #0
 8009c66:	d105      	bne.n	8009c74 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009c68:	4b06      	ldr	r3, [pc, #24]	@ (8009c84 <prvGetNextExpireTime+0x40>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	68db      	ldr	r3, [r3, #12]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	60fb      	str	r3, [r7, #12]
 8009c72:	e001      	b.n	8009c78 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8009c74:	2300      	movs	r3, #0
 8009c76:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8009c78:	68fb      	ldr	r3, [r7, #12]
}
 8009c7a:	4618      	mov	r0, r3
 8009c7c:	3714      	adds	r7, #20
 8009c7e:	46bd      	mov	sp, r7
 8009c80:	bc80      	pop	{r7}
 8009c82:	4770      	bx	lr
 8009c84:	20001308 	.word	0x20001308

08009c88 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b084      	sub	sp, #16
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8009c90:	f7ff fa6a 	bl	8009168 <xTaskGetTickCount>
 8009c94:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8009c96:	4b0b      	ldr	r3, [pc, #44]	@ (8009cc4 <prvSampleTimeNow+0x3c>)
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	68fa      	ldr	r2, [r7, #12]
 8009c9c:	429a      	cmp	r2, r3
 8009c9e:	d205      	bcs.n	8009cac <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8009ca0:	f000 f93a 	bl	8009f18 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	2201      	movs	r2, #1
 8009ca8:	601a      	str	r2, [r3, #0]
 8009caa:	e002      	b.n	8009cb2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	2200      	movs	r2, #0
 8009cb0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8009cb2:	4a04      	ldr	r2, [pc, #16]	@ (8009cc4 <prvSampleTimeNow+0x3c>)
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8009cb8:	68fb      	ldr	r3, [r7, #12]
}
 8009cba:	4618      	mov	r0, r3
 8009cbc:	3710      	adds	r7, #16
 8009cbe:	46bd      	mov	sp, r7
 8009cc0:	bd80      	pop	{r7, pc}
 8009cc2:	bf00      	nop
 8009cc4:	20001318 	.word	0x20001318

08009cc8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8009cc8:	b580      	push	{r7, lr}
 8009cca:	b086      	sub	sp, #24
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
 8009cd4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8009cd6:	2300      	movs	r3, #0
 8009cd8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8009ce6:	68ba      	ldr	r2, [r7, #8]
 8009ce8:	687b      	ldr	r3, [r7, #4]
 8009cea:	429a      	cmp	r2, r3
 8009cec:	d812      	bhi.n	8009d14 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009cee:	687a      	ldr	r2, [r7, #4]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	1ad2      	subs	r2, r2, r3
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	699b      	ldr	r3, [r3, #24]
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d302      	bcc.n	8009d02 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8009cfc:	2301      	movs	r3, #1
 8009cfe:	617b      	str	r3, [r7, #20]
 8009d00:	e01b      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8009d02:	4b10      	ldr	r3, [pc, #64]	@ (8009d44 <prvInsertTimerInActiveList+0x7c>)
 8009d04:	681a      	ldr	r2, [r3, #0]
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	3304      	adds	r3, #4
 8009d0a:	4619      	mov	r1, r3
 8009d0c:	4610      	mov	r0, r2
 8009d0e:	f7fe f9c1 	bl	8008094 <vListInsert>
 8009d12:	e012      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8009d14:	687a      	ldr	r2, [r7, #4]
 8009d16:	683b      	ldr	r3, [r7, #0]
 8009d18:	429a      	cmp	r2, r3
 8009d1a:	d206      	bcs.n	8009d2a <prvInsertTimerInActiveList+0x62>
 8009d1c:	68ba      	ldr	r2, [r7, #8]
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	429a      	cmp	r2, r3
 8009d22:	d302      	bcc.n	8009d2a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8009d24:	2301      	movs	r3, #1
 8009d26:	617b      	str	r3, [r7, #20]
 8009d28:	e007      	b.n	8009d3a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009d2a:	4b07      	ldr	r3, [pc, #28]	@ (8009d48 <prvInsertTimerInActiveList+0x80>)
 8009d2c:	681a      	ldr	r2, [r3, #0]
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	3304      	adds	r3, #4
 8009d32:	4619      	mov	r1, r3
 8009d34:	4610      	mov	r0, r2
 8009d36:	f7fe f9ad 	bl	8008094 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8009d3a:	697b      	ldr	r3, [r7, #20]
}
 8009d3c:	4618      	mov	r0, r3
 8009d3e:	3718      	adds	r7, #24
 8009d40:	46bd      	mov	sp, r7
 8009d42:	bd80      	pop	{r7, pc}
 8009d44:	2000130c 	.word	0x2000130c
 8009d48:	20001308 	.word	0x20001308

08009d4c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b08e      	sub	sp, #56	@ 0x38
 8009d50:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009d52:	e0ce      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	da19      	bge.n	8009d8e <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8009d5a:	1d3b      	adds	r3, r7, #4
 8009d5c:	3304      	adds	r3, #4
 8009d5e:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8009d60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10b      	bne.n	8009d7e <prvProcessReceivedCommands+0x32>
	__asm volatile
 8009d66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6a:	f383 8811 	msr	BASEPRI, r3
 8009d6e:	f3bf 8f6f 	isb	sy
 8009d72:	f3bf 8f4f 	dsb	sy
 8009d76:	61fb      	str	r3, [r7, #28]
}
 8009d78:	bf00      	nop
 8009d7a:	bf00      	nop
 8009d7c:	e7fd      	b.n	8009d7a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8009d7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d84:	6850      	ldr	r0, [r2, #4]
 8009d86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009d88:	6892      	ldr	r2, [r2, #8]
 8009d8a:	4611      	mov	r1, r2
 8009d8c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	f2c0 80ae 	blt.w	8009ef2 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8009d9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009d9c:	695b      	ldr	r3, [r3, #20]
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d004      	beq.n	8009dac <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009da4:	3304      	adds	r3, #4
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7fe f9ac 	bl	8008104 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009dac:	463b      	mov	r3, r7
 8009dae:	4618      	mov	r0, r3
 8009db0:	f7ff ff6a 	bl	8009c88 <prvSampleTimeNow>
 8009db4:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	f200 8097 	bhi.w	8009eec <prvProcessReceivedCommands+0x1a0>
 8009dbe:	a201      	add	r2, pc, #4	@ (adr r2, 8009dc4 <prvProcessReceivedCommands+0x78>)
 8009dc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009dc4:	08009ded 	.word	0x08009ded
 8009dc8:	08009ded 	.word	0x08009ded
 8009dcc:	08009ded 	.word	0x08009ded
 8009dd0:	08009e63 	.word	0x08009e63
 8009dd4:	08009e77 	.word	0x08009e77
 8009dd8:	08009ec3 	.word	0x08009ec3
 8009ddc:	08009ded 	.word	0x08009ded
 8009de0:	08009ded 	.word	0x08009ded
 8009de4:	08009e63 	.word	0x08009e63
 8009de8:	08009e77 	.word	0x08009e77
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dee:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009df2:	f043 0301 	orr.w	r3, r3, #1
 8009df6:	b2da      	uxtb	r2, r3
 8009df8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009dfa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8009dfe:	68ba      	ldr	r2, [r7, #8]
 8009e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e02:	699b      	ldr	r3, [r3, #24]
 8009e04:	18d1      	adds	r1, r2, r3
 8009e06:	68bb      	ldr	r3, [r7, #8]
 8009e08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e0c:	f7ff ff5c 	bl	8009cc8 <prvInsertTimerInActiveList>
 8009e10:	4603      	mov	r3, r0
 8009e12:	2b00      	cmp	r3, #0
 8009e14:	d06c      	beq.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e18:	6a1b      	ldr	r3, [r3, #32]
 8009e1a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e1c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e24:	f003 0304 	and.w	r3, r3, #4
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d061      	beq.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	441a      	add	r2, r3
 8009e34:	2300      	movs	r3, #0
 8009e36:	9300      	str	r3, [sp, #0]
 8009e38:	2300      	movs	r3, #0
 8009e3a:	2100      	movs	r1, #0
 8009e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009e3e:	f7ff fe03 	bl	8009a48 <xTimerGenericCommand>
 8009e42:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8009e44:	6a3b      	ldr	r3, [r7, #32]
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d152      	bne.n	8009ef0 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8009e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e4e:	f383 8811 	msr	BASEPRI, r3
 8009e52:	f3bf 8f6f 	isb	sy
 8009e56:	f3bf 8f4f 	dsb	sy
 8009e5a:	61bb      	str	r3, [r7, #24]
}
 8009e5c:	bf00      	nop
 8009e5e:	bf00      	nop
 8009e60:	e7fd      	b.n	8009e5e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009e62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e68:	f023 0301 	bic.w	r3, r3, #1
 8009e6c:	b2da      	uxtb	r2, r3
 8009e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e70:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009e74:	e03d      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8009e76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009e7c:	f043 0301 	orr.w	r3, r3, #1
 8009e80:	b2da      	uxtb	r2, r3
 8009e82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e84:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8009e88:	68ba      	ldr	r2, [r7, #8]
 8009e8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e8c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8009e8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009e90:	699b      	ldr	r3, [r3, #24]
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d10b      	bne.n	8009eae <prvProcessReceivedCommands+0x162>
	__asm volatile
 8009e96:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e9a:	f383 8811 	msr	BASEPRI, r3
 8009e9e:	f3bf 8f6f 	isb	sy
 8009ea2:	f3bf 8f4f 	dsb	sy
 8009ea6:	617b      	str	r3, [r7, #20]
}
 8009ea8:	bf00      	nop
 8009eaa:	bf00      	nop
 8009eac:	e7fd      	b.n	8009eaa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8009eae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eb0:	699a      	ldr	r2, [r3, #24]
 8009eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb4:	18d1      	adds	r1, r2, r3
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009eba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ebc:	f7ff ff04 	bl	8009cc8 <prvInsertTimerInActiveList>
					break;
 8009ec0:	e017      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8009ec2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ec4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ec8:	f003 0302 	and.w	r3, r3, #2
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d103      	bne.n	8009ed8 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8009ed0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009ed2:	f000 fb8b 	bl	800a5ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8009ed6:	e00c      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009eda:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ede:	f023 0301 	bic.w	r3, r3, #1
 8009ee2:	b2da      	uxtb	r2, r3
 8009ee4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ee6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8009eea:	e002      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8009eec:	bf00      	nop
 8009eee:	e000      	b.n	8009ef2 <prvProcessReceivedCommands+0x1a6>
					break;
 8009ef0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8009ef2:	4b08      	ldr	r3, [pc, #32]	@ (8009f14 <prvProcessReceivedCommands+0x1c8>)
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	1d39      	adds	r1, r7, #4
 8009ef8:	2200      	movs	r2, #0
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7fe fbd6 	bl	80086ac <xQueueReceive>
 8009f00:	4603      	mov	r3, r0
 8009f02:	2b00      	cmp	r3, #0
 8009f04:	f47f af26 	bne.w	8009d54 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop
 8009f0c:	3730      	adds	r7, #48	@ 0x30
 8009f0e:	46bd      	mov	sp, r7
 8009f10:	bd80      	pop	{r7, pc}
 8009f12:	bf00      	nop
 8009f14:	20001310 	.word	0x20001310

08009f18 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b088      	sub	sp, #32
 8009f1c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009f1e:	e049      	b.n	8009fb4 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8009f20:	4b2e      	ldr	r3, [pc, #184]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	68db      	ldr	r3, [r3, #12]
 8009f26:	681b      	ldr	r3, [r3, #0]
 8009f28:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f2a:	4b2c      	ldr	r3, [pc, #176]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	68db      	ldr	r3, [r3, #12]
 8009f30:	68db      	ldr	r3, [r3, #12]
 8009f32:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	3304      	adds	r3, #4
 8009f38:	4618      	mov	r0, r3
 8009f3a:	f7fe f8e3 	bl	8008104 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f3e:	68fb      	ldr	r3, [r7, #12]
 8009f40:	6a1b      	ldr	r3, [r3, #32]
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f4c:	f003 0304 	and.w	r3, r3, #4
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d02f      	beq.n	8009fb4 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	699b      	ldr	r3, [r3, #24]
 8009f58:	693a      	ldr	r2, [r7, #16]
 8009f5a:	4413      	add	r3, r2
 8009f5c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8009f5e:	68ba      	ldr	r2, [r7, #8]
 8009f60:	693b      	ldr	r3, [r7, #16]
 8009f62:	429a      	cmp	r2, r3
 8009f64:	d90e      	bls.n	8009f84 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	68ba      	ldr	r2, [r7, #8]
 8009f6a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	68fa      	ldr	r2, [r7, #12]
 8009f70:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8009f72:	4b1a      	ldr	r3, [pc, #104]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009f74:	681a      	ldr	r2, [r3, #0]
 8009f76:	68fb      	ldr	r3, [r7, #12]
 8009f78:	3304      	adds	r3, #4
 8009f7a:	4619      	mov	r1, r3
 8009f7c:	4610      	mov	r0, r2
 8009f7e:	f7fe f889 	bl	8008094 <vListInsert>
 8009f82:	e017      	b.n	8009fb4 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009f84:	2300      	movs	r3, #0
 8009f86:	9300      	str	r3, [sp, #0]
 8009f88:	2300      	movs	r3, #0
 8009f8a:	693a      	ldr	r2, [r7, #16]
 8009f8c:	2100      	movs	r1, #0
 8009f8e:	68f8      	ldr	r0, [r7, #12]
 8009f90:	f7ff fd5a 	bl	8009a48 <xTimerGenericCommand>
 8009f94:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d10b      	bne.n	8009fb4 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8009f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fa0:	f383 8811 	msr	BASEPRI, r3
 8009fa4:	f3bf 8f6f 	isb	sy
 8009fa8:	f3bf 8f4f 	dsb	sy
 8009fac:	603b      	str	r3, [r7, #0]
}
 8009fae:	bf00      	nop
 8009fb0:	bf00      	nop
 8009fb2:	e7fd      	b.n	8009fb0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8009fb4:	4b09      	ldr	r3, [pc, #36]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d1b0      	bne.n	8009f20 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8009fbe:	4b07      	ldr	r3, [pc, #28]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8009fc4:	4b06      	ldr	r3, [pc, #24]	@ (8009fe0 <prvSwitchTimerLists+0xc8>)
 8009fc6:	681b      	ldr	r3, [r3, #0]
 8009fc8:	4a04      	ldr	r2, [pc, #16]	@ (8009fdc <prvSwitchTimerLists+0xc4>)
 8009fca:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8009fcc:	4a04      	ldr	r2, [pc, #16]	@ (8009fe0 <prvSwitchTimerLists+0xc8>)
 8009fce:	697b      	ldr	r3, [r7, #20]
 8009fd0:	6013      	str	r3, [r2, #0]
}
 8009fd2:	bf00      	nop
 8009fd4:	3718      	adds	r7, #24
 8009fd6:	46bd      	mov	sp, r7
 8009fd8:	bd80      	pop	{r7, pc}
 8009fda:	bf00      	nop
 8009fdc:	20001308 	.word	0x20001308
 8009fe0:	2000130c 	.word	0x2000130c

08009fe4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8009fe4:	b580      	push	{r7, lr}
 8009fe6:	b082      	sub	sp, #8
 8009fe8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8009fea:	f000 f92f 	bl	800a24c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8009fee:	4b15      	ldr	r3, [pc, #84]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	2b00      	cmp	r3, #0
 8009ff4:	d120      	bne.n	800a038 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8009ff6:	4814      	ldr	r0, [pc, #80]	@ (800a048 <prvCheckForValidListAndQueue+0x64>)
 8009ff8:	f7fd fffe 	bl	8007ff8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8009ffc:	4813      	ldr	r0, [pc, #76]	@ (800a04c <prvCheckForValidListAndQueue+0x68>)
 8009ffe:	f7fd fffb 	bl	8007ff8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a002:	4b13      	ldr	r3, [pc, #76]	@ (800a050 <prvCheckForValidListAndQueue+0x6c>)
 800a004:	4a10      	ldr	r2, [pc, #64]	@ (800a048 <prvCheckForValidListAndQueue+0x64>)
 800a006:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a008:	4b12      	ldr	r3, [pc, #72]	@ (800a054 <prvCheckForValidListAndQueue+0x70>)
 800a00a:	4a10      	ldr	r2, [pc, #64]	@ (800a04c <prvCheckForValidListAndQueue+0x68>)
 800a00c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a00e:	2300      	movs	r3, #0
 800a010:	9300      	str	r3, [sp, #0]
 800a012:	4b11      	ldr	r3, [pc, #68]	@ (800a058 <prvCheckForValidListAndQueue+0x74>)
 800a014:	4a11      	ldr	r2, [pc, #68]	@ (800a05c <prvCheckForValidListAndQueue+0x78>)
 800a016:	2110      	movs	r1, #16
 800a018:	200a      	movs	r0, #10
 800a01a:	f7fe f907 	bl	800822c <xQueueGenericCreateStatic>
 800a01e:	4603      	mov	r3, r0
 800a020:	4a08      	ldr	r2, [pc, #32]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a022:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a024:	4b07      	ldr	r3, [pc, #28]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a026:	681b      	ldr	r3, [r3, #0]
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d005      	beq.n	800a038 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a02c:	4b05      	ldr	r3, [pc, #20]	@ (800a044 <prvCheckForValidListAndQueue+0x60>)
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	490b      	ldr	r1, [pc, #44]	@ (800a060 <prvCheckForValidListAndQueue+0x7c>)
 800a032:	4618      	mov	r0, r3
 800a034:	f7fe fd2c 	bl	8008a90 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a038:	f000 f938 	bl	800a2ac <vPortExitCritical>
}
 800a03c:	bf00      	nop
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	20001310 	.word	0x20001310
 800a048:	200012e0 	.word	0x200012e0
 800a04c:	200012f4 	.word	0x200012f4
 800a050:	20001308 	.word	0x20001308
 800a054:	2000130c 	.word	0x2000130c
 800a058:	200013bc 	.word	0x200013bc
 800a05c:	2000131c 	.word	0x2000131c
 800a060:	0800ab20 	.word	0x0800ab20

0800a064 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a064:	b480      	push	{r7}
 800a066:	b085      	sub	sp, #20
 800a068:	af00      	add	r7, sp, #0
 800a06a:	60f8      	str	r0, [r7, #12]
 800a06c:	60b9      	str	r1, [r7, #8]
 800a06e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	3b04      	subs	r3, #4
 800a074:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a07c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	3b04      	subs	r3, #4
 800a082:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	f023 0201 	bic.w	r2, r3, #1
 800a08a:	68fb      	ldr	r3, [r7, #12]
 800a08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	3b04      	subs	r3, #4
 800a092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a094:	4a08      	ldr	r2, [pc, #32]	@ (800a0b8 <pxPortInitialiseStack+0x54>)
 800a096:	68fb      	ldr	r3, [r7, #12]
 800a098:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	3b14      	subs	r3, #20
 800a09e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a0a0:	687a      	ldr	r2, [r7, #4]
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a0a6:	68fb      	ldr	r3, [r7, #12]
 800a0a8:	3b20      	subs	r3, #32
 800a0aa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
}
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	3714      	adds	r7, #20
 800a0b2:	46bd      	mov	sp, r7
 800a0b4:	bc80      	pop	{r7}
 800a0b6:	4770      	bx	lr
 800a0b8:	0800a0bd 	.word	0x0800a0bd

0800a0bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a0bc:	b480      	push	{r7}
 800a0be:	b085      	sub	sp, #20
 800a0c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800a0c2:	2300      	movs	r3, #0
 800a0c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a0c6:	4b12      	ldr	r3, [pc, #72]	@ (800a110 <prvTaskExitError+0x54>)
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a0ce:	d00b      	beq.n	800a0e8 <prvTaskExitError+0x2c>
	__asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	60fb      	str	r3, [r7, #12]
}
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <prvTaskExitError+0x28>
	__asm volatile
 800a0e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0ec:	f383 8811 	msr	BASEPRI, r3
 800a0f0:	f3bf 8f6f 	isb	sy
 800a0f4:	f3bf 8f4f 	dsb	sy
 800a0f8:	60bb      	str	r3, [r7, #8]
}
 800a0fa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a0fc:	bf00      	nop
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0fc      	beq.n	800a0fe <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a104:	bf00      	nop
 800a106:	bf00      	nop
 800a108:	3714      	adds	r7, #20
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bc80      	pop	{r7}
 800a10e:	4770      	bx	lr
 800a110:	20000030 	.word	0x20000030
	...

0800a120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a120:	4b07      	ldr	r3, [pc, #28]	@ (800a140 <pxCurrentTCBConst2>)
 800a122:	6819      	ldr	r1, [r3, #0]
 800a124:	6808      	ldr	r0, [r1, #0]
 800a126:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a12a:	f380 8809 	msr	PSP, r0
 800a12e:	f3bf 8f6f 	isb	sy
 800a132:	f04f 0000 	mov.w	r0, #0
 800a136:	f380 8811 	msr	BASEPRI, r0
 800a13a:	f04e 0e0d 	orr.w	lr, lr, #13
 800a13e:	4770      	bx	lr

0800a140 <pxCurrentTCBConst2>:
 800a140:	20000de0 	.word	0x20000de0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a144:	bf00      	nop
 800a146:	bf00      	nop

0800a148 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 800a148:	4806      	ldr	r0, [pc, #24]	@ (800a164 <prvPortStartFirstTask+0x1c>)
 800a14a:	6800      	ldr	r0, [r0, #0]
 800a14c:	6800      	ldr	r0, [r0, #0]
 800a14e:	f380 8808 	msr	MSP, r0
 800a152:	b662      	cpsie	i
 800a154:	b661      	cpsie	f
 800a156:	f3bf 8f4f 	dsb	sy
 800a15a:	f3bf 8f6f 	isb	sy
 800a15e:	df00      	svc	0
 800a160:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a162:	bf00      	nop
 800a164:	e000ed08 	.word	0xe000ed08

0800a168 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a168:	b580      	push	{r7, lr}
 800a16a:	b084      	sub	sp, #16
 800a16c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a16e:	4b32      	ldr	r3, [pc, #200]	@ (800a238 <xPortStartScheduler+0xd0>)
 800a170:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	781b      	ldrb	r3, [r3, #0]
 800a176:	b2db      	uxtb	r3, r3
 800a178:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a17a:	68fb      	ldr	r3, [r7, #12]
 800a17c:	22ff      	movs	r2, #255	@ 0xff
 800a17e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	781b      	ldrb	r3, [r3, #0]
 800a184:	b2db      	uxtb	r3, r3
 800a186:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a188:	78fb      	ldrb	r3, [r7, #3]
 800a18a:	b2db      	uxtb	r3, r3
 800a18c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a190:	b2da      	uxtb	r2, r3
 800a192:	4b2a      	ldr	r3, [pc, #168]	@ (800a23c <xPortStartScheduler+0xd4>)
 800a194:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a196:	4b2a      	ldr	r3, [pc, #168]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a198:	2207      	movs	r2, #7
 800a19a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a19c:	e009      	b.n	800a1b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800a19e:	4b28      	ldr	r3, [pc, #160]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	3b01      	subs	r3, #1
 800a1a4:	4a26      	ldr	r2, [pc, #152]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a1a8:	78fb      	ldrb	r3, [r7, #3]
 800a1aa:	b2db      	uxtb	r3, r3
 800a1ac:	005b      	lsls	r3, r3, #1
 800a1ae:	b2db      	uxtb	r3, r3
 800a1b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a1b2:	78fb      	ldrb	r3, [r7, #3]
 800a1b4:	b2db      	uxtb	r3, r3
 800a1b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a1ba:	2b80      	cmp	r3, #128	@ 0x80
 800a1bc:	d0ef      	beq.n	800a19e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a1be:	4b20      	ldr	r3, [pc, #128]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	f1c3 0307 	rsb	r3, r3, #7
 800a1c6:	2b04      	cmp	r3, #4
 800a1c8:	d00b      	beq.n	800a1e2 <xPortStartScheduler+0x7a>
	__asm volatile
 800a1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1ce:	f383 8811 	msr	BASEPRI, r3
 800a1d2:	f3bf 8f6f 	isb	sy
 800a1d6:	f3bf 8f4f 	dsb	sy
 800a1da:	60bb      	str	r3, [r7, #8]
}
 800a1dc:	bf00      	nop
 800a1de:	bf00      	nop
 800a1e0:	e7fd      	b.n	800a1de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a1e2:	4b17      	ldr	r3, [pc, #92]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	021b      	lsls	r3, r3, #8
 800a1e8:	4a15      	ldr	r2, [pc, #84]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a1ec:	4b14      	ldr	r3, [pc, #80]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1ee:	681b      	ldr	r3, [r3, #0]
 800a1f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a1f4:	4a12      	ldr	r2, [pc, #72]	@ (800a240 <xPortStartScheduler+0xd8>)
 800a1f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	b2da      	uxtb	r2, r3
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a200:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <xPortStartScheduler+0xdc>)
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a0f      	ldr	r2, [pc, #60]	@ (800a244 <xPortStartScheduler+0xdc>)
 800a206:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a20a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a20c:	4b0d      	ldr	r3, [pc, #52]	@ (800a244 <xPortStartScheduler+0xdc>)
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	4a0c      	ldr	r2, [pc, #48]	@ (800a244 <xPortStartScheduler+0xdc>)
 800a212:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a216:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a218:	f000 f8b8 	bl	800a38c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a21c:	4b0a      	ldr	r3, [pc, #40]	@ (800a248 <xPortStartScheduler+0xe0>)
 800a21e:	2200      	movs	r2, #0
 800a220:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a222:	f7ff ff91 	bl	800a148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a226:	f7ff f867 	bl	80092f8 <vTaskSwitchContext>
	prvTaskExitError();
 800a22a:	f7ff ff47 	bl	800a0bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a22e:	2300      	movs	r3, #0
}
 800a230:	4618      	mov	r0, r3
 800a232:	3710      	adds	r7, #16
 800a234:	46bd      	mov	sp, r7
 800a236:	bd80      	pop	{r7, pc}
 800a238:	e000e400 	.word	0xe000e400
 800a23c:	2000140c 	.word	0x2000140c
 800a240:	20001410 	.word	0x20001410
 800a244:	e000ed20 	.word	0xe000ed20
 800a248:	20000030 	.word	0x20000030

0800a24c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
	__asm volatile
 800a252:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a256:	f383 8811 	msr	BASEPRI, r3
 800a25a:	f3bf 8f6f 	isb	sy
 800a25e:	f3bf 8f4f 	dsb	sy
 800a262:	607b      	str	r3, [r7, #4]
}
 800a264:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a266:	4b0f      	ldr	r3, [pc, #60]	@ (800a2a4 <vPortEnterCritical+0x58>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	4a0d      	ldr	r2, [pc, #52]	@ (800a2a4 <vPortEnterCritical+0x58>)
 800a26e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a270:	4b0c      	ldr	r3, [pc, #48]	@ (800a2a4 <vPortEnterCritical+0x58>)
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	2b01      	cmp	r3, #1
 800a276:	d110      	bne.n	800a29a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a278:	4b0b      	ldr	r3, [pc, #44]	@ (800a2a8 <vPortEnterCritical+0x5c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	b2db      	uxtb	r3, r3
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d00b      	beq.n	800a29a <vPortEnterCritical+0x4e>
	__asm volatile
 800a282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a286:	f383 8811 	msr	BASEPRI, r3
 800a28a:	f3bf 8f6f 	isb	sy
 800a28e:	f3bf 8f4f 	dsb	sy
 800a292:	603b      	str	r3, [r7, #0]
}
 800a294:	bf00      	nop
 800a296:	bf00      	nop
 800a298:	e7fd      	b.n	800a296 <vPortEnterCritical+0x4a>
	}
}
 800a29a:	bf00      	nop
 800a29c:	370c      	adds	r7, #12
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bc80      	pop	{r7}
 800a2a2:	4770      	bx	lr
 800a2a4:	20000030 	.word	0x20000030
 800a2a8:	e000ed04 	.word	0xe000ed04

0800a2ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b083      	sub	sp, #12
 800a2b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a2b2:	4b12      	ldr	r3, [pc, #72]	@ (800a2fc <vPortExitCritical+0x50>)
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	2b00      	cmp	r3, #0
 800a2b8:	d10b      	bne.n	800a2d2 <vPortExitCritical+0x26>
	__asm volatile
 800a2ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2be:	f383 8811 	msr	BASEPRI, r3
 800a2c2:	f3bf 8f6f 	isb	sy
 800a2c6:	f3bf 8f4f 	dsb	sy
 800a2ca:	607b      	str	r3, [r7, #4]
}
 800a2cc:	bf00      	nop
 800a2ce:	bf00      	nop
 800a2d0:	e7fd      	b.n	800a2ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a2d2:	4b0a      	ldr	r3, [pc, #40]	@ (800a2fc <vPortExitCritical+0x50>)
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	3b01      	subs	r3, #1
 800a2d8:	4a08      	ldr	r2, [pc, #32]	@ (800a2fc <vPortExitCritical+0x50>)
 800a2da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a2dc:	4b07      	ldr	r3, [pc, #28]	@ (800a2fc <vPortExitCritical+0x50>)
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	2b00      	cmp	r3, #0
 800a2e2:	d105      	bne.n	800a2f0 <vPortExitCritical+0x44>
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a2e8:	683b      	ldr	r3, [r7, #0]
 800a2ea:	f383 8811 	msr	BASEPRI, r3
}
 800a2ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a2f0:	bf00      	nop
 800a2f2:	370c      	adds	r7, #12
 800a2f4:	46bd      	mov	sp, r7
 800a2f6:	bc80      	pop	{r7}
 800a2f8:	4770      	bx	lr
 800a2fa:	bf00      	nop
 800a2fc:	20000030 	.word	0x20000030

0800a300 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a300:	f3ef 8009 	mrs	r0, PSP
 800a304:	f3bf 8f6f 	isb	sy
 800a308:	4b0d      	ldr	r3, [pc, #52]	@ (800a340 <pxCurrentTCBConst>)
 800a30a:	681a      	ldr	r2, [r3, #0]
 800a30c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a310:	6010      	str	r0, [r2, #0]
 800a312:	e92d 4008 	stmdb	sp!, {r3, lr}
 800a316:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a31a:	f380 8811 	msr	BASEPRI, r0
 800a31e:	f7fe ffeb 	bl	80092f8 <vTaskSwitchContext>
 800a322:	f04f 0000 	mov.w	r0, #0
 800a326:	f380 8811 	msr	BASEPRI, r0
 800a32a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a32e:	6819      	ldr	r1, [r3, #0]
 800a330:	6808      	ldr	r0, [r1, #0]
 800a332:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a336:	f380 8809 	msr	PSP, r0
 800a33a:	f3bf 8f6f 	isb	sy
 800a33e:	4770      	bx	lr

0800a340 <pxCurrentTCBConst>:
 800a340:	20000de0 	.word	0x20000de0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a344:	bf00      	nop
 800a346:	bf00      	nop

0800a348 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a348:	b580      	push	{r7, lr}
 800a34a:	b082      	sub	sp, #8
 800a34c:	af00      	add	r7, sp, #0
	__asm volatile
 800a34e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a352:	f383 8811 	msr	BASEPRI, r3
 800a356:	f3bf 8f6f 	isb	sy
 800a35a:	f3bf 8f4f 	dsb	sy
 800a35e:	607b      	str	r3, [r7, #4]
}
 800a360:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a362:	f7fe ff0f 	bl	8009184 <xTaskIncrementTick>
 800a366:	4603      	mov	r3, r0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d003      	beq.n	800a374 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a36c:	4b06      	ldr	r3, [pc, #24]	@ (800a388 <xPortSysTickHandler+0x40>)
 800a36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	2300      	movs	r3, #0
 800a376:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a378:	683b      	ldr	r3, [r7, #0]
 800a37a:	f383 8811 	msr	BASEPRI, r3
}
 800a37e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a380:	bf00      	nop
 800a382:	3708      	adds	r7, #8
 800a384:	46bd      	mov	sp, r7
 800a386:	bd80      	pop	{r7, pc}
 800a388:	e000ed04 	.word	0xe000ed04

0800a38c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a38c:	b480      	push	{r7}
 800a38e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a390:	4b0a      	ldr	r3, [pc, #40]	@ (800a3bc <vPortSetupTimerInterrupt+0x30>)
 800a392:	2200      	movs	r2, #0
 800a394:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a396:	4b0a      	ldr	r3, [pc, #40]	@ (800a3c0 <vPortSetupTimerInterrupt+0x34>)
 800a398:	2200      	movs	r2, #0
 800a39a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a39c:	4b09      	ldr	r3, [pc, #36]	@ (800a3c4 <vPortSetupTimerInterrupt+0x38>)
 800a39e:	681b      	ldr	r3, [r3, #0]
 800a3a0:	4a09      	ldr	r2, [pc, #36]	@ (800a3c8 <vPortSetupTimerInterrupt+0x3c>)
 800a3a2:	fba2 2303 	umull	r2, r3, r2, r3
 800a3a6:	099b      	lsrs	r3, r3, #6
 800a3a8:	4a08      	ldr	r2, [pc, #32]	@ (800a3cc <vPortSetupTimerInterrupt+0x40>)
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a3ae:	4b03      	ldr	r3, [pc, #12]	@ (800a3bc <vPortSetupTimerInterrupt+0x30>)
 800a3b0:	2207      	movs	r2, #7
 800a3b2:	601a      	str	r2, [r3, #0]
}
 800a3b4:	bf00      	nop
 800a3b6:	46bd      	mov	sp, r7
 800a3b8:	bc80      	pop	{r7}
 800a3ba:	4770      	bx	lr
 800a3bc:	e000e010 	.word	0xe000e010
 800a3c0:	e000e018 	.word	0xe000e018
 800a3c4:	2000000c 	.word	0x2000000c
 800a3c8:	10624dd3 	.word	0x10624dd3
 800a3cc:	e000e014 	.word	0xe000e014

0800a3d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b085      	sub	sp, #20
 800a3d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a3d6:	f3ef 8305 	mrs	r3, IPSR
 800a3da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a3dc:	68fb      	ldr	r3, [r7, #12]
 800a3de:	2b0f      	cmp	r3, #15
 800a3e0:	d915      	bls.n	800a40e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a3e2:	4a17      	ldr	r2, [pc, #92]	@ (800a440 <vPortValidateInterruptPriority+0x70>)
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	4413      	add	r3, r2
 800a3e8:	781b      	ldrb	r3, [r3, #0]
 800a3ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a3ec:	4b15      	ldr	r3, [pc, #84]	@ (800a444 <vPortValidateInterruptPriority+0x74>)
 800a3ee:	781b      	ldrb	r3, [r3, #0]
 800a3f0:	7afa      	ldrb	r2, [r7, #11]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d20b      	bcs.n	800a40e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a3f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3fa:	f383 8811 	msr	BASEPRI, r3
 800a3fe:	f3bf 8f6f 	isb	sy
 800a402:	f3bf 8f4f 	dsb	sy
 800a406:	607b      	str	r3, [r7, #4]
}
 800a408:	bf00      	nop
 800a40a:	bf00      	nop
 800a40c:	e7fd      	b.n	800a40a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a40e:	4b0e      	ldr	r3, [pc, #56]	@ (800a448 <vPortValidateInterruptPriority+0x78>)
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a416:	4b0d      	ldr	r3, [pc, #52]	@ (800a44c <vPortValidateInterruptPriority+0x7c>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	429a      	cmp	r2, r3
 800a41c:	d90b      	bls.n	800a436 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a41e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a422:	f383 8811 	msr	BASEPRI, r3
 800a426:	f3bf 8f6f 	isb	sy
 800a42a:	f3bf 8f4f 	dsb	sy
 800a42e:	603b      	str	r3, [r7, #0]
}
 800a430:	bf00      	nop
 800a432:	bf00      	nop
 800a434:	e7fd      	b.n	800a432 <vPortValidateInterruptPriority+0x62>
	}
 800a436:	bf00      	nop
 800a438:	3714      	adds	r7, #20
 800a43a:	46bd      	mov	sp, r7
 800a43c:	bc80      	pop	{r7}
 800a43e:	4770      	bx	lr
 800a440:	e000e3f0 	.word	0xe000e3f0
 800a444:	2000140c 	.word	0x2000140c
 800a448:	e000ed0c 	.word	0xe000ed0c
 800a44c:	20001410 	.word	0x20001410

0800a450 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a450:	b580      	push	{r7, lr}
 800a452:	b08a      	sub	sp, #40	@ 0x28
 800a454:	af00      	add	r7, sp, #0
 800a456:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a458:	2300      	movs	r3, #0
 800a45a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a45c:	f7fe fdd8 	bl	8009010 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a460:	4b5c      	ldr	r3, [pc, #368]	@ (800a5d4 <pvPortMalloc+0x184>)
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d101      	bne.n	800a46c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a468:	f000 f924 	bl	800a6b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a46c:	4b5a      	ldr	r3, [pc, #360]	@ (800a5d8 <pvPortMalloc+0x188>)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	4013      	ands	r3, r2
 800a474:	2b00      	cmp	r3, #0
 800a476:	f040 8095 	bne.w	800a5a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d01e      	beq.n	800a4be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a480:	2208      	movs	r2, #8
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	4413      	add	r3, r2
 800a486:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	f003 0307 	and.w	r3, r3, #7
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d015      	beq.n	800a4be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	f023 0307 	bic.w	r3, r3, #7
 800a498:	3308      	adds	r3, #8
 800a49a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	f003 0307 	and.w	r3, r3, #7
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d00b      	beq.n	800a4be <pvPortMalloc+0x6e>
	__asm volatile
 800a4a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4aa:	f383 8811 	msr	BASEPRI, r3
 800a4ae:	f3bf 8f6f 	isb	sy
 800a4b2:	f3bf 8f4f 	dsb	sy
 800a4b6:	617b      	str	r3, [r7, #20]
}
 800a4b8:	bf00      	nop
 800a4ba:	bf00      	nop
 800a4bc:	e7fd      	b.n	800a4ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d06f      	beq.n	800a5a4 <pvPortMalloc+0x154>
 800a4c4:	4b45      	ldr	r3, [pc, #276]	@ (800a5dc <pvPortMalloc+0x18c>)
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	687a      	ldr	r2, [r7, #4]
 800a4ca:	429a      	cmp	r2, r3
 800a4cc:	d86a      	bhi.n	800a5a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a4ce:	4b44      	ldr	r3, [pc, #272]	@ (800a5e0 <pvPortMalloc+0x190>)
 800a4d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a4d2:	4b43      	ldr	r3, [pc, #268]	@ (800a5e0 <pvPortMalloc+0x190>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4d8:	e004      	b.n	800a4e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a4da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	685b      	ldr	r3, [r3, #4]
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	429a      	cmp	r2, r3
 800a4ec:	d903      	bls.n	800a4f6 <pvPortMalloc+0xa6>
 800a4ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d1f1      	bne.n	800a4da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a4f6:	4b37      	ldr	r3, [pc, #220]	@ (800a5d4 <pvPortMalloc+0x184>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4fc:	429a      	cmp	r2, r3
 800a4fe:	d051      	beq.n	800a5a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a500:	6a3b      	ldr	r3, [r7, #32]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	2208      	movs	r2, #8
 800a506:	4413      	add	r3, r2
 800a508:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a50a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	6a3b      	ldr	r3, [r7, #32]
 800a510:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a514:	685a      	ldr	r2, [r3, #4]
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	1ad2      	subs	r2, r2, r3
 800a51a:	2308      	movs	r3, #8
 800a51c:	005b      	lsls	r3, r3, #1
 800a51e:	429a      	cmp	r2, r3
 800a520:	d920      	bls.n	800a564 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a522:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	4413      	add	r3, r2
 800a528:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a52a:	69bb      	ldr	r3, [r7, #24]
 800a52c:	f003 0307 	and.w	r3, r3, #7
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00b      	beq.n	800a54c <pvPortMalloc+0xfc>
	__asm volatile
 800a534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a538:	f383 8811 	msr	BASEPRI, r3
 800a53c:	f3bf 8f6f 	isb	sy
 800a540:	f3bf 8f4f 	dsb	sy
 800a544:	613b      	str	r3, [r7, #16]
}
 800a546:	bf00      	nop
 800a548:	bf00      	nop
 800a54a:	e7fd      	b.n	800a548 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a54c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54e:	685a      	ldr	r2, [r3, #4]
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	1ad2      	subs	r2, r2, r3
 800a554:	69bb      	ldr	r3, [r7, #24]
 800a556:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a55e:	69b8      	ldr	r0, [r7, #24]
 800a560:	f000 f90a 	bl	800a778 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a564:	4b1d      	ldr	r3, [pc, #116]	@ (800a5dc <pvPortMalloc+0x18c>)
 800a566:	681a      	ldr	r2, [r3, #0]
 800a568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a56a:	685b      	ldr	r3, [r3, #4]
 800a56c:	1ad3      	subs	r3, r2, r3
 800a56e:	4a1b      	ldr	r2, [pc, #108]	@ (800a5dc <pvPortMalloc+0x18c>)
 800a570:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a572:	4b1a      	ldr	r3, [pc, #104]	@ (800a5dc <pvPortMalloc+0x18c>)
 800a574:	681a      	ldr	r2, [r3, #0]
 800a576:	4b1b      	ldr	r3, [pc, #108]	@ (800a5e4 <pvPortMalloc+0x194>)
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	429a      	cmp	r2, r3
 800a57c:	d203      	bcs.n	800a586 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a57e:	4b17      	ldr	r3, [pc, #92]	@ (800a5dc <pvPortMalloc+0x18c>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	4a18      	ldr	r2, [pc, #96]	@ (800a5e4 <pvPortMalloc+0x194>)
 800a584:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a588:	685a      	ldr	r2, [r3, #4]
 800a58a:	4b13      	ldr	r3, [pc, #76]	@ (800a5d8 <pvPortMalloc+0x188>)
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	431a      	orrs	r2, r3
 800a590:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a592:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800a594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a596:	2200      	movs	r2, #0
 800a598:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800a59a:	4b13      	ldr	r3, [pc, #76]	@ (800a5e8 <pvPortMalloc+0x198>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	3301      	adds	r3, #1
 800a5a0:	4a11      	ldr	r2, [pc, #68]	@ (800a5e8 <pvPortMalloc+0x198>)
 800a5a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a5a4:	f7fe fd42 	bl	800902c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a5a8:	69fb      	ldr	r3, [r7, #28]
 800a5aa:	f003 0307 	and.w	r3, r3, #7
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d00b      	beq.n	800a5ca <pvPortMalloc+0x17a>
	__asm volatile
 800a5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5b6:	f383 8811 	msr	BASEPRI, r3
 800a5ba:	f3bf 8f6f 	isb	sy
 800a5be:	f3bf 8f4f 	dsb	sy
 800a5c2:	60fb      	str	r3, [r7, #12]
}
 800a5c4:	bf00      	nop
 800a5c6:	bf00      	nop
 800a5c8:	e7fd      	b.n	800a5c6 <pvPortMalloc+0x176>
	return pvReturn;
 800a5ca:	69fb      	ldr	r3, [r7, #28]
}
 800a5cc:	4618      	mov	r0, r3
 800a5ce:	3728      	adds	r7, #40	@ 0x28
 800a5d0:	46bd      	mov	sp, r7
 800a5d2:	bd80      	pop	{r7, pc}
 800a5d4:	20002b98 	.word	0x20002b98
 800a5d8:	20002bac 	.word	0x20002bac
 800a5dc:	20002b9c 	.word	0x20002b9c
 800a5e0:	20002b90 	.word	0x20002b90
 800a5e4:	20002ba0 	.word	0x20002ba0
 800a5e8:	20002ba4 	.word	0x20002ba4

0800a5ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a5ec:	b580      	push	{r7, lr}
 800a5ee:	b086      	sub	sp, #24
 800a5f0:	af00      	add	r7, sp, #0
 800a5f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d04f      	beq.n	800a69e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800a5fe:	2308      	movs	r3, #8
 800a600:	425b      	negs	r3, r3
 800a602:	697a      	ldr	r2, [r7, #20]
 800a604:	4413      	add	r3, r2
 800a606:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800a60c:	693b      	ldr	r3, [r7, #16]
 800a60e:	685a      	ldr	r2, [r3, #4]
 800a610:	4b25      	ldr	r3, [pc, #148]	@ (800a6a8 <vPortFree+0xbc>)
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	4013      	ands	r3, r2
 800a616:	2b00      	cmp	r3, #0
 800a618:	d10b      	bne.n	800a632 <vPortFree+0x46>
	__asm volatile
 800a61a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a61e:	f383 8811 	msr	BASEPRI, r3
 800a622:	f3bf 8f6f 	isb	sy
 800a626:	f3bf 8f4f 	dsb	sy
 800a62a:	60fb      	str	r3, [r7, #12]
}
 800a62c:	bf00      	nop
 800a62e:	bf00      	nop
 800a630:	e7fd      	b.n	800a62e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a632:	693b      	ldr	r3, [r7, #16]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d00b      	beq.n	800a652 <vPortFree+0x66>
	__asm volatile
 800a63a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a63e:	f383 8811 	msr	BASEPRI, r3
 800a642:	f3bf 8f6f 	isb	sy
 800a646:	f3bf 8f4f 	dsb	sy
 800a64a:	60bb      	str	r3, [r7, #8]
}
 800a64c:	bf00      	nop
 800a64e:	bf00      	nop
 800a650:	e7fd      	b.n	800a64e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800a652:	693b      	ldr	r3, [r7, #16]
 800a654:	685a      	ldr	r2, [r3, #4]
 800a656:	4b14      	ldr	r3, [pc, #80]	@ (800a6a8 <vPortFree+0xbc>)
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	4013      	ands	r3, r2
 800a65c:	2b00      	cmp	r3, #0
 800a65e:	d01e      	beq.n	800a69e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d11a      	bne.n	800a69e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800a668:	693b      	ldr	r3, [r7, #16]
 800a66a:	685a      	ldr	r2, [r3, #4]
 800a66c:	4b0e      	ldr	r3, [pc, #56]	@ (800a6a8 <vPortFree+0xbc>)
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	43db      	mvns	r3, r3
 800a672:	401a      	ands	r2, r3
 800a674:	693b      	ldr	r3, [r7, #16]
 800a676:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800a678:	f7fe fcca 	bl	8009010 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800a67c:	693b      	ldr	r3, [r7, #16]
 800a67e:	685a      	ldr	r2, [r3, #4]
 800a680:	4b0a      	ldr	r3, [pc, #40]	@ (800a6ac <vPortFree+0xc0>)
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4413      	add	r3, r2
 800a686:	4a09      	ldr	r2, [pc, #36]	@ (800a6ac <vPortFree+0xc0>)
 800a688:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a68a:	6938      	ldr	r0, [r7, #16]
 800a68c:	f000 f874 	bl	800a778 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800a690:	4b07      	ldr	r3, [pc, #28]	@ (800a6b0 <vPortFree+0xc4>)
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	3301      	adds	r3, #1
 800a696:	4a06      	ldr	r2, [pc, #24]	@ (800a6b0 <vPortFree+0xc4>)
 800a698:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800a69a:	f7fe fcc7 	bl	800902c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800a69e:	bf00      	nop
 800a6a0:	3718      	adds	r7, #24
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	bd80      	pop	{r7, pc}
 800a6a6:	bf00      	nop
 800a6a8:	20002bac 	.word	0x20002bac
 800a6ac:	20002b9c 	.word	0x20002b9c
 800a6b0:	20002ba8 	.word	0x20002ba8

0800a6b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800a6b4:	b480      	push	{r7}
 800a6b6:	b085      	sub	sp, #20
 800a6b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a6ba:	f241 737c 	movw	r3, #6012	@ 0x177c
 800a6be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800a6c0:	4b27      	ldr	r3, [pc, #156]	@ (800a760 <prvHeapInit+0xac>)
 800a6c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f003 0307 	and.w	r3, r3, #7
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d00c      	beq.n	800a6e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	3307      	adds	r3, #7
 800a6d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	f023 0307 	bic.w	r3, r3, #7
 800a6da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800a6dc:	68ba      	ldr	r2, [r7, #8]
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	1ad3      	subs	r3, r2, r3
 800a6e2:	4a1f      	ldr	r2, [pc, #124]	@ (800a760 <prvHeapInit+0xac>)
 800a6e4:	4413      	add	r3, r2
 800a6e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a6ec:	4a1d      	ldr	r2, [pc, #116]	@ (800a764 <prvHeapInit+0xb0>)
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800a6f2:	4b1c      	ldr	r3, [pc, #112]	@ (800a764 <prvHeapInit+0xb0>)
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	68ba      	ldr	r2, [r7, #8]
 800a6fc:	4413      	add	r3, r2
 800a6fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800a700:	2208      	movs	r2, #8
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	1a9b      	subs	r3, r3, r2
 800a706:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800a708:	68fb      	ldr	r3, [r7, #12]
 800a70a:	f023 0307 	bic.w	r3, r3, #7
 800a70e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	4a15      	ldr	r2, [pc, #84]	@ (800a768 <prvHeapInit+0xb4>)
 800a714:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800a716:	4b14      	ldr	r3, [pc, #80]	@ (800a768 <prvHeapInit+0xb4>)
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2200      	movs	r2, #0
 800a71c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800a71e:	4b12      	ldr	r3, [pc, #72]	@ (800a768 <prvHeapInit+0xb4>)
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	2200      	movs	r2, #0
 800a724:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800a72a:	683b      	ldr	r3, [r7, #0]
 800a72c:	68fa      	ldr	r2, [r7, #12]
 800a72e:	1ad2      	subs	r2, r2, r3
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a734:	4b0c      	ldr	r3, [pc, #48]	@ (800a768 <prvHeapInit+0xb4>)
 800a736:	681a      	ldr	r2, [r3, #0]
 800a738:	683b      	ldr	r3, [r7, #0]
 800a73a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a73c:	683b      	ldr	r3, [r7, #0]
 800a73e:	685b      	ldr	r3, [r3, #4]
 800a740:	4a0a      	ldr	r2, [pc, #40]	@ (800a76c <prvHeapInit+0xb8>)
 800a742:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	685b      	ldr	r3, [r3, #4]
 800a748:	4a09      	ldr	r2, [pc, #36]	@ (800a770 <prvHeapInit+0xbc>)
 800a74a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800a74c:	4b09      	ldr	r3, [pc, #36]	@ (800a774 <prvHeapInit+0xc0>)
 800a74e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800a752:	601a      	str	r2, [r3, #0]
}
 800a754:	bf00      	nop
 800a756:	3714      	adds	r7, #20
 800a758:	46bd      	mov	sp, r7
 800a75a:	bc80      	pop	{r7}
 800a75c:	4770      	bx	lr
 800a75e:	bf00      	nop
 800a760:	20001414 	.word	0x20001414
 800a764:	20002b90 	.word	0x20002b90
 800a768:	20002b98 	.word	0x20002b98
 800a76c:	20002ba0 	.word	0x20002ba0
 800a770:	20002b9c 	.word	0x20002b9c
 800a774:	20002bac 	.word	0x20002bac

0800a778 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800a778:	b480      	push	{r7}
 800a77a:	b085      	sub	sp, #20
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a780:	4b27      	ldr	r3, [pc, #156]	@ (800a820 <prvInsertBlockIntoFreeList+0xa8>)
 800a782:	60fb      	str	r3, [r7, #12]
 800a784:	e002      	b.n	800a78c <prvInsertBlockIntoFreeList+0x14>
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	60fb      	str	r3, [r7, #12]
 800a78c:	68fb      	ldr	r3, [r7, #12]
 800a78e:	681b      	ldr	r3, [r3, #0]
 800a790:	687a      	ldr	r2, [r7, #4]
 800a792:	429a      	cmp	r2, r3
 800a794:	d8f7      	bhi.n	800a786 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a79a:	68fb      	ldr	r3, [r7, #12]
 800a79c:	685b      	ldr	r3, [r3, #4]
 800a79e:	68ba      	ldr	r2, [r7, #8]
 800a7a0:	4413      	add	r3, r2
 800a7a2:	687a      	ldr	r2, [r7, #4]
 800a7a4:	429a      	cmp	r2, r3
 800a7a6:	d108      	bne.n	800a7ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a7a8:	68fb      	ldr	r3, [r7, #12]
 800a7aa:	685a      	ldr	r2, [r3, #4]
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	685b      	ldr	r3, [r3, #4]
 800a7b0:	441a      	add	r2, r3
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	685b      	ldr	r3, [r3, #4]
 800a7c2:	68ba      	ldr	r2, [r7, #8]
 800a7c4:	441a      	add	r2, r3
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	429a      	cmp	r2, r3
 800a7cc:	d118      	bne.n	800a800 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800a7ce:	68fb      	ldr	r3, [r7, #12]
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	4b14      	ldr	r3, [pc, #80]	@ (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	429a      	cmp	r2, r3
 800a7d8:	d00d      	beq.n	800a7f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a7da:	687b      	ldr	r3, [r7, #4]
 800a7dc:	685a      	ldr	r2, [r3, #4]
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	685b      	ldr	r3, [r3, #4]
 800a7e4:	441a      	add	r2, r3
 800a7e6:	687b      	ldr	r3, [r7, #4]
 800a7e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	681a      	ldr	r2, [r3, #0]
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	601a      	str	r2, [r3, #0]
 800a7f4:	e008      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a7f6:	4b0b      	ldr	r3, [pc, #44]	@ (800a824 <prvInsertBlockIntoFreeList+0xac>)
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	e003      	b.n	800a808 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681a      	ldr	r2, [r3, #0]
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800a808:	68fa      	ldr	r2, [r7, #12]
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d002      	beq.n	800a816 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	687a      	ldr	r2, [r7, #4]
 800a814:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a816:	bf00      	nop
 800a818:	3714      	adds	r7, #20
 800a81a:	46bd      	mov	sp, r7
 800a81c:	bc80      	pop	{r7}
 800a81e:	4770      	bx	lr
 800a820:	20002b90 	.word	0x20002b90
 800a824:	20002b98 	.word	0x20002b98

0800a828 <memset>:
 800a828:	4603      	mov	r3, r0
 800a82a:	4402      	add	r2, r0
 800a82c:	4293      	cmp	r3, r2
 800a82e:	d100      	bne.n	800a832 <memset+0xa>
 800a830:	4770      	bx	lr
 800a832:	f803 1b01 	strb.w	r1, [r3], #1
 800a836:	e7f9      	b.n	800a82c <memset+0x4>

0800a838 <_reclaim_reent>:
 800a838:	4b2d      	ldr	r3, [pc, #180]	@ (800a8f0 <_reclaim_reent+0xb8>)
 800a83a:	b570      	push	{r4, r5, r6, lr}
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	4604      	mov	r4, r0
 800a840:	4283      	cmp	r3, r0
 800a842:	d053      	beq.n	800a8ec <_reclaim_reent+0xb4>
 800a844:	69c3      	ldr	r3, [r0, #28]
 800a846:	b31b      	cbz	r3, 800a890 <_reclaim_reent+0x58>
 800a848:	68db      	ldr	r3, [r3, #12]
 800a84a:	b163      	cbz	r3, 800a866 <_reclaim_reent+0x2e>
 800a84c:	2500      	movs	r5, #0
 800a84e:	69e3      	ldr	r3, [r4, #28]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	5959      	ldr	r1, [r3, r5]
 800a854:	b9b1      	cbnz	r1, 800a884 <_reclaim_reent+0x4c>
 800a856:	3504      	adds	r5, #4
 800a858:	2d80      	cmp	r5, #128	@ 0x80
 800a85a:	d1f8      	bne.n	800a84e <_reclaim_reent+0x16>
 800a85c:	69e3      	ldr	r3, [r4, #28]
 800a85e:	4620      	mov	r0, r4
 800a860:	68d9      	ldr	r1, [r3, #12]
 800a862:	f000 f87b 	bl	800a95c <_free_r>
 800a866:	69e3      	ldr	r3, [r4, #28]
 800a868:	6819      	ldr	r1, [r3, #0]
 800a86a:	b111      	cbz	r1, 800a872 <_reclaim_reent+0x3a>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f000 f875 	bl	800a95c <_free_r>
 800a872:	69e3      	ldr	r3, [r4, #28]
 800a874:	689d      	ldr	r5, [r3, #8]
 800a876:	b15d      	cbz	r5, 800a890 <_reclaim_reent+0x58>
 800a878:	4629      	mov	r1, r5
 800a87a:	4620      	mov	r0, r4
 800a87c:	682d      	ldr	r5, [r5, #0]
 800a87e:	f000 f86d 	bl	800a95c <_free_r>
 800a882:	e7f8      	b.n	800a876 <_reclaim_reent+0x3e>
 800a884:	680e      	ldr	r6, [r1, #0]
 800a886:	4620      	mov	r0, r4
 800a888:	f000 f868 	bl	800a95c <_free_r>
 800a88c:	4631      	mov	r1, r6
 800a88e:	e7e1      	b.n	800a854 <_reclaim_reent+0x1c>
 800a890:	6961      	ldr	r1, [r4, #20]
 800a892:	b111      	cbz	r1, 800a89a <_reclaim_reent+0x62>
 800a894:	4620      	mov	r0, r4
 800a896:	f000 f861 	bl	800a95c <_free_r>
 800a89a:	69e1      	ldr	r1, [r4, #28]
 800a89c:	b111      	cbz	r1, 800a8a4 <_reclaim_reent+0x6c>
 800a89e:	4620      	mov	r0, r4
 800a8a0:	f000 f85c 	bl	800a95c <_free_r>
 800a8a4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a8a6:	b111      	cbz	r1, 800a8ae <_reclaim_reent+0x76>
 800a8a8:	4620      	mov	r0, r4
 800a8aa:	f000 f857 	bl	800a95c <_free_r>
 800a8ae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a8b0:	b111      	cbz	r1, 800a8b8 <_reclaim_reent+0x80>
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f000 f852 	bl	800a95c <_free_r>
 800a8b8:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800a8ba:	b111      	cbz	r1, 800a8c2 <_reclaim_reent+0x8a>
 800a8bc:	4620      	mov	r0, r4
 800a8be:	f000 f84d 	bl	800a95c <_free_r>
 800a8c2:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800a8c4:	b111      	cbz	r1, 800a8cc <_reclaim_reent+0x94>
 800a8c6:	4620      	mov	r0, r4
 800a8c8:	f000 f848 	bl	800a95c <_free_r>
 800a8cc:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800a8ce:	b111      	cbz	r1, 800a8d6 <_reclaim_reent+0x9e>
 800a8d0:	4620      	mov	r0, r4
 800a8d2:	f000 f843 	bl	800a95c <_free_r>
 800a8d6:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a8d8:	b111      	cbz	r1, 800a8e0 <_reclaim_reent+0xa8>
 800a8da:	4620      	mov	r0, r4
 800a8dc:	f000 f83e 	bl	800a95c <_free_r>
 800a8e0:	6a23      	ldr	r3, [r4, #32]
 800a8e2:	b11b      	cbz	r3, 800a8ec <_reclaim_reent+0xb4>
 800a8e4:	4620      	mov	r0, r4
 800a8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a8ea:	4718      	bx	r3
 800a8ec:	bd70      	pop	{r4, r5, r6, pc}
 800a8ee:	bf00      	nop
 800a8f0:	20000034 	.word	0x20000034

0800a8f4 <__libc_init_array>:
 800a8f4:	b570      	push	{r4, r5, r6, lr}
 800a8f6:	2600      	movs	r6, #0
 800a8f8:	4d0c      	ldr	r5, [pc, #48]	@ (800a92c <__libc_init_array+0x38>)
 800a8fa:	4c0d      	ldr	r4, [pc, #52]	@ (800a930 <__libc_init_array+0x3c>)
 800a8fc:	1b64      	subs	r4, r4, r5
 800a8fe:	10a4      	asrs	r4, r4, #2
 800a900:	42a6      	cmp	r6, r4
 800a902:	d109      	bne.n	800a918 <__libc_init_array+0x24>
 800a904:	f000 f87e 	bl	800aa04 <_init>
 800a908:	2600      	movs	r6, #0
 800a90a:	4d0a      	ldr	r5, [pc, #40]	@ (800a934 <__libc_init_array+0x40>)
 800a90c:	4c0a      	ldr	r4, [pc, #40]	@ (800a938 <__libc_init_array+0x44>)
 800a90e:	1b64      	subs	r4, r4, r5
 800a910:	10a4      	asrs	r4, r4, #2
 800a912:	42a6      	cmp	r6, r4
 800a914:	d105      	bne.n	800a922 <__libc_init_array+0x2e>
 800a916:	bd70      	pop	{r4, r5, r6, pc}
 800a918:	f855 3b04 	ldr.w	r3, [r5], #4
 800a91c:	4798      	blx	r3
 800a91e:	3601      	adds	r6, #1
 800a920:	e7ee      	b.n	800a900 <__libc_init_array+0xc>
 800a922:	f855 3b04 	ldr.w	r3, [r5], #4
 800a926:	4798      	blx	r3
 800a928:	3601      	adds	r6, #1
 800a92a:	e7f2      	b.n	800a912 <__libc_init_array+0x1e>
 800a92c:	0800c764 	.word	0x0800c764
 800a930:	0800c764 	.word	0x0800c764
 800a934:	0800c764 	.word	0x0800c764
 800a938:	0800c768 	.word	0x0800c768

0800a93c <__retarget_lock_acquire_recursive>:
 800a93c:	4770      	bx	lr

0800a93e <__retarget_lock_release_recursive>:
 800a93e:	4770      	bx	lr

0800a940 <memcpy>:
 800a940:	440a      	add	r2, r1
 800a942:	4291      	cmp	r1, r2
 800a944:	f100 33ff 	add.w	r3, r0, #4294967295
 800a948:	d100      	bne.n	800a94c <memcpy+0xc>
 800a94a:	4770      	bx	lr
 800a94c:	b510      	push	{r4, lr}
 800a94e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a952:	4291      	cmp	r1, r2
 800a954:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a958:	d1f9      	bne.n	800a94e <memcpy+0xe>
 800a95a:	bd10      	pop	{r4, pc}

0800a95c <_free_r>:
 800a95c:	b538      	push	{r3, r4, r5, lr}
 800a95e:	4605      	mov	r5, r0
 800a960:	2900      	cmp	r1, #0
 800a962:	d040      	beq.n	800a9e6 <_free_r+0x8a>
 800a964:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a968:	1f0c      	subs	r4, r1, #4
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	bfb8      	it	lt
 800a96e:	18e4      	addlt	r4, r4, r3
 800a970:	f000 f83c 	bl	800a9ec <__malloc_lock>
 800a974:	4a1c      	ldr	r2, [pc, #112]	@ (800a9e8 <_free_r+0x8c>)
 800a976:	6813      	ldr	r3, [r2, #0]
 800a978:	b933      	cbnz	r3, 800a988 <_free_r+0x2c>
 800a97a:	6063      	str	r3, [r4, #4]
 800a97c:	6014      	str	r4, [r2, #0]
 800a97e:	4628      	mov	r0, r5
 800a980:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a984:	f000 b838 	b.w	800a9f8 <__malloc_unlock>
 800a988:	42a3      	cmp	r3, r4
 800a98a:	d908      	bls.n	800a99e <_free_r+0x42>
 800a98c:	6820      	ldr	r0, [r4, #0]
 800a98e:	1821      	adds	r1, r4, r0
 800a990:	428b      	cmp	r3, r1
 800a992:	bf01      	itttt	eq
 800a994:	6819      	ldreq	r1, [r3, #0]
 800a996:	685b      	ldreq	r3, [r3, #4]
 800a998:	1809      	addeq	r1, r1, r0
 800a99a:	6021      	streq	r1, [r4, #0]
 800a99c:	e7ed      	b.n	800a97a <_free_r+0x1e>
 800a99e:	461a      	mov	r2, r3
 800a9a0:	685b      	ldr	r3, [r3, #4]
 800a9a2:	b10b      	cbz	r3, 800a9a8 <_free_r+0x4c>
 800a9a4:	42a3      	cmp	r3, r4
 800a9a6:	d9fa      	bls.n	800a99e <_free_r+0x42>
 800a9a8:	6811      	ldr	r1, [r2, #0]
 800a9aa:	1850      	adds	r0, r2, r1
 800a9ac:	42a0      	cmp	r0, r4
 800a9ae:	d10b      	bne.n	800a9c8 <_free_r+0x6c>
 800a9b0:	6820      	ldr	r0, [r4, #0]
 800a9b2:	4401      	add	r1, r0
 800a9b4:	1850      	adds	r0, r2, r1
 800a9b6:	4283      	cmp	r3, r0
 800a9b8:	6011      	str	r1, [r2, #0]
 800a9ba:	d1e0      	bne.n	800a97e <_free_r+0x22>
 800a9bc:	6818      	ldr	r0, [r3, #0]
 800a9be:	685b      	ldr	r3, [r3, #4]
 800a9c0:	4408      	add	r0, r1
 800a9c2:	6010      	str	r0, [r2, #0]
 800a9c4:	6053      	str	r3, [r2, #4]
 800a9c6:	e7da      	b.n	800a97e <_free_r+0x22>
 800a9c8:	d902      	bls.n	800a9d0 <_free_r+0x74>
 800a9ca:	230c      	movs	r3, #12
 800a9cc:	602b      	str	r3, [r5, #0]
 800a9ce:	e7d6      	b.n	800a97e <_free_r+0x22>
 800a9d0:	6820      	ldr	r0, [r4, #0]
 800a9d2:	1821      	adds	r1, r4, r0
 800a9d4:	428b      	cmp	r3, r1
 800a9d6:	bf01      	itttt	eq
 800a9d8:	6819      	ldreq	r1, [r3, #0]
 800a9da:	685b      	ldreq	r3, [r3, #4]
 800a9dc:	1809      	addeq	r1, r1, r0
 800a9de:	6021      	streq	r1, [r4, #0]
 800a9e0:	6063      	str	r3, [r4, #4]
 800a9e2:	6054      	str	r4, [r2, #4]
 800a9e4:	e7cb      	b.n	800a97e <_free_r+0x22>
 800a9e6:	bd38      	pop	{r3, r4, r5, pc}
 800a9e8:	20002cec 	.word	0x20002cec

0800a9ec <__malloc_lock>:
 800a9ec:	4801      	ldr	r0, [pc, #4]	@ (800a9f4 <__malloc_lock+0x8>)
 800a9ee:	f7ff bfa5 	b.w	800a93c <__retarget_lock_acquire_recursive>
 800a9f2:	bf00      	nop
 800a9f4:	20002ce8 	.word	0x20002ce8

0800a9f8 <__malloc_unlock>:
 800a9f8:	4801      	ldr	r0, [pc, #4]	@ (800aa00 <__malloc_unlock+0x8>)
 800a9fa:	f7ff bfa0 	b.w	800a93e <__retarget_lock_release_recursive>
 800a9fe:	bf00      	nop
 800aa00:	20002ce8 	.word	0x20002ce8

0800aa04 <_init>:
 800aa04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa06:	bf00      	nop
 800aa08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa0a:	bc08      	pop	{r3}
 800aa0c:	469e      	mov	lr, r3
 800aa0e:	4770      	bx	lr

0800aa10 <_fini>:
 800aa10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa12:	bf00      	nop
 800aa14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aa16:	bc08      	pop	{r3}
 800aa18:	469e      	mov	lr, r3
 800aa1a:	4770      	bx	lr
